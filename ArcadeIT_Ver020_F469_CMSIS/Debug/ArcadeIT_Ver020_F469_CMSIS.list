
ArcadeIT_Ver020_F469_CMSIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bcc  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ef8  08001d8c  08001d8c  00011d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c84  08003c84  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08003c84  08003c84  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c84  08003c84  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c84  08003c84  00013c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c88  08003c88  00013c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08003c8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000064  08003cf0  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08003cf0  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009055  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015d3  00000000  00000000  000290e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000318  00000000  00000000  0002a6c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000002b8  00000000  00000000  0002a9d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002300b  00000000  00000000  0002ac90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000053ca  00000000  00000000  0004dc9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b940d  00000000  00000000  00053065  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010c472  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000092c  00000000  00000000  0010c4f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00000b3f  00000000  00000000  0010ce1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000064 	.word	0x20000064
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08001d74 	.word	0x08001d74

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000068 	.word	0x20000068
 80001fc:	08001d74 	.word	0x08001d74

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <main>:
// /////////////////////////////////////////////////////////////////////////////
// "M A I N"   E N T R Y   P O I N T
// /////////////////////////////////////////////////////////////////////////////

int main(void)
{
 80002a0:	b508      	push	{r3, lr}
  //263 7660 BWAH
  ArcadeIT_Test_Bench();
 80002a2:	f000 fbd7 	bl	8000a54 <ArcadeIT_Test_Bench>

  return 0;

} // End main.
 80002a6:	2000      	movs	r0, #0
 80002a8:	bd08      	pop	{r3, pc}

080002aa <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80002aa:	4770      	bx	lr

080002ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002ac:	e7fe      	b.n	80002ac <HardFault_Handler>

080002ae <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002ae:	e7fe      	b.n	80002ae <MemManage_Handler>

080002b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>

080002b2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002b2:	e7fe      	b.n	80002b2 <UsageFault_Handler>

080002b4 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002b4:	4770      	bx	lr

080002b6 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002b6:	4770      	bx	lr

080002b8 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002b8:	4770      	bx	lr
	...

080002bc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80002bc:	b508      	push	{r3, lr}
 80002be:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80002c0:	4a0b      	ldr	r2, [pc, #44]	; (80002f0 <_sbrk+0x34>)
 80002c2:	6812      	ldr	r2, [r2, #0]
 80002c4:	b142      	cbz	r2, 80002d8 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 80002c6:	4a0a      	ldr	r2, [pc, #40]	; (80002f0 <_sbrk+0x34>)
 80002c8:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80002ca:	4403      	add	r3, r0
 80002cc:	466a      	mov	r2, sp
 80002ce:	4293      	cmp	r3, r2
 80002d0:	d806      	bhi.n	80002e0 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 80002d2:	4a07      	ldr	r2, [pc, #28]	; (80002f0 <_sbrk+0x34>)
 80002d4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 80002d6:	bd08      	pop	{r3, pc}
		heap_end = &end;
 80002d8:	4a05      	ldr	r2, [pc, #20]	; (80002f0 <_sbrk+0x34>)
 80002da:	4906      	ldr	r1, [pc, #24]	; (80002f4 <_sbrk+0x38>)
 80002dc:	6011      	str	r1, [r2, #0]
 80002de:	e7f2      	b.n	80002c6 <_sbrk+0xa>
		errno = ENOMEM;
 80002e0:	f001 f918 	bl	8001514 <__errno>
 80002e4:	230c      	movs	r3, #12
 80002e6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80002e8:	f04f 30ff 	mov.w	r0, #4294967295
 80002ec:	e7f3      	b.n	80002d6 <_sbrk+0x1a>
 80002ee:	bf00      	nop
 80002f0:	20000080 	.word	0x20000080
 80002f4:	20000188 	.word	0x20000188

080002f8 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:   ldr   sp, =_estack     /* set stack pointer */
 80002f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000330 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80002fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80002fe:	e003      	b.n	8000308 <LoopCopyDataInit>

08000300 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000300:	4b0c      	ldr	r3, [pc, #48]	; (8000334 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000302:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000304:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000306:	3104      	adds	r1, #4

08000308 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000308:	480b      	ldr	r0, [pc, #44]	; (8000338 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800030a:	4b0c      	ldr	r3, [pc, #48]	; (800033c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800030c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800030e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000310:	d3f6      	bcc.n	8000300 <CopyDataInit>
  ldr  r2, =_sbss
 8000312:	4a0b      	ldr	r2, [pc, #44]	; (8000340 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000314:	e002      	b.n	800031c <LoopFillZerobss>

08000316 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000316:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000318:	f842 3b04 	str.w	r3, [r2], #4

0800031c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800031c:	4b09      	ldr	r3, [pc, #36]	; (8000344 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800031e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000320:	d3f9      	bcc.n	8000316 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  ArcadeIT_System_Init //SystemInit
 8000322:	f000 faad 	bl	8000880 <ArcadeIT_System_Init>
/* Call static constructors */
    bl __libc_init_array
 8000326:	f001 f8fb 	bl	8001520 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800032a:	f7ff ffb9 	bl	80002a0 <main>
  bx  lr    
 800032e:	4770      	bx	lr
Reset_Handler:   ldr   sp, =_estack     /* set stack pointer */
 8000330:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8000334:	08003c8c 	.word	0x08003c8c
  ldr  r0, =_sdata
 8000338:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800033c:	20000064 	.word	0x20000064
  ldr  r2, =_sbss
 8000340:	20000064 	.word	0x20000064
  ldr  r3, = _ebss
 8000344:	20000184 	.word	0x20000184

08000348 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000348:	e7fe      	b.n	8000348 <ADC_IRQHandler>
	...

0800034c <color_set>:

// /////////////////////////////////////////////////////////////////////////////
// Functions.
// /////////////////////////////////////////////////////////////////////////////
void color_set(uint8_t pColorForeground, uint8_t pColorBackground)
{
 800034c:	b500      	push	{lr}
 800034e:	b0c1      	sub	sp, #260	; 0x104
  char s[256];
  sprintf(s, ANSI_COLOR_256_FGBG, pColorForeground, pColorBackground);
 8000350:	460b      	mov	r3, r1
 8000352:	4602      	mov	r2, r0
 8000354:	4904      	ldr	r1, [pc, #16]	; (8000368 <color_set+0x1c>)
 8000356:	4668      	mov	r0, sp
 8000358:	f001 f906 	bl	8001568 <siprintf>
  ArcadeIT_Serial_Port_String_Send(s);
 800035c:	4668      	mov	r0, sp
 800035e:	f000 fe79 	bl	8001054 <ArcadeIT_Serial_Port_String_Send>

} // end color_set
 8000362:	b041      	add	sp, #260	; 0x104
 8000364:	f85d fb04 	ldr.w	pc, [sp], #4
 8000368:	08001dd0 	.word	0x08001dd0

0800036c <cursor_at>:

// -----------------------------------------------------------------------------
void cursor_at(uint8_t x, uint8_t y)
{
 800036c:	b500      	push	{lr}
 800036e:	b0c1      	sub	sp, #260	; 0x104
  char s[256];
  sprintf(s, CURSOR_SET, y, x);
 8000370:	4603      	mov	r3, r0
 8000372:	460a      	mov	r2, r1
 8000374:	4904      	ldr	r1, [pc, #16]	; (8000388 <cursor_at+0x1c>)
 8000376:	4668      	mov	r0, sp
 8000378:	f001 f8f6 	bl	8001568 <siprintf>
  ArcadeIT_Serial_Port_String_Send(s);
 800037c:	4668      	mov	r0, sp
 800037e:	f000 fe69 	bl	8001054 <ArcadeIT_Serial_Port_String_Send>

} // end cursor_at
 8000382:	b041      	add	sp, #260	; 0x104
 8000384:	f85d fb04 	ldr.w	pc, [sp], #4
 8000388:	08001de8 	.word	0x08001de8

0800038c <label_draw>:
// -----------------------------------------------------------------------------
void label_draw(
    label_t *pLabel,
    frame_t *pFrame
        )
{
 800038c:	b538      	push	{r3, r4, r5, lr}
 800038e:	4604      	mov	r4, r0
 8000390:	460d      	mov	r5, r1
  //  __0 label 1_________
  // |                    |
  cursor_at(pLabel->x, pLabel->y);
 8000392:	f990 0000 	ldrsb.w	r0, [r0]
 8000396:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800039a:	b2c9      	uxtb	r1, r1
 800039c:	b2c0      	uxtb	r0, r0
 800039e:	f7ff ffe5 	bl	800036c <cursor_at>

  if (pFrame != NULL)
 80003a2:	b315      	cbz	r5, 80003ea <label_draw+0x5e>
    color_set(pFrame->cf, pFrame->cb);
 80003a4:	7969      	ldrb	r1, [r5, #5]
 80003a6:	7928      	ldrb	r0, [r5, #4]
 80003a8:	f7ff ffd0 	bl	800034c <color_set>
  else
    color_set(pLabel->cf, pLabel->cb);

  ArcadeIT_Serial_Port_String_Send(FONT_GFX_ON);
 80003ac:	4811      	ldr	r0, [pc, #68]	; (80003f4 <label_draw+0x68>)
 80003ae:	f000 fe51 	bl	8001054 <ArcadeIT_Serial_Port_String_Send>
  ArcadeIT_Serial_Port_Char_Send(pLabel->skin[LABEL_LEFT]);
 80003b2:	68a3      	ldr	r3, [r4, #8]
 80003b4:	7858      	ldrb	r0, [r3, #1]
 80003b6:	f000 fe43 	bl	8001040 <ArcadeIT_Serial_Port_Char_Send>

  if (pFrame != NULL)
 80003ba:	b11d      	cbz	r5, 80003c4 <label_draw+0x38>
    color_set(pLabel->cf, pLabel->cb);
 80003bc:	78e1      	ldrb	r1, [r4, #3]
 80003be:	78a0      	ldrb	r0, [r4, #2]
 80003c0:	f7ff ffc4 	bl	800034c <color_set>

  ArcadeIT_Serial_Port_String_Send(FONT_GFX_OFF);
 80003c4:	480c      	ldr	r0, [pc, #48]	; (80003f8 <label_draw+0x6c>)
 80003c6:	f000 fe45 	bl	8001054 <ArcadeIT_Serial_Port_String_Send>
  ArcadeIT_Serial_Port_String_Send(pLabel->text);
 80003ca:	6860      	ldr	r0, [r4, #4]
 80003cc:	f000 fe42 	bl	8001054 <ArcadeIT_Serial_Port_String_Send>
  ArcadeIT_Serial_Port_String_Send(FONT_GFX_ON);
 80003d0:	4808      	ldr	r0, [pc, #32]	; (80003f4 <label_draw+0x68>)
 80003d2:	f000 fe3f 	bl	8001054 <ArcadeIT_Serial_Port_String_Send>

  if (pFrame != NULL)
 80003d6:	b11d      	cbz	r5, 80003e0 <label_draw+0x54>
    color_set(pFrame->cf, pFrame->cb);
 80003d8:	7969      	ldrb	r1, [r5, #5]
 80003da:	7928      	ldrb	r0, [r5, #4]
 80003dc:	f7ff ffb6 	bl	800034c <color_set>

  ArcadeIT_Serial_Port_Char_Send(pLabel->skin[LABEL_RIGHT]);
 80003e0:	68a3      	ldr	r3, [r4, #8]
 80003e2:	7898      	ldrb	r0, [r3, #2]
 80003e4:	f000 fe2c 	bl	8001040 <ArcadeIT_Serial_Port_Char_Send>

} // end label_draw
 80003e8:	bd38      	pop	{r3, r4, r5, pc}
    color_set(pLabel->cf, pLabel->cb);
 80003ea:	78e1      	ldrb	r1, [r4, #3]
 80003ec:	78a0      	ldrb	r0, [r4, #2]
 80003ee:	f7ff ffad 	bl	800034c <color_set>
 80003f2:	e7db      	b.n	80003ac <label_draw+0x20>
 80003f4:	08001df4 	.word	0x08001df4
 80003f8:	08001df8 	.word	0x08001df8

080003fc <frame_draw>:

// -----------------------------------------------------------------------------
void frame_draw(
        frame_t* pFrame
        )
{
 80003fc:	b570      	push	{r4, r5, r6, lr}
 80003fe:	4605      	mov	r5, r0
  color_set(pFrame->cf, pFrame->cb);
 8000400:	7941      	ldrb	r1, [r0, #5]
 8000402:	7900      	ldrb	r0, [r0, #4]
 8000404:	f7ff ffa2 	bl	800034c <color_set>
  cursor_at(pFrame->x1, pFrame->y1);
 8000408:	7869      	ldrb	r1, [r5, #1]
 800040a:	7828      	ldrb	r0, [r5, #0]
 800040c:	f7ff ffae 	bl	800036c <cursor_at>

  ArcadeIT_Serial_Port_String_Send(FONT_GFX_ON);
 8000410:	482a      	ldr	r0, [pc, #168]	; (80004bc <frame_draw+0xc0>)
 8000412:	f000 fe1f 	bl	8001054 <ArcadeIT_Serial_Port_String_Send>
  // ----

  //  ____________________
  // |                    |
  ArcadeIT_Serial_Port_Char_Send(pFrame->skin[FRAME_CORNER_UPPER_LEFT]);
 8000416:	696b      	ldr	r3, [r5, #20]
 8000418:	78d8      	ldrb	r0, [r3, #3]
 800041a:	f000 fe11 	bl	8001040 <ArcadeIT_Serial_Port_Char_Send>
  for (uint8_t x = pFrame->x1 + 1; x < pFrame->x2; x++)
 800041e:	782c      	ldrb	r4, [r5, #0]
 8000420:	3401      	adds	r4, #1
 8000422:	b2e4      	uxtb	r4, r4
 8000424:	e005      	b.n	8000432 <frame_draw+0x36>
  {
    ArcadeIT_Serial_Port_Char_Send(pFrame->skin[FRAME_EDGE_UPPER_HORIZONTAL]);
 8000426:	696b      	ldr	r3, [r5, #20]
 8000428:	79d8      	ldrb	r0, [r3, #7]
 800042a:	f000 fe09 	bl	8001040 <ArcadeIT_Serial_Port_Char_Send>
  for (uint8_t x = pFrame->x1 + 1; x < pFrame->x2; x++)
 800042e:	3401      	adds	r4, #1
 8000430:	b2e4      	uxtb	r4, r4
 8000432:	78ab      	ldrb	r3, [r5, #2]
 8000434:	42a3      	cmp	r3, r4
 8000436:	d8f6      	bhi.n	8000426 <frame_draw+0x2a>

  } // end for
  ArcadeIT_Serial_Port_Char_Send(pFrame->skin[FRAME_CORNER_UPPER_RIGHT]);
 8000438:	696b      	ldr	r3, [r5, #20]
 800043a:	7898      	ldrb	r0, [r3, #2]
 800043c:	f000 fe00 	bl	8001040 <ArcadeIT_Serial_Port_Char_Send>

  // |                    |
  for (uint8_t y = pFrame->y1 + 1; y < pFrame->y2; y++)
 8000440:	786e      	ldrb	r6, [r5, #1]
 8000442:	3601      	adds	r6, #1
 8000444:	b2f6      	uxtb	r6, r6
 8000446:	e00e      	b.n	8000466 <frame_draw+0x6a>
    cursor_at(pFrame->x1, y);
    ArcadeIT_Serial_Port_Char_Send(pFrame->skin[FRAME_EDGE_LEFT_VERTICAL]);

    for (uint8_t x = pFrame->x1 + 1; x < pFrame->x2; x++)
    {
      ArcadeIT_Serial_Port_Char_Send(pFrame->skin[FRAME_SPACE]);
 8000448:	696b      	ldr	r3, [r5, #20]
 800044a:	7818      	ldrb	r0, [r3, #0]
 800044c:	f000 fdf8 	bl	8001040 <ArcadeIT_Serial_Port_Char_Send>
    for (uint8_t x = pFrame->x1 + 1; x < pFrame->x2; x++)
 8000450:	3401      	adds	r4, #1
 8000452:	b2e4      	uxtb	r4, r4
 8000454:	78ab      	ldrb	r3, [r5, #2]
 8000456:	42a3      	cmp	r3, r4
 8000458:	d8f6      	bhi.n	8000448 <frame_draw+0x4c>

    } // end for
    ArcadeIT_Serial_Port_Char_Send(pFrame->skin[FRAME_EDGE_RIGHT_VERTICAL]);
 800045a:	696b      	ldr	r3, [r5, #20]
 800045c:	7a18      	ldrb	r0, [r3, #8]
 800045e:	f000 fdef 	bl	8001040 <ArcadeIT_Serial_Port_Char_Send>
  for (uint8_t y = pFrame->y1 + 1; y < pFrame->y2; y++)
 8000462:	3601      	adds	r6, #1
 8000464:	b2f6      	uxtb	r6, r6
 8000466:	78e9      	ldrb	r1, [r5, #3]
 8000468:	42b1      	cmp	r1, r6
 800046a:	d90b      	bls.n	8000484 <frame_draw+0x88>
    cursor_at(pFrame->x1, y);
 800046c:	4631      	mov	r1, r6
 800046e:	7828      	ldrb	r0, [r5, #0]
 8000470:	f7ff ff7c 	bl	800036c <cursor_at>
    ArcadeIT_Serial_Port_Char_Send(pFrame->skin[FRAME_EDGE_LEFT_VERTICAL]);
 8000474:	696b      	ldr	r3, [r5, #20]
 8000476:	7998      	ldrb	r0, [r3, #6]
 8000478:	f000 fde2 	bl	8001040 <ArcadeIT_Serial_Port_Char_Send>
    for (uint8_t x = pFrame->x1 + 1; x < pFrame->x2; x++)
 800047c:	782c      	ldrb	r4, [r5, #0]
 800047e:	3401      	adds	r4, #1
 8000480:	b2e4      	uxtb	r4, r4
 8000482:	e7e7      	b.n	8000454 <frame_draw+0x58>

  } // end for

  // |_____________________|
  cursor_at(pFrame->x1, pFrame->y2);
 8000484:	7828      	ldrb	r0, [r5, #0]
 8000486:	f7ff ff71 	bl	800036c <cursor_at>
  ArcadeIT_Serial_Port_Char_Send(pFrame->skin[FRAME_CORNER_LOWER_LEFT]);
 800048a:	696b      	ldr	r3, [r5, #20]
 800048c:	7918      	ldrb	r0, [r3, #4]
 800048e:	f000 fdd7 	bl	8001040 <ArcadeIT_Serial_Port_Char_Send>
  for (uint8_t x = pFrame->x1 + 1; x < pFrame->x2; x++)
 8000492:	782c      	ldrb	r4, [r5, #0]
 8000494:	3401      	adds	r4, #1
 8000496:	b2e4      	uxtb	r4, r4
 8000498:	e005      	b.n	80004a6 <frame_draw+0xaa>
  {
    ArcadeIT_Serial_Port_Char_Send(pFrame->skin[FRAME_EDGE_LOWER_HORIZONTAL]);
 800049a:	696b      	ldr	r3, [r5, #20]
 800049c:	7958      	ldrb	r0, [r3, #5]
 800049e:	f000 fdcf 	bl	8001040 <ArcadeIT_Serial_Port_Char_Send>
  for (uint8_t x = pFrame->x1 + 1; x < pFrame->x2; x++)
 80004a2:	3401      	adds	r4, #1
 80004a4:	b2e4      	uxtb	r4, r4
 80004a6:	78ab      	ldrb	r3, [r5, #2]
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d8f6      	bhi.n	800049a <frame_draw+0x9e>

  } // end for
  ArcadeIT_Serial_Port_Char_Send(pFrame->skin[FRAME_CORNER_LOWER_RIGHT]);
 80004ac:	696b      	ldr	r3, [r5, #20]
 80004ae:	7858      	ldrb	r0, [r3, #1]
 80004b0:	f000 fdc6 	bl	8001040 <ArcadeIT_Serial_Port_Char_Send>

  // ----
  ArcadeIT_Serial_Port_String_Send(FONT_GFX_OFF);
 80004b4:	4802      	ldr	r0, [pc, #8]	; (80004c0 <frame_draw+0xc4>)
 80004b6:	f000 fdcd 	bl	8001054 <ArcadeIT_Serial_Port_String_Send>

} // end frame_draw
 80004ba:	bd70      	pop	{r4, r5, r6, pc}
 80004bc:	08001df4 	.word	0x08001df4
 80004c0:	08001df8 	.word	0x08001df8

080004c4 <slider_h_calculate_marker_position>:

// -----------------------------------------------------------------------------
void slider_h_calculate_marker_position(slider_h_t * pSlider)
{
  pSlider->x_marker_previously = pSlider->x_marker;
 80004c4:	7d03      	ldrb	r3, [r0, #20]
 80004c6:	7543      	strb	r3, [r0, #21]
  pSlider->x_marker = (uint8_t) (pSlider->x1 + 1 + ((pSlider->value - pSlider->value_min + 1) / (float) (pSlider->value_max - pSlider->value_min + 1) * (pSlider->x2 - 1 - pSlider->x1 - 1)));
 80004c8:	f990 2000 	ldrsb.w	r2, [r0]
 80004cc:	1c53      	adds	r3, r2, #1
 80004ce:	ee07 3a10 	vmov	s14, r3
 80004d2:	ed90 6a03 	vldr	s12, [r0, #12]
 80004d6:	edd0 5a01 	vldr	s11, [r0, #4]
 80004da:	ee36 6a65 	vsub.f32	s12, s12, s11
 80004de:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80004e2:	ee36 6a27 	vadd.f32	s12, s12, s15
 80004e6:	edd0 6a02 	vldr	s13, [r0, #8]
 80004ea:	ee76 6ae5 	vsub.f32	s13, s13, s11
 80004ee:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80004f2:	eec6 5a26 	vdiv.f32	s11, s12, s13
 80004f6:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80004fa:	3b01      	subs	r3, #1
 80004fc:	1a9b      	subs	r3, r3, r2
 80004fe:	3b01      	subs	r3, #1
 8000500:	ee07 3a90 	vmov	s15, r3
 8000504:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000508:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800050c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000510:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000514:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000518:	ee17 3a90 	vmov	r3, s15
 800051c:	7503      	strb	r3, [r0, #20]

} // end slider_h_calculate_marker_position
 800051e:	4770      	bx	lr

08000520 <slider_h_draw>:

// -----------------------------------------------------------------------------
void slider_h_draw(
        slider_h_t *pSlider // the pointer to a structure of a slider
        )
{
 8000520:	b538      	push	{r3, r4, r5, lr}
 8000522:	4605      	mov	r5, r0
    cursor_at(pSlider->x1, pSlider->y);
 8000524:	f990 0000 	ldrsb.w	r0, [r0]
 8000528:	f995 1002 	ldrsb.w	r1, [r5, #2]
 800052c:	b2c9      	uxtb	r1, r1
 800052e:	b2c0      	uxtb	r0, r0
 8000530:	f7ff ff1c 	bl	800036c <cursor_at>

    ArcadeIT_Serial_Port_String_Send(FONT_GFX_ON);
 8000534:	481e      	ldr	r0, [pc, #120]	; (80005b0 <slider_h_draw+0x90>)
 8000536:	f000 fd8d 	bl	8001054 <ArcadeIT_Serial_Port_String_Send>
    // ----

    color_set(pSlider->skin[SLIDER_H_ARROW_LEFT_FG], pSlider->skin[SLIDER_H_ARROW_LEFT_BG]);
 800053a:	69ab      	ldr	r3, [r5, #24]
 800053c:	7899      	ldrb	r1, [r3, #2]
 800053e:	7858      	ldrb	r0, [r3, #1]
 8000540:	f7ff ff04 	bl	800034c <color_set>
    ArcadeIT_Serial_Port_Char_Send(pSlider->skin[SLIDER_H_ARROW_LEFT]);
 8000544:	69ab      	ldr	r3, [r5, #24]
 8000546:	7818      	ldrb	r0, [r3, #0]
 8000548:	f000 fd7a 	bl	8001040 <ArcadeIT_Serial_Port_Char_Send>

    color_set(pSlider->skin[SLIDER_H_BLOCK_FG], pSlider->skin[SLIDER_H_BLOCK_BG]);
 800054c:	69ab      	ldr	r3, [r5, #24]
 800054e:	7a19      	ldrb	r1, [r3, #8]
 8000550:	79d8      	ldrb	r0, [r3, #7]
 8000552:	f7ff fefb 	bl	800034c <color_set>
    for (uint8_t x = pSlider->x1 + 1; x < pSlider->x2; x++)
 8000556:	782c      	ldrb	r4, [r5, #0]
 8000558:	3401      	adds	r4, #1
 800055a:	b2e4      	uxtb	r4, r4
 800055c:	e00f      	b.n	800057e <slider_h_draw+0x5e>
    {
        if (x == pSlider->x_marker)
          {
          color_set(pSlider->skin[SLIDER_MARKER_FG], pSlider->skin[SLIDER_MARKER_BG]);
 800055e:	69ab      	ldr	r3, [r5, #24]
 8000560:	7d19      	ldrb	r1, [r3, #20]
 8000562:	7cd8      	ldrb	r0, [r3, #19]
 8000564:	f7ff fef2 	bl	800034c <color_set>
          ArcadeIT_Serial_Port_Char_Send(pSlider->skin[SLIDER_MARKER]);
 8000568:	69ab      	ldr	r3, [r5, #24]
 800056a:	7c98      	ldrb	r0, [r3, #18]
 800056c:	f000 fd68 	bl	8001040 <ArcadeIT_Serial_Port_Char_Send>
          color_set(pSlider->skin[SLIDER_H_BLOCK_FG], pSlider->skin[SLIDER_H_BLOCK_BG]);
 8000570:	69ab      	ldr	r3, [r5, #24]
 8000572:	7a19      	ldrb	r1, [r3, #8]
 8000574:	79d8      	ldrb	r0, [r3, #7]
 8000576:	f7ff fee9 	bl	800034c <color_set>
    for (uint8_t x = pSlider->x1 + 1; x < pSlider->x2; x++)
 800057a:	3401      	adds	r4, #1
 800057c:	b2e4      	uxtb	r4, r4
 800057e:	f995 3001 	ldrsb.w	r3, [r5, #1]
 8000582:	429c      	cmp	r4, r3
 8000584:	da07      	bge.n	8000596 <slider_h_draw+0x76>
        if (x == pSlider->x_marker)
 8000586:	7d2b      	ldrb	r3, [r5, #20]
 8000588:	42a3      	cmp	r3, r4
 800058a:	d0e8      	beq.n	800055e <slider_h_draw+0x3e>
          }
        else
          ArcadeIT_Serial_Port_Char_Send(pSlider->skin[SLIDER_H_BLOCK]);
 800058c:	69ab      	ldr	r3, [r5, #24]
 800058e:	7998      	ldrb	r0, [r3, #6]
 8000590:	f000 fd56 	bl	8001040 <ArcadeIT_Serial_Port_Char_Send>
 8000594:	e7f1      	b.n	800057a <slider_h_draw+0x5a>

    } // end for
    color_set(pSlider->skin[SLIDER_H_ARROW_RIGHT_FG], pSlider->skin[SLIDER_H_ARROW_RIGHT_BG]);
 8000596:	69ab      	ldr	r3, [r5, #24]
 8000598:	7959      	ldrb	r1, [r3, #5]
 800059a:	7918      	ldrb	r0, [r3, #4]
 800059c:	f7ff fed6 	bl	800034c <color_set>
    ArcadeIT_Serial_Port_Char_Send(pSlider->skin[SLIDER_H_ARROW_RIGHT]);
 80005a0:	69ab      	ldr	r3, [r5, #24]
 80005a2:	78d8      	ldrb	r0, [r3, #3]
 80005a4:	f000 fd4c 	bl	8001040 <ArcadeIT_Serial_Port_Char_Send>

    // ----
    ArcadeIT_Serial_Port_String_Send(FONT_GFX_OFF);
 80005a8:	4802      	ldr	r0, [pc, #8]	; (80005b4 <slider_h_draw+0x94>)
 80005aa:	f000 fd53 	bl	8001054 <ArcadeIT_Serial_Port_String_Send>

} // end slider_draw
 80005ae:	bd38      	pop	{r3, r4, r5, pc}
 80005b0:	08001df4 	.word	0x08001df4
 80005b4:	08001df8 	.word	0x08001df8

080005b8 <slider_h_refresh>:

// -----------------------------------------------------------------------------
void slider_h_refresh(
    slider_h_t *pSlider
    )
{
 80005b8:	b510      	push	{r4, lr}
 80005ba:	4604      	mov	r4, r0
    slider_h_calculate_marker_position(pSlider);
 80005bc:	f7ff ff82 	bl	80004c4 <slider_h_calculate_marker_position>

    if (pSlider->x_marker != pSlider->x_marker_previously) slider_h_draw(pSlider);
 80005c0:	7d22      	ldrb	r2, [r4, #20]
 80005c2:	7d63      	ldrb	r3, [r4, #21]
 80005c4:	429a      	cmp	r2, r3
 80005c6:	d002      	beq.n	80005ce <slider_h_refresh+0x16>
 80005c8:	4620      	mov	r0, r4
 80005ca:	f7ff ffa9 	bl	8000520 <slider_h_draw>

} // end slider_h_refresh
 80005ce:	bd10      	pop	{r4, pc}

080005d0 <slider_v_calculate_marker_position>:

// -----------------------------------------------------------------------------
void slider_v_calculate_marker_position(slider_v_t * pSlider)
{
  pSlider->y_marker_previously = pSlider->y_marker;
 80005d0:	7d03      	ldrb	r3, [r0, #20]
 80005d2:	7543      	strb	r3, [r0, #21]
  pSlider->y_marker = (uint8_t) (pSlider->y1 + 1 + ((pSlider->value - pSlider->value_min + 1) / (float) (pSlider->value_max - pSlider->value_min + 1) * (pSlider->y2 - 1 - pSlider->y1 - 1)));
 80005d4:	f990 2001 	ldrsb.w	r2, [r0, #1]
 80005d8:	1c53      	adds	r3, r2, #1
 80005da:	ee07 3a10 	vmov	s14, r3
 80005de:	ed90 6a03 	vldr	s12, [r0, #12]
 80005e2:	edd0 5a01 	vldr	s11, [r0, #4]
 80005e6:	ee36 6a65 	vsub.f32	s12, s12, s11
 80005ea:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80005ee:	ee36 6a27 	vadd.f32	s12, s12, s15
 80005f2:	edd0 6a02 	vldr	s13, [r0, #8]
 80005f6:	ee76 6ae5 	vsub.f32	s13, s13, s11
 80005fa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80005fe:	eec6 5a26 	vdiv.f32	s11, s12, s13
 8000602:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8000606:	3b01      	subs	r3, #1
 8000608:	1a9b      	subs	r3, r3, r2
 800060a:	3b01      	subs	r3, #1
 800060c:	ee07 3a90 	vmov	s15, r3
 8000610:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000614:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8000618:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800061c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000620:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000624:	ee17 3a90 	vmov	r3, s15
 8000628:	7503      	strb	r3, [r0, #20]

} // end slider_v_calculate_marker_position
 800062a:	4770      	bx	lr

0800062c <slider_v_draw>:

// -----------------------------------------------------------------------------
void slider_v_draw(
        slider_v_t *pSlider // the pointer to a structure of a slider
        )
{
 800062c:	b538      	push	{r3, r4, r5, lr}
 800062e:	4605      	mov	r5, r0
    cursor_at(pSlider->x, pSlider->y1);
 8000630:	f990 0000 	ldrsb.w	r0, [r0]
 8000634:	f995 1001 	ldrsb.w	r1, [r5, #1]
 8000638:	b2c9      	uxtb	r1, r1
 800063a:	b2c0      	uxtb	r0, r0
 800063c:	f7ff fe96 	bl	800036c <cursor_at>

    ArcadeIT_Serial_Port_String_Send(FONT_GFX_ON);
 8000640:	4824      	ldr	r0, [pc, #144]	; (80006d4 <slider_v_draw+0xa8>)
 8000642:	f000 fd07 	bl	8001054 <ArcadeIT_Serial_Port_String_Send>
    // ----

    color_set(pSlider->skin[SLIDER_V_ARROW_UP_FG], pSlider->skin[SLIDER_V_ARROW_UP_BG]);
 8000646:	69ab      	ldr	r3, [r5, #24]
 8000648:	7ad9      	ldrb	r1, [r3, #11]
 800064a:	7a98      	ldrb	r0, [r3, #10]
 800064c:	f7ff fe7e 	bl	800034c <color_set>
    ArcadeIT_Serial_Port_Char_Send(pSlider->skin[SLIDER_V_ARROW_UP]);
 8000650:	69ab      	ldr	r3, [r5, #24]
 8000652:	7a58      	ldrb	r0, [r3, #9]
 8000654:	f000 fcf4 	bl	8001040 <ArcadeIT_Serial_Port_Char_Send>

    color_set(pSlider->skin[SLIDER_V_BLOCK_FG], pSlider->skin[SLIDER_V_BLOCK_BG]);
 8000658:	69ab      	ldr	r3, [r5, #24]
 800065a:	7c59      	ldrb	r1, [r3, #17]
 800065c:	7c18      	ldrb	r0, [r3, #16]
 800065e:	f7ff fe75 	bl	800034c <color_set>
    uint8_t y;
    for (y = pSlider->y1 + 1; y < pSlider->y2; y++)
 8000662:	786c      	ldrb	r4, [r5, #1]
 8000664:	3401      	adds	r4, #1
 8000666:	b2e4      	uxtb	r4, r4
 8000668:	e00f      	b.n	800068a <slider_v_draw+0x5e>
    {
      cursor_at(pSlider->x, y);

      if (y == pSlider->y_marker)
        {
        color_set(pSlider->skin[SLIDER_MARKER_FG], pSlider->skin[SLIDER_MARKER_BG]);
 800066a:	69ab      	ldr	r3, [r5, #24]
 800066c:	7d19      	ldrb	r1, [r3, #20]
 800066e:	7cd8      	ldrb	r0, [r3, #19]
 8000670:	f7ff fe6c 	bl	800034c <color_set>
        ArcadeIT_Serial_Port_Char_Send(pSlider->skin[SLIDER_MARKER]);
 8000674:	69ab      	ldr	r3, [r5, #24]
 8000676:	7c98      	ldrb	r0, [r3, #18]
 8000678:	f000 fce2 	bl	8001040 <ArcadeIT_Serial_Port_Char_Send>
        color_set(pSlider->skin[SLIDER_V_BLOCK_FG], pSlider->skin[SLIDER_V_BLOCK_BG]);
 800067c:	69ab      	ldr	r3, [r5, #24]
 800067e:	7c59      	ldrb	r1, [r3, #17]
 8000680:	7c18      	ldrb	r0, [r3, #16]
 8000682:	f7ff fe63 	bl	800034c <color_set>
    for (y = pSlider->y1 + 1; y < pSlider->y2; y++)
 8000686:	3401      	adds	r4, #1
 8000688:	b2e4      	uxtb	r4, r4
 800068a:	f995 3002 	ldrsb.w	r3, [r5, #2]
 800068e:	429c      	cmp	r4, r3
 8000690:	da0d      	bge.n	80006ae <slider_v_draw+0x82>
      cursor_at(pSlider->x, y);
 8000692:	f995 0000 	ldrsb.w	r0, [r5]
 8000696:	4621      	mov	r1, r4
 8000698:	b2c0      	uxtb	r0, r0
 800069a:	f7ff fe67 	bl	800036c <cursor_at>
      if (y == pSlider->y_marker)
 800069e:	7d2b      	ldrb	r3, [r5, #20]
 80006a0:	42a3      	cmp	r3, r4
 80006a2:	d0e2      	beq.n	800066a <slider_v_draw+0x3e>
        }
      else
        ArcadeIT_Serial_Port_Char_Send(pSlider->skin[SLIDER_V_BLOCK]);
 80006a4:	69ab      	ldr	r3, [r5, #24]
 80006a6:	7bd8      	ldrb	r0, [r3, #15]
 80006a8:	f000 fcca 	bl	8001040 <ArcadeIT_Serial_Port_Char_Send>
 80006ac:	e7eb      	b.n	8000686 <slider_v_draw+0x5a>

    } // end for

    cursor_at(pSlider->x, y);
 80006ae:	f995 0000 	ldrsb.w	r0, [r5]
 80006b2:	4621      	mov	r1, r4
 80006b4:	b2c0      	uxtb	r0, r0
 80006b6:	f7ff fe59 	bl	800036c <cursor_at>

    color_set(pSlider->skin[SLIDER_V_ARROW_DOWN_FG], pSlider->skin[SLIDER_V_ARROW_DOWN_BG]);
 80006ba:	69ab      	ldr	r3, [r5, #24]
 80006bc:	7b99      	ldrb	r1, [r3, #14]
 80006be:	7b58      	ldrb	r0, [r3, #13]
 80006c0:	f7ff fe44 	bl	800034c <color_set>
    ArcadeIT_Serial_Port_Char_Send(pSlider->skin[SLIDER_V_ARROW_DOWN]);
 80006c4:	69ab      	ldr	r3, [r5, #24]
 80006c6:	7b18      	ldrb	r0, [r3, #12]
 80006c8:	f000 fcba 	bl	8001040 <ArcadeIT_Serial_Port_Char_Send>

    // ----
    ArcadeIT_Serial_Port_String_Send(FONT_GFX_OFF);
 80006cc:	4802      	ldr	r0, [pc, #8]	; (80006d8 <slider_v_draw+0xac>)
 80006ce:	f000 fcc1 	bl	8001054 <ArcadeIT_Serial_Port_String_Send>

} // end slider_draw
 80006d2:	bd38      	pop	{r3, r4, r5, pc}
 80006d4:	08001df4 	.word	0x08001df4
 80006d8:	08001df8 	.word	0x08001df8

080006dc <slider_v_refresh>:

// -----------------------------------------------------------------------------
void slider_v_refresh(
    slider_v_t *pSlider
    )
{
 80006dc:	b510      	push	{r4, lr}
 80006de:	4604      	mov	r4, r0
    slider_v_calculate_marker_position(pSlider);
 80006e0:	f7ff ff76 	bl	80005d0 <slider_v_calculate_marker_position>

    if (pSlider->y_marker != pSlider->y_marker_previously) slider_v_draw(pSlider);
 80006e4:	7d22      	ldrb	r2, [r4, #20]
 80006e6:	7d63      	ldrb	r3, [r4, #21]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d002      	beq.n	80006f2 <slider_v_refresh+0x16>
 80006ec:	4620      	mov	r0, r4
 80006ee:	f7ff ff9d 	bl	800062c <slider_v_draw>

} // end slider_v_refresh
 80006f2:	bd10      	pop	{r4, pc}

080006f4 <window_draw>:

// -----------------------------------------------------------------------------
void window_draw(
    window_t *pWindow // the pointer to a structure of a window
    )
{
 80006f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006f8:	b098      	sub	sp, #96	; 0x60
 80006fa:	4605      	mov	r5, r0
  label_t  title     = {pWindow->x + 1, pWindow->y, 220, 18, pWindow->title, LABEL_SKIN4_ANSI};
 80006fc:	7904      	ldrb	r4, [r0, #4]
 80006fe:	1c67      	adds	r7, r4, #1
 8000700:	b27f      	sxtb	r7, r7
 8000702:	f88d 7054 	strb.w	r7, [sp, #84]	; 0x54
 8000706:	f990 3005 	ldrsb.w	r3, [r0, #5]
 800070a:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
 800070e:	23dc      	movs	r3, #220	; 0xdc
 8000710:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
 8000714:	2212      	movs	r2, #18
 8000716:	f88d 2057 	strb.w	r2, [sp, #87]	; 0x57
 800071a:	6803      	ldr	r3, [r0, #0]
 800071c:	9316      	str	r3, [sp, #88]	; 0x58
 800071e:	4b3d      	ldr	r3, [pc, #244]	; (8000814 <window_draw+0x120>)
 8000720:	9317      	str	r3, [sp, #92]	; 0x5c

  frame_t  frame     = {
 8000722:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
      pWindow->x, pWindow->y,
 8000726:	7946      	ldrb	r6, [r0, #5]
  frame_t  frame     = {
 8000728:	f88d 603d 	strb.w	r6, [sp, #61]	; 0x3d
      pWindow->x + pWindow->width, pWindow->y + pWindow->height,
 800072c:	7983      	ldrb	r3, [r0, #6]
 800072e:	441c      	add	r4, r3
 8000730:	b2e4      	uxtb	r4, r4
  frame_t  frame     = {
 8000732:	f88d 403e 	strb.w	r4, [sp, #62]	; 0x3e
      pWindow->x + pWindow->width, pWindow->y + pWindow->height,
 8000736:	79c3      	ldrb	r3, [r0, #7]
 8000738:	4433      	add	r3, r6
 800073a:	b2db      	uxtb	r3, r3
  frame_t  frame     = {
 800073c:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
 8000740:	211b      	movs	r1, #27
 8000742:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
 8000746:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
 800074a:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800074e:	aa18      	add	r2, sp, #96	; 0x60
 8000750:	e912 0007 	ldmdb	r2, {r0, r1, r2}
 8000754:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8000758:	4a2f      	ldr	r2, [pc, #188]	; (8000818 <window_draw+0x124>)
 800075a:	9214      	str	r2, [sp, #80]	; 0x50
      27, 18,
      title,
      FRAME_SKIN_ANSI
  };

  slider_h_t sliderh = {pWindow->x + 1, pWindow->x + pWindow->width - 1 - (pWindow->flags & WINDOW_SLIDER_H ? 1 : 0), pWindow->y + pWindow->height - 1, false, 0.0, 10.0, 2.0, 0.0, 0, 0, SLIDER_SKIN_ANSI};
 800075c:	f88d 7020 	strb.w	r7, [sp, #32]
 8000760:	7e2f      	ldrb	r7, [r5, #24]
 8000762:	f007 0201 	and.w	r2, r7, #1
 8000766:	1aa2      	subs	r2, r4, r2
 8000768:	3a01      	subs	r2, #1
 800076a:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
 800076e:	1e5a      	subs	r2, r3, #1
 8000770:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
 8000774:	2200      	movs	r2, #0
 8000776:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 800077a:	2000      	movs	r0, #0
 800077c:	9009      	str	r0, [sp, #36]	; 0x24
 800077e:	f8df 809c 	ldr.w	r8, [pc, #156]	; 800081c <window_draw+0x128>
 8000782:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8000786:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
 800078a:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 800078e:	900c      	str	r0, [sp, #48]	; 0x30
 8000790:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 8000794:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
 8000798:	f8df c084 	ldr.w	ip, [pc, #132]	; 8000820 <window_draw+0x12c>
 800079c:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
  slider_v_t sliderv = {pWindow->x + pWindow->width - 1, pWindow->y + 1, pWindow->y + pWindow->height - 1 - (pWindow->flags & WINDOW_SLIDER_V ? 1 : 0), false, 0.0, 10.0, 2.0, 0.0, 0, 0, SLIDER_SKIN_ANSI};
 80007a0:	3c01      	subs	r4, #1
 80007a2:	f88d 4004 	strb.w	r4, [sp, #4]
 80007a6:	1c71      	adds	r1, r6, #1
 80007a8:	f88d 1005 	strb.w	r1, [sp, #5]
 80007ac:	f3c7 0740 	ubfx	r7, r7, #1, #1
 80007b0:	1bdb      	subs	r3, r3, r7
 80007b2:	3b01      	subs	r3, #1
 80007b4:	f88d 3006 	strb.w	r3, [sp, #6]
 80007b8:	f88d 2007 	strb.w	r2, [sp, #7]
 80007bc:	9002      	str	r0, [sp, #8]
 80007be:	f8cd 800c 	str.w	r8, [sp, #12]
 80007c2:	f8cd e010 	str.w	lr, [sp, #16]
 80007c6:	9005      	str	r0, [sp, #20]
 80007c8:	f88d 2018 	strb.w	r2, [sp, #24]
 80007cc:	f88d 2019 	strb.w	r2, [sp, #25]
 80007d0:	f8cd c01c 	str.w	ip, [sp, #28]

  frame_draw(&frame);
 80007d4:	a80f      	add	r0, sp, #60	; 0x3c
 80007d6:	f7ff fe11 	bl	80003fc <frame_draw>

  if (pWindow->flags & WINDOW_TITLE)
 80007da:	7e2b      	ldrb	r3, [r5, #24]
 80007dc:	f013 0f04 	tst.w	r3, #4
 80007e0:	d10a      	bne.n	80007f8 <window_draw+0x104>
    label_draw(&title, &frame);

  if (pWindow->flags & WINDOW_SLIDER_H)
 80007e2:	7e2b      	ldrb	r3, [r5, #24]
 80007e4:	f013 0f01 	tst.w	r3, #1
 80007e8:	d10b      	bne.n	8000802 <window_draw+0x10e>
    slider_h_refresh(&sliderh);

  if (pWindow->flags & WINDOW_SLIDER_V)
 80007ea:	7e2b      	ldrb	r3, [r5, #24]
 80007ec:	f013 0f02 	tst.w	r3, #2
 80007f0:	d10b      	bne.n	800080a <window_draw+0x116>
    slider_v_refresh(&sliderv);

} // end window_draw
 80007f2:	b018      	add	sp, #96	; 0x60
 80007f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    label_draw(&title, &frame);
 80007f8:	a90f      	add	r1, sp, #60	; 0x3c
 80007fa:	a815      	add	r0, sp, #84	; 0x54
 80007fc:	f7ff fdc6 	bl	800038c <label_draw>
 8000800:	e7ef      	b.n	80007e2 <window_draw+0xee>
    slider_h_refresh(&sliderh);
 8000802:	a808      	add	r0, sp, #32
 8000804:	f7ff fed8 	bl	80005b8 <slider_h_refresh>
 8000808:	e7ef      	b.n	80007ea <window_draw+0xf6>
    slider_v_refresh(&sliderv);
 800080a:	a801      	add	r0, sp, #4
 800080c:	f7ff ff66 	bl	80006dc <slider_v_refresh>
} // end window_draw
 8000810:	e7ef      	b.n	80007f2 <window_draw+0xfe>
 8000812:	bf00      	nop
 8000814:	08001dfc 	.word	0x08001dfc
 8000818:	08001e00 	.word	0x08001e00
 800081c:	41200000 	.word	0x41200000
 8000820:	08003b74 	.word	0x08003b74

08000824 <ArcadeIT_SysTick_Init>:

} // end ArcadeIT_SysTick_Deinit

// -----------------------------------------------------------------------------
int ArcadeIT_SysTick_Init (void)
{
 8000824:	b508      	push	{r3, lr}
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8000826:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <ArcadeIT_SysTick_Init+0x34>)
 8000828:	4a0c      	ldr	r2, [pc, #48]	; (800085c <ArcadeIT_SysTick_Init+0x38>)
 800082a:	605a      	str	r2, [r3, #4]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800082c:	4a0c      	ldr	r2, [pc, #48]	; (8000860 <ArcadeIT_SysTick_Init+0x3c>)
 800082e:	21f0      	movs	r1, #240	; 0xf0
 8000830:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000834:	2100      	movs	r1, #0
 8000836:	6099      	str	r1, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000838:	2107      	movs	r1, #7
 800083a:	6019      	str	r1, [r3, #0]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800083c:	23c0      	movs	r3, #192	; 0xc0
 800083e:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
  lRetStatus = SysTick_Config(ARCADEIT_HCLKS_PER_MS);

  // Sets the priority of the interrupt
  NVIC_SetPriority (SysTick_IRQn, NVIC_SYSTICK_PRIORITY << 2);

  if (gDevices & ARCADEIT_DEVICE_SERIAL)
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <ArcadeIT_SysTick_Init+0x40>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800084a:	d101      	bne.n	8000850 <ArcadeIT_SysTick_Init+0x2c>
  } // End if.

  // And return the status.
  return lRetStatus;

} // end ArcadeIT_SysTick_Init.
 800084c:	2000      	movs	r0, #0
 800084e:	bd08      	pop	{r3, pc}
    ArcadeIT_Serial_Port_String_Send (TEXT_SYSTICK_INITED);
 8000850:	4805      	ldr	r0, [pc, #20]	; (8000868 <ArcadeIT_SysTick_Init+0x44>)
 8000852:	f000 fbff 	bl	8001054 <ArcadeIT_Serial_Port_String_Send>
 8000856:	e7f9      	b.n	800084c <ArcadeIT_SysTick_Init+0x28>
 8000858:	e000e010 	.word	0xe000e010
 800085c:	0002bf1f 	.word	0x0002bf1f
 8000860:	e000ed00 	.word	0xe000ed00
 8000864:	20000084 	.word	0x20000084
 8000868:	08003ac4 	.word	0x08003ac4

0800086c <ArcadeIT_System_Delay>:
   * PARAMETERS:  See above.
   * RETURNS:     Nothing
   */

  // Get the parameter from the parameters pointer.
  gSystemTimer = pDelay;
 800086c:	4b03      	ldr	r3, [pc, #12]	; (800087c <ArcadeIT_System_Delay+0x10>)
 800086e:	6018      	str	r0, [r3, #0]
  while (gSystemTimer);
 8000870:	4b02      	ldr	r3, [pc, #8]	; (800087c <ArcadeIT_System_Delay+0x10>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d1fb      	bne.n	8000870 <ArcadeIT_System_Delay+0x4>

} // end ArcadeIT_System_Delay.
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	20000094 	.word	0x20000094

08000880 <ArcadeIT_System_Init>:

// -----------------------------------------------------------------------------
void ArcadeIT_System_Init (void)
{
 8000880:	b082      	sub	sp, #8
   * DESCRIPTION: This function initializes the core of the system
   * PARAMETERS:  None.
   * RETURNS:     Nothing.
   */

  __IO uint32_t lStartUpCounter = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	9301      	str	r3, [sp, #4]

  SCB->AIRCR = ((uint32_t)0x05FA0000) | NVIC_PriorityGroup_2; // Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup 2 value
 8000886:	4b38      	ldr	r3, [pc, #224]	; (8000968 <ArcadeIT_System_Init+0xe8>)
 8000888:	4a38      	ldr	r2, [pc, #224]	; (800096c <ArcadeIT_System_Init+0xec>)
 800088a:	60da      	str	r2, [r3, #12]
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  // FPU settings: set CP10 and CP11 Full Access
 800088c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000890:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000894:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET;     // Vector Table Relocation in Internal FLASH
 8000898:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800089c:	609a      	str	r2, [r3, #8]

  // In ArcadeIT PLL (clocked by HSE) is used as System clock source
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800089e:	4a34      	ldr	r2, [pc, #208]	; (8000970 <ArcadeIT_System_Init+0xf0>)
 80008a0:	6813      	ldr	r3, [r2, #0]
 80008a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008a6:	6013      	str	r3, [r2, #0]

  // Wait till HSE is ready and if Time out is reached exit
  while(((RCC->CR & RCC_CR_HSERDY) == 0) && (++lStartUpCounter != HSE_STARTUP_TIMEOUT));
 80008a8:	4b31      	ldr	r3, [pc, #196]	; (8000970 <ArcadeIT_System_Init+0xf0>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80008b0:	d105      	bne.n	80008be <ArcadeIT_System_Init+0x3e>
 80008b2:	9b01      	ldr	r3, [sp, #4]
 80008b4:	3301      	adds	r3, #1
 80008b6:	9301      	str	r3, [sp, #4]
 80008b8:	4a2e      	ldr	r2, [pc, #184]	; (8000974 <ArcadeIT_System_Init+0xf4>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d1f4      	bne.n	80008a8 <ArcadeIT_System_Init+0x28>

  if (RCC->CR & RCC_CR_HSERDY)
 80008be:	4b2c      	ldr	r3, [pc, #176]	; (8000970 <ArcadeIT_System_Init+0xf0>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80008c6:	d046      	beq.n	8000956 <ArcadeIT_System_Init+0xd6>
  {
    // Select regulator voltage output Scale 1 mode
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80008c8:	4b29      	ldr	r3, [pc, #164]	; (8000970 <ArcadeIT_System_Init+0xf0>)
 80008ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008cc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80008d0:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80008d2:	4929      	ldr	r1, [pc, #164]	; (8000978 <ArcadeIT_System_Init+0xf8>)
 80008d4:	680a      	ldr	r2, [r1, #0]
 80008d6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80008da:	600a      	str	r2, [r1, #0]
    // HCLK = SYSCLK / 1
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80008dc:	689a      	ldr	r2, [r3, #8]
 80008de:	609a      	str	r2, [r3, #8]
    // PCLK2 = HCLK / 2
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80008e0:	689a      	ldr	r2, [r3, #8]
 80008e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80008e6:	609a      	str	r2, [r3, #8]
    // PCLK1 = HCLK / 4
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4; // 0x00001400U
 80008e8:	689a      	ldr	r2, [r3, #8]
 80008ea:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 80008ee:	609a      	str	r2, [r3, #8]
    // Configure the main PLL
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) - 1) << 16) | (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
 80008f0:	4a22      	ldr	r2, [pc, #136]	; (800097c <ArcadeIT_System_Init+0xfc>)
 80008f2:	605a      	str	r2, [r3, #4]
    // Enable the main PLL
    RCC->CR |= RCC_CR_PLLON;
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80008fa:	601a      	str	r2, [r3, #0]
    // Wait till the main PLL is ready
    while((RCC->CR & RCC_CR_PLLRDY) == 0) {}
 80008fc:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <ArcadeIT_System_Init+0xf0>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000904:	d0fa      	beq.n	80008fc <ArcadeIT_System_Init+0x7c>
    // Enable the Over-drive to extend the clock frequency to 180 Mhz
    PWR->CR |= PWR_CR_ODEN;
 8000906:	4a1c      	ldr	r2, [pc, #112]	; (8000978 <ArcadeIT_System_Init+0xf8>)
 8000908:	6813      	ldr	r3, [r2, #0]
 800090a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800090e:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODRDY) == 0) {}
 8000910:	4b19      	ldr	r3, [pc, #100]	; (8000978 <ArcadeIT_System_Init+0xf8>)
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000918:	d0fa      	beq.n	8000910 <ArcadeIT_System_Init+0x90>
    PWR->CR |= PWR_CR_ODSWEN;
 800091a:	4a17      	ldr	r2, [pc, #92]	; (8000978 <ArcadeIT_System_Init+0xf8>)
 800091c:	6813      	ldr	r3, [r2, #0]
 800091e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000922:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0) {}
 8000924:	4b14      	ldr	r3, [pc, #80]	; (8000978 <ArcadeIT_System_Init+0xf8>)
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800092c:	d0fa      	beq.n	8000924 <ArcadeIT_System_Init+0xa4>
    // Configure Flash prefetch, Instruction cache, Data cache and wait state
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800092e:	4b14      	ldr	r3, [pc, #80]	; (8000980 <ArcadeIT_System_Init+0x100>)
 8000930:	f240 7205 	movw	r2, #1797	; 0x705
 8000934:	601a      	str	r2, [r3, #0]
    // Select the main PLL as system clock source
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000936:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800093a:	689a      	ldr	r2, [r3, #8]
 800093c:	f022 0203 	bic.w	r2, r2, #3
 8000940:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000942:	689a      	ldr	r2, [r3, #8]
 8000944:	f042 0202 	orr.w	r2, r2, #2
 8000948:	609a      	str	r2, [r3, #8]
    // Wait till the main PLL is used as system clock source
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL) {}
 800094a:	4b09      	ldr	r3, [pc, #36]	; (8000970 <ArcadeIT_System_Init+0xf0>)
 800094c:	689b      	ldr	r3, [r3, #8]
 800094e:	f003 030c 	and.w	r3, r3, #12
 8000952:	2b08      	cmp	r3, #8
 8000954:	d1f9      	bne.n	800094a <ArcadeIT_System_Init+0xca>
    // configuration. User can add here some code to deal with this error

  } // end if

  // HCLK counter, DWT struct is defined inside the core_cm4.h file
  DWT->CTRL |= 1;  // enable the counter
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <ArcadeIT_System_Init+0x104>)
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	f042 0201 	orr.w	r2, r2, #1
 800095e:	601a      	str	r2, [r3, #0]
  DWT->CYCCNT = 0; // reset the counter
 8000960:	2200      	movs	r2, #0
 8000962:	605a      	str	r2, [r3, #4]

} // end ArcadeIT_System_Init.
 8000964:	b002      	add	sp, #8
 8000966:	4770      	bx	lr
 8000968:	e000ed00 	.word	0xe000ed00
 800096c:	05fa0500 	.word	0x05fa0500
 8000970:	40023800 	.word	0x40023800
 8000974:	15752a00 	.word	0x15752a00
 8000978:	40007000 	.word	0x40007000
 800097c:	07402d04 	.word	0x07402d04
 8000980:	40023c00 	.word	0x40023c00
 8000984:	e0001000 	.word	0xe0001000

08000988 <ArcadeIT_SysTick_Handler>:

} // end ArcadeIT_If_VBlank.

// -----------------------------------------------------------------------------
void ArcadeIT_SysTick_Handler (void)
{
 8000988:	b508      	push	{r3, lr}
   * PARAMETERS:  TimeDivider: this is the number to divide the system clock by (i.e. 1000: MSec, 1000000: MicroSec... ).
   * RETURNS:     Nothing
   */

  // Decrement timers synchronized to the MCU in ms.
  gSystemTick++;
 800098a:	4a0d      	ldr	r2, [pc, #52]	; (80009c0 <ArcadeIT_SysTick_Handler+0x38>)
 800098c:	6813      	ldr	r3, [r2, #0]
 800098e:	3301      	adds	r3, #1
 8000990:	6013      	str	r3, [r2, #0]

  if (gSecondaryTimer > 0)
 8000992:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <ArcadeIT_SysTick_Handler+0x3c>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	b11b      	cbz	r3, 80009a0 <ArcadeIT_SysTick_Handler+0x18>
    gSecondaryTimer--;
 8000998:	4a0a      	ldr	r2, [pc, #40]	; (80009c4 <ArcadeIT_SysTick_Handler+0x3c>)
 800099a:	6813      	ldr	r3, [r2, #0]
 800099c:	3b01      	subs	r3, #1
 800099e:	6013      	str	r3, [r2, #0]

  if (gSystemTimer > 0)
 80009a0:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <ArcadeIT_SysTick_Handler+0x40>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	b11b      	cbz	r3, 80009ae <ArcadeIT_SysTick_Handler+0x26>
    gSystemTimer--;
 80009a6:	4a08      	ldr	r2, [pc, #32]	; (80009c8 <ArcadeIT_SysTick_Handler+0x40>)
 80009a8:	6813      	ldr	r3, [r2, #0]
 80009aa:	3b01      	subs	r3, #1
 80009ac:	6013      	str	r3, [r2, #0]

  // Run the tasks scheduler.
  if (gUnits & ARCADEIT_UNIT_SCHEDULER)
 80009ae:	4b07      	ldr	r3, [pc, #28]	; (80009cc <ArcadeIT_SysTick_Handler+0x44>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80009b6:	d100      	bne.n	80009ba <ArcadeIT_SysTick_Handler+0x32>
  {
      ArcadeIT_Scheduler_Update ();

  } // End if.

} // end ArcadeIT_SysTick_Handler.
 80009b8:	bd08      	pop	{r3, pc}
      ArcadeIT_Scheduler_Update ();
 80009ba:	f000 fd47 	bl	800144c <ArcadeIT_Scheduler_Update>
} // end ArcadeIT_SysTick_Handler.
 80009be:	e7fb      	b.n	80009b8 <ArcadeIT_SysTick_Handler+0x30>
 80009c0:	20000090 	.word	0x20000090
 80009c4:	20000088 	.word	0x20000088
 80009c8:	20000094 	.word	0x20000094
 80009cc:	20000098 	.word	0x20000098

080009d0 <SysTick_Handler>:

void SysTick_Handler(void)
{
 80009d0:	b508      	push	{r3, lr}
  ArcadeIT_SysTick_Handler();
 80009d2:	f7ff ffd9 	bl	8000988 <ArcadeIT_SysTick_Handler>

} // End SysTick_Handler.
 80009d6:	bd08      	pop	{r3, pc}

080009d8 <ArcadeIT_ArcadeIT_Start>:

} // end ArcadeIT_PowerUP_Systems

// /////////////////////////////////////////////////////////////////////////////
void ArcadeIT_ArcadeIT_Start (void)
{
 80009d8:	b508      	push	{r3, lr}
   * PARAMETERS:  None.
   * RETURNS:     Nothing
   */

  // ---------------------------------------------------------------------------
  if (gDevices & ARCADEIT_DEVICE_SERIAL)
 80009da:	4b1a      	ldr	r3, [pc, #104]	; (8000a44 <ArcadeIT_ArcadeIT_Start+0x6c>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80009e2:	d119      	bne.n	8000a18 <ArcadeIT_ArcadeIT_Start+0x40>

  } // End if.
  // ---------------------------------------------------------------------------
  // Clock and timer system. Thjis must be called before the SD card initialization.
  // 1ms System Tick timer.
  ArcadeIT_SysTick_Init ();
 80009e4:	f7ff ff1e 	bl	8000824 <ArcadeIT_SysTick_Init>

  // ---------------------------------------------------------------------------
  if (gDevices & ARCADEIT_DEVICE_TESTPADS)
 80009e8:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <ArcadeIT_ArcadeIT_Start+0x6c>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80009f0:	d117      	bne.n	8000a22 <ArcadeIT_ArcadeIT_Start+0x4a>
    //ArcadeIT_TestPad_Init (RCC_MCO2Source_PLLCLK, RCC_MCO2Div_4); // 45 MHz
    //ArcadeIT_TestPad_Init (RCC_MCO2Source_HSE, RCC_MCO2Div_1);    //  8 MHz

  } // End if.
  // ---------------------------------------------------------------------------
  if (gDevices & ARCADEIT_DEVICE_STATUSLED)
 80009f2:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <ArcadeIT_ArcadeIT_Start+0x6c>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80009fa:	d118      	bne.n	8000a2e <ArcadeIT_ArcadeIT_Start+0x56>

  } // End if.
  // ---------------------------------------------------------------------------
  // Systems scheduler task. This must be set AFTER the Systick has been initialized
  // because uses the ISR function that is handled by the Systick.
  if (gUnits & ARCADEIT_UNIT_SCHEDULER)
 80009fc:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <ArcadeIT_ArcadeIT_Start+0x70>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000a04:	d116      	bne.n	8000a34 <ArcadeIT_ArcadeIT_Start+0x5c>
    // Start the scheduler system.
    ArcadeIT_Scheduler_Task_Init ();

  } // End if.
  // ---------------------------------------------------------------------------
  if (gDevices & ARCADEIT_DEVICE_I2C)
 8000a06:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <ArcadeIT_ArcadeIT_Start+0x6c>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f013 0f20 	tst.w	r3, #32
 8000a0e:	d114      	bne.n	8000a3a <ArcadeIT_ArcadeIT_Start+0x62>
    ArcadeIT_I2C_Port_Init(100000);

  } // End if.

  // ---------------------------------------------------------------------------
  ArcadeIT_Serial_Port_String_Send(CURSOR_NEWLINE);
 8000a10:	480e      	ldr	r0, [pc, #56]	; (8000a4c <ArcadeIT_ArcadeIT_Start+0x74>)
 8000a12:	f000 fb1f 	bl	8001054 <ArcadeIT_Serial_Port_String_Send>

} // End ArcadeIT_Start
 8000a16:	bd08      	pop	{r3, pc}
    ArcadeIT_Serial_Port_Init (SYS_SERIAL_SPEED);
 8000a18:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8000a1c:	f000 fb24 	bl	8001068 <ArcadeIT_Serial_Port_Init>
 8000a20:	e7e0      	b.n	80009e4 <ArcadeIT_ArcadeIT_Start+0xc>
    ArcadeIT_TestPad_Init (RCC_MCO2Source_SYSCLK, RCC_MCO2Div_4);  //  45 MHz
 8000a22:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
 8000a26:	2000      	movs	r0, #0
 8000a28:	f000 fc74 	bl	8001314 <ArcadeIT_TestPad_Init>
 8000a2c:	e7e1      	b.n	80009f2 <ArcadeIT_ArcadeIT_Start+0x1a>
    ArcadeIT_Status_LEDS_Init ();
 8000a2e:	f000 fbdd 	bl	80011ec <ArcadeIT_Status_LEDS_Init>
 8000a32:	e7e3      	b.n	80009fc <ArcadeIT_ArcadeIT_Start+0x24>
    ArcadeIT_Scheduler_Task_Init ();
 8000a34:	f000 fcac 	bl	8001390 <ArcadeIT_Scheduler_Task_Init>
 8000a38:	e7e5      	b.n	8000a06 <ArcadeIT_ArcadeIT_Start+0x2e>
    ArcadeIT_I2C_Port_Init(100000);
 8000a3a:	4805      	ldr	r0, [pc, #20]	; (8000a50 <ArcadeIT_ArcadeIT_Start+0x78>)
 8000a3c:	f000 fa44 	bl	8000ec8 <ArcadeIT_I2C_Port_Init>
 8000a40:	e7e6      	b.n	8000a10 <ArcadeIT_ArcadeIT_Start+0x38>
 8000a42:	bf00      	nop
 8000a44:	20000084 	.word	0x20000084
 8000a48:	20000098 	.word	0x20000098
 8000a4c:	08003adc 	.word	0x08003adc
 8000a50:	000186a0 	.word	0x000186a0

08000a54 <ArcadeIT_Test_Bench>:

// ////////////////////////////////////////////////////////////////////////////
void ArcadeIT_Test_Bench (void)
{
 8000a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a58:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
  // The following variables hold the flags that start the features/peripherals
  // of the ArcadeIT System. It could be possible to configure the ArcadeIT System from a
  // *.ini text file on the SD Card, or other sources.

  // System features.
  gUnits = NONE
 8000a5c:	4bc4      	ldr	r3, [pc, #784]	; (8000d70 <ArcadeIT_Test_Bench+0x31c>)
 8000a5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a62:	601a      	str	r2, [r3, #0]
      //| ARCADEIT_UNIT_RTC           // Real time clock
      //| ARCADEIT_UNIT_DMM           // The custom ArcadeIt Dynamic Memory Manager
        | ARCADEIT_UNIT_SCHEDULER     // The task scheduler system.
      ;

  gStorage = NONE
 8000a64:	2400      	movs	r4, #0
 8000a66:	4bc3      	ldr	r3, [pc, #780]	; (8000d74 <ArcadeIT_Test_Bench+0x320>)
 8000a68:	601c      	str	r4, [r3, #0]
      //| ARCADEIT_STORAGE_RAM_DISK     // Ram disk with a FAT File system on the SRAM expansion
      //| ARCADEIT_STORAGE_SD_CARD_SPI1 // File system FAT on SD Card over the SPI1 port
      ;

  gDevices = NONE
 8000a6a:	4bc3      	ldr	r3, [pc, #780]	; (8000d78 <ArcadeIT_Test_Bench+0x324>)
 8000a6c:	4ac3      	ldr	r2, [pc, #780]	; (8000d7c <ArcadeIT_Test_Bench+0x328>)
 8000a6e:	601a      	str	r2, [r3, #0]
        | ARCADEIT_DEVICE_SERIAL        // Serial port USART 2
        | ARCADEIT_DEVICE_STATUSLED     // Two Status LEDs
        | ARCADEIT_DEVICE_TESTPADS      // System clock test pads
       ;

  ArcadeIT_ArcadeIT_Start();
 8000a70:	f7ff ffb2 	bl	80009d8 <ArcadeIT_ArcadeIT_Start>

#ifdef TEST // Test suite
  // ===========================================================================
  // Status LEDs
  for (uint8_t lCycles = 0; lCycles < 4; lCycles++)
 8000a74:	e00b      	b.n	8000a8e <ArcadeIT_Test_Bench+0x3a>
  {
    ArcadeIT_Status_LED1_Toggle();
 8000a76:	f000 fc1b 	bl	80012b0 <ArcadeIT_Status_LED1_Toggle>
    ArcadeIT_System_Delay(250);
 8000a7a:	20fa      	movs	r0, #250	; 0xfa
 8000a7c:	f7ff fef6 	bl	800086c <ArcadeIT_System_Delay>
    ArcadeIT_Status_LED2_Toggle();
 8000a80:	f000 fc2a 	bl	80012d8 <ArcadeIT_Status_LED2_Toggle>
    ArcadeIT_System_Delay(250);
 8000a84:	20fa      	movs	r0, #250	; 0xfa
 8000a86:	f7ff fef1 	bl	800086c <ArcadeIT_System_Delay>
  for (uint8_t lCycles = 0; lCycles < 4; lCycles++)
 8000a8a:	3401      	adds	r4, #1
 8000a8c:	b2e4      	uxtb	r4, r4
 8000a8e:	2c03      	cmp	r4, #3
 8000a90:	d9f1      	bls.n	8000a76 <ArcadeIT_Test_Bench+0x22>

  } // End if.
  // --------------------------------------------------------------------------
  // We setup the scheduler to blink the Status LED 1 at 1Hz (every seconds).

  if (gUnits & ARCADEIT_UNIT_SCHEDULER)
 8000a92:	4bb7      	ldr	r3, [pc, #732]	; (8000d70 <ArcadeIT_Test_Bench+0x31c>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000a9a:	d00d      	beq.n	8000ab8 <ArcadeIT_Test_Bench+0x64>
  {
    if (gDevices & ARCADEIT_DEVICE_STATUSLED)
 8000a9c:	4bb6      	ldr	r3, [pc, #728]	; (8000d78 <ArcadeIT_Test_Bench+0x324>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000aa4:	d008      	beq.n	8000ab8 <ArcadeIT_Test_Bench+0x64>
    {
          ArcadeIT_Scheduler_Task_Set (
 8000aa6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000aaa:	9300      	str	r3, [sp, #0]
 8000aac:	2300      	movs	r3, #0
 8000aae:	461a      	mov	r2, r3
 8000ab0:	49b3      	ldr	r1, [pc, #716]	; (8000d80 <ArcadeIT_Test_Bench+0x32c>)
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 fc86 	bl	80013c4 <ArcadeIT_Scheduler_Task_Set>

  // --------------------------------------------------------------------------
  char lString[256];
  // --------------------------------------------------------------------------
  // Shows 256 colors over the serial terminal
  if (gDevices & ARCADEIT_DEVICE_SERIAL)
 8000ab8:	4baf      	ldr	r3, [pc, #700]	; (8000d78 <ArcadeIT_Test_Bench+0x324>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8000ac0:	d036      	beq.n	8000b30 <ArcadeIT_Test_Bench+0xdc>
  {
    ArcadeIT_System_Delay(5000);
 8000ac2:	f241 3088 	movw	r0, #5000	; 0x1388
 8000ac6:	f7ff fed1 	bl	800086c <ArcadeIT_System_Delay>

    ArcadeIT_Serial_Port_String_Send(RESET_DEVICE);
 8000aca:	48ae      	ldr	r0, [pc, #696]	; (8000d84 <ArcadeIT_Test_Bench+0x330>)
 8000acc:	f000 fac2 	bl	8001054 <ArcadeIT_Serial_Port_String_Send>

    ArcadeIT_Status_LED2_Toggle();
 8000ad0:	f000 fc02 	bl	80012d8 <ArcadeIT_Status_LED2_Toggle>

    ArcadeIT_Serial_Port_String_Send("ANSI colors table on serial terminal:\n\r");
 8000ad4:	48ac      	ldr	r0, [pc, #688]	; (8000d88 <ArcadeIT_Test_Bench+0x334>)
 8000ad6:	f000 fabd 	bl	8001054 <ArcadeIT_Serial_Port_String_Send>

    for (uint8_t lRow = 0; lRow < 16; lRow++)
 8000ada:	2400      	movs	r4, #0
 8000adc:	e01a      	b.n	8000b14 <ArcadeIT_Test_Bench+0xc0>
    {
      for (uint8_t lCol = 0; lCol < 16; lCol++)
      {
        sprintf(lString, ATTR_COLOR_256_BG, lRow * 16 + lCol);
 8000ade:	eb05 1604 	add.w	r6, r5, r4, lsl #4
 8000ae2:	4632      	mov	r2, r6
 8000ae4:	49a9      	ldr	r1, [pc, #676]	; (8000d8c <ArcadeIT_Test_Bench+0x338>)
 8000ae6:	a852      	add	r0, sp, #328	; 0x148
 8000ae8:	f000 fd3e 	bl	8001568 <siprintf>
        ArcadeIT_Serial_Port_String_Send(lString);
 8000aec:	a852      	add	r0, sp, #328	; 0x148
 8000aee:	f000 fab1 	bl	8001054 <ArcadeIT_Serial_Port_String_Send>
        sprintf(lString, " %03d ", lRow * 16 + lCol);
 8000af2:	4632      	mov	r2, r6
 8000af4:	49a6      	ldr	r1, [pc, #664]	; (8000d90 <ArcadeIT_Test_Bench+0x33c>)
 8000af6:	a852      	add	r0, sp, #328	; 0x148
 8000af8:	f000 fd36 	bl	8001568 <siprintf>
        ArcadeIT_Serial_Port_String_Send(lString);
 8000afc:	a852      	add	r0, sp, #328	; 0x148
 8000afe:	f000 faa9 	bl	8001054 <ArcadeIT_Serial_Port_String_Send>
      for (uint8_t lCol = 0; lCol < 16; lCol++)
 8000b02:	3501      	adds	r5, #1
 8000b04:	b2ed      	uxtb	r5, r5
 8000b06:	2d0f      	cmp	r5, #15
 8000b08:	d9e9      	bls.n	8000ade <ArcadeIT_Test_Bench+0x8a>

      } // end for

      ArcadeIT_Serial_Port_String_Send(CURSOR_NEWLINE);
 8000b0a:	48a2      	ldr	r0, [pc, #648]	; (8000d94 <ArcadeIT_Test_Bench+0x340>)
 8000b0c:	f000 faa2 	bl	8001054 <ArcadeIT_Serial_Port_String_Send>
    for (uint8_t lRow = 0; lRow < 16; lRow++)
 8000b10:	3401      	adds	r4, #1
 8000b12:	b2e4      	uxtb	r4, r4
 8000b14:	2c0f      	cmp	r4, #15
 8000b16:	d801      	bhi.n	8000b1c <ArcadeIT_Test_Bench+0xc8>
      for (uint8_t lCol = 0; lCol < 16; lCol++)
 8000b18:	2500      	movs	r5, #0
 8000b1a:	e7f4      	b.n	8000b06 <ArcadeIT_Test_Bench+0xb2>

    } // end for

    sprintf(lString, ATTR_COLOR_256_BG, 20);
 8000b1c:	2214      	movs	r2, #20
 8000b1e:	499b      	ldr	r1, [pc, #620]	; (8000d8c <ArcadeIT_Test_Bench+0x338>)
 8000b20:	a852      	add	r0, sp, #328	; 0x148
 8000b22:	f000 fd21 	bl	8001568 <siprintf>
    ArcadeIT_Serial_Port_String_Send(lString);
 8000b26:	a852      	add	r0, sp, #328	; 0x148
 8000b28:	f000 fa94 	bl	8001054 <ArcadeIT_Serial_Port_String_Send>

    ArcadeIT_Status_LED2_Toggle();
 8000b2c:	f000 fbd4 	bl	80012d8 <ArcadeIT_Status_LED2_Toggle>

  } // End if.

  // --------------------------------------------------------------------------
  // Shows ANSI artwork over the serial terminal
  if (gDevices & ARCADEIT_DEVICE_SERIAL)
 8000b30:	4b91      	ldr	r3, [pc, #580]	; (8000d78 <ArcadeIT_Test_Bench+0x324>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8000b38:	d025      	beq.n	8000b86 <ArcadeIT_Test_Bench+0x132>
  {
    ArcadeIT_System_Delay(5000);
 8000b3a:	f241 3088 	movw	r0, #5000	; 0x1388
 8000b3e:	f7ff fe95 	bl	800086c <ArcadeIT_System_Delay>

    ArcadeIT_Serial_Port_String_Send(RESET_DEVICE);
 8000b42:	4890      	ldr	r0, [pc, #576]	; (8000d84 <ArcadeIT_Test_Bench+0x330>)
 8000b44:	f000 fa86 	bl	8001054 <ArcadeIT_Serial_Port_String_Send>

    ArcadeIT_Status_LED2_Toggle();
 8000b48:	f000 fbc6 	bl	80012d8 <ArcadeIT_Status_LED2_Toggle>

    ArcadeIT_Serial_Port_String_Send(CURSOR_NEWLINE);
 8000b4c:	4891      	ldr	r0, [pc, #580]	; (8000d94 <ArcadeIT_Test_Bench+0x340>)
 8000b4e:	f000 fa81 	bl	8001054 <ArcadeIT_Serial_Port_String_Send>
    ArcadeIT_Serial_Port_String_Send("ANSI art on serial terminal:\n\r");
 8000b52:	4891      	ldr	r0, [pc, #580]	; (8000d98 <ArcadeIT_Test_Bench+0x344>)
 8000b54:	f000 fa7e 	bl	8001054 <ArcadeIT_Serial_Port_String_Send>
    ArcadeIT_System_Delay(1000);
 8000b58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b5c:	f7ff fe86 	bl	800086c <ArcadeIT_System_Delay>

    unsigned char *lANSIArtPtr = (unsigned char *)&gANSIDemo1[0];
    for (uint16_t lChar = 0; lChar < 7352; lChar++)
 8000b60:	2400      	movs	r4, #0
    unsigned char *lANSIArtPtr = (unsigned char *)&gANSIDemo1[0];
 8000b62:	4b8e      	ldr	r3, [pc, #568]	; (8000d9c <ArcadeIT_Test_Bench+0x348>)
    for (uint16_t lChar = 0; lChar < 7352; lChar++)
 8000b64:	e006      	b.n	8000b74 <ArcadeIT_Test_Bench+0x120>
    {
      ArcadeIT_Serial_Port_Char_Send(*lANSIArtPtr++);
 8000b66:	1c5d      	adds	r5, r3, #1
 8000b68:	7818      	ldrb	r0, [r3, #0]
 8000b6a:	f000 fa69 	bl	8001040 <ArcadeIT_Serial_Port_Char_Send>
    for (uint16_t lChar = 0; lChar < 7352; lChar++)
 8000b6e:	3401      	adds	r4, #1
 8000b70:	b2a4      	uxth	r4, r4
      ArcadeIT_Serial_Port_Char_Send(*lANSIArtPtr++);
 8000b72:	462b      	mov	r3, r5
    for (uint16_t lChar = 0; lChar < 7352; lChar++)
 8000b74:	f641 42b7 	movw	r2, #7351	; 0x1cb7
 8000b78:	4294      	cmp	r4, r2
 8000b7a:	d9f4      	bls.n	8000b66 <ArcadeIT_Test_Bench+0x112>

    } // end for

    ArcadeIT_Serial_Port_String_Send(CURSOR_NEWLINE);
 8000b7c:	4885      	ldr	r0, [pc, #532]	; (8000d94 <ArcadeIT_Test_Bench+0x340>)
 8000b7e:	f000 fa69 	bl	8001054 <ArcadeIT_Serial_Port_String_Send>

    ArcadeIT_Status_LED2_Toggle();
 8000b82:	f000 fba9 	bl	80012d8 <ArcadeIT_Status_LED2_Toggle>

  } // End if.

  // --------------------------------------------------------------------------
  // Shows terminal TUI ANSI widgets demo over the serial terminal
  if (gDevices & ARCADEIT_DEVICE_SERIAL)
 8000b86:	4b7c      	ldr	r3, [pc, #496]	; (8000d78 <ArcadeIT_Test_Bench+0x324>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8000b8e:	d06b      	beq.n	8000c68 <ArcadeIT_Test_Bench+0x214>
  {
    ArcadeIT_System_Delay(5000);
 8000b90:	f241 3088 	movw	r0, #5000	; 0x1388
 8000b94:	f7ff fe6a 	bl	800086c <ArcadeIT_System_Delay>

    ArcadeIT_Serial_Port_String_Send(RESET_DEVICE);
 8000b98:	487a      	ldr	r0, [pc, #488]	; (8000d84 <ArcadeIT_Test_Bench+0x330>)
 8000b9a:	f000 fa5b 	bl	8001054 <ArcadeIT_Serial_Port_String_Send>

    ArcadeIT_Serial_Port_String_Send(CURSOR_OFF);
 8000b9e:	4880      	ldr	r0, [pc, #512]	; (8000da0 <ArcadeIT_Test_Bench+0x34c>)
 8000ba0:	f000 fa58 	bl	8001054 <ArcadeIT_Serial_Port_String_Send>

    label_t  title1   = {1, 0, 220, 18, "OUTPUT1", LABEL_SKIN4_ANSI};
 8000ba4:	ab02      	add	r3, sp, #8
 8000ba6:	4c7f      	ldr	r4, [pc, #508]	; (8000da4 <ArcadeIT_Test_Bench+0x350>)
 8000ba8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000bac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    frame_t  window1 = {1, 1, 40, 10, 27, 18, title1, FRAME_SKIN_ANSI};
 8000bb0:	2701      	movs	r7, #1
 8000bb2:	f88d 7014 	strb.w	r7, [sp, #20]
 8000bb6:	f88d 7015 	strb.w	r7, [sp, #21]
 8000bba:	2228      	movs	r2, #40	; 0x28
 8000bbc:	f88d 2016 	strb.w	r2, [sp, #22]
 8000bc0:	f04f 080a 	mov.w	r8, #10
 8000bc4:	f88d 8017 	strb.w	r8, [sp, #23]
 8000bc8:	221b      	movs	r2, #27
 8000bca:	f88d 2018 	strb.w	r2, [sp, #24]
 8000bce:	2212      	movs	r2, #18
 8000bd0:	f88d 2019 	strb.w	r2, [sp, #25]
 8000bd4:	ad07      	add	r5, sp, #28
 8000bd6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000bda:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000bde:	4b72      	ldr	r3, [pc, #456]	; (8000da8 <ArcadeIT_Test_Bench+0x354>)
 8000be0:	930a      	str	r3, [sp, #40]	; 0x28
    slider_h_t sliderh1 = {2, 39, 9, false, 0.0, 10.0, 2.0, 0.0, 0, 0, SLIDER_SKIN_ANSI};
 8000be2:	ad0b      	add	r5, sp, #44	; 0x2c
 8000be4:	f104 060c 	add.w	r6, r4, #12
 8000be8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000bea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bec:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8000bf0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    slider_v_t sliderv1 = {38, 2, 9, false, 0.0, 10.0, 2.0, 0.0, 0, 0, SLIDER_SKIN_ANSI};
 8000bf4:	ad12      	add	r5, sp, #72	; 0x48
 8000bf6:	3428      	adds	r4, #40	; 0x28
 8000bf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bfc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000c00:	e885 0007 	stmia.w	r5, {r0, r1, r2}

    ArcadeIT_System_Delay(2000);
 8000c04:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c08:	f7ff fe30 	bl	800086c <ArcadeIT_System_Delay>
    ArcadeIT_Status_LED2_Toggle();
 8000c0c:	f000 fb64 	bl	80012d8 <ArcadeIT_Status_LED2_Toggle>

    frame_draw(&window1);
 8000c10:	a805      	add	r0, sp, #20
 8000c12:	f7ff fbf3 	bl	80003fc <frame_draw>

    slider_h_refresh(&sliderh1);
 8000c16:	a80b      	add	r0, sp, #44	; 0x2c
 8000c18:	f7ff fcce 	bl	80005b8 <slider_h_refresh>
    slider_v_refresh(&sliderv1);
 8000c1c:	a812      	add	r0, sp, #72	; 0x48
 8000c1e:	f7ff fd5d 	bl	80006dc <slider_v_refresh>

    char lBufferfg[100], lBufferbg[100];
    uint8_t lFlags = WINDOW_SLIDER_H | WINDOW_SLIDER_V | WINDOW_TITLE;
    window_t window2 = {"Window", 1, 6, 20, 10, 0, 0, WINDOW_SKIN_ANSI, lBufferfg, lBufferbg, lFlags};
 8000c22:	4b62      	ldr	r3, [pc, #392]	; (8000dac <ArcadeIT_Test_Bench+0x358>)
 8000c24:	9319      	str	r3, [sp, #100]	; 0x64
 8000c26:	f88d 7068 	strb.w	r7, [sp, #104]	; 0x68
 8000c2a:	2306      	movs	r3, #6
 8000c2c:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
 8000c30:	2314      	movs	r3, #20
 8000c32:	f88d 306a 	strb.w	r3, [sp, #106]	; 0x6a
 8000c36:	f88d 806b 	strb.w	r8, [sp, #107]	; 0x6b
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8000c40:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8000c44:	4b5a      	ldr	r3, [pc, #360]	; (8000db0 <ArcadeIT_Test_Bench+0x35c>)
 8000c46:	931c      	str	r3, [sp, #112]	; 0x70
 8000c48:	ab20      	add	r3, sp, #128	; 0x80
 8000c4a:	931d      	str	r3, [sp, #116]	; 0x74
 8000c4c:	ab39      	add	r3, sp, #228	; 0xe4
 8000c4e:	931e      	str	r3, [sp, #120]	; 0x78
 8000c50:	2307      	movs	r3, #7
 8000c52:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
    window_draw(&window2);
 8000c56:	a819      	add	r0, sp, #100	; 0x64
 8000c58:	f7ff fd4c 	bl	80006f4 <window_draw>
    ArcadeIT_System_Delay(2000);
 8000c5c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c60:	f7ff fe04 	bl	800086c <ArcadeIT_System_Delay>

    ArcadeIT_Status_LED2_Toggle();
 8000c64:	f000 fb38 	bl	80012d8 <ArcadeIT_Status_LED2_Toggle>

  } // End if.

  // ---------------------------------------------------------------------------
  // I2C Tests
  if (gDevices & ARCADEIT_DEVICE_I2C)
 8000c68:	4b43      	ldr	r3, [pc, #268]	; (8000d78 <ArcadeIT_Test_Bench+0x324>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f013 0f20 	tst.w	r3, #32
 8000c70:	d076      	beq.n	8000d60 <ArcadeIT_Test_Bench+0x30c>
      ===                          ===           ===   |     |
      GND                          GND           GND   +-----+
                                                         I2C
       */

    uint8_t lDataRead = 0x0, lDataToWrite = 0xA5;
 8000c72:	2200      	movs	r2, #0
 8000c74:	f88d 20e4 	strb.w	r2, [sp, #228]	; 0xe4
    uint16_t lAddress = 0x0000;

    if (gDevices & ARCADEIT_DEVICE_SERIAL)
 8000c78:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8000c7c:	d00f      	beq.n	8000c9e <ArcadeIT_Test_Bench+0x24a>
    {
      ArcadeIT_System_Delay(5000);
 8000c7e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000c82:	f7ff fdf3 	bl	800086c <ArcadeIT_System_Delay>

      ArcadeIT_Serial_Port_String_Send(RESET_DEVICE);
 8000c86:	483f      	ldr	r0, [pc, #252]	; (8000d84 <ArcadeIT_Test_Bench+0x330>)
 8000c88:	f000 f9e4 	bl	8001054 <ArcadeIT_Serial_Port_String_Send>

      sprintf(lString, "Writing '0x%02X' to memory @ 0x%04X ", lDataToWrite, lAddress);
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	22a5      	movs	r2, #165	; 0xa5
 8000c90:	4948      	ldr	r1, [pc, #288]	; (8000db4 <ArcadeIT_Test_Bench+0x360>)
 8000c92:	a852      	add	r0, sp, #328	; 0x148
 8000c94:	f000 fc68 	bl	8001568 <siprintf>
      ArcadeIT_Serial_Port_String_Send(lString);
 8000c98:	a852      	add	r0, sp, #328	; 0x148
 8000c9a:	f000 f9db 	bl	8001054 <ArcadeIT_Serial_Port_String_Send>

    } // end if

    // Write byte to the memory starting from address 0
    // Start condition
    ArcadeIT_I2C_StartCommunication();
 8000c9e:	f000 f8bd 	bl	8000e1c <ArcadeIT_I2C_StartCommunication>
    ArcadeIT_I2C_WaitEvent(I2C_EVENT_MASTER_MODE_SELECT);
 8000ca2:	4845      	ldr	r0, [pc, #276]	; (8000db8 <ArcadeIT_Test_Bench+0x364>)
 8000ca4:	f000 f8a8 	bl	8000df8 <ArcadeIT_I2C_WaitEvent>
    // Send byte: Control byte
    ArcadeIT_I2C_Send7bitAddress(0xA0, I2C_Direction_Transmitter);
 8000ca8:	2100      	movs	r1, #0
 8000caa:	20a0      	movs	r0, #160	; 0xa0
 8000cac:	f000 f8d2 	bl	8000e54 <ArcadeIT_I2C_Send7bitAddress>
    ArcadeIT_I2C_WaitEvent(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED);
 8000cb0:	4842      	ldr	r0, [pc, #264]	; (8000dbc <ArcadeIT_Test_Bench+0x368>)
 8000cb2:	f000 f8a1 	bl	8000df8 <ArcadeIT_I2C_WaitEvent>
    // Send bytes: Set internal 16-bit address
    ArcadeIT_I2C_Send(lAddress >> 8);
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f000 f8d8 	bl	8000e6c <ArcadeIT_I2C_Send>
    ArcadeIT_I2C_Send(lAddress & 0xFF);
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f000 f8d5 	bl	8000e6c <ArcadeIT_I2C_Send>
    // Send byte: Data byte
    ArcadeIT_I2C_Send(lDataToWrite);
 8000cc2:	20a5      	movs	r0, #165	; 0xa5
 8000cc4:	f000 f8d2 	bl	8000e6c <ArcadeIT_I2C_Send>
    // End condition
    ArcadeIT_I2C_EndCommunication();
 8000cc8:	f000 f8bc 	bl	8000e44 <ArcadeIT_I2C_EndCommunication>
    // Wait for internal write operation completed
    ArcadeIT_System_Delay(5);
 8000ccc:	2005      	movs	r0, #5
 8000cce:	f7ff fdcd 	bl	800086c <ArcadeIT_System_Delay>

    if (gDevices & ARCADEIT_DEVICE_SERIAL)
 8000cd2:	4b29      	ldr	r3, [pc, #164]	; (8000d78 <ArcadeIT_Test_Bench+0x324>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8000cda:	d00a      	beq.n	8000cf2 <ArcadeIT_Test_Bench+0x29e>
    {
      ArcadeIT_Serial_Port_String_Send("-> done!\r\n");
 8000cdc:	4838      	ldr	r0, [pc, #224]	; (8000dc0 <ArcadeIT_Test_Bench+0x36c>)
 8000cde:	f000 f9b9 	bl	8001054 <ArcadeIT_Serial_Port_String_Send>

      sprintf(lString, "Reading memory @ 0x%04X ", lAddress);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	4937      	ldr	r1, [pc, #220]	; (8000dc4 <ArcadeIT_Test_Bench+0x370>)
 8000ce6:	a852      	add	r0, sp, #328	; 0x148
 8000ce8:	f000 fc3e 	bl	8001568 <siprintf>
      ArcadeIT_Serial_Port_String_Send(lString);
 8000cec:	a852      	add	r0, sp, #328	; 0x148
 8000cee:	f000 f9b1 	bl	8001054 <ArcadeIT_Serial_Port_String_Send>

    } // end if

    // Read byte to the memory starting from address 0
    // Start condition
    ArcadeIT_I2C_StartCommunication();
 8000cf2:	f000 f893 	bl	8000e1c <ArcadeIT_I2C_StartCommunication>
    ArcadeIT_I2C_WaitEvent(I2C_EVENT_MASTER_MODE_SELECT);
 8000cf6:	4c30      	ldr	r4, [pc, #192]	; (8000db8 <ArcadeIT_Test_Bench+0x364>)
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	f000 f87d 	bl	8000df8 <ArcadeIT_I2C_WaitEvent>
    // Send byte: Control byte
    ArcadeIT_I2C_Send7bitAddress(0xA0, I2C_Direction_Transmitter);
 8000cfe:	2100      	movs	r1, #0
 8000d00:	20a0      	movs	r0, #160	; 0xa0
 8000d02:	f000 f8a7 	bl	8000e54 <ArcadeIT_I2C_Send7bitAddress>
    ArcadeIT_I2C_WaitEvent(I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED);
 8000d06:	482d      	ldr	r0, [pc, #180]	; (8000dbc <ArcadeIT_Test_Bench+0x368>)
 8000d08:	f000 f876 	bl	8000df8 <ArcadeIT_I2C_WaitEvent>
    // Send bytes: Set internal 16-bit address
    ArcadeIT_I2C_Send(lAddress >> 8);
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	f000 f8ad 	bl	8000e6c <ArcadeIT_I2C_Send>
    ArcadeIT_I2C_Send(lAddress & 0xFF);
 8000d12:	2000      	movs	r0, #0
 8000d14:	f000 f8aa 	bl	8000e6c <ArcadeIT_I2C_Send>
    // Address set, restart communication to switch master in receive mode
    ArcadeIT_I2C_StartCommunication();
 8000d18:	f000 f880 	bl	8000e1c <ArcadeIT_I2C_StartCommunication>
    ArcadeIT_I2C_WaitEvent(I2C_EVENT_MASTER_MODE_SELECT);
 8000d1c:	4620      	mov	r0, r4
 8000d1e:	f000 f86b 	bl	8000df8 <ArcadeIT_I2C_WaitEvent>
    // Send byte: Control byte
    ArcadeIT_I2C_Send7bitAddress(0xA0, I2C_Direction_Receiver);
 8000d22:	2101      	movs	r1, #1
 8000d24:	20a0      	movs	r0, #160	; 0xa0
 8000d26:	f000 f895 	bl	8000e54 <ArcadeIT_I2C_Send7bitAddress>
    // receive a byte without sending an Acknowledge
    ArcadeIT_I2C_Receive(&lDataRead, I2C_NOACK);
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	a839      	add	r0, sp, #228	; 0xe4
 8000d2e:	f000 f8a9 	bl	8000e84 <ArcadeIT_I2C_Receive>
    // End condition
    ArcadeIT_I2C_EndCommunication();
 8000d32:	f000 f887 	bl	8000e44 <ArcadeIT_I2C_EndCommunication>

    if (gDevices & ARCADEIT_DEVICE_SERIAL)
 8000d36:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <ArcadeIT_Test_Bench+0x324>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8000d3e:	d00f      	beq.n	8000d60 <ArcadeIT_Test_Bench+0x30c>
    {
      sprintf(lString, "-> 0x%02X, ", lDataRead);
 8000d40:	f89d 20e4 	ldrb.w	r2, [sp, #228]	; 0xe4
 8000d44:	4920      	ldr	r1, [pc, #128]	; (8000dc8 <ArcadeIT_Test_Bench+0x374>)
 8000d46:	a852      	add	r0, sp, #328	; 0x148
 8000d48:	f000 fc0e 	bl	8001568 <siprintf>
      ArcadeIT_Serial_Port_String_Send(lString);
 8000d4c:	a852      	add	r0, sp, #328	; 0x148
 8000d4e:	f000 f981 	bl	8001054 <ArcadeIT_Serial_Port_String_Send>

      ArcadeIT_Serial_Port_String_Send(lDataRead == lDataToWrite ? "correct\r\n" : "wrong!\r\n");
 8000d52:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8000d56:	2ba5      	cmp	r3, #165	; 0xa5
 8000d58:	d13a      	bne.n	8000dd0 <ArcadeIT_Test_Bench+0x37c>
 8000d5a:	481c      	ldr	r0, [pc, #112]	; (8000dcc <ArcadeIT_Test_Bench+0x378>)
 8000d5c:	f000 f97a 	bl	8001054 <ArcadeIT_Serial_Port_String_Send>

  while (1)
  {

    // Periodic tasks
    if (gUnits & ARCADEIT_UNIT_SCHEDULER)
 8000d60:	4b03      	ldr	r3, [pc, #12]	; (8000d70 <ArcadeIT_Test_Bench+0x31c>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000d68:	d0fa      	beq.n	8000d60 <ArcadeIT_Test_Bench+0x30c>
    {
      ArcadeIT_Scheduler_Run ();
 8000d6a:	f000 fbb3 	bl	80014d4 <ArcadeIT_Scheduler_Run>
 8000d6e:	e7f7      	b.n	8000d60 <ArcadeIT_Test_Bench+0x30c>
 8000d70:	20000098 	.word	0x20000098
 8000d74:	2000008c 	.word	0x2000008c
 8000d78:	20000084 	.word	0x20000084
 8000d7c:	00034020 	.word	0x00034020
 8000d80:	080012b1 	.word	0x080012b1
 8000d84:	08003af8 	.word	0x08003af8
 8000d88:	08003afc 	.word	0x08003afc
 8000d8c:	08003b24 	.word	0x08003b24
 8000d90:	08003b30 	.word	0x08003b30
 8000d94:	08003adc 	.word	0x08003adc
 8000d98:	08003b38 	.word	0x08003b38
 8000d9c:	08001e0c 	.word	0x08001e0c
 8000da0:	08003b58 	.word	0x08003b58
 8000da4:	08001d8c 	.word	0x08001d8c
 8000da8:	08001e00 	.word	0x08001e00
 8000dac:	08003b60 	.word	0x08003b60
 8000db0:	08003b68 	.word	0x08003b68
 8000db4:	08003b8c 	.word	0x08003b8c
 8000db8:	00030001 	.word	0x00030001
 8000dbc:	00070082 	.word	0x00070082
 8000dc0:	08003bb4 	.word	0x08003bb4
 8000dc4:	08003bc0 	.word	0x08003bc0
 8000dc8:	08003bdc 	.word	0x08003bdc
 8000dcc:	08003ae0 	.word	0x08003ae0
      ArcadeIT_Serial_Port_String_Send(lDataRead == lDataToWrite ? "correct\r\n" : "wrong!\r\n");
 8000dd0:	4800      	ldr	r0, [pc, #0]	; (8000dd4 <ArcadeIT_Test_Bench+0x380>)
 8000dd2:	e7c3      	b.n	8000d5c <ArcadeIT_Test_Bench+0x308>
 8000dd4:	08003aec 	.word	0x08003aec

08000dd8 <ArcadeIT_I2C_CheckEvent>:
   */

  uint32_t lastevent = 0;

  // Get the last event value from I2C status register
  lastevent = (I2C2->SR1 | (I2C2->SR2 << 16)) & FLAG_MASK;
 8000dd8:	4a06      	ldr	r2, [pc, #24]	; (8000df4 <ArcadeIT_I2C_CheckEvent+0x1c>)
 8000dda:	6953      	ldr	r3, [r2, #20]
 8000ddc:	6992      	ldr	r2, [r2, #24]
 8000dde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000de2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

  // Return status
  return (lastevent & pEvent) == pEvent ? 1 : 0;
 8000de6:	ea30 0303 	bics.w	r3, r0, r3

} // end ArcadeIT_I2C_CheckEvent
 8000dea:	bf0c      	ite	eq
 8000dec:	2001      	moveq	r0, #1
 8000dee:	2000      	movne	r0, #0
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	40005800 	.word	0x40005800

08000df8 <ArcadeIT_I2C_WaitEvent>:

// -----------------------------------------------------------------------------
int8_t ArcadeIT_I2C_WaitEvent(
    uint32_t pEvent // the event flags
    )
{
 8000df8:	b538      	push	{r3, r4, r5, lr}
 8000dfa:	4605      	mov	r5, r0
   * RETURNS:     Nothing.
   */

  int8_t lResult = 1;

  int32_t lTimeoutTimer = I2C_TIMEOUT_TIME;
 8000dfc:	4c06      	ldr	r4, [pc, #24]	; (8000e18 <ArcadeIT_I2C_WaitEvent+0x20>)

  // waits until the event happens on the status registers
  while(ArcadeIT_I2C_CheckEvent(pEvent)==0)
 8000dfe:	4628      	mov	r0, r5
 8000e00:	f7ff ffea 	bl	8000dd8 <ArcadeIT_I2C_CheckEvent>
 8000e04:	b920      	cbnz	r0, 8000e10 <ArcadeIT_I2C_WaitEvent+0x18>
  {
    if (lTimeoutTimer-- < 0)
 8000e06:	1e63      	subs	r3, r4, #1
 8000e08:	2c00      	cmp	r4, #0
 8000e0a:	db03      	blt.n	8000e14 <ArcadeIT_I2C_WaitEvent+0x1c>
 8000e0c:	461c      	mov	r4, r3
 8000e0e:	e7f6      	b.n	8000dfe <ArcadeIT_I2C_WaitEvent+0x6>
  int8_t lResult = 1;
 8000e10:	2001      	movs	r0, #1

  } // end while

  return lResult;

} // end ArcadeIT_I2C_WaitEvent
 8000e12:	bd38      	pop	{r3, r4, r5, pc}
      lResult = 0;
 8000e14:	2000      	movs	r0, #0
 8000e16:	e7fc      	b.n	8000e12 <ArcadeIT_I2C_WaitEvent+0x1a>
 8000e18:	0aba9500 	.word	0x0aba9500

08000e1c <ArcadeIT_I2C_StartCommunication>:

// -----------------------------------------------------------------------------
int8_t ArcadeIT_I2C_StartCommunication(void)
{
 8000e1c:	b508      	push	{r3, lr}
   * RETURNS:     Nothing.
   */

  int8_t lResult = 0;

  while(I2C2->SR2 & I2C_FLAG_BUSY); // wait for bus free
 8000e1e:	4b07      	ldr	r3, [pc, #28]	; (8000e3c <ArcadeIT_I2C_StartCommunication+0x20>)
 8000e20:	699b      	ldr	r3, [r3, #24]
 8000e22:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000e26:	d1fa      	bne.n	8000e1e <ArcadeIT_I2C_StartCommunication+0x2>

  // Generate a START condition
  I2C2->CR1 |= I2C_CR1_START;
 8000e28:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <ArcadeIT_I2C_StartCommunication+0x20>)
 8000e2a:	6813      	ldr	r3, [r2, #0]
 8000e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e30:	6013      	str	r3, [r2, #0]

  // Wait until the Master gets the control of the line
  lResult = ArcadeIT_I2C_WaitEvent(I2C_EVENT_MASTER_MODE_SELECT);
 8000e32:	4803      	ldr	r0, [pc, #12]	; (8000e40 <ArcadeIT_I2C_StartCommunication+0x24>)
 8000e34:	f7ff ffe0 	bl	8000df8 <ArcadeIT_I2C_WaitEvent>

  return lResult;

} // end ArcadeIT_I2C_StartCommunication
 8000e38:	bd08      	pop	{r3, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40005800 	.word	0x40005800
 8000e40:	00030001 	.word	0x00030001

08000e44 <ArcadeIT_I2C_EndCommunication>:
   * PARAMETERS:  None.
   * RETURNS:     Nothing.
   */

  // Generate a STOP condition
  I2C2->CR1 |= I2C_CR1_STOP;
 8000e44:	4a02      	ldr	r2, [pc, #8]	; (8000e50 <ArcadeIT_I2C_EndCommunication+0xc>)
 8000e46:	6813      	ldr	r3, [r2, #0]
 8000e48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e4c:	6013      	str	r3, [r2, #0]

} // end ArcadeIT_I2C_EndCommunication
 8000e4e:	4770      	bx	lr
 8000e50:	40005800 	.word	0x40005800

08000e54 <ArcadeIT_I2C_Send7bitAddress>:
   */

  int8_t lResult = 1;

  // Test on the direction to set/reset the read/write bit
  if (pDirection != I2C_Direction_Transmitter)
 8000e54:	b929      	cbnz	r1, 8000e62 <ArcadeIT_I2C_Send7bitAddress+0xe>
    pAddress |= I2C_OAR1_ADD0;
  }
  else
  {
    // Reset the address bit0 for write
    pAddress &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 8000e56:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
  }

  // Send the address
  I2C2->DR = pAddress;
 8000e5a:	4b03      	ldr	r3, [pc, #12]	; (8000e68 <ArcadeIT_I2C_Send7bitAddress+0x14>)
 8000e5c:	6118      	str	r0, [r3, #16]

  return lResult;

} // end ArcadeIT_I2C_Send7bitAddress
 8000e5e:	2001      	movs	r0, #1
 8000e60:	4770      	bx	lr
    pAddress |= I2C_OAR1_ADD0;
 8000e62:	f040 0001 	orr.w	r0, r0, #1
 8000e66:	e7f8      	b.n	8000e5a <ArcadeIT_I2C_Send7bitAddress+0x6>
 8000e68:	40005800 	.word	0x40005800

08000e6c <ArcadeIT_I2C_Send>:

// -----------------------------------------------------------------------------
int8_t ArcadeIT_I2C_Send(
    uint8_t pData       // byte data to send
    )
{
 8000e6c:	b508      	push	{r3, lr}
   * RETURNS:     Nothing.
   */

  int8_t lResult = 0;

  I2C2->DR = pData;
 8000e6e:	4b03      	ldr	r3, [pc, #12]	; (8000e7c <ArcadeIT_I2C_Send+0x10>)
 8000e70:	6118      	str	r0, [r3, #16]

  // wait for I2Cx EV8_2, byte has been transmitted
  lResult = ArcadeIT_I2C_WaitEvent(I2C_EVENT_MASTER_BYTE_TRANSMITTED);
 8000e72:	4803      	ldr	r0, [pc, #12]	; (8000e80 <ArcadeIT_I2C_Send+0x14>)
 8000e74:	f7ff ffc0 	bl	8000df8 <ArcadeIT_I2C_WaitEvent>

  return lResult;

} // end ArcadeIT_I2C_Send
 8000e78:	bd08      	pop	{r3, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40005800 	.word	0x40005800
 8000e80:	00070084 	.word	0x00070084

08000e84 <ArcadeIT_I2C_Receive>:
// -----------------------------------------------------------------------------
int8_t ArcadeIT_I2C_Receive(
    uint8_t *pData,       // ponter to byte where to store the received data
    uint8_t pAcknowledge  // flag to enable or disable the acknowledge event
    )
{
 8000e84:	b510      	push	{r4, lr}
 8000e86:	4604      	mov	r4, r0
   * RETURNS:     Nothing.
   */

  int8_t lResult = 0;

  if(pAcknowledge)
 8000e88:	b169      	cbz	r1, 8000ea6 <ArcadeIT_I2C_Receive+0x22>
    I2C2->CR1 |= I2C_CR1_ACK;
 8000e8a:	4a0d      	ldr	r2, [pc, #52]	; (8000ec0 <ArcadeIT_I2C_Receive+0x3c>)
 8000e8c:	6813      	ldr	r3, [r2, #0]
 8000e8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e92:	6013      	str	r3, [r2, #0]
  else
    I2C2->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);

  lResult = ArcadeIT_I2C_WaitEvent(I2C_EVENT_MASTER_BYTE_RECEIVED);
 8000e94:	480b      	ldr	r0, [pc, #44]	; (8000ec4 <ArcadeIT_I2C_Receive+0x40>)
 8000e96:	f7ff ffaf 	bl	8000df8 <ArcadeIT_I2C_WaitEvent>

  if (lResult)
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	b958      	cbnz	r0, 8000eb6 <ArcadeIT_I2C_Receive+0x32>
    *pData = (uint8_t)I2C2->DR;
  else
    *pData = 0;
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	7022      	strb	r2, [r4, #0]

  return lResult;

} // end ArcadeIT_I2C_Receive
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	bd10      	pop	{r4, pc}
    I2C2->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 8000ea6:	4a06      	ldr	r2, [pc, #24]	; (8000ec0 <ArcadeIT_I2C_Receive+0x3c>)
 8000ea8:	6813      	ldr	r3, [r2, #0]
 8000eaa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000eae:	041b      	lsls	r3, r3, #16
 8000eb0:	0c1b      	lsrs	r3, r3, #16
 8000eb2:	6013      	str	r3, [r2, #0]
 8000eb4:	e7ee      	b.n	8000e94 <ArcadeIT_I2C_Receive+0x10>
    *pData = (uint8_t)I2C2->DR;
 8000eb6:	4a02      	ldr	r2, [pc, #8]	; (8000ec0 <ArcadeIT_I2C_Receive+0x3c>)
 8000eb8:	6912      	ldr	r2, [r2, #16]
 8000eba:	7022      	strb	r2, [r4, #0]
 8000ebc:	e7f1      	b.n	8000ea2 <ArcadeIT_I2C_Receive+0x1e>
 8000ebe:	bf00      	nop
 8000ec0:	40005800 	.word	0x40005800
 8000ec4:	00030040 	.word	0x00030040

08000ec8 <ArcadeIT_I2C_Port_Init>:

// -----------------------------------------------------------------------------
void ArcadeIT_I2C_Port_Init(
    uint32_t pClock     // The frequency clock of the I2C device
    )
{
 8000ec8:	b538      	push	{r3, r4, r5, lr}
 8000eca:	4605      	mov	r5, r0
  uint32_t lPinPosition;

  // configure the pins of the I2C
  lPinPosition = (SYS_I2C_SCL_PIN_NO * 2);

  if ((RCC->AHB1ENR & RCC_AHB1Periph_GPIOH) == FALSE) RCC->AHB1ENR |= RCC_AHB1Periph_GPIOH;
 8000ecc:	4b55      	ldr	r3, [pc, #340]	; (8001024 <ArcadeIT_I2C_Port_Init+0x15c>)
 8000ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000ed4:	d104      	bne.n	8000ee0 <ArcadeIT_I2C_Port_Init+0x18>
 8000ed6:	4a53      	ldr	r2, [pc, #332]	; (8001024 <ArcadeIT_I2C_Port_Init+0x15c>)
 8000ed8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000eda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ede:	6313      	str	r3, [r2, #48]	; 0x30
  if ((RCC->APB1ENR & RCC_APB1Periph_I2C2) == FALSE) RCC->APB1ENR |= RCC_APB1Periph_I2C2;
 8000ee0:	4b50      	ldr	r3, [pc, #320]	; (8001024 <ArcadeIT_I2C_Port_Init+0x15c>)
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000ee8:	d104      	bne.n	8000ef4 <ArcadeIT_I2C_Port_Init+0x2c>
 8000eea:	4a4e      	ldr	r2, [pc, #312]	; (8001024 <ArcadeIT_I2C_Port_Init+0x15c>)
 8000eec:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000eee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ef2:	6413      	str	r3, [r2, #64]	; 0x40

  // Configure the pin PH4 as alternate function 4 (I2C SCL).
  SYS_I2C_SCL_PER->MODER   &= ~GPIO_MODER_MODER4;
 8000ef4:	4b4c      	ldr	r3, [pc, #304]	; (8001028 <ArcadeIT_I2C_Port_Init+0x160>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000efc:	601a      	str	r2, [r3, #0]
  SYS_I2C_SCL_PER->MODER   |= (((uint32_t)GPIO_Mode_AF) << lPinPosition);
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f04:	601a      	str	r2, [r3, #0]

  SYS_I2C_SCL_PER->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR4;
 8000f06:	689a      	ldr	r2, [r3, #8]
 8000f08:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000f0c:	609a      	str	r2, [r3, #8]
  SYS_I2C_SCL_PER->OSPEEDR |= ((uint32_t)(GPIO_Speed_2MHz) << lPinPosition);
 8000f0e:	689a      	ldr	r2, [r3, #8]
 8000f10:	609a      	str	r2, [r3, #8]

  // type output
  SYS_I2C_SCL_PER->OTYPER  &= ~GPIO_OTYPER_OT_4;
 8000f12:	685a      	ldr	r2, [r3, #4]
 8000f14:	f022 0210 	bic.w	r2, r2, #16
 8000f18:	605a      	str	r2, [r3, #4]
  SYS_I2C_SCL_PER->OTYPER  |= (uint16_t)(GPIO_OType_OD << SYS_I2C_SCL_PIN_NO);
 8000f1a:	685a      	ldr	r2, [r3, #4]
 8000f1c:	f042 0210 	orr.w	r2, r2, #16
 8000f20:	605a      	str	r2, [r3, #4]

  // pull up configuration
  SYS_I2C_SCL_PER->PUPDR   &= ~GPIO_PUPDR_PUPDR4;
 8000f22:	68da      	ldr	r2, [r3, #12]
 8000f24:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000f28:	60da      	str	r2, [r3, #12]
  SYS_I2C_SCL_PER->PUPDR   |= (((uint32_t)GPIO_PuPd_NOPULL) << lPinPosition);
 8000f2a:	68da      	ldr	r2, [r3, #12]
 8000f2c:	60da      	str	r2, [r3, #12]

  SYS_I2C_SCL_PER->AFR[0] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)SYS_I2C_SCL_PIN_NO & (uint32_t)0x07) * 4));
 8000f2e:	6a1a      	ldr	r2, [r3, #32]
 8000f30:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8000f34:	621a      	str	r2, [r3, #32]
  SYS_I2C_SCL_PER->AFR[0] |= ((uint32_t)(SYS_I2C_AF) << ((uint32_t)((uint32_t)SYS_I2C_SCL_PIN_NO & (uint32_t)0x07) * 4));
 8000f36:	6a1a      	ldr	r2, [r3, #32]
 8000f38:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000f3c:	621a      	str	r2, [r3, #32]

  lPinPosition = (SYS_I2C_SDA_PIN_NO * 2);

  // Configure the pin PH5 as alternate function 4 (I2C SDA).
  SYS_I2C_SDA_PER->MODER   &= ~GPIO_MODER_MODER5;
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8000f44:	601a      	str	r2, [r3, #0]
  SYS_I2C_SDA_PER->MODER   |= (((uint32_t)GPIO_Mode_AF) << lPinPosition);
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000f4c:	601a      	str	r2, [r3, #0]

  SYS_I2C_SDA_PER->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR5;
 8000f4e:	689a      	ldr	r2, [r3, #8]
 8000f50:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8000f54:	609a      	str	r2, [r3, #8]
  SYS_I2C_SDA_PER->OSPEEDR |= ((uint32_t)(GPIO_Speed_2MHz) << lPinPosition);
 8000f56:	689a      	ldr	r2, [r3, #8]
 8000f58:	609a      	str	r2, [r3, #8]

  // type output
  SYS_I2C_SDA_PER->OTYPER  &= ~GPIO_OTYPER_OT_5;
 8000f5a:	685a      	ldr	r2, [r3, #4]
 8000f5c:	f022 0220 	bic.w	r2, r2, #32
 8000f60:	605a      	str	r2, [r3, #4]
  SYS_I2C_SDA_PER->OTYPER  |= (uint16_t)(GPIO_OType_OD << SYS_I2C_SDA_PIN_NO);
 8000f62:	685a      	ldr	r2, [r3, #4]
 8000f64:	f042 0220 	orr.w	r2, r2, #32
 8000f68:	605a      	str	r2, [r3, #4]

  // pull up configuration
  SYS_I2C_SDA_PER->PUPDR   &= ~GPIO_PUPDR_PUPDR5;
 8000f6a:	68da      	ldr	r2, [r3, #12]
 8000f6c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8000f70:	60da      	str	r2, [r3, #12]
  SYS_I2C_SDA_PER->PUPDR   |= (((uint32_t)GPIO_PuPd_NOPULL) << lPinPosition);
 8000f72:	68da      	ldr	r2, [r3, #12]
 8000f74:	60da      	str	r2, [r3, #12]

  SYS_I2C_SDA_PER->AFR[0] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)SYS_I2C_SDA_PIN_NO & (uint32_t)0x07) * 4)) ;
 8000f76:	6a1a      	ldr	r2, [r3, #32]
 8000f78:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000f7c:	621a      	str	r2, [r3, #32]
  SYS_I2C_SDA_PER->AFR[0] |= ((uint32_t)(SYS_I2C_AF) << ((uint32_t)((uint32_t)SYS_I2C_SDA_PIN_NO & (uint32_t)0x07) * 4));
 8000f7e:	6a1a      	ldr	r2, [r3, #32]
 8000f80:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000f84:	621a      	str	r2, [r3, #32]


  // reset the I2C peripheral
  I2C2->CR1 |= I2C_CR1_SWRST;
 8000f86:	4c29      	ldr	r4, [pc, #164]	; (800102c <ArcadeIT_I2C_Port_Init+0x164>)
 8000f88:	6823      	ldr	r3, [r4, #0]
 8000f8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f8e:	6023      	str	r3, [r4, #0]
  ArcadeIT_System_Delay(1000);
 8000f90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f94:	f7ff fc6a 	bl	800086c <ArcadeIT_System_Delay>
  I2C2->CR1 = 0x0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	6023      	str	r3, [r4, #0]

  // configure the I2C port
  I2C2->CR1 &= ~I2C_CR1_PE;
 8000f9c:	6823      	ldr	r3, [r4, #0]
 8000f9e:	f023 0301 	bic.w	r3, r3, #1
 8000fa2:	6023      	str	r3, [r4, #0]
  uint16_t result = 0x04;
  uint8_t lDuty = I2C_DUTY_2;

  freqrange = (apbclock / 1000000);

  I2C2->CR2 &= ~I2C_CR2_FREQ;
 8000fa4:	6863      	ldr	r3, [r4, #4]
 8000fa6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000faa:	6063      	str	r3, [r4, #4]
  I2C2->CR2 |= freqrange;
 8000fac:	6863      	ldr	r3, [r4, #4]
 8000fae:	f043 032d 	orr.w	r3, r3, #45	; 0x2d
 8000fb2:	6063      	str	r3, [r4, #4]

  // Configure speed in standard mode
  if (pClock <= 100000)
 8000fb4:	4b1e      	ldr	r3, [pc, #120]	; (8001030 <ArcadeIT_I2C_Port_Init+0x168>)
 8000fb6:	429d      	cmp	r5, r3
 8000fb8:	d81f      	bhi.n	8000ffa <ArcadeIT_I2C_Port_Init+0x132>
  {
    // Standard mode speed calculate
    result = (uint16_t)(apbclock / (pClock << 1));
 8000fba:	006d      	lsls	r5, r5, #1
 8000fbc:	481d      	ldr	r0, [pc, #116]	; (8001034 <ArcadeIT_I2C_Port_Init+0x16c>)
 8000fbe:	fbb0 f0f5 	udiv	r0, r0, r5
 8000fc2:	b280      	uxth	r0, r0

    // Test if CCR value is under 0x4
    if (result < 0x04)
 8000fc4:	2803      	cmp	r0, #3
 8000fc6:	d800      	bhi.n	8000fca <ArcadeIT_I2C_Port_Init+0x102>
    {
      // Set minimum allowed value
      result = 0x04;
 8000fc8:	2004      	movs	r0, #4

    // Set speed value for standard mode
    tmpreg |= result;

    // Set Maximum Rise Time for standard mode
    I2C2->TRISE = freqrange + 1;
 8000fca:	4b18      	ldr	r3, [pc, #96]	; (800102c <ArcadeIT_I2C_Port_Init+0x164>)
 8000fcc:	222e      	movs	r2, #46	; 0x2e
 8000fce:	621a      	str	r2, [r3, #32]
    // Set Maximum Rise Time for fast mode
    I2C2->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);

  } // End if.

  I2C2->CCR = tmpreg;
 8000fd0:	4b16      	ldr	r3, [pc, #88]	; (800102c <ArcadeIT_I2C_Port_Init+0x164>)
 8000fd2:	61d8      	str	r0, [r3, #28]
  I2C2->OAR1 = I2C_AcknowledgedAddress_7bit;
 8000fd4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fd8:	609a      	str	r2, [r3, #8]
  I2C2->OAR2 = 0;
 8000fda:	2200      	movs	r2, #0
 8000fdc:	60da      	str	r2, [r3, #12]
  I2C2->CR1 |= I2C_CR1_ACK;
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000fe4:	601a      	str	r2, [r3, #0]
  I2C2->CR1 |= I2C_CR1_PE;
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	f042 0201 	orr.w	r2, r2, #1
 8000fec:	601a      	str	r2, [r3, #0]

  // Shows a message to serial port as debug
  if (gDevices & ARCADEIT_DEVICE_SERIAL)
 8000fee:	4b12      	ldr	r3, [pc, #72]	; (8001038 <ArcadeIT_I2C_Port_Init+0x170>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8000ff6:	d111      	bne.n	800101c <ArcadeIT_I2C_Port_Init+0x154>
  {
    ArcadeIT_Serial_Port_String_Send(TEXT_I2C_INITED);

  } // End if.

} // end ArcadeIT_I2C_Port_Init
 8000ff8:	bd38      	pop	{r3, r4, r5, pc}
      result = (uint16_t)(apbclock / (pClock * 3));
 8000ffa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000ffe:	480d      	ldr	r0, [pc, #52]	; (8001034 <ArcadeIT_I2C_Port_Init+0x16c>)
 8001000:	fbb0 f5f5 	udiv	r5, r0, r5
 8001004:	b2a8      	uxth	r0, r5
    if ((result & I2C_CCR_CCR) == 0)
 8001006:	f3c5 050b 	ubfx	r5, r5, #0, #12
 800100a:	b90d      	cbnz	r5, 8001010 <ArcadeIT_I2C_Port_Init+0x148>
      result |= (uint16_t)0x0001;
 800100c:	f040 0001 	orr.w	r0, r0, #1
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 8001010:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
    I2C2->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);
 8001014:	4b05      	ldr	r3, [pc, #20]	; (800102c <ArcadeIT_I2C_Port_Init+0x164>)
 8001016:	220e      	movs	r2, #14
 8001018:	621a      	str	r2, [r3, #32]
 800101a:	e7d9      	b.n	8000fd0 <ArcadeIT_I2C_Port_Init+0x108>
    ArcadeIT_Serial_Port_String_Send(TEXT_I2C_INITED);
 800101c:	4807      	ldr	r0, [pc, #28]	; (800103c <ArcadeIT_I2C_Port_Init+0x174>)
 800101e:	f000 f819 	bl	8001054 <ArcadeIT_Serial_Port_String_Send>
} // end ArcadeIT_I2C_Port_Init
 8001022:	e7e9      	b.n	8000ff8 <ArcadeIT_I2C_Port_Init+0x130>
 8001024:	40023800 	.word	0x40023800
 8001028:	40021c00 	.word	0x40021c00
 800102c:	40005800 	.word	0x40005800
 8001030:	000186a0 	.word	0x000186a0
 8001034:	02aea540 	.word	0x02aea540
 8001038:	20000084 	.word	0x20000084
 800103c:	08003bf0 	.word	0x08003bf0

08001040 <ArcadeIT_Serial_Port_Char_Send>:
   * RETURNS:     Nothing.
   */

  // wait until data register is empty. The status register should have the flag
  // Transmit data register empty
  while ((SYS_SERIAL_PORT->SR & SYS_SERIAL_FLAG_TXE) == RESET);
 8001040:	4b03      	ldr	r3, [pc, #12]	; (8001050 <ArcadeIT_Serial_Port_Char_Send+0x10>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001048:	d0fa      	beq.n	8001040 <ArcadeIT_Serial_Port_Char_Send>

  // send the character. We put the data into the data register so that the USART
  // start transmit it.
  SYS_SERIAL_PORT->DR = (pCharacter & (uint16_t)0x01FF);
 800104a:	4b01      	ldr	r3, [pc, #4]	; (8001050 <ArcadeIT_Serial_Port_Char_Send+0x10>)
 800104c:	6058      	str	r0, [r3, #4]

} // End ArcadeIT_Serial_Port_Char_Send.
 800104e:	4770      	bx	lr
 8001050:	40004400 	.word	0x40004400

08001054 <ArcadeIT_Serial_Port_String_Send>:
// -----------------------------------------------------------------------------
void ArcadeIT_Serial_Port_String_Send
(
    char *pString   // The string to send character by character to the serial port.
)
{
 8001054:	b510      	push	{r4, lr}
   */

  // while not NULL transmit next character.
  char lCharacter;

  while ((lCharacter = *((char*)pString++)) != 0)
 8001056:	e002      	b.n	800105e <ArcadeIT_Serial_Port_String_Send+0xa>
  {
    ArcadeIT_Serial_Port_Char_Send (lCharacter);
 8001058:	f7ff fff2 	bl	8001040 <ArcadeIT_Serial_Port_Char_Send>
  while ((lCharacter = *((char*)pString++)) != 0)
 800105c:	4620      	mov	r0, r4
 800105e:	1c44      	adds	r4, r0, #1
 8001060:	7800      	ldrb	r0, [r0, #0]
 8001062:	2800      	cmp	r0, #0
 8001064:	d1f8      	bne.n	8001058 <ArcadeIT_Serial_Port_String_Send+0x4>

  } // End while.

} // End ArcadeIT_Serial_Port_String_Send.
 8001066:	bd10      	pop	{r4, pc}

08001068 <ArcadeIT_Serial_Port_Init>:
// -----------------------------------------------------------------------------
void ArcadeIT_Serial_Port_Init
(
    uint32_t pBaud   // Baud rate to set the serial port to.
)
{
 8001068:	b508      	push	{r3, lr}
  uint32_t lPinPosition;

  lPinPosition = (SYS_SERIAL_TX_PIN_NO * 2);

  // ArcadeIT_Serial_Port_Init
  if ((RCC->AHB1ENR & RCC_AHB1Periph_GPIOA) == FALSE) RCC->AHB1ENR |= RCC_AHB1Periph_GPIOA;
 800106a:	4b59      	ldr	r3, [pc, #356]	; (80011d0 <ArcadeIT_Serial_Port_Init+0x168>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f013 0f01 	tst.w	r3, #1
 8001072:	d104      	bne.n	800107e <ArcadeIT_Serial_Port_Init+0x16>
 8001074:	4a56      	ldr	r2, [pc, #344]	; (80011d0 <ArcadeIT_Serial_Port_Init+0x168>)
 8001076:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	6313      	str	r3, [r2, #48]	; 0x30
  if ((RCC->APB1ENR & RCC_APB1Periph_USART2) == FALSE) RCC->APB1ENR |= RCC_APB1Periph_USART2;
 800107e:	4b54      	ldr	r3, [pc, #336]	; (80011d0 <ArcadeIT_Serial_Port_Init+0x168>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001086:	d104      	bne.n	8001092 <ArcadeIT_Serial_Port_Init+0x2a>
 8001088:	4a51      	ldr	r2, [pc, #324]	; (80011d0 <ArcadeIT_Serial_Port_Init+0x168>)
 800108a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800108c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001090:	6413      	str	r3, [r2, #64]	; 0x40
  if ((RCC->AHB1ENR & RCC_AHB1Periph_DMA1) == FALSE) RCC->AHB1ENR |= RCC_AHB1Periph_DMA1;
 8001092:	4b4f      	ldr	r3, [pc, #316]	; (80011d0 <ArcadeIT_Serial_Port_Init+0x168>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800109a:	d104      	bne.n	80010a6 <ArcadeIT_Serial_Port_Init+0x3e>
 800109c:	4a4c      	ldr	r2, [pc, #304]	; (80011d0 <ArcadeIT_Serial_Port_Init+0x168>)
 800109e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80010a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010a4:	6313      	str	r3, [r2, #48]	; 0x30

  // Configure the pin PA2 as alternate function 7 (USART Tx).
  SYS_SERIAL_TX_PER->MODER   &= ~GPIO_MODER_MODER2;
 80010a6:	4b4b      	ldr	r3, [pc, #300]	; (80011d4 <ArcadeIT_Serial_Port_Init+0x16c>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80010ae:	601a      	str	r2, [r3, #0]
  SYS_SERIAL_TX_PER->MODER   |= (((uint32_t)GPIO_Mode_AF) << lPinPosition);
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	f042 0220 	orr.w	r2, r2, #32
 80010b6:	601a      	str	r2, [r3, #0]

  SYS_SERIAL_TX_PER->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR2;
 80010b8:	689a      	ldr	r2, [r3, #8]
 80010ba:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80010be:	609a      	str	r2, [r3, #8]
  SYS_SERIAL_TX_PER->OSPEEDR |= ((uint32_t)(GPIO_Speed_50MHz) << lPinPosition);
 80010c0:	689a      	ldr	r2, [r3, #8]
 80010c2:	f042 0220 	orr.w	r2, r2, #32
 80010c6:	609a      	str	r2, [r3, #8]

  // type output
  SYS_SERIAL_TX_PER->OTYPER  &= ~GPIO_OTYPER_OT_2;
 80010c8:	685a      	ldr	r2, [r3, #4]
 80010ca:	f022 0204 	bic.w	r2, r2, #4
 80010ce:	605a      	str	r2, [r3, #4]
  SYS_SERIAL_TX_PER->OTYPER  |= (uint16_t)(GPIO_OType_PP << SYS_SERIAL_TX_PIN_NO);
 80010d0:	685a      	ldr	r2, [r3, #4]
 80010d2:	605a      	str	r2, [r3, #4]

  // pull up configuration
  SYS_SERIAL_TX_PER->PUPDR   &= ~GPIO_PUPDR_PUPDR2;
 80010d4:	68da      	ldr	r2, [r3, #12]
 80010d6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80010da:	60da      	str	r2, [r3, #12]
  SYS_SERIAL_TX_PER->PUPDR   |= (((uint32_t)GPIO_PuPd_NOPULL) << lPinPosition);
 80010dc:	68da      	ldr	r2, [r3, #12]
 80010de:	60da      	str	r2, [r3, #12]

  // Connect PXx to USARTx_Tx and Rx.
  SYS_SERIAL_TX_PER->AFR[0] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)SYS_SERIAL_TX_PIN_NO & (uint32_t)0x07) * 4));
 80010e0:	6a1a      	ldr	r2, [r3, #32]
 80010e2:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80010e6:	621a      	str	r2, [r3, #32]
  SYS_SERIAL_TX_PER->AFR[0] |=  ((uint32_t)(SYS_SERIAL_TX_AF) << ((uint32_t)((uint32_t)SYS_SERIAL_TX_PIN_NO & (uint32_t)0x07) * 4));
 80010e8:	6a1a      	ldr	r2, [r3, #32]
 80010ea:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80010ee:	621a      	str	r2, [r3, #32]

  lPinPosition = (SYS_SERIAL_RX_PIN_NO * 2);

  // Configure the pin PA3 as alternate function 7 (USART Rx).
  SYS_SERIAL_RX_PER->MODER   &= ~GPIO_MODER_MODER3;
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80010f6:	601a      	str	r2, [r3, #0]
  SYS_SERIAL_RX_PER->MODER   |= (((uint32_t)GPIO_Mode_AF) << lPinPosition);
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010fe:	601a      	str	r2, [r3, #0]

  SYS_SERIAL_RX_PER->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR3;
 8001100:	689a      	ldr	r2, [r3, #8]
 8001102:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001106:	609a      	str	r2, [r3, #8]
  SYS_SERIAL_RX_PER->OSPEEDR |= ((uint32_t)(GPIO_Speed_50MHz) << lPinPosition);
 8001108:	689a      	ldr	r2, [r3, #8]
 800110a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800110e:	609a      	str	r2, [r3, #8]

  // type output
  SYS_SERIAL_RX_PER->OTYPER  &= ~GPIO_OTYPER_OT_3;
 8001110:	685a      	ldr	r2, [r3, #4]
 8001112:	f022 0208 	bic.w	r2, r2, #8
 8001116:	605a      	str	r2, [r3, #4]
  SYS_SERIAL_RX_PER->OTYPER  |= (uint16_t)(GPIO_OType_PP << SYS_SERIAL_RX_PIN_NO);
 8001118:	685a      	ldr	r2, [r3, #4]
 800111a:	605a      	str	r2, [r3, #4]

  // pull up configuration
  SYS_SERIAL_RX_PER->PUPDR   &= ~GPIO_PUPDR_PUPDR3;
 800111c:	68da      	ldr	r2, [r3, #12]
 800111e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001122:	60da      	str	r2, [r3, #12]
  SYS_SERIAL_RX_PER->PUPDR   |= (((uint32_t)GPIO_PuPd_NOPULL) << lPinPosition);
 8001124:	68da      	ldr	r2, [r3, #12]
 8001126:	60da      	str	r2, [r3, #12]

  // Connect PXx to USARTx_Tx and Rx.
  SYS_SERIAL_RX_PER->AFR[0] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)SYS_SERIAL_RX_PIN_NO & (uint32_t)0x07) * 4)) ;
 8001128:	6a1a      	ldr	r2, [r3, #32]
 800112a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 800112e:	621a      	str	r2, [r3, #32]
  SYS_SERIAL_RX_PER->AFR[0] |= ((uint32_t)(SYS_SERIAL_RX_AF) << ((uint32_t)((uint32_t)SYS_SERIAL_RX_PIN_NO & (uint32_t)0x07) * 4));
 8001130:	6a1a      	ldr	r2, [r3, #32]
 8001132:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 8001136:	621a      	str	r2, [r3, #32]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
  uint32_t integerdivider = 0x00;
  uint32_t fractionaldivider = 0x00;

  // USART CR2 Configuration
  tmpreg = SYS_SERIAL_PORT->CR2;
 8001138:	f5a3 33de 	sub.w	r3, r3, #113664	; 0x1bc00
 800113c:	691a      	ldr	r2, [r3, #16]
 800113e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001142:	0412      	lsls	r2, r2, #16
 8001144:	0c12      	lsrs	r2, r2, #16
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)SYS_SERIAL_StopBits_1;

  /* Write to USART CR2 */
  SYS_SERIAL_PORT->CR2 = (uint16_t)tmpreg;
 8001146:	611a      	str	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = SYS_SERIAL_PORT->CR1;
 8001148:	68da      	ldr	r2, [r3, #12]
  tmpreg = (uint32_t)(SYS_SERIAL_WordLength_8b
                    | SYS_SERIAL_Parity_No
                    |(SYS_SERIAL_Mode_Rx | SYS_SERIAL_Mode_Tx));

  /* Write to USART CR1 */
  SYS_SERIAL_PORT->CR1 = (uint16_t)tmpreg;
 800114a:	220c      	movs	r2, #12
 800114c:	60da      	str	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = SYS_SERIAL_PORT->CR3;
 800114e:	695a      	ldr	r2, [r3, #20]
 8001150:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001154:	0412      	lsls	r2, r2, #16
 8001156:	0c12      	lsrs	r2, r2, #16
  /* Configure the USART HFC :
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= SYS_SERIAL_HardwareFlowControl_None;

  /* Write to USART CR3 */
  SYS_SERIAL_PORT->CR3 = (uint16_t)tmpreg;
 8001158:	615a      	str	r2, [r3, #20]

  /* Configure the USART Baud Rate */
  apbclock = (((HSE_VALUE / PLL_M) * PLL_N) / PLL_P) >> 2; // for the ArcadeIT! should be 45MHz

  /* Determine the integer part */
  if ((SYS_SERIAL_PORT->CR1 & USART_CR1_OVER8) != 0)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001160:	d026      	beq.n	80011b0 <ArcadeIT_Serial_Port_Init+0x148>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * pBaud));
 8001162:	0040      	lsls	r0, r0, #1
 8001164:	4b1c      	ldr	r3, [pc, #112]	; (80011d8 <ArcadeIT_Serial_Port_Init+0x170>)
 8001166:	fbb3 f3f0 	udiv	r3, r3, r0
    integerdivider = ((25 * apbclock) / (4 * pBaud));
    // 25 * 45000000 / 4 * 115200
    // 1125000000 / 460800
    // ‭2441‬
  }
  tmpreg = (integerdivider / 100) << 4;
 800116a:	4a1c      	ldr	r2, [pc, #112]	; (80011dc <ArcadeIT_Serial_Port_Init+0x174>)
 800116c:	fba2 1203 	umull	r1, r2, r2, r3
 8001170:	0952      	lsrs	r2, r2, #5
 8001172:	0111      	lsls	r1, r2, #4
  // ‭2441 / 100 * 16
  // ‭24 * 16 (FOUND 24, we already shift this left of 4 bits to create room for fraction)
  // ‭384 (0x18 << 4 = 0x180)‬

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8001174:	2064      	movs	r0, #100	; 0x64
 8001176:	fb02 3010 	mls	r0, r2, r0, r3
  // ‭2441 - 38400 / 16
  // ‭2441 - 2400
  // 41 (FOUND 41)

  /* Implement the fractional part in the register */
  if ((SYS_SERIAL_PORT->CR1 & USART_CR1_OVER8) != 0)
 800117a:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <ArcadeIT_Serial_Port_Init+0x178>)
 800117c:	68db      	ldr	r3, [r3, #12]
 800117e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001182:	d11a      	bne.n	80011ba <ArcadeIT_Serial_Port_Init+0x152>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8001184:	0100      	lsls	r0, r0, #4
 8001186:	3032      	adds	r0, #50	; 0x32
 8001188:	4b14      	ldr	r3, [pc, #80]	; (80011dc <ArcadeIT_Serial_Port_Init+0x174>)
 800118a:	fba3 3000 	umull	r3, r0, r3, r0
 800118e:	f3c0 1043 	ubfx	r0, r0, #5, #4
 8001192:	4308      	orrs	r0, r1
 8001194:	b280      	uxth	r0, r0
    // mmmmmmmmm   ffff
    // 0x180     |  0x7
  }

  /* Write to USART BRR register */
  SYS_SERIAL_PORT->BRR = (uint16_t)tmpreg;
 8001196:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <ArcadeIT_Serial_Port_Init+0x178>)
 8001198:	6098      	str	r0, [r3, #8]

  // Enable the USART2
  SYS_SERIAL_PORT->CR1 |= USART_CR1_UE;
 800119a:	68da      	ldr	r2, [r3, #12]
 800119c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80011a0:	60da      	str	r2, [r3, #12]

  ArcadeIT_Serial_Port_String_Send(RESET_DEVICE);
 80011a2:	4810      	ldr	r0, [pc, #64]	; (80011e4 <ArcadeIT_Serial_Port_Init+0x17c>)
 80011a4:	f7ff ff56 	bl	8001054 <ArcadeIT_Serial_Port_String_Send>

  ArcadeIT_Serial_Port_String_Send(TEXT_SERIAL_PORT_INITED);
 80011a8:	480f      	ldr	r0, [pc, #60]	; (80011e8 <ArcadeIT_Serial_Port_Init+0x180>)
 80011aa:	f7ff ff53 	bl	8001054 <ArcadeIT_Serial_Port_String_Send>

} // End ArcadeIT_Serial_Port_Init.
 80011ae:	bd08      	pop	{r3, pc}
    integerdivider = ((25 * apbclock) / (4 * pBaud));
 80011b0:	0080      	lsls	r0, r0, #2
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <ArcadeIT_Serial_Port_Init+0x170>)
 80011b4:	fbb3 f3f0 	udiv	r3, r3, r0
 80011b8:	e7d7      	b.n	800116a <ArcadeIT_Serial_Port_Init+0x102>
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80011ba:	00c3      	lsls	r3, r0, #3
 80011bc:	3332      	adds	r3, #50	; 0x32
 80011be:	4807      	ldr	r0, [pc, #28]	; (80011dc <ArcadeIT_Serial_Port_Init+0x174>)
 80011c0:	fba0 2303 	umull	r2, r3, r0, r3
 80011c4:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80011c8:	ea43 0001 	orr.w	r0, r3, r1
 80011cc:	e7e2      	b.n	8001194 <ArcadeIT_Serial_Port_Init+0x12c>
 80011ce:	bf00      	nop
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40020000 	.word	0x40020000
 80011d8:	430e2340 	.word	0x430e2340
 80011dc:	51eb851f 	.word	0x51eb851f
 80011e0:	40004400 	.word	0x40004400
 80011e4:	08003af8 	.word	0x08003af8
 80011e8:	08003c04 	.word	0x08003c04

080011ec <ArcadeIT_Status_LEDS_Init>:

// //////////////////////////////////////////////////////////////////////////////
// Functions.
// //////////////////////////////////////////////////////////////////////////////
void ArcadeIT_Status_LEDS_Init(void)
{
 80011ec:	b508      	push	{r3, lr}
 */

  uint32_t lPinPosition = 0;

  // Turn on the MCU peripheral by enabling its Clock.
  if ((RCC->AHB1ENR & RCC_AHB1Periph_GPIOH) == FALSE) RCC->AHB1ENR |= RCC_AHB1Periph_GPIOH;
 80011ee:	4b2c      	ldr	r3, [pc, #176]	; (80012a0 <ArcadeIT_Status_LEDS_Init+0xb4>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80011f6:	d104      	bne.n	8001202 <ArcadeIT_Status_LEDS_Init+0x16>
 80011f8:	4a29      	ldr	r2, [pc, #164]	; (80012a0 <ArcadeIT_Status_LEDS_Init+0xb4>)
 80011fa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80011fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001200:	6313      	str	r3, [r2, #48]	; 0x30
  // level as default.
  // -----------------------
  lPinPosition = (SYS_STATUS_LED1_PIN_NO * 2); // the position is a multiple of 2

  // GPIO pin(PH2) in output
  SYS_STATUS_LED1_PER->MODER   &= ~GPIO_MODER_MODER2;
 8001202:	4b28      	ldr	r3, [pc, #160]	; (80012a4 <ArcadeIT_Status_LEDS_Init+0xb8>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800120a:	601a      	str	r2, [r3, #0]
  SYS_STATUS_LED1_PER->MODER   |= (((uint32_t)GPIO_Mode_OUT) << lPinPosition);
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	f042 0210 	orr.w	r2, r2, #16
 8001212:	601a      	str	r2, [r3, #0]

  // Maximum frequency allowed is 100MHz, so keep it in mind when you want
  // to test 180MHz, you have to set the divider at least 2
  SYS_STATUS_LED1_PER->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR2;
 8001214:	689a      	ldr	r2, [r3, #8]
 8001216:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800121a:	609a      	str	r2, [r3, #8]
  SYS_STATUS_LED1_PER->OSPEEDR |= ((uint32_t)(GPIO_Speed_100MHz) << lPinPosition);
 800121c:	689a      	ldr	r2, [r3, #8]
 800121e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8001222:	609a      	str	r2, [r3, #8]

  // type output
  SYS_STATUS_LED1_PER->OTYPER  &= ~GPIO_OTYPER_OT_2;
 8001224:	685a      	ldr	r2, [r3, #4]
 8001226:	f022 0204 	bic.w	r2, r2, #4
 800122a:	605a      	str	r2, [r3, #4]
  SYS_STATUS_LED1_PER->OTYPER  |= (uint16_t)(GPIO_OType_PP << SYS_STATUS_LED1_PIN_NO);
 800122c:	685a      	ldr	r2, [r3, #4]
 800122e:	605a      	str	r2, [r3, #4]

  // pull up configuration
  SYS_STATUS_LED1_PER->PUPDR   &= ~GPIO_PUPDR_PUPDR2;
 8001230:	68da      	ldr	r2, [r3, #12]
 8001232:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001236:	60da      	str	r2, [r3, #12]
  SYS_STATUS_LED1_PER->PUPDR   |= (((uint32_t)GPIO_PuPd_DOWN) << lPinPosition);
 8001238:	68da      	ldr	r2, [r3, #12]
 800123a:	f042 0220 	orr.w	r2, r2, #32
 800123e:	60da      	str	r2, [r3, #12]

  // -----------------------
  lPinPosition = (SYS_STATUS_LED2_PIN_NO * 2); // the position is a multiple of 2

  // GPIO pin(PH3) in output
  SYS_STATUS_LED2_PER->MODER   &= ~GPIO_MODER_MODER3;
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001246:	601a      	str	r2, [r3, #0]
  SYS_STATUS_LED2_PER->MODER   |= (((uint32_t)GPIO_Mode_OUT) << lPinPosition);
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800124e:	601a      	str	r2, [r3, #0]

  // Maximum frequency allowed is 100MHz, so keep it in mind when you want
  // to test 180MHz, you have to set the divider at least 2
  SYS_STATUS_LED2_PER->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR3;
 8001250:	689a      	ldr	r2, [r3, #8]
 8001252:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001256:	609a      	str	r2, [r3, #8]
  SYS_STATUS_LED2_PER->OSPEEDR |= ((uint32_t)(GPIO_Speed_100MHz) << lPinPosition);
 8001258:	689a      	ldr	r2, [r3, #8]
 800125a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800125e:	609a      	str	r2, [r3, #8]
  // type output
  SYS_STATUS_LED2_PER->OTYPER  &= ~GPIO_OTYPER_OT_3;
 8001260:	685a      	ldr	r2, [r3, #4]
 8001262:	f022 0208 	bic.w	r2, r2, #8
 8001266:	605a      	str	r2, [r3, #4]
  SYS_STATUS_LED2_PER->OTYPER  |= (uint16_t)(GPIO_OType_PP << SYS_STATUS_LED2_PIN_NO);
 8001268:	685a      	ldr	r2, [r3, #4]
 800126a:	605a      	str	r2, [r3, #4]

  // pull up configuration
  SYS_STATUS_LED2_PER->PUPDR   &= ~GPIO_PUPDR_PUPDR3;
 800126c:	68da      	ldr	r2, [r3, #12]
 800126e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001272:	60da      	str	r2, [r3, #12]
  SYS_STATUS_LED2_PER->PUPDR   |= (((uint32_t)GPIO_PuPd_DOWN) << lPinPosition);
 8001274:	68da      	ldr	r2, [r3, #12]
 8001276:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800127a:	60da      	str	r2, [r3, #12]

  // -----------------------
  // Put LEDs line LOW.
  SYS_STATUS_LED1_PER->ODR &= ~(SYS_STATUS_LED1_PIN);
 800127c:	695a      	ldr	r2, [r3, #20]
 800127e:	f022 0204 	bic.w	r2, r2, #4
 8001282:	615a      	str	r2, [r3, #20]
  SYS_STATUS_LED2_PER->ODR &= ~(SYS_STATUS_LED2_PIN);
 8001284:	695a      	ldr	r2, [r3, #20]
 8001286:	f022 0208 	bic.w	r2, r2, #8
 800128a:	615a      	str	r2, [r3, #20]

  // Shows a message to serial port as debug
  if (gDevices & ARCADEIT_DEVICE_SERIAL)
 800128c:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <ArcadeIT_Status_LEDS_Init+0xbc>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001294:	d100      	bne.n	8001298 <ArcadeIT_Status_LEDS_Init+0xac>
  {
    ArcadeIT_Serial_Port_String_Send(TEXT_STATUS_LEDS_INITED);

  } // End if.

} // End ArcadeIT_Status_LEDS_Init.
 8001296:	bd08      	pop	{r3, pc}
    ArcadeIT_Serial_Port_String_Send(TEXT_STATUS_LEDS_INITED);
 8001298:	4804      	ldr	r0, [pc, #16]	; (80012ac <ArcadeIT_Status_LEDS_Init+0xc0>)
 800129a:	f7ff fedb 	bl	8001054 <ArcadeIT_Serial_Port_String_Send>
} // End ArcadeIT_Status_LEDS_Init.
 800129e:	e7fa      	b.n	8001296 <ArcadeIT_Status_LEDS_Init+0xaa>
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40021c00 	.word	0x40021c00
 80012a8:	20000084 	.word	0x20000084
 80012ac:	08003c1c 	.word	0x08003c1c

080012b0 <ArcadeIT_Status_LED1_Toggle>:
  * PARAMETERS:  None.
  * RETURNS:     Nothing.
  */

  // Set LEDs line LOW or HIGH depending the current status of the LED.
  if (GPIOH->ODR & SYS_STATUS_LED1_PIN)
 80012b0:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <ArcadeIT_Status_LED1_Toggle+0x24>)
 80012b2:	695b      	ldr	r3, [r3, #20]
 80012b4:	f013 0f04 	tst.w	r3, #4
 80012b8:	d105      	bne.n	80012c6 <ArcadeIT_Status_LED1_Toggle+0x16>
  {
    GPIOH->ODR &= ~(SYS_STATUS_LED1_PIN);
  }
  else
  {
    GPIOH->ODR |= SYS_STATUS_LED1_PIN;
 80012ba:	4a06      	ldr	r2, [pc, #24]	; (80012d4 <ArcadeIT_Status_LED1_Toggle+0x24>)
 80012bc:	6953      	ldr	r3, [r2, #20]
 80012be:	f043 0304 	orr.w	r3, r3, #4
 80012c2:	6153      	str	r3, [r2, #20]

  } // End if.

} // End ArcadeIT_Status_LED1_Toggle.
 80012c4:	4770      	bx	lr
    GPIOH->ODR &= ~(SYS_STATUS_LED1_PIN);
 80012c6:	4a03      	ldr	r2, [pc, #12]	; (80012d4 <ArcadeIT_Status_LED1_Toggle+0x24>)
 80012c8:	6953      	ldr	r3, [r2, #20]
 80012ca:	f023 0304 	bic.w	r3, r3, #4
 80012ce:	6153      	str	r3, [r2, #20]
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	40021c00 	.word	0x40021c00

080012d8 <ArcadeIT_Status_LED2_Toggle>:
  * PARAMETERS:  None.
  * RETURNS:     Nothing.
  */

  // Set LEDs line LOW or HIGH depending the current status of the LED.
  if (SYS_STATUS_LED2_PER->ODR & SYS_STATUS_LED2_PIN)
 80012d8:	4b08      	ldr	r3, [pc, #32]	; (80012fc <ArcadeIT_Status_LED2_Toggle+0x24>)
 80012da:	695b      	ldr	r3, [r3, #20]
 80012dc:	f013 0f08 	tst.w	r3, #8
 80012e0:	d105      	bne.n	80012ee <ArcadeIT_Status_LED2_Toggle+0x16>
  {
    SYS_STATUS_LED2_PER->ODR &= ~(SYS_STATUS_LED2_PIN);
  }
  else
  {
    SYS_STATUS_LED2_PER->ODR |= SYS_STATUS_LED2_PIN;
 80012e2:	4a06      	ldr	r2, [pc, #24]	; (80012fc <ArcadeIT_Status_LED2_Toggle+0x24>)
 80012e4:	6953      	ldr	r3, [r2, #20]
 80012e6:	f043 0308 	orr.w	r3, r3, #8
 80012ea:	6153      	str	r3, [r2, #20]

  } // End if.

} // End ArcadeIT_Status_LED2_Toggle.
 80012ec:	4770      	bx	lr
    SYS_STATUS_LED2_PER->ODR &= ~(SYS_STATUS_LED2_PIN);
 80012ee:	4a03      	ldr	r2, [pc, #12]	; (80012fc <ArcadeIT_Status_LED2_Toggle+0x24>)
 80012f0:	6953      	ldr	r3, [r2, #20]
 80012f2:	f023 0308 	bic.w	r3, r3, #8
 80012f6:	6153      	str	r3, [r2, #20]
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	40021c00 	.word	0x40021c00

08001300 <ArcadeIT_TestPad_Set>:
  *  RCC_MCO2Div_4
  *  RCC_MCO2Div_5
  *
  */

  uint32_t lTmpReg = RCC->CFGR;
 8001300:	4a03      	ldr	r2, [pc, #12]	; (8001310 <ArcadeIT_TestPad_Set+0x10>)
 8001302:	6893      	ldr	r3, [r2, #8]
  lTmpReg  &= CFGR_MCO2_RESET_MASK;                 // Clear MCO2 and MCO2PRE[2:0] bits
 8001304:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
  lTmpReg  |= pFrequencySystem | pFrequencyDivider; // Select MCO2 clock source and prescaler
 8001308:	4301      	orrs	r1, r0
 800130a:	4319      	orrs	r1, r3
  RCC->CFGR = lTmpReg;
 800130c:	6091      	str	r1, [r2, #8]

} // End ArcadeIT_TestPad_Set.
 800130e:	4770      	bx	lr
 8001310:	40023800 	.word	0x40023800

08001314 <ArcadeIT_TestPad_Init>:
void ArcadeIT_TestPad_Init
(
    uint32_t pFrequencySystem,  // What frequency source to test.
    uint32_t pFrequencyDivider  // What divider to test.
)
{
 8001314:	b508      	push	{r3, lr}
  * RETURNS:     Nothing.
  */

  uint32_t lPinPosition = (SYS_TESTPADS_PIN_NO * 2);

  if ((RCC->AHB1ENR & RCC_AHB1Periph_GPIOC) == FALSE) RCC->AHB1ENR |= RCC_AHB1Periph_GPIOC;
 8001316:	4b1a      	ldr	r3, [pc, #104]	; (8001380 <ArcadeIT_TestPad_Init+0x6c>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	f013 0f04 	tst.w	r3, #4
 800131e:	d104      	bne.n	800132a <ArcadeIT_TestPad_Init+0x16>
 8001320:	4a17      	ldr	r2, [pc, #92]	; (8001380 <ArcadeIT_TestPad_Init+0x6c>)
 8001322:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001324:	f043 0304 	orr.w	r3, r3, #4
 8001328:	6313      	str	r3, [r2, #48]	; 0x30

  // Configure pin PC9 in alternate function 0 (MCO2)
  SYS_TESTPADS_PER->MODER   &= ~GPIO_MODER_MODER9;
 800132a:	4b16      	ldr	r3, [pc, #88]	; (8001384 <ArcadeIT_TestPad_Init+0x70>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001332:	601a      	str	r2, [r3, #0]
  SYS_TESTPADS_PER->MODER   |= (((uint32_t)GPIO_Mode_AF) << lPinPosition);
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800133a:	601a      	str	r2, [r3, #0]

  // Maximum frequency allowed is 100MHz, so keep it in mind when you want
  // to test 180MHz, you have to set the divider at least 2
  SYS_TESTPADS_PER->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR9;
 800133c:	689a      	ldr	r2, [r3, #8]
 800133e:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001342:	609a      	str	r2, [r3, #8]
  SYS_TESTPADS_PER->OSPEEDR |= ((uint32_t)(GPIO_Speed_100MHz) << lPinPosition);
 8001344:	689a      	ldr	r2, [r3, #8]
 8001346:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 800134a:	609a      	str	r2, [r3, #8]

  // type output
  SYS_TESTPADS_PER->OTYPER  &= ~GPIO_OTYPER_OT_9;
 800134c:	685a      	ldr	r2, [r3, #4]
 800134e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001352:	605a      	str	r2, [r3, #4]
  SYS_TESTPADS_PER->OTYPER  |= (uint16_t)(GPIO_OType_PP << SYS_TESTPADS_PIN_NO);
 8001354:	685a      	ldr	r2, [r3, #4]
 8001356:	605a      	str	r2, [r3, #4]

  // pull up configuration
  SYS_TESTPADS_PER->PUPDR   &= ~GPIO_PUPDR_PUPDR9;
 8001358:	68da      	ldr	r2, [r3, #12]
 800135a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800135e:	60da      	str	r2, [r3, #12]
  SYS_TESTPADS_PER->PUPDR   |= (((uint32_t)GPIO_PuPd_UP) << lPinPosition);
 8001360:	68da      	ldr	r2, [r3, #12]
 8001362:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001366:	60da      	str	r2, [r3, #12]

  // Shows a message to serial port as debug
  ArcadeIT_TestPad_Set(pFrequencySystem, pFrequencyDivider);
 8001368:	f7ff ffca 	bl	8001300 <ArcadeIT_TestPad_Set>

  if (gDevices & ARCADEIT_DEVICE_SERIAL)
 800136c:	4b06      	ldr	r3, [pc, #24]	; (8001388 <ArcadeIT_TestPad_Init+0x74>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001374:	d100      	bne.n	8001378 <ArcadeIT_TestPad_Init+0x64>
    // Starts and configure the serial port.
    ArcadeIT_Serial_Port_String_Send(TEXT_TEST_PADS_INITED);

  } // End if.

} // End ArcadeIT_TestPads_Init.
 8001376:	bd08      	pop	{r3, pc}
    ArcadeIT_Serial_Port_String_Send(TEXT_TEST_PADS_INITED);
 8001378:	4804      	ldr	r0, [pc, #16]	; (800138c <ArcadeIT_TestPad_Init+0x78>)
 800137a:	f7ff fe6b 	bl	8001054 <ArcadeIT_Serial_Port_String_Send>
} // End ArcadeIT_TestPads_Init.
 800137e:	e7fa      	b.n	8001376 <ArcadeIT_TestPad_Init+0x62>
 8001380:	40023800 	.word	0x40023800
 8001384:	40020800 	.word	0x40020800
 8001388:	20000084 	.word	0x20000084
 800138c:	08003c34 	.word	0x08003c34

08001390 <ArcadeIT_Scheduler_Task_Init>:
  PARMS:        See above.
  RETURNS:      Nothing.
  */

  uint8_t lTask = 0;
  for (lTask = 0; lTask < ARCADEIT_SCHEDULER_MAX_TASKS; lTask++)
 8001390:	2300      	movs	r3, #0
 8001392:	2b04      	cmp	r3, #4
 8001394:	d812      	bhi.n	80013bc <ArcadeIT_Scheduler_Task_Init+0x2c>
{
 8001396:	b410      	push	{r4}
  {
    gArcadeITTasks[lTask].current_cycle = 0;
 8001398:	4c09      	ldr	r4, [pc, #36]	; (80013c0 <ArcadeIT_Scheduler_Task_Init+0x30>)
 800139a:	202c      	movs	r0, #44	; 0x2c
 800139c:	fb00 f003 	mul.w	r0, r0, r3
 80013a0:	1821      	adds	r1, r4, r0
 80013a2:	2200      	movs	r2, #0
 80013a4:	604a      	str	r2, [r1, #4]
    gArcadeITTasks[lTask].cycles = 0;
 80013a6:	5022      	str	r2, [r4, r0]
    gArcadeITTasks[lTask].time_period = 0;
 80013a8:	608a      	str	r2, [r1, #8]
    gArcadeITTasks[lTask].time_current = 0;
 80013aa:	60ca      	str	r2, [r1, #12]
    gArcadeITTasks[lTask].function = NULL;
 80013ac:	610a      	str	r2, [r1, #16]
  for (lTask = 0; lTask < ARCADEIT_SCHEDULER_MAX_TASKS; lTask++)
 80013ae:	3301      	adds	r3, #1
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b04      	cmp	r3, #4
 80013b4:	d9f0      	bls.n	8001398 <ArcadeIT_Scheduler_Task_Init+0x8>
  {
    //ArcadeIT_Serial_Port_String_Send(TEXT_SCHEDULER_INITED);

  } // End if.

} // End ArcadeIT_Scheduler_Task_Init.
 80013b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	200000a4 	.word	0x200000a4

080013c4 <ArcadeIT_Scheduler_Task_Set>:
  void *pFunctionPtr,        // The pointer to the function to execute.
  void *pParameters,         // The pointer to the parameters used by the function.
  uint32_t pCycles,          // The number of time that this task has to be executed. 0 = infinite.
  uint32_t pTimePeriod       // The time period in ms to elapse before the next execution.
)
{
 80013c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013c6:	469e      	mov	lr, r3
 80013c8:	9f05      	ldr	r7, [sp, #20]
  DESCRIPTION:  Setup a scheduled task.
  PARMS:        See above.
  RETURNS:      Nothing.
  */

  if (pParameters != NULL)
 80013ca:	b1f2      	cbz	r2, 800140a <ArcadeIT_Scheduler_Task_Set+0x46>
 80013cc:	4616      	mov	r6, r2
  {
    gArcadeITTasks[id].num_parameters = ((uint32_t*)pParameters)[PAR_1];
 80013ce:	6814      	ldr	r4, [r2, #0]
 80013d0:	4684      	mov	ip, r0
 80013d2:	4d15      	ldr	r5, [pc, #84]	; (8001428 <ArcadeIT_Scheduler_Task_Set+0x64>)
 80013d4:	222c      	movs	r2, #44	; 0x2c
 80013d6:	fb02 5200 	mla	r2, r2, r0, r5
 80013da:	7514      	strb	r4, [r2, #20]

    // Copy parameters.
    uint8_t lPars = 0;
    for (lPars = 0; lPars < gArcadeITTasks[id].num_parameters+1; lPars++)
 80013dc:	2400      	movs	r4, #0
 80013de:	e00c      	b.n	80013fa <ArcadeIT_Scheduler_Task_Set+0x36>
    {
      gArcadeITTasks[id].parameters[lPars] = ((uint32_t*)pParameters)[lPars];
 80013e0:	eb0c 028c 	add.w	r2, ip, ip, lsl #2
 80013e4:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80013e8:	4422      	add	r2, r4
 80013ea:	3206      	adds	r2, #6
 80013ec:	4d0e      	ldr	r5, [pc, #56]	; (8001428 <ArcadeIT_Scheduler_Task_Set+0x64>)
 80013ee:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 80013f2:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
    for (lPars = 0; lPars < gArcadeITTasks[id].num_parameters+1; lPars++)
 80013f6:	3401      	adds	r4, #1
 80013f8:	b2e4      	uxtb	r4, r4
 80013fa:	4d0b      	ldr	r5, [pc, #44]	; (8001428 <ArcadeIT_Scheduler_Task_Set+0x64>)
 80013fc:	222c      	movs	r2, #44	; 0x2c
 80013fe:	fb02 520c 	mla	r2, r2, ip, r5
 8001402:	7d12      	ldrb	r2, [r2, #20]
 8001404:	3201      	adds	r2, #1
 8001406:	4294      	cmp	r4, r2
 8001408:	dbea      	blt.n	80013e0 <ArcadeIT_Scheduler_Task_Set+0x1c>

    } // End for.

  } // End if.

  gArcadeITTasks[id].current_cycle = 0;
 800140a:	4d07      	ldr	r5, [pc, #28]	; (8001428 <ArcadeIT_Scheduler_Task_Set+0x64>)
 800140c:	222c      	movs	r2, #44	; 0x2c
 800140e:	fb02 f000 	mul.w	r0, r2, r0
 8001412:	182a      	adds	r2, r5, r0
 8001414:	2400      	movs	r4, #0
 8001416:	6054      	str	r4, [r2, #4]
  gArcadeITTasks[id].cycles = pCycles;
 8001418:	f845 e000 	str.w	lr, [r5, r0]
  gArcadeITTasks[id].time_period = pTimePeriod;
 800141c:	6097      	str	r7, [r2, #8]
  gArcadeITTasks[id].time_current = gArcadeITTasks[id].time_period;
 800141e:	60d7      	str	r7, [r2, #12]
  gArcadeITTasks[id].function = pFunctionPtr;
 8001420:	6111      	str	r1, [r2, #16]
  gArcadeITTasks[id].execute = FALSE;
 8001422:	f882 4028 	strb.w	r4, [r2, #40]	; 0x28

} // End ArcadeIT_Scheduler_Task_Set.
 8001426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001428:	200000a4 	.word	0x200000a4

0800142c <ArcadeIT_Scheduler_Task_Unset>:
  DESCRIPTION:  Reset a scheduled task.
  PARMS:        See above.
  RETURNS:      Nothing.
  */

  gArcadeITTasks[id].current_cycle = 0;
 800142c:	4906      	ldr	r1, [pc, #24]	; (8001448 <ArcadeIT_Scheduler_Task_Unset+0x1c>)
 800142e:	232c      	movs	r3, #44	; 0x2c
 8001430:	fb03 f000 	mul.w	r0, r3, r0
 8001434:	180a      	adds	r2, r1, r0
 8001436:	2300      	movs	r3, #0
 8001438:	6053      	str	r3, [r2, #4]
  gArcadeITTasks[id].cycles = 0;
 800143a:	500b      	str	r3, [r1, r0]
  gArcadeITTasks[id].time_period = 0;
 800143c:	6093      	str	r3, [r2, #8]
  gArcadeITTasks[id].time_current = 0;
 800143e:	60d3      	str	r3, [r2, #12]
  gArcadeITTasks[id].function = NULL;
 8001440:	6113      	str	r3, [r2, #16]
  gArcadeITTasks[id].execute = FALSE;
 8001442:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28

} // End ArcadeIT_Scheduler_Task_Unset.
 8001446:	4770      	bx	lr
 8001448:	200000a4 	.word	0x200000a4

0800144c <ArcadeIT_Scheduler_Update>:

// /////////////////////////////////////////////////////////////////////////////
void ArcadeIT_Scheduler_Update(void)
{
 800144c:	b538      	push	{r3, r4, r5, lr}
  PARMS:        See above.
  RETURNS:      Nothing.
  */

  uint8_t lTask = 0;
  for (lTask = 0; lTask < ARCADEIT_SCHEDULER_MAX_TASKS; lTask++)
 800144e:	2400      	movs	r4, #0
 8001450:	e007      	b.n	8001462 <ArcadeIT_Scheduler_Update+0x16>

            } // End if.
          }
          else
          {
            gArcadeITTasks[lTask].time_current = gArcadeITTasks[lTask].time_period;
 8001452:	4b1f      	ldr	r3, [pc, #124]	; (80014d0 <ArcadeIT_Scheduler_Update+0x84>)
 8001454:	222c      	movs	r2, #44	; 0x2c
 8001456:	fb02 3104 	mla	r1, r2, r4, r3
 800145a:	688b      	ldr	r3, [r1, #8]
 800145c:	60cb      	str	r3, [r1, #12]
  for (lTask = 0; lTask < ARCADEIT_SCHEDULER_MAX_TASKS; lTask++)
 800145e:	3401      	adds	r4, #1
 8001460:	b2e4      	uxtb	r4, r4
 8001462:	2c04      	cmp	r4, #4
 8001464:	d833      	bhi.n	80014ce <ArcadeIT_Scheduler_Update+0x82>
    if (gArcadeITTasks[lTask].function != NULL)
 8001466:	4621      	mov	r1, r4
 8001468:	4a19      	ldr	r2, [pc, #100]	; (80014d0 <ArcadeIT_Scheduler_Update+0x84>)
 800146a:	232c      	movs	r3, #44	; 0x2c
 800146c:	fb03 2304 	mla	r3, r3, r4, r2
 8001470:	691b      	ldr	r3, [r3, #16]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0f3      	beq.n	800145e <ArcadeIT_Scheduler_Update+0x12>
      if (gArcadeITTasks[lTask].execute == FALSE)
 8001476:	232c      	movs	r3, #44	; 0x2c
 8001478:	fb03 2304 	mla	r3, r3, r4, r2
 800147c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1ec      	bne.n	800145e <ArcadeIT_Scheduler_Update+0x12>
        gArcadeITTasks[lTask].time_current--;
 8001484:	4613      	mov	r3, r2
 8001486:	222c      	movs	r2, #44	; 0x2c
 8001488:	fb02 3204 	mla	r2, r2, r4, r3
 800148c:	68d3      	ldr	r3, [r2, #12]
 800148e:	3b01      	subs	r3, #1
 8001490:	60d3      	str	r3, [r2, #12]
        if (gArcadeITTasks[lTask].time_current == 0)
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1e3      	bne.n	800145e <ArcadeIT_Scheduler_Update+0x12>
          gArcadeITTasks[lTask].execute = TRUE;
 8001496:	4a0e      	ldr	r2, [pc, #56]	; (80014d0 <ArcadeIT_Scheduler_Update+0x84>)
 8001498:	232c      	movs	r3, #44	; 0x2c
 800149a:	fb03 f304 	mul.w	r3, r3, r4
 800149e:	18d0      	adds	r0, r2, r3
 80014a0:	2501      	movs	r5, #1
 80014a2:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28
          if (gArcadeITTasks[lTask].cycles)
 80014a6:	58d3      	ldr	r3, [r2, r3]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d0d2      	beq.n	8001452 <ArcadeIT_Scheduler_Update+0x6>
            gArcadeITTasks[lTask].time_current = gArcadeITTasks[lTask].time_period;
 80014ac:	4610      	mov	r0, r2
 80014ae:	232c      	movs	r3, #44	; 0x2c
 80014b0:	fb03 f101 	mul.w	r1, r3, r1
 80014b4:	440a      	add	r2, r1
 80014b6:	6893      	ldr	r3, [r2, #8]
 80014b8:	60d3      	str	r3, [r2, #12]
            gArcadeITTasks[lTask].current_cycle++;
 80014ba:	6853      	ldr	r3, [r2, #4]
 80014bc:	442b      	add	r3, r5
 80014be:	6053      	str	r3, [r2, #4]
            if (gArcadeITTasks[lTask].current_cycle == gArcadeITTasks[lTask].cycles)
 80014c0:	5842      	ldr	r2, [r0, r1]
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d1cb      	bne.n	800145e <ArcadeIT_Scheduler_Update+0x12>
              ArcadeIT_Scheduler_Task_Unset(lTask);
 80014c6:	4620      	mov	r0, r4
 80014c8:	f7ff ffb0 	bl	800142c <ArcadeIT_Scheduler_Task_Unset>
 80014cc:	e7c7      	b.n	800145e <ArcadeIT_Scheduler_Update+0x12>

    } // End if.

  } // End for.

} // End ArcadeIT_Scheduler_Update.
 80014ce:	bd38      	pop	{r3, r4, r5, pc}
 80014d0:	200000a4 	.word	0x200000a4

080014d4 <ArcadeIT_Scheduler_Run>:

// /////////////////////////////////////////////////////////////////////////////
void ArcadeIT_Scheduler_Run(void)
{
 80014d4:	b538      	push	{r3, r4, r5, lr}
  PARMS:        See above.
  RETURNS:      Nothing.
  */

  uint8_t lTask = 0;
  for (lTask = 0; lTask < ARCADEIT_SCHEDULER_MAX_TASKS; lTask++)
 80014d6:	2400      	movs	r4, #0
 80014d8:	e001      	b.n	80014de <ArcadeIT_Scheduler_Run+0xa>
 80014da:	3401      	adds	r4, #1
 80014dc:	b2e4      	uxtb	r4, r4
 80014de:	2c04      	cmp	r4, #4
 80014e0:	d814      	bhi.n	800150c <ArcadeIT_Scheduler_Run+0x38>
  {
    if (gArcadeITTasks[lTask].execute)
 80014e2:	4a0b      	ldr	r2, [pc, #44]	; (8001510 <ArcadeIT_Scheduler_Run+0x3c>)
 80014e4:	232c      	movs	r3, #44	; 0x2c
 80014e6:	fb03 2304 	mla	r3, r3, r4, r2
 80014ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d0f3      	beq.n	80014da <ArcadeIT_Scheduler_Run+0x6>
    {
        // Here we call the function set for this task.
        gArcadeITTasks[lTask].function(gArcadeITTasks[lTask].parameters);
 80014f2:	4610      	mov	r0, r2
 80014f4:	232c      	movs	r3, #44	; 0x2c
 80014f6:	fb03 f304 	mul.w	r3, r3, r4
 80014fa:	18d5      	adds	r5, r2, r3
 80014fc:	692a      	ldr	r2, [r5, #16]
 80014fe:	3318      	adds	r3, #24
 8001500:	4418      	add	r0, r3
 8001502:	4790      	blx	r2

        // Unmark the function.
        gArcadeITTasks[lTask].execute = FALSE;
 8001504:	2300      	movs	r3, #0
 8001506:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
 800150a:	e7e6      	b.n	80014da <ArcadeIT_Scheduler_Run+0x6>

    } // End if.

  } // End for.

} // End ArcadeIT_Scheduler_Run.
 800150c:	bd38      	pop	{r3, r4, r5, pc}
 800150e:	bf00      	nop
 8001510:	200000a4 	.word	0x200000a4

08001514 <__errno>:
 8001514:	4b01      	ldr	r3, [pc, #4]	; (800151c <__errno+0x8>)
 8001516:	6818      	ldr	r0, [r3, #0]
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	20000000 	.word	0x20000000

08001520 <__libc_init_array>:
 8001520:	b570      	push	{r4, r5, r6, lr}
 8001522:	4e0d      	ldr	r6, [pc, #52]	; (8001558 <__libc_init_array+0x38>)
 8001524:	4c0d      	ldr	r4, [pc, #52]	; (800155c <__libc_init_array+0x3c>)
 8001526:	1ba4      	subs	r4, r4, r6
 8001528:	10a4      	asrs	r4, r4, #2
 800152a:	2500      	movs	r5, #0
 800152c:	42a5      	cmp	r5, r4
 800152e:	d109      	bne.n	8001544 <__libc_init_array+0x24>
 8001530:	4e0b      	ldr	r6, [pc, #44]	; (8001560 <__libc_init_array+0x40>)
 8001532:	4c0c      	ldr	r4, [pc, #48]	; (8001564 <__libc_init_array+0x44>)
 8001534:	f000 fc1e 	bl	8001d74 <_init>
 8001538:	1ba4      	subs	r4, r4, r6
 800153a:	10a4      	asrs	r4, r4, #2
 800153c:	2500      	movs	r5, #0
 800153e:	42a5      	cmp	r5, r4
 8001540:	d105      	bne.n	800154e <__libc_init_array+0x2e>
 8001542:	bd70      	pop	{r4, r5, r6, pc}
 8001544:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001548:	4798      	blx	r3
 800154a:	3501      	adds	r5, #1
 800154c:	e7ee      	b.n	800152c <__libc_init_array+0xc>
 800154e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001552:	4798      	blx	r3
 8001554:	3501      	adds	r5, #1
 8001556:	e7f2      	b.n	800153e <__libc_init_array+0x1e>
 8001558:	08003c84 	.word	0x08003c84
 800155c:	08003c84 	.word	0x08003c84
 8001560:	08003c84 	.word	0x08003c84
 8001564:	08003c88 	.word	0x08003c88

08001568 <siprintf>:
 8001568:	b40e      	push	{r1, r2, r3}
 800156a:	b500      	push	{lr}
 800156c:	b09c      	sub	sp, #112	; 0x70
 800156e:	ab1d      	add	r3, sp, #116	; 0x74
 8001570:	9002      	str	r0, [sp, #8]
 8001572:	9006      	str	r0, [sp, #24]
 8001574:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001578:	4809      	ldr	r0, [pc, #36]	; (80015a0 <siprintf+0x38>)
 800157a:	9107      	str	r1, [sp, #28]
 800157c:	9104      	str	r1, [sp, #16]
 800157e:	4909      	ldr	r1, [pc, #36]	; (80015a4 <siprintf+0x3c>)
 8001580:	f853 2b04 	ldr.w	r2, [r3], #4
 8001584:	9105      	str	r1, [sp, #20]
 8001586:	6800      	ldr	r0, [r0, #0]
 8001588:	9301      	str	r3, [sp, #4]
 800158a:	a902      	add	r1, sp, #8
 800158c:	f000 f866 	bl	800165c <_svfiprintf_r>
 8001590:	9b02      	ldr	r3, [sp, #8]
 8001592:	2200      	movs	r2, #0
 8001594:	701a      	strb	r2, [r3, #0]
 8001596:	b01c      	add	sp, #112	; 0x70
 8001598:	f85d eb04 	ldr.w	lr, [sp], #4
 800159c:	b003      	add	sp, #12
 800159e:	4770      	bx	lr
 80015a0:	20000000 	.word	0x20000000
 80015a4:	ffff0208 	.word	0xffff0208

080015a8 <__ssputs_r>:
 80015a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80015ac:	688e      	ldr	r6, [r1, #8]
 80015ae:	429e      	cmp	r6, r3
 80015b0:	4682      	mov	sl, r0
 80015b2:	460c      	mov	r4, r1
 80015b4:	4690      	mov	r8, r2
 80015b6:	4699      	mov	r9, r3
 80015b8:	d837      	bhi.n	800162a <__ssputs_r+0x82>
 80015ba:	898a      	ldrh	r2, [r1, #12]
 80015bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80015c0:	d031      	beq.n	8001626 <__ssputs_r+0x7e>
 80015c2:	6825      	ldr	r5, [r4, #0]
 80015c4:	6909      	ldr	r1, [r1, #16]
 80015c6:	1a6f      	subs	r7, r5, r1
 80015c8:	6965      	ldr	r5, [r4, #20]
 80015ca:	2302      	movs	r3, #2
 80015cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80015d0:	fb95 f5f3 	sdiv	r5, r5, r3
 80015d4:	f109 0301 	add.w	r3, r9, #1
 80015d8:	443b      	add	r3, r7
 80015da:	429d      	cmp	r5, r3
 80015dc:	bf38      	it	cc
 80015de:	461d      	movcc	r5, r3
 80015e0:	0553      	lsls	r3, r2, #21
 80015e2:	d530      	bpl.n	8001646 <__ssputs_r+0x9e>
 80015e4:	4629      	mov	r1, r5
 80015e6:	f000 fb2b 	bl	8001c40 <_malloc_r>
 80015ea:	4606      	mov	r6, r0
 80015ec:	b950      	cbnz	r0, 8001604 <__ssputs_r+0x5c>
 80015ee:	230c      	movs	r3, #12
 80015f0:	f8ca 3000 	str.w	r3, [sl]
 80015f4:	89a3      	ldrh	r3, [r4, #12]
 80015f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015fa:	81a3      	strh	r3, [r4, #12]
 80015fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001604:	463a      	mov	r2, r7
 8001606:	6921      	ldr	r1, [r4, #16]
 8001608:	f000 faa8 	bl	8001b5c <memcpy>
 800160c:	89a3      	ldrh	r3, [r4, #12]
 800160e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001612:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001616:	81a3      	strh	r3, [r4, #12]
 8001618:	6126      	str	r6, [r4, #16]
 800161a:	6165      	str	r5, [r4, #20]
 800161c:	443e      	add	r6, r7
 800161e:	1bed      	subs	r5, r5, r7
 8001620:	6026      	str	r6, [r4, #0]
 8001622:	60a5      	str	r5, [r4, #8]
 8001624:	464e      	mov	r6, r9
 8001626:	454e      	cmp	r6, r9
 8001628:	d900      	bls.n	800162c <__ssputs_r+0x84>
 800162a:	464e      	mov	r6, r9
 800162c:	4632      	mov	r2, r6
 800162e:	4641      	mov	r1, r8
 8001630:	6820      	ldr	r0, [r4, #0]
 8001632:	f000 fa9e 	bl	8001b72 <memmove>
 8001636:	68a3      	ldr	r3, [r4, #8]
 8001638:	1b9b      	subs	r3, r3, r6
 800163a:	60a3      	str	r3, [r4, #8]
 800163c:	6823      	ldr	r3, [r4, #0]
 800163e:	441e      	add	r6, r3
 8001640:	6026      	str	r6, [r4, #0]
 8001642:	2000      	movs	r0, #0
 8001644:	e7dc      	b.n	8001600 <__ssputs_r+0x58>
 8001646:	462a      	mov	r2, r5
 8001648:	f000 fb54 	bl	8001cf4 <_realloc_r>
 800164c:	4606      	mov	r6, r0
 800164e:	2800      	cmp	r0, #0
 8001650:	d1e2      	bne.n	8001618 <__ssputs_r+0x70>
 8001652:	6921      	ldr	r1, [r4, #16]
 8001654:	4650      	mov	r0, sl
 8001656:	f000 faa5 	bl	8001ba4 <_free_r>
 800165a:	e7c8      	b.n	80015ee <__ssputs_r+0x46>

0800165c <_svfiprintf_r>:
 800165c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001660:	461d      	mov	r5, r3
 8001662:	898b      	ldrh	r3, [r1, #12]
 8001664:	061f      	lsls	r7, r3, #24
 8001666:	b09d      	sub	sp, #116	; 0x74
 8001668:	4680      	mov	r8, r0
 800166a:	460c      	mov	r4, r1
 800166c:	4616      	mov	r6, r2
 800166e:	d50f      	bpl.n	8001690 <_svfiprintf_r+0x34>
 8001670:	690b      	ldr	r3, [r1, #16]
 8001672:	b96b      	cbnz	r3, 8001690 <_svfiprintf_r+0x34>
 8001674:	2140      	movs	r1, #64	; 0x40
 8001676:	f000 fae3 	bl	8001c40 <_malloc_r>
 800167a:	6020      	str	r0, [r4, #0]
 800167c:	6120      	str	r0, [r4, #16]
 800167e:	b928      	cbnz	r0, 800168c <_svfiprintf_r+0x30>
 8001680:	230c      	movs	r3, #12
 8001682:	f8c8 3000 	str.w	r3, [r8]
 8001686:	f04f 30ff 	mov.w	r0, #4294967295
 800168a:	e0c8      	b.n	800181e <_svfiprintf_r+0x1c2>
 800168c:	2340      	movs	r3, #64	; 0x40
 800168e:	6163      	str	r3, [r4, #20]
 8001690:	2300      	movs	r3, #0
 8001692:	9309      	str	r3, [sp, #36]	; 0x24
 8001694:	2320      	movs	r3, #32
 8001696:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800169a:	2330      	movs	r3, #48	; 0x30
 800169c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80016a0:	9503      	str	r5, [sp, #12]
 80016a2:	f04f 0b01 	mov.w	fp, #1
 80016a6:	4637      	mov	r7, r6
 80016a8:	463d      	mov	r5, r7
 80016aa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80016ae:	b10b      	cbz	r3, 80016b4 <_svfiprintf_r+0x58>
 80016b0:	2b25      	cmp	r3, #37	; 0x25
 80016b2:	d13e      	bne.n	8001732 <_svfiprintf_r+0xd6>
 80016b4:	ebb7 0a06 	subs.w	sl, r7, r6
 80016b8:	d00b      	beq.n	80016d2 <_svfiprintf_r+0x76>
 80016ba:	4653      	mov	r3, sl
 80016bc:	4632      	mov	r2, r6
 80016be:	4621      	mov	r1, r4
 80016c0:	4640      	mov	r0, r8
 80016c2:	f7ff ff71 	bl	80015a8 <__ssputs_r>
 80016c6:	3001      	adds	r0, #1
 80016c8:	f000 80a4 	beq.w	8001814 <_svfiprintf_r+0x1b8>
 80016cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80016ce:	4453      	add	r3, sl
 80016d0:	9309      	str	r3, [sp, #36]	; 0x24
 80016d2:	783b      	ldrb	r3, [r7, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f000 809d 	beq.w	8001814 <_svfiprintf_r+0x1b8>
 80016da:	2300      	movs	r3, #0
 80016dc:	f04f 32ff 	mov.w	r2, #4294967295
 80016e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80016e4:	9304      	str	r3, [sp, #16]
 80016e6:	9307      	str	r3, [sp, #28]
 80016e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80016ec:	931a      	str	r3, [sp, #104]	; 0x68
 80016ee:	462f      	mov	r7, r5
 80016f0:	2205      	movs	r2, #5
 80016f2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80016f6:	4850      	ldr	r0, [pc, #320]	; (8001838 <_svfiprintf_r+0x1dc>)
 80016f8:	f7fe fd82 	bl	8000200 <memchr>
 80016fc:	9b04      	ldr	r3, [sp, #16]
 80016fe:	b9d0      	cbnz	r0, 8001736 <_svfiprintf_r+0xda>
 8001700:	06d9      	lsls	r1, r3, #27
 8001702:	bf44      	itt	mi
 8001704:	2220      	movmi	r2, #32
 8001706:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800170a:	071a      	lsls	r2, r3, #28
 800170c:	bf44      	itt	mi
 800170e:	222b      	movmi	r2, #43	; 0x2b
 8001710:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001714:	782a      	ldrb	r2, [r5, #0]
 8001716:	2a2a      	cmp	r2, #42	; 0x2a
 8001718:	d015      	beq.n	8001746 <_svfiprintf_r+0xea>
 800171a:	9a07      	ldr	r2, [sp, #28]
 800171c:	462f      	mov	r7, r5
 800171e:	2000      	movs	r0, #0
 8001720:	250a      	movs	r5, #10
 8001722:	4639      	mov	r1, r7
 8001724:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001728:	3b30      	subs	r3, #48	; 0x30
 800172a:	2b09      	cmp	r3, #9
 800172c:	d94d      	bls.n	80017ca <_svfiprintf_r+0x16e>
 800172e:	b1b8      	cbz	r0, 8001760 <_svfiprintf_r+0x104>
 8001730:	e00f      	b.n	8001752 <_svfiprintf_r+0xf6>
 8001732:	462f      	mov	r7, r5
 8001734:	e7b8      	b.n	80016a8 <_svfiprintf_r+0x4c>
 8001736:	4a40      	ldr	r2, [pc, #256]	; (8001838 <_svfiprintf_r+0x1dc>)
 8001738:	1a80      	subs	r0, r0, r2
 800173a:	fa0b f000 	lsl.w	r0, fp, r0
 800173e:	4318      	orrs	r0, r3
 8001740:	9004      	str	r0, [sp, #16]
 8001742:	463d      	mov	r5, r7
 8001744:	e7d3      	b.n	80016ee <_svfiprintf_r+0x92>
 8001746:	9a03      	ldr	r2, [sp, #12]
 8001748:	1d11      	adds	r1, r2, #4
 800174a:	6812      	ldr	r2, [r2, #0]
 800174c:	9103      	str	r1, [sp, #12]
 800174e:	2a00      	cmp	r2, #0
 8001750:	db01      	blt.n	8001756 <_svfiprintf_r+0xfa>
 8001752:	9207      	str	r2, [sp, #28]
 8001754:	e004      	b.n	8001760 <_svfiprintf_r+0x104>
 8001756:	4252      	negs	r2, r2
 8001758:	f043 0302 	orr.w	r3, r3, #2
 800175c:	9207      	str	r2, [sp, #28]
 800175e:	9304      	str	r3, [sp, #16]
 8001760:	783b      	ldrb	r3, [r7, #0]
 8001762:	2b2e      	cmp	r3, #46	; 0x2e
 8001764:	d10c      	bne.n	8001780 <_svfiprintf_r+0x124>
 8001766:	787b      	ldrb	r3, [r7, #1]
 8001768:	2b2a      	cmp	r3, #42	; 0x2a
 800176a:	d133      	bne.n	80017d4 <_svfiprintf_r+0x178>
 800176c:	9b03      	ldr	r3, [sp, #12]
 800176e:	1d1a      	adds	r2, r3, #4
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	9203      	str	r2, [sp, #12]
 8001774:	2b00      	cmp	r3, #0
 8001776:	bfb8      	it	lt
 8001778:	f04f 33ff 	movlt.w	r3, #4294967295
 800177c:	3702      	adds	r7, #2
 800177e:	9305      	str	r3, [sp, #20]
 8001780:	4d2e      	ldr	r5, [pc, #184]	; (800183c <_svfiprintf_r+0x1e0>)
 8001782:	7839      	ldrb	r1, [r7, #0]
 8001784:	2203      	movs	r2, #3
 8001786:	4628      	mov	r0, r5
 8001788:	f7fe fd3a 	bl	8000200 <memchr>
 800178c:	b138      	cbz	r0, 800179e <_svfiprintf_r+0x142>
 800178e:	2340      	movs	r3, #64	; 0x40
 8001790:	1b40      	subs	r0, r0, r5
 8001792:	fa03 f000 	lsl.w	r0, r3, r0
 8001796:	9b04      	ldr	r3, [sp, #16]
 8001798:	4303      	orrs	r3, r0
 800179a:	3701      	adds	r7, #1
 800179c:	9304      	str	r3, [sp, #16]
 800179e:	7839      	ldrb	r1, [r7, #0]
 80017a0:	4827      	ldr	r0, [pc, #156]	; (8001840 <_svfiprintf_r+0x1e4>)
 80017a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80017a6:	2206      	movs	r2, #6
 80017a8:	1c7e      	adds	r6, r7, #1
 80017aa:	f7fe fd29 	bl	8000200 <memchr>
 80017ae:	2800      	cmp	r0, #0
 80017b0:	d038      	beq.n	8001824 <_svfiprintf_r+0x1c8>
 80017b2:	4b24      	ldr	r3, [pc, #144]	; (8001844 <_svfiprintf_r+0x1e8>)
 80017b4:	bb13      	cbnz	r3, 80017fc <_svfiprintf_r+0x1a0>
 80017b6:	9b03      	ldr	r3, [sp, #12]
 80017b8:	3307      	adds	r3, #7
 80017ba:	f023 0307 	bic.w	r3, r3, #7
 80017be:	3308      	adds	r3, #8
 80017c0:	9303      	str	r3, [sp, #12]
 80017c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80017c4:	444b      	add	r3, r9
 80017c6:	9309      	str	r3, [sp, #36]	; 0x24
 80017c8:	e76d      	b.n	80016a6 <_svfiprintf_r+0x4a>
 80017ca:	fb05 3202 	mla	r2, r5, r2, r3
 80017ce:	2001      	movs	r0, #1
 80017d0:	460f      	mov	r7, r1
 80017d2:	e7a6      	b.n	8001722 <_svfiprintf_r+0xc6>
 80017d4:	2300      	movs	r3, #0
 80017d6:	3701      	adds	r7, #1
 80017d8:	9305      	str	r3, [sp, #20]
 80017da:	4619      	mov	r1, r3
 80017dc:	250a      	movs	r5, #10
 80017de:	4638      	mov	r0, r7
 80017e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80017e4:	3a30      	subs	r2, #48	; 0x30
 80017e6:	2a09      	cmp	r2, #9
 80017e8:	d903      	bls.n	80017f2 <_svfiprintf_r+0x196>
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0c8      	beq.n	8001780 <_svfiprintf_r+0x124>
 80017ee:	9105      	str	r1, [sp, #20]
 80017f0:	e7c6      	b.n	8001780 <_svfiprintf_r+0x124>
 80017f2:	fb05 2101 	mla	r1, r5, r1, r2
 80017f6:	2301      	movs	r3, #1
 80017f8:	4607      	mov	r7, r0
 80017fa:	e7f0      	b.n	80017de <_svfiprintf_r+0x182>
 80017fc:	ab03      	add	r3, sp, #12
 80017fe:	9300      	str	r3, [sp, #0]
 8001800:	4622      	mov	r2, r4
 8001802:	4b11      	ldr	r3, [pc, #68]	; (8001848 <_svfiprintf_r+0x1ec>)
 8001804:	a904      	add	r1, sp, #16
 8001806:	4640      	mov	r0, r8
 8001808:	f3af 8000 	nop.w
 800180c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001810:	4681      	mov	r9, r0
 8001812:	d1d6      	bne.n	80017c2 <_svfiprintf_r+0x166>
 8001814:	89a3      	ldrh	r3, [r4, #12]
 8001816:	065b      	lsls	r3, r3, #25
 8001818:	f53f af35 	bmi.w	8001686 <_svfiprintf_r+0x2a>
 800181c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800181e:	b01d      	add	sp, #116	; 0x74
 8001820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001824:	ab03      	add	r3, sp, #12
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	4622      	mov	r2, r4
 800182a:	4b07      	ldr	r3, [pc, #28]	; (8001848 <_svfiprintf_r+0x1ec>)
 800182c:	a904      	add	r1, sp, #16
 800182e:	4640      	mov	r0, r8
 8001830:	f000 f882 	bl	8001938 <_printf_i>
 8001834:	e7ea      	b.n	800180c <_svfiprintf_r+0x1b0>
 8001836:	bf00      	nop
 8001838:	08003c50 	.word	0x08003c50
 800183c:	08003c56 	.word	0x08003c56
 8001840:	08003c5a 	.word	0x08003c5a
 8001844:	00000000 	.word	0x00000000
 8001848:	080015a9 	.word	0x080015a9

0800184c <_printf_common>:
 800184c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001850:	4691      	mov	r9, r2
 8001852:	461f      	mov	r7, r3
 8001854:	688a      	ldr	r2, [r1, #8]
 8001856:	690b      	ldr	r3, [r1, #16]
 8001858:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800185c:	4293      	cmp	r3, r2
 800185e:	bfb8      	it	lt
 8001860:	4613      	movlt	r3, r2
 8001862:	f8c9 3000 	str.w	r3, [r9]
 8001866:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800186a:	4606      	mov	r6, r0
 800186c:	460c      	mov	r4, r1
 800186e:	b112      	cbz	r2, 8001876 <_printf_common+0x2a>
 8001870:	3301      	adds	r3, #1
 8001872:	f8c9 3000 	str.w	r3, [r9]
 8001876:	6823      	ldr	r3, [r4, #0]
 8001878:	0699      	lsls	r1, r3, #26
 800187a:	bf42      	ittt	mi
 800187c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001880:	3302      	addmi	r3, #2
 8001882:	f8c9 3000 	strmi.w	r3, [r9]
 8001886:	6825      	ldr	r5, [r4, #0]
 8001888:	f015 0506 	ands.w	r5, r5, #6
 800188c:	d107      	bne.n	800189e <_printf_common+0x52>
 800188e:	f104 0a19 	add.w	sl, r4, #25
 8001892:	68e3      	ldr	r3, [r4, #12]
 8001894:	f8d9 2000 	ldr.w	r2, [r9]
 8001898:	1a9b      	subs	r3, r3, r2
 800189a:	42ab      	cmp	r3, r5
 800189c:	dc28      	bgt.n	80018f0 <_printf_common+0xa4>
 800189e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80018a2:	6822      	ldr	r2, [r4, #0]
 80018a4:	3300      	adds	r3, #0
 80018a6:	bf18      	it	ne
 80018a8:	2301      	movne	r3, #1
 80018aa:	0692      	lsls	r2, r2, #26
 80018ac:	d42d      	bmi.n	800190a <_printf_common+0xbe>
 80018ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80018b2:	4639      	mov	r1, r7
 80018b4:	4630      	mov	r0, r6
 80018b6:	47c0      	blx	r8
 80018b8:	3001      	adds	r0, #1
 80018ba:	d020      	beq.n	80018fe <_printf_common+0xb2>
 80018bc:	6823      	ldr	r3, [r4, #0]
 80018be:	68e5      	ldr	r5, [r4, #12]
 80018c0:	f8d9 2000 	ldr.w	r2, [r9]
 80018c4:	f003 0306 	and.w	r3, r3, #6
 80018c8:	2b04      	cmp	r3, #4
 80018ca:	bf08      	it	eq
 80018cc:	1aad      	subeq	r5, r5, r2
 80018ce:	68a3      	ldr	r3, [r4, #8]
 80018d0:	6922      	ldr	r2, [r4, #16]
 80018d2:	bf0c      	ite	eq
 80018d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80018d8:	2500      	movne	r5, #0
 80018da:	4293      	cmp	r3, r2
 80018dc:	bfc4      	itt	gt
 80018de:	1a9b      	subgt	r3, r3, r2
 80018e0:	18ed      	addgt	r5, r5, r3
 80018e2:	f04f 0900 	mov.w	r9, #0
 80018e6:	341a      	adds	r4, #26
 80018e8:	454d      	cmp	r5, r9
 80018ea:	d11a      	bne.n	8001922 <_printf_common+0xd6>
 80018ec:	2000      	movs	r0, #0
 80018ee:	e008      	b.n	8001902 <_printf_common+0xb6>
 80018f0:	2301      	movs	r3, #1
 80018f2:	4652      	mov	r2, sl
 80018f4:	4639      	mov	r1, r7
 80018f6:	4630      	mov	r0, r6
 80018f8:	47c0      	blx	r8
 80018fa:	3001      	adds	r0, #1
 80018fc:	d103      	bne.n	8001906 <_printf_common+0xba>
 80018fe:	f04f 30ff 	mov.w	r0, #4294967295
 8001902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001906:	3501      	adds	r5, #1
 8001908:	e7c3      	b.n	8001892 <_printf_common+0x46>
 800190a:	18e1      	adds	r1, r4, r3
 800190c:	1c5a      	adds	r2, r3, #1
 800190e:	2030      	movs	r0, #48	; 0x30
 8001910:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001914:	4422      	add	r2, r4
 8001916:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800191a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800191e:	3302      	adds	r3, #2
 8001920:	e7c5      	b.n	80018ae <_printf_common+0x62>
 8001922:	2301      	movs	r3, #1
 8001924:	4622      	mov	r2, r4
 8001926:	4639      	mov	r1, r7
 8001928:	4630      	mov	r0, r6
 800192a:	47c0      	blx	r8
 800192c:	3001      	adds	r0, #1
 800192e:	d0e6      	beq.n	80018fe <_printf_common+0xb2>
 8001930:	f109 0901 	add.w	r9, r9, #1
 8001934:	e7d8      	b.n	80018e8 <_printf_common+0x9c>
	...

08001938 <_printf_i>:
 8001938:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800193c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001940:	460c      	mov	r4, r1
 8001942:	7e09      	ldrb	r1, [r1, #24]
 8001944:	b085      	sub	sp, #20
 8001946:	296e      	cmp	r1, #110	; 0x6e
 8001948:	4617      	mov	r7, r2
 800194a:	4606      	mov	r6, r0
 800194c:	4698      	mov	r8, r3
 800194e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001950:	f000 80b3 	beq.w	8001aba <_printf_i+0x182>
 8001954:	d822      	bhi.n	800199c <_printf_i+0x64>
 8001956:	2963      	cmp	r1, #99	; 0x63
 8001958:	d036      	beq.n	80019c8 <_printf_i+0x90>
 800195a:	d80a      	bhi.n	8001972 <_printf_i+0x3a>
 800195c:	2900      	cmp	r1, #0
 800195e:	f000 80b9 	beq.w	8001ad4 <_printf_i+0x19c>
 8001962:	2958      	cmp	r1, #88	; 0x58
 8001964:	f000 8083 	beq.w	8001a6e <_printf_i+0x136>
 8001968:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800196c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001970:	e032      	b.n	80019d8 <_printf_i+0xa0>
 8001972:	2964      	cmp	r1, #100	; 0x64
 8001974:	d001      	beq.n	800197a <_printf_i+0x42>
 8001976:	2969      	cmp	r1, #105	; 0x69
 8001978:	d1f6      	bne.n	8001968 <_printf_i+0x30>
 800197a:	6820      	ldr	r0, [r4, #0]
 800197c:	6813      	ldr	r3, [r2, #0]
 800197e:	0605      	lsls	r5, r0, #24
 8001980:	f103 0104 	add.w	r1, r3, #4
 8001984:	d52a      	bpl.n	80019dc <_printf_i+0xa4>
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6011      	str	r1, [r2, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	da03      	bge.n	8001996 <_printf_i+0x5e>
 800198e:	222d      	movs	r2, #45	; 0x2d
 8001990:	425b      	negs	r3, r3
 8001992:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001996:	486f      	ldr	r0, [pc, #444]	; (8001b54 <_printf_i+0x21c>)
 8001998:	220a      	movs	r2, #10
 800199a:	e039      	b.n	8001a10 <_printf_i+0xd8>
 800199c:	2973      	cmp	r1, #115	; 0x73
 800199e:	f000 809d 	beq.w	8001adc <_printf_i+0x1a4>
 80019a2:	d808      	bhi.n	80019b6 <_printf_i+0x7e>
 80019a4:	296f      	cmp	r1, #111	; 0x6f
 80019a6:	d020      	beq.n	80019ea <_printf_i+0xb2>
 80019a8:	2970      	cmp	r1, #112	; 0x70
 80019aa:	d1dd      	bne.n	8001968 <_printf_i+0x30>
 80019ac:	6823      	ldr	r3, [r4, #0]
 80019ae:	f043 0320 	orr.w	r3, r3, #32
 80019b2:	6023      	str	r3, [r4, #0]
 80019b4:	e003      	b.n	80019be <_printf_i+0x86>
 80019b6:	2975      	cmp	r1, #117	; 0x75
 80019b8:	d017      	beq.n	80019ea <_printf_i+0xb2>
 80019ba:	2978      	cmp	r1, #120	; 0x78
 80019bc:	d1d4      	bne.n	8001968 <_printf_i+0x30>
 80019be:	2378      	movs	r3, #120	; 0x78
 80019c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80019c4:	4864      	ldr	r0, [pc, #400]	; (8001b58 <_printf_i+0x220>)
 80019c6:	e055      	b.n	8001a74 <_printf_i+0x13c>
 80019c8:	6813      	ldr	r3, [r2, #0]
 80019ca:	1d19      	adds	r1, r3, #4
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6011      	str	r1, [r2, #0]
 80019d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80019d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80019d8:	2301      	movs	r3, #1
 80019da:	e08c      	b.n	8001af6 <_printf_i+0x1be>
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6011      	str	r1, [r2, #0]
 80019e0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80019e4:	bf18      	it	ne
 80019e6:	b21b      	sxthne	r3, r3
 80019e8:	e7cf      	b.n	800198a <_printf_i+0x52>
 80019ea:	6813      	ldr	r3, [r2, #0]
 80019ec:	6825      	ldr	r5, [r4, #0]
 80019ee:	1d18      	adds	r0, r3, #4
 80019f0:	6010      	str	r0, [r2, #0]
 80019f2:	0628      	lsls	r0, r5, #24
 80019f4:	d501      	bpl.n	80019fa <_printf_i+0xc2>
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	e002      	b.n	8001a00 <_printf_i+0xc8>
 80019fa:	0668      	lsls	r0, r5, #25
 80019fc:	d5fb      	bpl.n	80019f6 <_printf_i+0xbe>
 80019fe:	881b      	ldrh	r3, [r3, #0]
 8001a00:	4854      	ldr	r0, [pc, #336]	; (8001b54 <_printf_i+0x21c>)
 8001a02:	296f      	cmp	r1, #111	; 0x6f
 8001a04:	bf14      	ite	ne
 8001a06:	220a      	movne	r2, #10
 8001a08:	2208      	moveq	r2, #8
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001a10:	6865      	ldr	r5, [r4, #4]
 8001a12:	60a5      	str	r5, [r4, #8]
 8001a14:	2d00      	cmp	r5, #0
 8001a16:	f2c0 8095 	blt.w	8001b44 <_printf_i+0x20c>
 8001a1a:	6821      	ldr	r1, [r4, #0]
 8001a1c:	f021 0104 	bic.w	r1, r1, #4
 8001a20:	6021      	str	r1, [r4, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d13d      	bne.n	8001aa2 <_printf_i+0x16a>
 8001a26:	2d00      	cmp	r5, #0
 8001a28:	f040 808e 	bne.w	8001b48 <_printf_i+0x210>
 8001a2c:	4665      	mov	r5, ip
 8001a2e:	2a08      	cmp	r2, #8
 8001a30:	d10b      	bne.n	8001a4a <_printf_i+0x112>
 8001a32:	6823      	ldr	r3, [r4, #0]
 8001a34:	07db      	lsls	r3, r3, #31
 8001a36:	d508      	bpl.n	8001a4a <_printf_i+0x112>
 8001a38:	6923      	ldr	r3, [r4, #16]
 8001a3a:	6862      	ldr	r2, [r4, #4]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	bfde      	ittt	le
 8001a40:	2330      	movle	r3, #48	; 0x30
 8001a42:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001a46:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001a4a:	ebac 0305 	sub.w	r3, ip, r5
 8001a4e:	6123      	str	r3, [r4, #16]
 8001a50:	f8cd 8000 	str.w	r8, [sp]
 8001a54:	463b      	mov	r3, r7
 8001a56:	aa03      	add	r2, sp, #12
 8001a58:	4621      	mov	r1, r4
 8001a5a:	4630      	mov	r0, r6
 8001a5c:	f7ff fef6 	bl	800184c <_printf_common>
 8001a60:	3001      	adds	r0, #1
 8001a62:	d14d      	bne.n	8001b00 <_printf_i+0x1c8>
 8001a64:	f04f 30ff 	mov.w	r0, #4294967295
 8001a68:	b005      	add	sp, #20
 8001a6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001a6e:	4839      	ldr	r0, [pc, #228]	; (8001b54 <_printf_i+0x21c>)
 8001a70:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001a74:	6813      	ldr	r3, [r2, #0]
 8001a76:	6821      	ldr	r1, [r4, #0]
 8001a78:	1d1d      	adds	r5, r3, #4
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6015      	str	r5, [r2, #0]
 8001a7e:	060a      	lsls	r2, r1, #24
 8001a80:	d50b      	bpl.n	8001a9a <_printf_i+0x162>
 8001a82:	07ca      	lsls	r2, r1, #31
 8001a84:	bf44      	itt	mi
 8001a86:	f041 0120 	orrmi.w	r1, r1, #32
 8001a8a:	6021      	strmi	r1, [r4, #0]
 8001a8c:	b91b      	cbnz	r3, 8001a96 <_printf_i+0x15e>
 8001a8e:	6822      	ldr	r2, [r4, #0]
 8001a90:	f022 0220 	bic.w	r2, r2, #32
 8001a94:	6022      	str	r2, [r4, #0]
 8001a96:	2210      	movs	r2, #16
 8001a98:	e7b7      	b.n	8001a0a <_printf_i+0xd2>
 8001a9a:	064d      	lsls	r5, r1, #25
 8001a9c:	bf48      	it	mi
 8001a9e:	b29b      	uxthmi	r3, r3
 8001aa0:	e7ef      	b.n	8001a82 <_printf_i+0x14a>
 8001aa2:	4665      	mov	r5, ip
 8001aa4:	fbb3 f1f2 	udiv	r1, r3, r2
 8001aa8:	fb02 3311 	mls	r3, r2, r1, r3
 8001aac:	5cc3      	ldrb	r3, [r0, r3]
 8001aae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	2900      	cmp	r1, #0
 8001ab6:	d1f5      	bne.n	8001aa4 <_printf_i+0x16c>
 8001ab8:	e7b9      	b.n	8001a2e <_printf_i+0xf6>
 8001aba:	6813      	ldr	r3, [r2, #0]
 8001abc:	6825      	ldr	r5, [r4, #0]
 8001abe:	6961      	ldr	r1, [r4, #20]
 8001ac0:	1d18      	adds	r0, r3, #4
 8001ac2:	6010      	str	r0, [r2, #0]
 8001ac4:	0628      	lsls	r0, r5, #24
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	d501      	bpl.n	8001ace <_printf_i+0x196>
 8001aca:	6019      	str	r1, [r3, #0]
 8001acc:	e002      	b.n	8001ad4 <_printf_i+0x19c>
 8001ace:	066a      	lsls	r2, r5, #25
 8001ad0:	d5fb      	bpl.n	8001aca <_printf_i+0x192>
 8001ad2:	8019      	strh	r1, [r3, #0]
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	6123      	str	r3, [r4, #16]
 8001ad8:	4665      	mov	r5, ip
 8001ada:	e7b9      	b.n	8001a50 <_printf_i+0x118>
 8001adc:	6813      	ldr	r3, [r2, #0]
 8001ade:	1d19      	adds	r1, r3, #4
 8001ae0:	6011      	str	r1, [r2, #0]
 8001ae2:	681d      	ldr	r5, [r3, #0]
 8001ae4:	6862      	ldr	r2, [r4, #4]
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	4628      	mov	r0, r5
 8001aea:	f7fe fb89 	bl	8000200 <memchr>
 8001aee:	b108      	cbz	r0, 8001af4 <_printf_i+0x1bc>
 8001af0:	1b40      	subs	r0, r0, r5
 8001af2:	6060      	str	r0, [r4, #4]
 8001af4:	6863      	ldr	r3, [r4, #4]
 8001af6:	6123      	str	r3, [r4, #16]
 8001af8:	2300      	movs	r3, #0
 8001afa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001afe:	e7a7      	b.n	8001a50 <_printf_i+0x118>
 8001b00:	6923      	ldr	r3, [r4, #16]
 8001b02:	462a      	mov	r2, r5
 8001b04:	4639      	mov	r1, r7
 8001b06:	4630      	mov	r0, r6
 8001b08:	47c0      	blx	r8
 8001b0a:	3001      	adds	r0, #1
 8001b0c:	d0aa      	beq.n	8001a64 <_printf_i+0x12c>
 8001b0e:	6823      	ldr	r3, [r4, #0]
 8001b10:	079b      	lsls	r3, r3, #30
 8001b12:	d413      	bmi.n	8001b3c <_printf_i+0x204>
 8001b14:	68e0      	ldr	r0, [r4, #12]
 8001b16:	9b03      	ldr	r3, [sp, #12]
 8001b18:	4298      	cmp	r0, r3
 8001b1a:	bfb8      	it	lt
 8001b1c:	4618      	movlt	r0, r3
 8001b1e:	e7a3      	b.n	8001a68 <_printf_i+0x130>
 8001b20:	2301      	movs	r3, #1
 8001b22:	464a      	mov	r2, r9
 8001b24:	4639      	mov	r1, r7
 8001b26:	4630      	mov	r0, r6
 8001b28:	47c0      	blx	r8
 8001b2a:	3001      	adds	r0, #1
 8001b2c:	d09a      	beq.n	8001a64 <_printf_i+0x12c>
 8001b2e:	3501      	adds	r5, #1
 8001b30:	68e3      	ldr	r3, [r4, #12]
 8001b32:	9a03      	ldr	r2, [sp, #12]
 8001b34:	1a9b      	subs	r3, r3, r2
 8001b36:	42ab      	cmp	r3, r5
 8001b38:	dcf2      	bgt.n	8001b20 <_printf_i+0x1e8>
 8001b3a:	e7eb      	b.n	8001b14 <_printf_i+0x1dc>
 8001b3c:	2500      	movs	r5, #0
 8001b3e:	f104 0919 	add.w	r9, r4, #25
 8001b42:	e7f5      	b.n	8001b30 <_printf_i+0x1f8>
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1ac      	bne.n	8001aa2 <_printf_i+0x16a>
 8001b48:	7803      	ldrb	r3, [r0, #0]
 8001b4a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001b4e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001b52:	e76c      	b.n	8001a2e <_printf_i+0xf6>
 8001b54:	08003c61 	.word	0x08003c61
 8001b58:	08003c72 	.word	0x08003c72

08001b5c <memcpy>:
 8001b5c:	b510      	push	{r4, lr}
 8001b5e:	1e43      	subs	r3, r0, #1
 8001b60:	440a      	add	r2, r1
 8001b62:	4291      	cmp	r1, r2
 8001b64:	d100      	bne.n	8001b68 <memcpy+0xc>
 8001b66:	bd10      	pop	{r4, pc}
 8001b68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001b6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001b70:	e7f7      	b.n	8001b62 <memcpy+0x6>

08001b72 <memmove>:
 8001b72:	4288      	cmp	r0, r1
 8001b74:	b510      	push	{r4, lr}
 8001b76:	eb01 0302 	add.w	r3, r1, r2
 8001b7a:	d807      	bhi.n	8001b8c <memmove+0x1a>
 8001b7c:	1e42      	subs	r2, r0, #1
 8001b7e:	4299      	cmp	r1, r3
 8001b80:	d00a      	beq.n	8001b98 <memmove+0x26>
 8001b82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001b86:	f802 4f01 	strb.w	r4, [r2, #1]!
 8001b8a:	e7f8      	b.n	8001b7e <memmove+0xc>
 8001b8c:	4283      	cmp	r3, r0
 8001b8e:	d9f5      	bls.n	8001b7c <memmove+0xa>
 8001b90:	1881      	adds	r1, r0, r2
 8001b92:	1ad2      	subs	r2, r2, r3
 8001b94:	42d3      	cmn	r3, r2
 8001b96:	d100      	bne.n	8001b9a <memmove+0x28>
 8001b98:	bd10      	pop	{r4, pc}
 8001b9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001b9e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8001ba2:	e7f7      	b.n	8001b94 <memmove+0x22>

08001ba4 <_free_r>:
 8001ba4:	b538      	push	{r3, r4, r5, lr}
 8001ba6:	4605      	mov	r5, r0
 8001ba8:	2900      	cmp	r1, #0
 8001baa:	d045      	beq.n	8001c38 <_free_r+0x94>
 8001bac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001bb0:	1f0c      	subs	r4, r1, #4
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	bfb8      	it	lt
 8001bb6:	18e4      	addlt	r4, r4, r3
 8001bb8:	f000 f8d2 	bl	8001d60 <__malloc_lock>
 8001bbc:	4a1f      	ldr	r2, [pc, #124]	; (8001c3c <_free_r+0x98>)
 8001bbe:	6813      	ldr	r3, [r2, #0]
 8001bc0:	4610      	mov	r0, r2
 8001bc2:	b933      	cbnz	r3, 8001bd2 <_free_r+0x2e>
 8001bc4:	6063      	str	r3, [r4, #4]
 8001bc6:	6014      	str	r4, [r2, #0]
 8001bc8:	4628      	mov	r0, r5
 8001bca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001bce:	f000 b8c8 	b.w	8001d62 <__malloc_unlock>
 8001bd2:	42a3      	cmp	r3, r4
 8001bd4:	d90c      	bls.n	8001bf0 <_free_r+0x4c>
 8001bd6:	6821      	ldr	r1, [r4, #0]
 8001bd8:	1862      	adds	r2, r4, r1
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	bf04      	itt	eq
 8001bde:	681a      	ldreq	r2, [r3, #0]
 8001be0:	685b      	ldreq	r3, [r3, #4]
 8001be2:	6063      	str	r3, [r4, #4]
 8001be4:	bf04      	itt	eq
 8001be6:	1852      	addeq	r2, r2, r1
 8001be8:	6022      	streq	r2, [r4, #0]
 8001bea:	6004      	str	r4, [r0, #0]
 8001bec:	e7ec      	b.n	8001bc8 <_free_r+0x24>
 8001bee:	4613      	mov	r3, r2
 8001bf0:	685a      	ldr	r2, [r3, #4]
 8001bf2:	b10a      	cbz	r2, 8001bf8 <_free_r+0x54>
 8001bf4:	42a2      	cmp	r2, r4
 8001bf6:	d9fa      	bls.n	8001bee <_free_r+0x4a>
 8001bf8:	6819      	ldr	r1, [r3, #0]
 8001bfa:	1858      	adds	r0, r3, r1
 8001bfc:	42a0      	cmp	r0, r4
 8001bfe:	d10b      	bne.n	8001c18 <_free_r+0x74>
 8001c00:	6820      	ldr	r0, [r4, #0]
 8001c02:	4401      	add	r1, r0
 8001c04:	1858      	adds	r0, r3, r1
 8001c06:	4282      	cmp	r2, r0
 8001c08:	6019      	str	r1, [r3, #0]
 8001c0a:	d1dd      	bne.n	8001bc8 <_free_r+0x24>
 8001c0c:	6810      	ldr	r0, [r2, #0]
 8001c0e:	6852      	ldr	r2, [r2, #4]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	4401      	add	r1, r0
 8001c14:	6019      	str	r1, [r3, #0]
 8001c16:	e7d7      	b.n	8001bc8 <_free_r+0x24>
 8001c18:	d902      	bls.n	8001c20 <_free_r+0x7c>
 8001c1a:	230c      	movs	r3, #12
 8001c1c:	602b      	str	r3, [r5, #0]
 8001c1e:	e7d3      	b.n	8001bc8 <_free_r+0x24>
 8001c20:	6820      	ldr	r0, [r4, #0]
 8001c22:	1821      	adds	r1, r4, r0
 8001c24:	428a      	cmp	r2, r1
 8001c26:	bf04      	itt	eq
 8001c28:	6811      	ldreq	r1, [r2, #0]
 8001c2a:	6852      	ldreq	r2, [r2, #4]
 8001c2c:	6062      	str	r2, [r4, #4]
 8001c2e:	bf04      	itt	eq
 8001c30:	1809      	addeq	r1, r1, r0
 8001c32:	6021      	streq	r1, [r4, #0]
 8001c34:	605c      	str	r4, [r3, #4]
 8001c36:	e7c7      	b.n	8001bc8 <_free_r+0x24>
 8001c38:	bd38      	pop	{r3, r4, r5, pc}
 8001c3a:	bf00      	nop
 8001c3c:	2000009c 	.word	0x2000009c

08001c40 <_malloc_r>:
 8001c40:	b570      	push	{r4, r5, r6, lr}
 8001c42:	1ccd      	adds	r5, r1, #3
 8001c44:	f025 0503 	bic.w	r5, r5, #3
 8001c48:	3508      	adds	r5, #8
 8001c4a:	2d0c      	cmp	r5, #12
 8001c4c:	bf38      	it	cc
 8001c4e:	250c      	movcc	r5, #12
 8001c50:	2d00      	cmp	r5, #0
 8001c52:	4606      	mov	r6, r0
 8001c54:	db01      	blt.n	8001c5a <_malloc_r+0x1a>
 8001c56:	42a9      	cmp	r1, r5
 8001c58:	d903      	bls.n	8001c62 <_malloc_r+0x22>
 8001c5a:	230c      	movs	r3, #12
 8001c5c:	6033      	str	r3, [r6, #0]
 8001c5e:	2000      	movs	r0, #0
 8001c60:	bd70      	pop	{r4, r5, r6, pc}
 8001c62:	f000 f87d 	bl	8001d60 <__malloc_lock>
 8001c66:	4a21      	ldr	r2, [pc, #132]	; (8001cec <_malloc_r+0xac>)
 8001c68:	6814      	ldr	r4, [r2, #0]
 8001c6a:	4621      	mov	r1, r4
 8001c6c:	b991      	cbnz	r1, 8001c94 <_malloc_r+0x54>
 8001c6e:	4c20      	ldr	r4, [pc, #128]	; (8001cf0 <_malloc_r+0xb0>)
 8001c70:	6823      	ldr	r3, [r4, #0]
 8001c72:	b91b      	cbnz	r3, 8001c7c <_malloc_r+0x3c>
 8001c74:	4630      	mov	r0, r6
 8001c76:	f000 f863 	bl	8001d40 <_sbrk_r>
 8001c7a:	6020      	str	r0, [r4, #0]
 8001c7c:	4629      	mov	r1, r5
 8001c7e:	4630      	mov	r0, r6
 8001c80:	f000 f85e 	bl	8001d40 <_sbrk_r>
 8001c84:	1c43      	adds	r3, r0, #1
 8001c86:	d124      	bne.n	8001cd2 <_malloc_r+0x92>
 8001c88:	230c      	movs	r3, #12
 8001c8a:	6033      	str	r3, [r6, #0]
 8001c8c:	4630      	mov	r0, r6
 8001c8e:	f000 f868 	bl	8001d62 <__malloc_unlock>
 8001c92:	e7e4      	b.n	8001c5e <_malloc_r+0x1e>
 8001c94:	680b      	ldr	r3, [r1, #0]
 8001c96:	1b5b      	subs	r3, r3, r5
 8001c98:	d418      	bmi.n	8001ccc <_malloc_r+0x8c>
 8001c9a:	2b0b      	cmp	r3, #11
 8001c9c:	d90f      	bls.n	8001cbe <_malloc_r+0x7e>
 8001c9e:	600b      	str	r3, [r1, #0]
 8001ca0:	50cd      	str	r5, [r1, r3]
 8001ca2:	18cc      	adds	r4, r1, r3
 8001ca4:	4630      	mov	r0, r6
 8001ca6:	f000 f85c 	bl	8001d62 <__malloc_unlock>
 8001caa:	f104 000b 	add.w	r0, r4, #11
 8001cae:	1d23      	adds	r3, r4, #4
 8001cb0:	f020 0007 	bic.w	r0, r0, #7
 8001cb4:	1ac3      	subs	r3, r0, r3
 8001cb6:	d0d3      	beq.n	8001c60 <_malloc_r+0x20>
 8001cb8:	425a      	negs	r2, r3
 8001cba:	50e2      	str	r2, [r4, r3]
 8001cbc:	e7d0      	b.n	8001c60 <_malloc_r+0x20>
 8001cbe:	428c      	cmp	r4, r1
 8001cc0:	684b      	ldr	r3, [r1, #4]
 8001cc2:	bf16      	itet	ne
 8001cc4:	6063      	strne	r3, [r4, #4]
 8001cc6:	6013      	streq	r3, [r2, #0]
 8001cc8:	460c      	movne	r4, r1
 8001cca:	e7eb      	b.n	8001ca4 <_malloc_r+0x64>
 8001ccc:	460c      	mov	r4, r1
 8001cce:	6849      	ldr	r1, [r1, #4]
 8001cd0:	e7cc      	b.n	8001c6c <_malloc_r+0x2c>
 8001cd2:	1cc4      	adds	r4, r0, #3
 8001cd4:	f024 0403 	bic.w	r4, r4, #3
 8001cd8:	42a0      	cmp	r0, r4
 8001cda:	d005      	beq.n	8001ce8 <_malloc_r+0xa8>
 8001cdc:	1a21      	subs	r1, r4, r0
 8001cde:	4630      	mov	r0, r6
 8001ce0:	f000 f82e 	bl	8001d40 <_sbrk_r>
 8001ce4:	3001      	adds	r0, #1
 8001ce6:	d0cf      	beq.n	8001c88 <_malloc_r+0x48>
 8001ce8:	6025      	str	r5, [r4, #0]
 8001cea:	e7db      	b.n	8001ca4 <_malloc_r+0x64>
 8001cec:	2000009c 	.word	0x2000009c
 8001cf0:	200000a0 	.word	0x200000a0

08001cf4 <_realloc_r>:
 8001cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cf6:	4607      	mov	r7, r0
 8001cf8:	4614      	mov	r4, r2
 8001cfa:	460e      	mov	r6, r1
 8001cfc:	b921      	cbnz	r1, 8001d08 <_realloc_r+0x14>
 8001cfe:	4611      	mov	r1, r2
 8001d00:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001d04:	f7ff bf9c 	b.w	8001c40 <_malloc_r>
 8001d08:	b922      	cbnz	r2, 8001d14 <_realloc_r+0x20>
 8001d0a:	f7ff ff4b 	bl	8001ba4 <_free_r>
 8001d0e:	4625      	mov	r5, r4
 8001d10:	4628      	mov	r0, r5
 8001d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d14:	f000 f826 	bl	8001d64 <_malloc_usable_size_r>
 8001d18:	42a0      	cmp	r0, r4
 8001d1a:	d20f      	bcs.n	8001d3c <_realloc_r+0x48>
 8001d1c:	4621      	mov	r1, r4
 8001d1e:	4638      	mov	r0, r7
 8001d20:	f7ff ff8e 	bl	8001c40 <_malloc_r>
 8001d24:	4605      	mov	r5, r0
 8001d26:	2800      	cmp	r0, #0
 8001d28:	d0f2      	beq.n	8001d10 <_realloc_r+0x1c>
 8001d2a:	4631      	mov	r1, r6
 8001d2c:	4622      	mov	r2, r4
 8001d2e:	f7ff ff15 	bl	8001b5c <memcpy>
 8001d32:	4631      	mov	r1, r6
 8001d34:	4638      	mov	r0, r7
 8001d36:	f7ff ff35 	bl	8001ba4 <_free_r>
 8001d3a:	e7e9      	b.n	8001d10 <_realloc_r+0x1c>
 8001d3c:	4635      	mov	r5, r6
 8001d3e:	e7e7      	b.n	8001d10 <_realloc_r+0x1c>

08001d40 <_sbrk_r>:
 8001d40:	b538      	push	{r3, r4, r5, lr}
 8001d42:	4c06      	ldr	r4, [pc, #24]	; (8001d5c <_sbrk_r+0x1c>)
 8001d44:	2300      	movs	r3, #0
 8001d46:	4605      	mov	r5, r0
 8001d48:	4608      	mov	r0, r1
 8001d4a:	6023      	str	r3, [r4, #0]
 8001d4c:	f7fe fab6 	bl	80002bc <_sbrk>
 8001d50:	1c43      	adds	r3, r0, #1
 8001d52:	d102      	bne.n	8001d5a <_sbrk_r+0x1a>
 8001d54:	6823      	ldr	r3, [r4, #0]
 8001d56:	b103      	cbz	r3, 8001d5a <_sbrk_r+0x1a>
 8001d58:	602b      	str	r3, [r5, #0]
 8001d5a:	bd38      	pop	{r3, r4, r5, pc}
 8001d5c:	20000180 	.word	0x20000180

08001d60 <__malloc_lock>:
 8001d60:	4770      	bx	lr

08001d62 <__malloc_unlock>:
 8001d62:	4770      	bx	lr

08001d64 <_malloc_usable_size_r>:
 8001d64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001d68:	1f18      	subs	r0, r3, #4
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	bfbc      	itt	lt
 8001d6e:	580b      	ldrlt	r3, [r1, r0]
 8001d70:	18c0      	addlt	r0, r0, r3
 8001d72:	4770      	bx	lr

08001d74 <_init>:
 8001d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d76:	bf00      	nop
 8001d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d7a:	bc08      	pop	{r3}
 8001d7c:	469e      	mov	lr, r3
 8001d7e:	4770      	bx	lr

08001d80 <_fini>:
 8001d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d82:	bf00      	nop
 8001d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d86:	bc08      	pop	{r3}
 8001d88:	469e      	mov	lr, r3
 8001d8a:	4770      	bx	lr
