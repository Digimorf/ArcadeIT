
ArcadeIT_Ver020_F469_CMSIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016a0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08001860  08001860  00011860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080019e8  080019e8  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080019e8  080019e8  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080019e8  080019e8  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080019e8  080019e8  000119e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080019ec  080019ec  000119ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080019f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000064  08001a54  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08001a54  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008528  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000014f9  00000000  00000000  000285bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000002c0  00000000  00000000  00029ab8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000230  00000000  00000000  00029d78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022502  00000000  00000000  00029fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000051ab  00000000  00000000  0004c4aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b8f6d  00000000  00000000  00051655  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010a5c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000854  00000000  00000000  0010a640  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00000982  00000000  00000000  0010ae94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000064 	.word	0x20000064
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08001848 	.word	0x08001848

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000068 	.word	0x20000068
 80001fc:	08001848 	.word	0x08001848

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <main>:
// /////////////////////////////////////////////////////////////////////////////
// "M A I N"   E N T R Y   P O I N T
// /////////////////////////////////////////////////////////////////////////////

int main(void)
{
 80002a0:	b508      	push	{r3, lr}
  ArcadeIT_Test_Bench();
 80002a2:	f000 f97d 	bl	80005a0 <ArcadeIT_Test_Bench>

  return 0;

} // End main.
 80002a6:	2000      	movs	r0, #0
 80002a8:	bd08      	pop	{r3, pc}

080002aa <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80002aa:	4770      	bx	lr

080002ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002ac:	e7fe      	b.n	80002ac <HardFault_Handler>

080002ae <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002ae:	e7fe      	b.n	80002ae <MemManage_Handler>

080002b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>

080002b2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002b2:	e7fe      	b.n	80002b2 <UsageFault_Handler>

080002b4 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002b4:	4770      	bx	lr

080002b6 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002b6:	4770      	bx	lr

080002b8 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002b8:	4770      	bx	lr
	...

080002bc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80002bc:	b508      	push	{r3, lr}
 80002be:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80002c0:	4a0b      	ldr	r2, [pc, #44]	; (80002f0 <_sbrk+0x34>)
 80002c2:	6812      	ldr	r2, [r2, #0]
 80002c4:	b142      	cbz	r2, 80002d8 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 80002c6:	4a0a      	ldr	r2, [pc, #40]	; (80002f0 <_sbrk+0x34>)
 80002c8:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80002ca:	4403      	add	r3, r0
 80002cc:	466a      	mov	r2, sp
 80002ce:	4293      	cmp	r3, r2
 80002d0:	d806      	bhi.n	80002e0 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 80002d2:	4a07      	ldr	r2, [pc, #28]	; (80002f0 <_sbrk+0x34>)
 80002d4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 80002d6:	bd08      	pop	{r3, pc}
		heap_end = &end;
 80002d8:	4a05      	ldr	r2, [pc, #20]	; (80002f0 <_sbrk+0x34>)
 80002da:	4906      	ldr	r1, [pc, #24]	; (80002f4 <_sbrk+0x38>)
 80002dc:	6011      	str	r1, [r2, #0]
 80002de:	e7f2      	b.n	80002c6 <_sbrk+0xa>
		errno = ENOMEM;
 80002e0:	f000 fe82 	bl	8000fe8 <__errno>
 80002e4:	230c      	movs	r3, #12
 80002e6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80002e8:	f04f 30ff 	mov.w	r0, #4294967295
 80002ec:	e7f3      	b.n	80002d6 <_sbrk+0x1a>
 80002ee:	bf00      	nop
 80002f0:	20000080 	.word	0x20000080
 80002f4:	20000188 	.word	0x20000188

080002f8 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:   ldr   sp, =_estack     /* set stack pointer */
 80002f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000330 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80002fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80002fe:	e003      	b.n	8000308 <LoopCopyDataInit>

08000300 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000300:	4b0c      	ldr	r3, [pc, #48]	; (8000334 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000302:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000304:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000306:	3104      	adds	r1, #4

08000308 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000308:	480b      	ldr	r0, [pc, #44]	; (8000338 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800030a:	4b0c      	ldr	r3, [pc, #48]	; (800033c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800030c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800030e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000310:	d3f6      	bcc.n	8000300 <CopyDataInit>
  ldr  r2, =_sbss
 8000312:	4a0b      	ldr	r2, [pc, #44]	; (8000340 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000314:	e002      	b.n	800031c <LoopFillZerobss>

08000316 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000316:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000318:	f842 3b04 	str.w	r3, [r2], #4

0800031c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800031c:	4b09      	ldr	r3, [pc, #36]	; (8000344 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800031e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000320:	d3f9      	bcc.n	8000316 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  ArcadeIT_System_Init //SystemInit
 8000322:	f000 f841 	bl	80003a8 <ArcadeIT_System_Init>
/* Call static constructors */
    bl __libc_init_array
 8000326:	f000 fe65 	bl	8000ff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800032a:	f7ff ffb9 	bl	80002a0 <main>
  bx  lr    
 800032e:	4770      	bx	lr
Reset_Handler:   ldr   sp, =_estack     /* set stack pointer */
 8000330:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8000334:	080019f0 	.word	0x080019f0
  ldr  r0, =_sdata
 8000338:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800033c:	20000064 	.word	0x20000064
  ldr  r2, =_sbss
 8000340:	20000064 	.word	0x20000064
  ldr  r3, = _ebss
 8000344:	20000184 	.word	0x20000184

08000348 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000348:	e7fe      	b.n	8000348 <ADC_IRQHandler>
	...

0800034c <ArcadeIT_SysTick_Init>:

} // end ArcadeIT_SysTick_Deinit

// -----------------------------------------------------------------------------
int ArcadeIT_SysTick_Init (void)
{
 800034c:	b508      	push	{r3, lr}
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 800034e:	4b0c      	ldr	r3, [pc, #48]	; (8000380 <ArcadeIT_SysTick_Init+0x34>)
 8000350:	4a0c      	ldr	r2, [pc, #48]	; (8000384 <ArcadeIT_SysTick_Init+0x38>)
 8000352:	605a      	str	r2, [r3, #4]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000354:	4a0c      	ldr	r2, [pc, #48]	; (8000388 <ArcadeIT_SysTick_Init+0x3c>)
 8000356:	21f0      	movs	r1, #240	; 0xf0
 8000358:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800035c:	2100      	movs	r1, #0
 800035e:	6099      	str	r1, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000360:	2107      	movs	r1, #7
 8000362:	6019      	str	r1, [r3, #0]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000364:	23c0      	movs	r3, #192	; 0xc0
 8000366:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
  lRetStatus = SysTick_Config(ARCADEIT_HCLKS_PER_MS);

  // Sets the priority of the interrupt
  NVIC_SetPriority (SysTick_IRQn, NVIC_SYSTICK_PRIORITY << 2);

  if (gDevices & ARCADEIT_DEVICE_SERIAL)
 800036a:	4b08      	ldr	r3, [pc, #32]	; (800038c <ArcadeIT_SysTick_Init+0x40>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8000372:	d101      	bne.n	8000378 <ArcadeIT_SysTick_Init+0x2c>
  } // End if.

  // And return the status.
  return lRetStatus;

} // end ArcadeIT_SysTick_Init.
 8000374:	2000      	movs	r0, #0
 8000376:	bd08      	pop	{r3, pc}
    ArcadeIT_Serial_Port_String_Send (TEXT_SYSTICK_INITED);
 8000378:	4805      	ldr	r0, [pc, #20]	; (8000390 <ArcadeIT_SysTick_Init+0x44>)
 800037a:	f000 fbcf 	bl	8000b1c <ArcadeIT_Serial_Port_String_Send>
 800037e:	e7f9      	b.n	8000374 <ArcadeIT_SysTick_Init+0x28>
 8000380:	e000e010 	.word	0xe000e010
 8000384:	0002bf1f 	.word	0x0002bf1f
 8000388:	e000ed00 	.word	0xe000ed00
 800038c:	20000084 	.word	0x20000084
 8000390:	08001860 	.word	0x08001860

08000394 <ArcadeIT_System_Delay>:
   * PARAMETERS:  See above.
   * RETURNS:     Nothing
   */

  // Get the parameter from the parameters pointer.
  gSystemTimer = pDelay;
 8000394:	4b03      	ldr	r3, [pc, #12]	; (80003a4 <ArcadeIT_System_Delay+0x10>)
 8000396:	6018      	str	r0, [r3, #0]
  while (gSystemTimer);
 8000398:	4b02      	ldr	r3, [pc, #8]	; (80003a4 <ArcadeIT_System_Delay+0x10>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d1fb      	bne.n	8000398 <ArcadeIT_System_Delay+0x4>

} // end ArcadeIT_System_Delay.
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	20000094 	.word	0x20000094

080003a8 <ArcadeIT_System_Init>:

// -----------------------------------------------------------------------------
void ArcadeIT_System_Init (void)
{
 80003a8:	b082      	sub	sp, #8
   * DESCRIPTION: This function initializes the core of the system
   * PARAMETERS:  None.
   * RETURNS:     Nothing.
   */

  __IO uint32_t lStartUpCounter = 0;
 80003aa:	2300      	movs	r3, #0
 80003ac:	9301      	str	r3, [sp, #4]

  SCB->AIRCR = ((uint32_t)0x05FA0000) | NVIC_PriorityGroup_2; // Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup 2 value
 80003ae:	4b38      	ldr	r3, [pc, #224]	; (8000490 <ArcadeIT_System_Init+0xe8>)
 80003b0:	4a38      	ldr	r2, [pc, #224]	; (8000494 <ArcadeIT_System_Init+0xec>)
 80003b2:	60da      	str	r2, [r3, #12]
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  // FPU settings: set CP10 and CP11 Full Access
 80003b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80003b8:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80003bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET;     // Vector Table Relocation in Internal FLASH
 80003c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003c4:	609a      	str	r2, [r3, #8]

  // In ArcadeIT PLL (clocked by HSE) is used as System clock source
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80003c6:	4a34      	ldr	r2, [pc, #208]	; (8000498 <ArcadeIT_System_Init+0xf0>)
 80003c8:	6813      	ldr	r3, [r2, #0]
 80003ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80003ce:	6013      	str	r3, [r2, #0]

  // Wait till HSE is ready and if Time out is reached exit
  while(((RCC->CR & RCC_CR_HSERDY) == 0) && (++lStartUpCounter != HSE_STARTUP_TIMEOUT));
 80003d0:	4b31      	ldr	r3, [pc, #196]	; (8000498 <ArcadeIT_System_Init+0xf0>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80003d8:	d105      	bne.n	80003e6 <ArcadeIT_System_Init+0x3e>
 80003da:	9b01      	ldr	r3, [sp, #4]
 80003dc:	3301      	adds	r3, #1
 80003de:	9301      	str	r3, [sp, #4]
 80003e0:	4a2e      	ldr	r2, [pc, #184]	; (800049c <ArcadeIT_System_Init+0xf4>)
 80003e2:	4293      	cmp	r3, r2
 80003e4:	d1f4      	bne.n	80003d0 <ArcadeIT_System_Init+0x28>

  if (RCC->CR & RCC_CR_HSERDY)
 80003e6:	4b2c      	ldr	r3, [pc, #176]	; (8000498 <ArcadeIT_System_Init+0xf0>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80003ee:	d046      	beq.n	800047e <ArcadeIT_System_Init+0xd6>
  {
    // Select regulator voltage output Scale 1 mode
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80003f0:	4b29      	ldr	r3, [pc, #164]	; (8000498 <ArcadeIT_System_Init+0xf0>)
 80003f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80003f4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80003f8:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80003fa:	4929      	ldr	r1, [pc, #164]	; (80004a0 <ArcadeIT_System_Init+0xf8>)
 80003fc:	680a      	ldr	r2, [r1, #0]
 80003fe:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000402:	600a      	str	r2, [r1, #0]
    // HCLK = SYSCLK / 1
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000404:	689a      	ldr	r2, [r3, #8]
 8000406:	609a      	str	r2, [r3, #8]
    // PCLK2 = HCLK / 2
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000408:	689a      	ldr	r2, [r3, #8]
 800040a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800040e:	609a      	str	r2, [r3, #8]
    // PCLK1 = HCLK / 4
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4; // 0x00001400U
 8000410:	689a      	ldr	r2, [r3, #8]
 8000412:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8000416:	609a      	str	r2, [r3, #8]
    // Configure the main PLL
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) - 1) << 16) | (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
 8000418:	4a22      	ldr	r2, [pc, #136]	; (80004a4 <ArcadeIT_System_Init+0xfc>)
 800041a:	605a      	str	r2, [r3, #4]
    // Enable the main PLL
    RCC->CR |= RCC_CR_PLLON;
 800041c:	681a      	ldr	r2, [r3, #0]
 800041e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000422:	601a      	str	r2, [r3, #0]
    // Wait till the main PLL is ready
    while((RCC->CR & RCC_CR_PLLRDY) == 0) {}
 8000424:	4b1c      	ldr	r3, [pc, #112]	; (8000498 <ArcadeIT_System_Init+0xf0>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800042c:	d0fa      	beq.n	8000424 <ArcadeIT_System_Init+0x7c>
    // Enable the Over-drive to extend the clock frequency to 180 Mhz
    PWR->CR |= PWR_CR_ODEN;
 800042e:	4a1c      	ldr	r2, [pc, #112]	; (80004a0 <ArcadeIT_System_Init+0xf8>)
 8000430:	6813      	ldr	r3, [r2, #0]
 8000432:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000436:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODRDY) == 0) {}
 8000438:	4b19      	ldr	r3, [pc, #100]	; (80004a0 <ArcadeIT_System_Init+0xf8>)
 800043a:	685b      	ldr	r3, [r3, #4]
 800043c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000440:	d0fa      	beq.n	8000438 <ArcadeIT_System_Init+0x90>
    PWR->CR |= PWR_CR_ODSWEN;
 8000442:	4a17      	ldr	r2, [pc, #92]	; (80004a0 <ArcadeIT_System_Init+0xf8>)
 8000444:	6813      	ldr	r3, [r2, #0]
 8000446:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800044a:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0) {}
 800044c:	4b14      	ldr	r3, [pc, #80]	; (80004a0 <ArcadeIT_System_Init+0xf8>)
 800044e:	685b      	ldr	r3, [r3, #4]
 8000450:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000454:	d0fa      	beq.n	800044c <ArcadeIT_System_Init+0xa4>
    // Configure Flash prefetch, Instruction cache, Data cache and wait state
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000456:	4b14      	ldr	r3, [pc, #80]	; (80004a8 <ArcadeIT_System_Init+0x100>)
 8000458:	f240 7205 	movw	r2, #1797	; 0x705
 800045c:	601a      	str	r2, [r3, #0]
    // Select the main PLL as system clock source
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800045e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8000462:	689a      	ldr	r2, [r3, #8]
 8000464:	f022 0203 	bic.w	r2, r2, #3
 8000468:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800046a:	689a      	ldr	r2, [r3, #8]
 800046c:	f042 0202 	orr.w	r2, r2, #2
 8000470:	609a      	str	r2, [r3, #8]
    // Wait till the main PLL is used as system clock source
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL) {}
 8000472:	4b09      	ldr	r3, [pc, #36]	; (8000498 <ArcadeIT_System_Init+0xf0>)
 8000474:	689b      	ldr	r3, [r3, #8]
 8000476:	f003 030c 	and.w	r3, r3, #12
 800047a:	2b08      	cmp	r3, #8
 800047c:	d1f9      	bne.n	8000472 <ArcadeIT_System_Init+0xca>
    // configuration. User can add here some code to deal with this error

  } // end if

  // HCLK counter, DWT struct is defined inside the core_cm4.h file
  DWT->CTRL |= 1;  // enable the counter
 800047e:	4b0b      	ldr	r3, [pc, #44]	; (80004ac <ArcadeIT_System_Init+0x104>)
 8000480:	681a      	ldr	r2, [r3, #0]
 8000482:	f042 0201 	orr.w	r2, r2, #1
 8000486:	601a      	str	r2, [r3, #0]
  DWT->CYCCNT = 0; // reset the counter
 8000488:	2200      	movs	r2, #0
 800048a:	605a      	str	r2, [r3, #4]

} // end ArcadeIT_System_Init.
 800048c:	b002      	add	sp, #8
 800048e:	4770      	bx	lr
 8000490:	e000ed00 	.word	0xe000ed00
 8000494:	05fa0500 	.word	0x05fa0500
 8000498:	40023800 	.word	0x40023800
 800049c:	15752a00 	.word	0x15752a00
 80004a0:	40007000 	.word	0x40007000
 80004a4:	07402d04 	.word	0x07402d04
 80004a8:	40023c00 	.word	0x40023c00
 80004ac:	e0001000 	.word	0xe0001000

080004b0 <ArcadeIT_SysTick_Handler>:

} // end ArcadeIT_If_VBlank.

// -----------------------------------------------------------------------------
void ArcadeIT_SysTick_Handler (void)
{
 80004b0:	b508      	push	{r3, lr}
   * PARAMETERS:  TimeDivider: this is the number to divide the system clock by (i.e. 1000: MSec, 1000000: MicroSec... ).
   * RETURNS:     Nothing
   */

  // Decrement timers synchronized to the MCU in ms.
  gSystemTick++;
 80004b2:	4a0d      	ldr	r2, [pc, #52]	; (80004e8 <ArcadeIT_SysTick_Handler+0x38>)
 80004b4:	6813      	ldr	r3, [r2, #0]
 80004b6:	3301      	adds	r3, #1
 80004b8:	6013      	str	r3, [r2, #0]

  if (gSecondaryTimer > 0)
 80004ba:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <ArcadeIT_SysTick_Handler+0x3c>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	b11b      	cbz	r3, 80004c8 <ArcadeIT_SysTick_Handler+0x18>
    gSecondaryTimer--;
 80004c0:	4a0a      	ldr	r2, [pc, #40]	; (80004ec <ArcadeIT_SysTick_Handler+0x3c>)
 80004c2:	6813      	ldr	r3, [r2, #0]
 80004c4:	3b01      	subs	r3, #1
 80004c6:	6013      	str	r3, [r2, #0]

  if (gSystemTimer > 0)
 80004c8:	4b09      	ldr	r3, [pc, #36]	; (80004f0 <ArcadeIT_SysTick_Handler+0x40>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	b11b      	cbz	r3, 80004d6 <ArcadeIT_SysTick_Handler+0x26>
    gSystemTimer--;
 80004ce:	4a08      	ldr	r2, [pc, #32]	; (80004f0 <ArcadeIT_SysTick_Handler+0x40>)
 80004d0:	6813      	ldr	r3, [r2, #0]
 80004d2:	3b01      	subs	r3, #1
 80004d4:	6013      	str	r3, [r2, #0]

  // Run the tasks scheduler.
  if (gUnits & ARCADEIT_UNIT_SCHEDULER)
 80004d6:	4b07      	ldr	r3, [pc, #28]	; (80004f4 <ArcadeIT_SysTick_Handler+0x44>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	f413 7f80 	tst.w	r3, #256	; 0x100
 80004de:	d100      	bne.n	80004e2 <ArcadeIT_SysTick_Handler+0x32>
  {
      ArcadeIT_Scheduler_Update ();

  } // End if.

} // end ArcadeIT_SysTick_Handler.
 80004e0:	bd08      	pop	{r3, pc}
      ArcadeIT_Scheduler_Update ();
 80004e2:	f000 fd1d 	bl	8000f20 <ArcadeIT_Scheduler_Update>
} // end ArcadeIT_SysTick_Handler.
 80004e6:	e7fb      	b.n	80004e0 <ArcadeIT_SysTick_Handler+0x30>
 80004e8:	20000090 	.word	0x20000090
 80004ec:	20000088 	.word	0x20000088
 80004f0:	20000094 	.word	0x20000094
 80004f4:	20000098 	.word	0x20000098

080004f8 <SysTick_Handler>:

void SysTick_Handler(void)
{
 80004f8:	b508      	push	{r3, lr}
  ArcadeIT_SysTick_Handler();
 80004fa:	f7ff ffd9 	bl	80004b0 <ArcadeIT_SysTick_Handler>

} // End SysTick_Handler.
 80004fe:	bd08      	pop	{r3, pc}

08000500 <ArcadeIT_ArcadeIT_Start>:

} // end ArcadeIT_PowerUP_Systems

// /////////////////////////////////////////////////////////////////////////////
void ArcadeIT_ArcadeIT_Start (void)
{
 8000500:	b508      	push	{r3, lr}
   * PARAMETERS:  None.
   * RETURNS:     Nothing
   */

  // ---------------------------------------------------------------------------
  if (gDevices & ARCADEIT_DEVICE_SERIAL)
 8000502:	4b22      	ldr	r3, [pc, #136]	; (800058c <ArcadeIT_ArcadeIT_Start+0x8c>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800050a:	d126      	bne.n	800055a <ArcadeIT_ArcadeIT_Start+0x5a>

  } // End if.
  // ---------------------------------------------------------------------------
  // Clock and timer system. Thjis must be called before the SD card initialization.
  // 1ms System Tick timer.
  ArcadeIT_SysTick_Init ();
 800050c:	f7ff ff1e 	bl	800034c <ArcadeIT_SysTick_Init>

  // ---------------------------------------------------------------------------
  if (gDevices & ARCADEIT_DEVICE_TESTPADS)
 8000510:	4b1e      	ldr	r3, [pc, #120]	; (800058c <ArcadeIT_ArcadeIT_Start+0x8c>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000518:	d124      	bne.n	8000564 <ArcadeIT_ArcadeIT_Start+0x64>
    //ArcadeIT_TestPad_Init (RCC_MCO2Source_PLLCLK, RCC_MCO2Div_4); // 45 MHz
    //ArcadeIT_TestPad_Init (RCC_MCO2Source_HSE, RCC_MCO2Div_1);    //  8 MHz

  } // End if.
  // ---------------------------------------------------------------------------
  if (gDevices & ARCADEIT_DEVICE_STATUSLED)
 800051a:	4b1c      	ldr	r3, [pc, #112]	; (800058c <ArcadeIT_ArcadeIT_Start+0x8c>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000522:	d125      	bne.n	8000570 <ArcadeIT_ArcadeIT_Start+0x70>

  } // End if.
  // ---------------------------------------------------------------------------
  // Systems scheduler task. This must be set AFTER the Systick has been initialized
  // because uses the ISR function that is handled by the Systick.
  if (gUnits & ARCADEIT_UNIT_SCHEDULER)
 8000524:	4b1a      	ldr	r3, [pc, #104]	; (8000590 <ArcadeIT_ArcadeIT_Start+0x90>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	f413 7f80 	tst.w	r3, #256	; 0x100
 800052c:	d123      	bne.n	8000576 <ArcadeIT_ArcadeIT_Start+0x76>
    ArcadeIT_Scheduler_Task_Init ();

  } // End if.
  // ---------------------------------------------------------------------------
  // Start the SPI Port
  if (gDevices & ARCADEIT_DEVICE_SPI1)
 800052e:	4b17      	ldr	r3, [pc, #92]	; (800058c <ArcadeIT_ArcadeIT_Start+0x8c>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	f013 0f10 	tst.w	r3, #16
 8000536:	d007      	beq.n	8000548 <ArcadeIT_ArcadeIT_Start+0x48>
  {
    if (gStorage & ARCADEIT_STORAGE_SD_CARD_SPI1)
 8000538:	4b16      	ldr	r3, [pc, #88]	; (8000594 <ArcadeIT_ArcadeIT_Start+0x94>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f013 0f02 	tst.w	r3, #2
 8000540:	d01c      	beq.n	800057c <ArcadeIT_ArcadeIT_Start+0x7c>
    {
      ArcadeIT_SPI_Port_Init (SPI_FREQ_25_00_MHz);
 8000542:	2008      	movs	r0, #8
 8000544:	f000 f9f8 	bl	8000938 <ArcadeIT_SPI_Port_Init>

    } // End if.

  } // End if.
  // ---------------------------------------------------------------------------
  if (gDevices & ARCADEIT_DEVICE_I2C)
 8000548:	4b10      	ldr	r3, [pc, #64]	; (800058c <ArcadeIT_ArcadeIT_Start+0x8c>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f013 0f20 	tst.w	r3, #32
 8000550:	d118      	bne.n	8000584 <ArcadeIT_ArcadeIT_Start+0x84>
    ArcadeIT_I2C_Port_Init(100000);

  } // End if.

  // ---------------------------------------------------------------------------
  ArcadeIT_Serial_Port_String_Send(CURSOR_NEWLINE);
 8000552:	4811      	ldr	r0, [pc, #68]	; (8000598 <ArcadeIT_ArcadeIT_Start+0x98>)
 8000554:	f000 fae2 	bl	8000b1c <ArcadeIT_Serial_Port_String_Send>

} // End ArcadeIT_Start
 8000558:	bd08      	pop	{r3, pc}
    ArcadeIT_Serial_Port_Init (SYS_SERIAL_SPEED);
 800055a:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 800055e:	f000 fae7 	bl	8000b30 <ArcadeIT_Serial_Port_Init>
 8000562:	e7d3      	b.n	800050c <ArcadeIT_ArcadeIT_Start+0xc>
    ArcadeIT_TestPad_Init (RCC_MCO2Source_SYSCLK, RCC_MCO2Div_4);  //  45 MHz
 8000564:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
 8000568:	2000      	movs	r0, #0
 800056a:	f000 fc37 	bl	8000ddc <ArcadeIT_TestPad_Init>
 800056e:	e7d4      	b.n	800051a <ArcadeIT_ArcadeIT_Start+0x1a>
    ArcadeIT_Status_LEDS_Init ();
 8000570:	f000 fba0 	bl	8000cb4 <ArcadeIT_Status_LEDS_Init>
 8000574:	e7d6      	b.n	8000524 <ArcadeIT_ArcadeIT_Start+0x24>
    ArcadeIT_Scheduler_Task_Init ();
 8000576:	f000 fc75 	bl	8000e64 <ArcadeIT_Scheduler_Task_Init>
 800057a:	e7d8      	b.n	800052e <ArcadeIT_ArcadeIT_Start+0x2e>
      ArcadeIT_SPI_Port_Init (SPI_FREQ_25_00_MHz);
 800057c:	2008      	movs	r0, #8
 800057e:	f000 f9db 	bl	8000938 <ArcadeIT_SPI_Port_Init>
 8000582:	e7e1      	b.n	8000548 <ArcadeIT_ArcadeIT_Start+0x48>
    ArcadeIT_I2C_Port_Init(100000);
 8000584:	4805      	ldr	r0, [pc, #20]	; (800059c <ArcadeIT_ArcadeIT_Start+0x9c>)
 8000586:	f000 f8ff 	bl	8000788 <ArcadeIT_I2C_Port_Init>
 800058a:	e7e2      	b.n	8000552 <ArcadeIT_ArcadeIT_Start+0x52>
 800058c:	20000084 	.word	0x20000084
 8000590:	20000098 	.word	0x20000098
 8000594:	2000008c 	.word	0x2000008c
 8000598:	08001878 	.word	0x08001878
 800059c:	000186a0 	.word	0x000186a0

080005a0 <ArcadeIT_Test_Bench>:

// ////////////////////////////////////////////////////////////////////////////
void ArcadeIT_Test_Bench (void)
{
 80005a0:	b530      	push	{r4, r5, lr}
 80005a2:	b0c3      	sub	sp, #268	; 0x10c
  // The following variables hold the flags that start the features/peripherals
  // of the ArcadeIT System. It could be possible to configure the ArcadeIT System from a
  // *.ini text file on the SD Card, or other sources.

  // System features.
  gUnits = NONE
 80005a4:	4c66      	ldr	r4, [pc, #408]	; (8000740 <ArcadeIT_Test_Bench+0x1a0>)
 80005a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005aa:	6023      	str	r3, [r4, #0]
      //| ARCADEIT_UNIT_RTC           // Real time clock
      //| ARCADEIT_UNIT_DMM           // The custom ArcadeIt Dynamic Memory Manager
        | ARCADEIT_UNIT_SCHEDULER     // The task scheduler system.
      ;

  gStorage = NONE
 80005ac:	4b65      	ldr	r3, [pc, #404]	; (8000744 <ArcadeIT_Test_Bench+0x1a4>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
      //| ARCADEIT_STORAGE_RAM_DISK     // Ram disk with a FAT File system on the SRAM expansion
      //| ARCADEIT_STORAGE_SD_CARD_SPI1 // File system FAT on SD Card over the SPI1 port
      ;

  gDevices = NONE
 80005b2:	4b65      	ldr	r3, [pc, #404]	; (8000748 <ArcadeIT_Test_Bench+0x1a8>)
 80005b4:	4a65      	ldr	r2, [pc, #404]	; (800074c <ArcadeIT_Test_Bench+0x1ac>)
 80005b6:	601a      	str	r2, [r3, #0]
        | ARCADEIT_DEVICE_SERIAL        // Serial port USART 2
        | ARCADEIT_DEVICE_STATUSLED     // Two Status LEDs
        | ARCADEIT_DEVICE_TESTPADS      // System clock test pads
       ;

  ArcadeIT_ArcadeIT_Start();
 80005b8:	f7ff ffa2 	bl	8000500 <ArcadeIT_ArcadeIT_Start>
#endif
#if 1
  // --------------------------------------------------------------------------
  // We setup the scheduler to blink the Status LED 1 at 1Hz (every seconds).

  if (gUnits & ARCADEIT_UNIT_SCHEDULER)
 80005bc:	6823      	ldr	r3, [r4, #0]
 80005be:	f413 7f80 	tst.w	r3, #256	; 0x100
 80005c2:	d00d      	beq.n	80005e0 <ArcadeIT_Test_Bench+0x40>
  {
    if (gDevices & ARCADEIT_DEVICE_STATUSLED)
 80005c4:	4b60      	ldr	r3, [pc, #384]	; (8000748 <ArcadeIT_Test_Bench+0x1a8>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80005cc:	d008      	beq.n	80005e0 <ArcadeIT_Test_Bench+0x40>
    {
          ArcadeIT_Scheduler_Task_Set (
 80005ce:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80005d2:	9300      	str	r3, [sp, #0]
 80005d4:	2300      	movs	r3, #0
 80005d6:	461a      	mov	r2, r3
 80005d8:	495d      	ldr	r1, [pc, #372]	; (8000750 <ArcadeIT_Test_Bench+0x1b0>)
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 fc5c 	bl	8000e98 <ArcadeIT_Scheduler_Task_Set>
  } // end if
#endif
#if 1
  // ---------------------------------------------------------------------------
  // SPI Tests
  if (gDevices & ARCADEIT_DEVICE_SPI1)
 80005e0:	4b59      	ldr	r3, [pc, #356]	; (8000748 <ArcadeIT_Test_Bench+0x1a8>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f013 0f10 	tst.w	r3, #16
 80005e8:	f000 80a0 	beq.w	800072c <ArcadeIT_Test_Bench+0x18c>
       */

    uint8_t lDataRead = 0x0, lDataToWrite = 0xA5;
    uint16_t lAddress = 0x0000;

    if (gDevices & ARCADEIT_DEVICE_SERIAL)
 80005ec:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80005f0:	d00b      	beq.n	800060a <ArcadeIT_Test_Bench+0x6a>
    {
      ArcadeIT_System_Delay(5000);
 80005f2:	f241 3088 	movw	r0, #5000	; 0x1388
 80005f6:	f7ff fecd 	bl	8000394 <ArcadeIT_System_Delay>
      ArcadeIT_Serial_Port_String_Send(RESET_DEVICE);
 80005fa:	4856      	ldr	r0, [pc, #344]	; (8000754 <ArcadeIT_Test_Bench+0x1b4>)
 80005fc:	f000 fa8e 	bl	8000b1c <ArcadeIT_Serial_Port_String_Send>
      ArcadeIT_Status_LED2_Toggle();
 8000600:	f000 fbce 	bl	8000da0 <ArcadeIT_Status_LED2_Toggle>

      ArcadeIT_Serial_Port_String_Send("SPI test for SRAM:\n\r");
 8000604:	4854      	ldr	r0, [pc, #336]	; (8000758 <ArcadeIT_Test_Bench+0x1b8>)
 8000606:	f000 fa89 	bl	8000b1c <ArcadeIT_Serial_Port_String_Send>

    } // end if

    // set SRAM in single byte transfer mode
    SYS_SPI_CS_LOW();
 800060a:	4c54      	ldr	r4, [pc, #336]	; (800075c <ArcadeIT_Test_Bench+0x1bc>)
 800060c:	6963      	ldr	r3, [r4, #20]
 800060e:	f023 0310 	bic.w	r3, r3, #16
 8000612:	6163      	str	r3, [r4, #20]
    ArcadeIT_SPI_Port_RW_Byte(0x1);
 8000614:	2001      	movs	r0, #1
 8000616:	f000 f973 	bl	8000900 <ArcadeIT_SPI_Port_RW_Byte>
    ArcadeIT_SPI_Port_RW_Byte(0x0);
 800061a:	2000      	movs	r0, #0
 800061c:	f000 f970 	bl	8000900 <ArcadeIT_SPI_Port_RW_Byte>
    SYS_SPI_CS_HIGH();
 8000620:	6963      	ldr	r3, [r4, #20]
 8000622:	f043 0310 	orr.w	r3, r3, #16
 8000626:	6163      	str	r3, [r4, #20]

    if (gDevices & ARCADEIT_DEVICE_SERIAL)
 8000628:	4b47      	ldr	r3, [pc, #284]	; (8000748 <ArcadeIT_Test_Bench+0x1a8>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8000630:	d002      	beq.n	8000638 <ArcadeIT_Test_Bench+0x98>
      ArcadeIT_Serial_Port_String_Send("SRAM status register set to: ");
 8000632:	484b      	ldr	r0, [pc, #300]	; (8000760 <ArcadeIT_Test_Bench+0x1c0>)
 8000634:	f000 fa72 	bl	8000b1c <ArcadeIT_Serial_Port_String_Send>

    // set SRAM in single byte transfer mode
    SYS_SPI_CS_LOW();
 8000638:	4c48      	ldr	r4, [pc, #288]	; (800075c <ArcadeIT_Test_Bench+0x1bc>)
 800063a:	6963      	ldr	r3, [r4, #20]
 800063c:	f023 0310 	bic.w	r3, r3, #16
 8000640:	6163      	str	r3, [r4, #20]
    ArcadeIT_SPI_Port_RW_Byte(0x5);
 8000642:	2005      	movs	r0, #5
 8000644:	f000 f95c 	bl	8000900 <ArcadeIT_SPI_Port_RW_Byte>
    lDataRead = ArcadeIT_SPI_Port_RW_Byte(0x0);
 8000648:	2000      	movs	r0, #0
 800064a:	f000 f959 	bl	8000900 <ArcadeIT_SPI_Port_RW_Byte>
 800064e:	4602      	mov	r2, r0
    SYS_SPI_CS_HIGH();
 8000650:	6963      	ldr	r3, [r4, #20]
 8000652:	f043 0310 	orr.w	r3, r3, #16
 8000656:	6163      	str	r3, [r4, #20]

    if (gDevices & ARCADEIT_DEVICE_SERIAL)
 8000658:	4b3b      	ldr	r3, [pc, #236]	; (8000748 <ArcadeIT_Test_Bench+0x1a8>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8000660:	d00f      	beq.n	8000682 <ArcadeIT_Test_Bench+0xe2>
    {
      sprintf(lString, "0x%02X\n\r", lDataRead);
 8000662:	4940      	ldr	r1, [pc, #256]	; (8000764 <ArcadeIT_Test_Bench+0x1c4>)
 8000664:	a802      	add	r0, sp, #8
 8000666:	f000 fce9 	bl	800103c <siprintf>
      ArcadeIT_Serial_Port_String_Send(lString);
 800066a:	a802      	add	r0, sp, #8
 800066c:	f000 fa56 	bl	8000b1c <ArcadeIT_Serial_Port_String_Send>

      sprintf(lString, "Writing '0x%02X' to memory @ 0x%04X ", lDataToWrite, lAddress);
 8000670:	2300      	movs	r3, #0
 8000672:	22a5      	movs	r2, #165	; 0xa5
 8000674:	493c      	ldr	r1, [pc, #240]	; (8000768 <ArcadeIT_Test_Bench+0x1c8>)
 8000676:	a802      	add	r0, sp, #8
 8000678:	f000 fce0 	bl	800103c <siprintf>
      ArcadeIT_Serial_Port_String_Send(lString);
 800067c:	a802      	add	r0, sp, #8
 800067e:	f000 fa4d 	bl	8000b1c <ArcadeIT_Serial_Port_String_Send>

    } // end if

    // write a byte into SRAM
    SYS_SPI_CS_LOW();
 8000682:	4c36      	ldr	r4, [pc, #216]	; (800075c <ArcadeIT_Test_Bench+0x1bc>)
 8000684:	6963      	ldr	r3, [r4, #20]
 8000686:	f023 0310 	bic.w	r3, r3, #16
 800068a:	6163      	str	r3, [r4, #20]
    ArcadeIT_SPI_Port_RW_Byte(0x02);
 800068c:	2002      	movs	r0, #2
 800068e:	f000 f937 	bl	8000900 <ArcadeIT_SPI_Port_RW_Byte>

    // Send bytes: Set internal 16-bit address
    ArcadeIT_SPI_Port_RW_Byte(lAddress >> 8);
 8000692:	2000      	movs	r0, #0
 8000694:	f000 f934 	bl	8000900 <ArcadeIT_SPI_Port_RW_Byte>
    ArcadeIT_SPI_Port_RW_Byte(lAddress & 0xFF);
 8000698:	2000      	movs	r0, #0
 800069a:	f000 f931 	bl	8000900 <ArcadeIT_SPI_Port_RW_Byte>

    ArcadeIT_SPI_Port_RW_Byte(lDataToWrite);
 800069e:	20a5      	movs	r0, #165	; 0xa5
 80006a0:	f000 f92e 	bl	8000900 <ArcadeIT_SPI_Port_RW_Byte>
    SYS_SPI_CS_HIGH();
 80006a4:	6963      	ldr	r3, [r4, #20]
 80006a6:	f043 0310 	orr.w	r3, r3, #16
 80006aa:	6163      	str	r3, [r4, #20]

    if (gDevices & ARCADEIT_DEVICE_SERIAL)
 80006ac:	4b26      	ldr	r3, [pc, #152]	; (8000748 <ArcadeIT_Test_Bench+0x1a8>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80006b4:	d00a      	beq.n	80006cc <ArcadeIT_Test_Bench+0x12c>
    {
      ArcadeIT_Serial_Port_String_Send("-> done!\r\n");
 80006b6:	482d      	ldr	r0, [pc, #180]	; (800076c <ArcadeIT_Test_Bench+0x1cc>)
 80006b8:	f000 fa30 	bl	8000b1c <ArcadeIT_Serial_Port_String_Send>

      sprintf(lString, "Reading memory @ 0x%04X ", lAddress);
 80006bc:	2200      	movs	r2, #0
 80006be:	492c      	ldr	r1, [pc, #176]	; (8000770 <ArcadeIT_Test_Bench+0x1d0>)
 80006c0:	a802      	add	r0, sp, #8
 80006c2:	f000 fcbb 	bl	800103c <siprintf>
      ArcadeIT_Serial_Port_String_Send(lString);
 80006c6:	a802      	add	r0, sp, #8
 80006c8:	f000 fa28 	bl	8000b1c <ArcadeIT_Serial_Port_String_Send>

    } // end if

    // read a byte from SRAM
    SYS_SPI_CS_LOW();
 80006cc:	4c23      	ldr	r4, [pc, #140]	; (800075c <ArcadeIT_Test_Bench+0x1bc>)
 80006ce:	6963      	ldr	r3, [r4, #20]
 80006d0:	f023 0310 	bic.w	r3, r3, #16
 80006d4:	6163      	str	r3, [r4, #20]
    ArcadeIT_SPI_Port_RW_Byte(0x03);
 80006d6:	2003      	movs	r0, #3
 80006d8:	f000 f912 	bl	8000900 <ArcadeIT_SPI_Port_RW_Byte>

    // Send bytes: Set internal 16-bit address
    ArcadeIT_SPI_Port_RW_Byte(lAddress >> 8);
 80006dc:	2000      	movs	r0, #0
 80006de:	f000 f90f 	bl	8000900 <ArcadeIT_SPI_Port_RW_Byte>
    ArcadeIT_SPI_Port_RW_Byte(lAddress & 0xFF);
 80006e2:	2000      	movs	r0, #0
 80006e4:	f000 f90c 	bl	8000900 <ArcadeIT_SPI_Port_RW_Byte>

    lDataRead = ArcadeIT_SPI_Port_RW_Byte(0x0);
 80006e8:	2000      	movs	r0, #0
 80006ea:	f000 f909 	bl	8000900 <ArcadeIT_SPI_Port_RW_Byte>
 80006ee:	4605      	mov	r5, r0
    SYS_SPI_CS_HIGH();
 80006f0:	6963      	ldr	r3, [r4, #20]
 80006f2:	f043 0310 	orr.w	r3, r3, #16
 80006f6:	6163      	str	r3, [r4, #20]

    if (gDevices & ARCADEIT_DEVICE_SERIAL)
 80006f8:	4b13      	ldr	r3, [pc, #76]	; (8000748 <ArcadeIT_Test_Bench+0x1a8>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8000700:	d012      	beq.n	8000728 <ArcadeIT_Test_Bench+0x188>
    {
      sprintf(lString, "-> 0x%02X, ", lDataRead);
 8000702:	4602      	mov	r2, r0
 8000704:	491b      	ldr	r1, [pc, #108]	; (8000774 <ArcadeIT_Test_Bench+0x1d4>)
 8000706:	a802      	add	r0, sp, #8
 8000708:	f000 fc98 	bl	800103c <siprintf>
      ArcadeIT_Serial_Port_String_Send(lString);
 800070c:	a802      	add	r0, sp, #8
 800070e:	f000 fa05 	bl	8000b1c <ArcadeIT_Serial_Port_String_Send>

      ArcadeIT_Serial_Port_String_Send(lDataRead == lDataToWrite ? "correct\r\n" : "wrong!\r\n");
 8000712:	2da5      	cmp	r5, #165	; 0xa5
 8000714:	d112      	bne.n	800073c <ArcadeIT_Test_Bench+0x19c>
 8000716:	4818      	ldr	r0, [pc, #96]	; (8000778 <ArcadeIT_Test_Bench+0x1d8>)
 8000718:	f000 fa00 	bl	8000b1c <ArcadeIT_Serial_Port_String_Send>

      ArcadeIT_Serial_Port_String_Send(CURSOR_NEWLINE);
 800071c:	4817      	ldr	r0, [pc, #92]	; (800077c <ArcadeIT_Test_Bench+0x1dc>)
 800071e:	f000 f9fd 	bl	8000b1c <ArcadeIT_Serial_Port_String_Send>
      ArcadeIT_Serial_Port_String_Send(CURSOR_ON);
 8000722:	4817      	ldr	r0, [pc, #92]	; (8000780 <ArcadeIT_Test_Bench+0x1e0>)
 8000724:	f000 f9fa 	bl	8000b1c <ArcadeIT_Serial_Port_String_Send>

    } // end if

    ArcadeIT_Status_LED2_Toggle();
 8000728:	f000 fb3a 	bl	8000da0 <ArcadeIT_Status_LED2_Toggle>

  while (1)
  {

    // Periodic tasks
    if (gUnits & ARCADEIT_UNIT_SCHEDULER)
 800072c:	4b04      	ldr	r3, [pc, #16]	; (8000740 <ArcadeIT_Test_Bench+0x1a0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000734:	d0fa      	beq.n	800072c <ArcadeIT_Test_Bench+0x18c>
    {
      ArcadeIT_Scheduler_Run ();
 8000736:	f000 fc37 	bl	8000fa8 <ArcadeIT_Scheduler_Run>
 800073a:	e7f7      	b.n	800072c <ArcadeIT_Test_Bench+0x18c>
      ArcadeIT_Serial_Port_String_Send(lDataRead == lDataToWrite ? "correct\r\n" : "wrong!\r\n");
 800073c:	4811      	ldr	r0, [pc, #68]	; (8000784 <ArcadeIT_Test_Bench+0x1e4>)
 800073e:	e7eb      	b.n	8000718 <ArcadeIT_Test_Bench+0x178>
 8000740:	20000098 	.word	0x20000098
 8000744:	2000008c 	.word	0x2000008c
 8000748:	20000084 	.word	0x20000084
 800074c:	00034030 	.word	0x00034030
 8000750:	08000d79 	.word	0x08000d79
 8000754:	08001894 	.word	0x08001894
 8000758:	08001898 	.word	0x08001898
 800075c:	40020800 	.word	0x40020800
 8000760:	080018b0 	.word	0x080018b0
 8000764:	080018d0 	.word	0x080018d0
 8000768:	080018dc 	.word	0x080018dc
 800076c:	08001904 	.word	0x08001904
 8000770:	08001910 	.word	0x08001910
 8000774:	0800192c 	.word	0x0800192c
 8000778:	0800187c 	.word	0x0800187c
 800077c:	08001878 	.word	0x08001878
 8000780:	08001938 	.word	0x08001938
 8000784:	08001888 	.word	0x08001888

08000788 <ArcadeIT_I2C_Port_Init>:

// -----------------------------------------------------------------------------
void ArcadeIT_I2C_Port_Init(
    uint32_t pClock     // The frequency clock of the I2C device
    )
{
 8000788:	b538      	push	{r3, r4, r5, lr}
 800078a:	4605      	mov	r5, r0
  uint32_t lPinPosition;

  // configure the pins of the I2C
  lPinPosition = (SYS_I2C_SCL_PIN_NO * 2);

  if ((RCC->AHB1ENR & RCC_AHB1Periph_GPIOH) == FALSE) RCC->AHB1ENR |= RCC_AHB1Periph_GPIOH;
 800078c:	4b55      	ldr	r3, [pc, #340]	; (80008e4 <ArcadeIT_I2C_Port_Init+0x15c>)
 800078e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000790:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000794:	d104      	bne.n	80007a0 <ArcadeIT_I2C_Port_Init+0x18>
 8000796:	4a53      	ldr	r2, [pc, #332]	; (80008e4 <ArcadeIT_I2C_Port_Init+0x15c>)
 8000798:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800079a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800079e:	6313      	str	r3, [r2, #48]	; 0x30
  if ((RCC->APB1ENR & RCC_APB1Periph_I2C2) == FALSE) RCC->APB1ENR |= RCC_APB1Periph_I2C2;
 80007a0:	4b50      	ldr	r3, [pc, #320]	; (80008e4 <ArcadeIT_I2C_Port_Init+0x15c>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80007a8:	d104      	bne.n	80007b4 <ArcadeIT_I2C_Port_Init+0x2c>
 80007aa:	4a4e      	ldr	r2, [pc, #312]	; (80008e4 <ArcadeIT_I2C_Port_Init+0x15c>)
 80007ac:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80007ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007b2:	6413      	str	r3, [r2, #64]	; 0x40

  // Configure the pin PH4 as alternate function 4 (I2C SCL).
  SYS_I2C_SCL_PER->MODER   &= ~GPIO_MODER_MODER4;
 80007b4:	4b4c      	ldr	r3, [pc, #304]	; (80008e8 <ArcadeIT_I2C_Port_Init+0x160>)
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80007bc:	601a      	str	r2, [r3, #0]
  SYS_I2C_SCL_PER->MODER   |= (((uint32_t)GPIO_Mode_AF) << lPinPosition);
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80007c4:	601a      	str	r2, [r3, #0]
  SYS_I2C_SCL_PER->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR4;
 80007c6:	689a      	ldr	r2, [r3, #8]
 80007c8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80007cc:	609a      	str	r2, [r3, #8]
  SYS_I2C_SCL_PER->OSPEEDR |= ((uint32_t)(GPIO_Speed_2MHz) << lPinPosition);
 80007ce:	689a      	ldr	r2, [r3, #8]
 80007d0:	609a      	str	r2, [r3, #8]
  SYS_I2C_SCL_PER->OTYPER  &= ~GPIO_OTYPER_OT_4;
 80007d2:	685a      	ldr	r2, [r3, #4]
 80007d4:	f022 0210 	bic.w	r2, r2, #16
 80007d8:	605a      	str	r2, [r3, #4]
  SYS_I2C_SCL_PER->OTYPER  |= (uint16_t)(GPIO_OType_OD << SYS_I2C_SCL_PIN_NO);
 80007da:	685a      	ldr	r2, [r3, #4]
 80007dc:	f042 0210 	orr.w	r2, r2, #16
 80007e0:	605a      	str	r2, [r3, #4]
  SYS_I2C_SCL_PER->PUPDR   &= ~GPIO_PUPDR_PUPDR4;
 80007e2:	68da      	ldr	r2, [r3, #12]
 80007e4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80007e8:	60da      	str	r2, [r3, #12]
  SYS_I2C_SCL_PER->PUPDR   |= (((uint32_t)GPIO_PuPd_NOPULL) << lPinPosition);
 80007ea:	68da      	ldr	r2, [r3, #12]
 80007ec:	60da      	str	r2, [r3, #12]
  SYS_I2C_SCL_PER->AFR[0]  &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)SYS_I2C_SCL_PIN_NO & (uint32_t)0x07) * 4));
 80007ee:	6a1a      	ldr	r2, [r3, #32]
 80007f0:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80007f4:	621a      	str	r2, [r3, #32]
  SYS_I2C_SCL_PER->AFR[0]  |= ((uint32_t)(SYS_I2C_AF) << ((uint32_t)((uint32_t)SYS_I2C_SCL_PIN_NO & (uint32_t)0x07) * 4));
 80007f6:	6a1a      	ldr	r2, [r3, #32]
 80007f8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80007fc:	621a      	str	r2, [r3, #32]

  lPinPosition = (SYS_I2C_SDA_PIN_NO * 2);

  // Configure the pin PH5 as alternate function 4 (I2C SDA).
  SYS_I2C_SDA_PER->MODER   &= ~GPIO_MODER_MODER5;
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8000804:	601a      	str	r2, [r3, #0]
  SYS_I2C_SDA_PER->MODER   |= (((uint32_t)GPIO_Mode_AF) << lPinPosition);
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800080c:	601a      	str	r2, [r3, #0]
  SYS_I2C_SDA_PER->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR5;
 800080e:	689a      	ldr	r2, [r3, #8]
 8000810:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8000814:	609a      	str	r2, [r3, #8]
  SYS_I2C_SDA_PER->OSPEEDR |= ((uint32_t)(GPIO_Speed_2MHz) << lPinPosition);
 8000816:	689a      	ldr	r2, [r3, #8]
 8000818:	609a      	str	r2, [r3, #8]
  SYS_I2C_SDA_PER->OTYPER  &= ~GPIO_OTYPER_OT_5;
 800081a:	685a      	ldr	r2, [r3, #4]
 800081c:	f022 0220 	bic.w	r2, r2, #32
 8000820:	605a      	str	r2, [r3, #4]
  SYS_I2C_SDA_PER->OTYPER  |= (uint16_t)(GPIO_OType_OD << SYS_I2C_SDA_PIN_NO);
 8000822:	685a      	ldr	r2, [r3, #4]
 8000824:	f042 0220 	orr.w	r2, r2, #32
 8000828:	605a      	str	r2, [r3, #4]
  SYS_I2C_SDA_PER->PUPDR   &= ~GPIO_PUPDR_PUPDR5;
 800082a:	68da      	ldr	r2, [r3, #12]
 800082c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8000830:	60da      	str	r2, [r3, #12]
  SYS_I2C_SDA_PER->PUPDR   |= (((uint32_t)GPIO_PuPd_NOPULL) << lPinPosition);
 8000832:	68da      	ldr	r2, [r3, #12]
 8000834:	60da      	str	r2, [r3, #12]
  SYS_I2C_SDA_PER->AFR[0] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)SYS_I2C_SDA_PIN_NO & (uint32_t)0x07) * 4)) ;
 8000836:	6a1a      	ldr	r2, [r3, #32]
 8000838:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800083c:	621a      	str	r2, [r3, #32]
  SYS_I2C_SDA_PER->AFR[0] |= ((uint32_t)(SYS_I2C_AF) << ((uint32_t)((uint32_t)SYS_I2C_SDA_PIN_NO & (uint32_t)0x07) * 4));
 800083e:	6a1a      	ldr	r2, [r3, #32]
 8000840:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000844:	621a      	str	r2, [r3, #32]

  // reset the I2C peripheral
  I2C2->CR1 |= I2C_CR1_SWRST;
 8000846:	4c29      	ldr	r4, [pc, #164]	; (80008ec <ArcadeIT_I2C_Port_Init+0x164>)
 8000848:	6823      	ldr	r3, [r4, #0]
 800084a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800084e:	6023      	str	r3, [r4, #0]
  ArcadeIT_System_Delay(1000);
 8000850:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000854:	f7ff fd9e 	bl	8000394 <ArcadeIT_System_Delay>
  I2C2->CR1 = 0x0;
 8000858:	2300      	movs	r3, #0
 800085a:	6023      	str	r3, [r4, #0]

  // configure the I2C port
  I2C2->CR1 &= ~I2C_CR1_PE;
 800085c:	6823      	ldr	r3, [r4, #0]
 800085e:	f023 0301 	bic.w	r3, r3, #1
 8000862:	6023      	str	r3, [r4, #0]
  uint16_t result = 0x04;
  uint8_t lDuty = I2C_DUTY_2;

  freqrange = (apbclock / 1000000);

  I2C2->CR2 &= ~I2C_CR2_FREQ;
 8000864:	6863      	ldr	r3, [r4, #4]
 8000866:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800086a:	6063      	str	r3, [r4, #4]
  I2C2->CR2 |= freqrange;
 800086c:	6863      	ldr	r3, [r4, #4]
 800086e:	f043 032d 	orr.w	r3, r3, #45	; 0x2d
 8000872:	6063      	str	r3, [r4, #4]

  // Configure speed in standard mode
  if (pClock <= 100000)
 8000874:	4b1e      	ldr	r3, [pc, #120]	; (80008f0 <ArcadeIT_I2C_Port_Init+0x168>)
 8000876:	429d      	cmp	r5, r3
 8000878:	d81f      	bhi.n	80008ba <ArcadeIT_I2C_Port_Init+0x132>
  {
    // Standard mode speed calculate
    result = (uint16_t)(apbclock / (pClock << 1));
 800087a:	006d      	lsls	r5, r5, #1
 800087c:	481d      	ldr	r0, [pc, #116]	; (80008f4 <ArcadeIT_I2C_Port_Init+0x16c>)
 800087e:	fbb0 f0f5 	udiv	r0, r0, r5
 8000882:	b280      	uxth	r0, r0

    // Test if CCR value is under 0x4
    if (result < 0x04)
 8000884:	2803      	cmp	r0, #3
 8000886:	d800      	bhi.n	800088a <ArcadeIT_I2C_Port_Init+0x102>
    {
      // Set minimum allowed value
      result = 0x04;
 8000888:	2004      	movs	r0, #4

    // Set speed value for standard mode
    tmpreg |= result;

    // Set Maximum Rise Time for standard mode
    I2C2->TRISE = freqrange + 1;
 800088a:	4b18      	ldr	r3, [pc, #96]	; (80008ec <ArcadeIT_I2C_Port_Init+0x164>)
 800088c:	222e      	movs	r2, #46	; 0x2e
 800088e:	621a      	str	r2, [r3, #32]
    // Set Maximum Rise Time for fast mode
    I2C2->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);

  } // End if.

  I2C2->CCR = tmpreg;
 8000890:	4b16      	ldr	r3, [pc, #88]	; (80008ec <ArcadeIT_I2C_Port_Init+0x164>)
 8000892:	61d8      	str	r0, [r3, #28]
  I2C2->OAR1 = I2C_AcknowledgedAddress_7bit;
 8000894:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000898:	609a      	str	r2, [r3, #8]
  I2C2->OAR2 = 0;
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
  I2C2->CR1 |= I2C_CR1_ACK;
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80008a4:	601a      	str	r2, [r3, #0]
  I2C2->CR1 |= I2C_CR1_PE;
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	f042 0201 	orr.w	r2, r2, #1
 80008ac:	601a      	str	r2, [r3, #0]

  // Shows a message to serial port as debug
  if (gDevices & ARCADEIT_DEVICE_SERIAL)
 80008ae:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <ArcadeIT_I2C_Port_Init+0x170>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80008b6:	d111      	bne.n	80008dc <ArcadeIT_I2C_Port_Init+0x154>
  {
    ArcadeIT_Serial_Port_String_Send(TEXT_I2C_INITED);

  } // End if.

} // end ArcadeIT_I2C_Port_Init
 80008b8:	bd38      	pop	{r3, r4, r5, pc}
      result = (uint16_t)(apbclock / (pClock * 3));
 80008ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80008be:	480d      	ldr	r0, [pc, #52]	; (80008f4 <ArcadeIT_I2C_Port_Init+0x16c>)
 80008c0:	fbb0 f5f5 	udiv	r5, r0, r5
 80008c4:	b2a8      	uxth	r0, r5
    if ((result & I2C_CCR_CCR) == 0)
 80008c6:	f3c5 050b 	ubfx	r5, r5, #0, #12
 80008ca:	b90d      	cbnz	r5, 80008d0 <ArcadeIT_I2C_Port_Init+0x148>
      result |= (uint16_t)0x0001;
 80008cc:	f040 0001 	orr.w	r0, r0, #1
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 80008d0:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
    I2C2->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);
 80008d4:	4b05      	ldr	r3, [pc, #20]	; (80008ec <ArcadeIT_I2C_Port_Init+0x164>)
 80008d6:	220e      	movs	r2, #14
 80008d8:	621a      	str	r2, [r3, #32]
 80008da:	e7d9      	b.n	8000890 <ArcadeIT_I2C_Port_Init+0x108>
    ArcadeIT_Serial_Port_String_Send(TEXT_I2C_INITED);
 80008dc:	4807      	ldr	r0, [pc, #28]	; (80008fc <ArcadeIT_I2C_Port_Init+0x174>)
 80008de:	f000 f91d 	bl	8000b1c <ArcadeIT_Serial_Port_String_Send>
} // end ArcadeIT_I2C_Port_Init
 80008e2:	e7e9      	b.n	80008b8 <ArcadeIT_I2C_Port_Init+0x130>
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40021c00 	.word	0x40021c00
 80008ec:	40005800 	.word	0x40005800
 80008f0:	000186a0 	.word	0x000186a0
 80008f4:	02aea540 	.word	0x02aea540
 80008f8:	20000084 	.word	0x20000084
 80008fc:	08001940 	.word	0x08001940

08000900 <ArcadeIT_SPI_Port_RW_Byte>:
  // The read byte.
  uint8_t lParameter;
  uint32_t lTimeout;

  //Wait until the transmit buffer is empty.
  lTimeout = SYS_SD_SPI_TIMEOUT;
 8000900:	23fa      	movs	r3, #250	; 0xfa

  while ((SYS_SD_SPI_PORT->SR & SPI_I2S_FLAG_TXE) == RESET)
 8000902:	4a0c      	ldr	r2, [pc, #48]	; (8000934 <ArcadeIT_SPI_Port_RW_Byte+0x34>)
 8000904:	6892      	ldr	r2, [r2, #8]
 8000906:	f012 0f02 	tst.w	r2, #2
 800090a:	d103      	bne.n	8000914 <ArcadeIT_SPI_Port_RW_Byte+0x14>
  {
    if (lTimeout-- == 0) break;
 800090c:	1e5a      	subs	r2, r3, #1
 800090e:	b10b      	cbz	r3, 8000914 <ArcadeIT_SPI_Port_RW_Byte+0x14>
 8000910:	4613      	mov	r3, r2
 8000912:	e7f6      	b.n	8000902 <ArcadeIT_SPI_Port_RW_Byte+0x2>
  };

  // Send the byte.
  SYS_SD_SPI_PORT->DR = pData;
 8000914:	4b07      	ldr	r3, [pc, #28]	; (8000934 <ArcadeIT_SPI_Port_RW_Byte+0x34>)
 8000916:	60d8      	str	r0, [r3, #12]

  // Wait to receive a byte.
  lTimeout = SYS_SD_SPI_TIMEOUT;
 8000918:	23fa      	movs	r3, #250	; 0xfa
  while ((SYS_SD_SPI_PORT->SR & SPI_I2S_FLAG_RXNE) == RESET)
 800091a:	4a06      	ldr	r2, [pc, #24]	; (8000934 <ArcadeIT_SPI_Port_RW_Byte+0x34>)
 800091c:	6892      	ldr	r2, [r2, #8]
 800091e:	f012 0f01 	tst.w	r2, #1
 8000922:	d103      	bne.n	800092c <ArcadeIT_SPI_Port_RW_Byte+0x2c>
  {
    if (lTimeout-- == 0) break;
 8000924:	1e5a      	subs	r2, r3, #1
 8000926:	b10b      	cbz	r3, 800092c <ArcadeIT_SPI_Port_RW_Byte+0x2c>
 8000928:	4613      	mov	r3, r2
 800092a:	e7f6      	b.n	800091a <ArcadeIT_SPI_Port_RW_Byte+0x1a>
  };

  // Return the byte read from the SPI bus.
  lParameter = SYS_SD_SPI_PORT->DR;
 800092c:	4b01      	ldr	r3, [pc, #4]	; (8000934 <ArcadeIT_SPI_Port_RW_Byte+0x34>)
 800092e:	68d8      	ldr	r0, [r3, #12]

  return lParameter;

} // End ArcadeIT_SPI_Port_RW_Byte.
 8000930:	b2c0      	uxtb	r0, r0
 8000932:	4770      	bx	lr
 8000934:	40013000 	.word	0x40013000

08000938 <ArcadeIT_SPI_Port_Init>:

// /////////////////////////////////////////////////////////////////////////////
int ArcadeIT_SPI_Port_Init (
  uint16_t pClock // the clock frequency to set the SPI port
  )
{
 8000938:	b508      	push	{r3, lr}
   * PARAMETERS:  None.
   * RETURNS:     Nothing.
   */

  // Enable GPIOs used by the SPI.
  if ((RCC->AHB1ENR & RCC_AHB1Periph_GPIOA) == FALSE) RCC->AHB1ENR |= RCC_AHB1Periph_GPIOA;
 800093a:	4b6f      	ldr	r3, [pc, #444]	; (8000af8 <ArcadeIT_SPI_Port_Init+0x1c0>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f013 0f01 	tst.w	r3, #1
 8000942:	d104      	bne.n	800094e <ArcadeIT_SPI_Port_Init+0x16>
 8000944:	4a6c      	ldr	r2, [pc, #432]	; (8000af8 <ArcadeIT_SPI_Port_Init+0x1c0>)
 8000946:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000948:	f043 0301 	orr.w	r3, r3, #1
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
  if ((RCC->AHB1ENR & RCC_AHB1Periph_GPIOC) == FALSE) RCC->AHB1ENR |= RCC_AHB1Periph_GPIOC;
 800094e:	4b6a      	ldr	r3, [pc, #424]	; (8000af8 <ArcadeIT_SPI_Port_Init+0x1c0>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f013 0f04 	tst.w	r3, #4
 8000956:	d104      	bne.n	8000962 <ArcadeIT_SPI_Port_Init+0x2a>
 8000958:	4a67      	ldr	r2, [pc, #412]	; (8000af8 <ArcadeIT_SPI_Port_Init+0x1c0>)
 800095a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800095c:	f043 0304 	orr.w	r3, r3, #4
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
  if ((RCC->AHB1ENR & RCC_AHB1Periph_GPIOD) == FALSE) RCC->AHB1ENR |= RCC_AHB1Periph_GPIOD;
 8000962:	4b65      	ldr	r3, [pc, #404]	; (8000af8 <ArcadeIT_SPI_Port_Init+0x1c0>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f013 0f08 	tst.w	r3, #8
 800096a:	d104      	bne.n	8000976 <ArcadeIT_SPI_Port_Init+0x3e>
 800096c:	4a62      	ldr	r2, [pc, #392]	; (8000af8 <ArcadeIT_SPI_Port_Init+0x1c0>)
 800096e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000970:	f043 0308 	orr.w	r3, r3, #8
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
  if ((RCC->APB2ENR & RCC_APB2Periph_SPI1) == FALSE) RCC->APB2ENR |= RCC_APB2Periph_SPI1;
 8000976:	4b60      	ldr	r3, [pc, #384]	; (8000af8 <ArcadeIT_SPI_Port_Init+0x1c0>)
 8000978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800097e:	d104      	bne.n	800098a <ArcadeIT_SPI_Port_Init+0x52>
 8000980:	4a5d      	ldr	r2, [pc, #372]	; (8000af8 <ArcadeIT_SPI_Port_Init+0x1c0>)
 8000982:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8000984:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000988:	6453      	str	r3, [r2, #68]	; 0x44
  uint32_t lPinPosition;

  // Configure the output line SCK as alternate function.
  lPinPosition = (SYS_SD_SPI_SCK_PIN_NO * 2);

  SYS_SD_SPI_SCK_PER->MODER   &= ~GPIO_MODER_MODER5;
 800098a:	4b5c      	ldr	r3, [pc, #368]	; (8000afc <ArcadeIT_SPI_Port_Init+0x1c4>)
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8000992:	601a      	str	r2, [r3, #0]
  SYS_SD_SPI_SCK_PER->MODER   |= (((uint32_t)GPIO_Mode_AF) << lPinPosition);
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800099a:	601a      	str	r2, [r3, #0]
  SYS_SD_SPI_SCK_PER->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR5;
 800099c:	689a      	ldr	r2, [r3, #8]
 800099e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80009a2:	609a      	str	r2, [r3, #8]
  SYS_SD_SPI_SCK_PER->OSPEEDR |= ((uint32_t)(GPIO_Speed_100MHz) << lPinPosition);
 80009a4:	689a      	ldr	r2, [r3, #8]
 80009a6:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
 80009aa:	609a      	str	r2, [r3, #8]
  SYS_SD_SPI_SCK_PER->OTYPER  &= ~GPIO_OTYPER_OT_5;
 80009ac:	685a      	ldr	r2, [r3, #4]
 80009ae:	f022 0220 	bic.w	r2, r2, #32
 80009b2:	605a      	str	r2, [r3, #4]
  SYS_SD_SPI_SCK_PER->OTYPER  |= (uint16_t)(GPIO_OType_PP << SYS_SD_SPI_SCK_PIN_NO);
 80009b4:	685a      	ldr	r2, [r3, #4]
 80009b6:	605a      	str	r2, [r3, #4]
  SYS_SD_SPI_SCK_PER->PUPDR   &= ~GPIO_PUPDR_PUPDR5;
 80009b8:	68da      	ldr	r2, [r3, #12]
 80009ba:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80009be:	60da      	str	r2, [r3, #12]
  SYS_SD_SPI_SCK_PER->PUPDR   |= (((uint32_t)GPIO_PuPd_DOWN) << lPinPosition);
 80009c0:	68da      	ldr	r2, [r3, #12]
 80009c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80009c6:	60da      	str	r2, [r3, #12]

  SYS_SD_SPI_SCK_PER->AFR[0]  &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)SYS_SD_SPI_SCK_PIN_NO & (uint32_t)0x07) * 4));
 80009c8:	6a1a      	ldr	r2, [r3, #32]
 80009ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80009ce:	621a      	str	r2, [r3, #32]
  SYS_SD_SPI_SCK_PER->AFR[0]  |= ((uint32_t)(SYS_SD_SPI_AF) << ((uint32_t)((uint32_t)SYS_SD_SPI_SCK_PIN_NO & (uint32_t)0x07) * 4));
 80009d0:	6a1a      	ldr	r2, [r3, #32]
 80009d2:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80009d6:	621a      	str	r2, [r3, #32]

  // Configure the output line MOSI as alternate function.
  lPinPosition = (SYS_SD_SPI_MOSI_PIN_NO * 2);

  SYS_SD_SPI_MOSI_PER->MODER   &= ~GPIO_MODER_MODER7;
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80009de:	601a      	str	r2, [r3, #0]
  SYS_SD_SPI_MOSI_PER->MODER   |= (((uint32_t)GPIO_Mode_AF) << lPinPosition);
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80009e6:	601a      	str	r2, [r3, #0]
  SYS_SD_SPI_MOSI_PER->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR7;
 80009e8:	689a      	ldr	r2, [r3, #8]
 80009ea:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80009ee:	609a      	str	r2, [r3, #8]
  SYS_SD_SPI_MOSI_PER->OSPEEDR |= ((uint32_t)(GPIO_Speed_100MHz) << lPinPosition);
 80009f0:	689a      	ldr	r2, [r3, #8]
 80009f2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80009f6:	609a      	str	r2, [r3, #8]
  SYS_SD_SPI_MOSI_PER->OTYPER  &= ~GPIO_OTYPER_OT_7;
 80009f8:	685a      	ldr	r2, [r3, #4]
 80009fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80009fe:	605a      	str	r2, [r3, #4]
  SYS_SD_SPI_MOSI_PER->OTYPER  |= (uint16_t)(GPIO_OType_PP << SYS_SD_SPI_MOSI_PIN_NO);
 8000a00:	685a      	ldr	r2, [r3, #4]
 8000a02:	605a      	str	r2, [r3, #4]
  SYS_SD_SPI_MOSI_PER->PUPDR   &= ~GPIO_PUPDR_PUPDR7;
 8000a04:	68da      	ldr	r2, [r3, #12]
 8000a06:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8000a0a:	60da      	str	r2, [r3, #12]
  SYS_SD_SPI_MOSI_PER->PUPDR   |= (((uint32_t)GPIO_PuPd_DOWN) << lPinPosition);
 8000a0c:	68da      	ldr	r2, [r3, #12]
 8000a0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000a12:	60da      	str	r2, [r3, #12]

  SYS_SD_SPI_MOSI_PER->AFR[0]  &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)SYS_SD_SPI_MOSI_PIN_NO & (uint32_t)0x07) * 4));
 8000a14:	6a1a      	ldr	r2, [r3, #32]
 8000a16:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8000a1a:	621a      	str	r2, [r3, #32]
  SYS_SD_SPI_MOSI_PER->AFR[0]  |= ((uint32_t)(SYS_SD_SPI_AF) << ((uint32_t)((uint32_t)SYS_SD_SPI_MOSI_PIN_NO & (uint32_t)0x07) * 4));
 8000a1c:	6a1a      	ldr	r2, [r3, #32]
 8000a1e:	f042 42a0 	orr.w	r2, r2, #1342177280	; 0x50000000
 8000a22:	621a      	str	r2, [r3, #32]

  // Configure the output line MISO as alternate function.
  lPinPosition = (SYS_SD_SPI_MISO_PIN_NO * 2);

  SYS_SD_SPI_MISO_PER->MODER   &= ~GPIO_MODER_MODER6;
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000a2a:	601a      	str	r2, [r3, #0]
  SYS_SD_SPI_MISO_PER->MODER   |= (((uint32_t)GPIO_Mode_AF) << lPinPosition);
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000a32:	601a      	str	r2, [r3, #0]
  SYS_SD_SPI_MISO_PER->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR6;
 8000a34:	689a      	ldr	r2, [r3, #8]
 8000a36:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000a3a:	609a      	str	r2, [r3, #8]
  SYS_SD_SPI_MISO_PER->OSPEEDR |= ((uint32_t)(GPIO_Speed_100MHz) << lPinPosition);
 8000a3c:	689a      	ldr	r2, [r3, #8]
 8000a3e:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000a42:	609a      	str	r2, [r3, #8]
  SYS_SD_SPI_MISO_PER->OTYPER  &= ~GPIO_OTYPER_OT_6;
 8000a44:	685a      	ldr	r2, [r3, #4]
 8000a46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000a4a:	605a      	str	r2, [r3, #4]
  SYS_SD_SPI_MISO_PER->OTYPER  |= (uint16_t)(GPIO_OType_PP << SYS_SD_SPI_MISO_PIN_NO);
 8000a4c:	685a      	ldr	r2, [r3, #4]
 8000a4e:	605a      	str	r2, [r3, #4]
  SYS_SD_SPI_MISO_PER->PUPDR   &= ~GPIO_PUPDR_PUPDR6;
 8000a50:	68da      	ldr	r2, [r3, #12]
 8000a52:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000a56:	60da      	str	r2, [r3, #12]
  SYS_SD_SPI_MISO_PER->PUPDR   |= (((uint32_t)GPIO_PuPd_UP) << lPinPosition);
 8000a58:	68da      	ldr	r2, [r3, #12]
 8000a5a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000a5e:	60da      	str	r2, [r3, #12]

  SYS_SD_SPI_MISO_PER->AFR[0]  &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)SYS_SD_SPI_MISO_PIN_NO & (uint32_t)0x07) * 4));
 8000a60:	6a1a      	ldr	r2, [r3, #32]
 8000a62:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000a66:	621a      	str	r2, [r3, #32]
  SYS_SD_SPI_MISO_PER->AFR[0]  |= ((uint32_t)(SYS_SD_SPI_AF) << ((uint32_t)((uint32_t)SYS_SD_SPI_MISO_PIN_NO & (uint32_t)0x07) * 4));
 8000a68:	6a1a      	ldr	r2, [r3, #32]
 8000a6a:	f042 62a0 	orr.w	r2, r2, #83886080	; 0x5000000
 8000a6e:	621a      	str	r2, [r3, #32]

  // Configure the output line CS as a normal output GPIO.
  lPinPosition = (SYS_SD_SPI_CS_PIN_NO * 2);

  SYS_SD_SPI_CS_PER->MODER   &= ~GPIO_MODER_MODER4;
 8000a70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000a7a:	601a      	str	r2, [r3, #0]
  SYS_SD_SPI_CS_PER->MODER   |= (((uint32_t)GPIO_Mode_OUT) << lPinPosition);
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a82:	601a      	str	r2, [r3, #0]
  SYS_SD_SPI_CS_PER->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR4;
 8000a84:	689a      	ldr	r2, [r3, #8]
 8000a86:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000a8a:	609a      	str	r2, [r3, #8]
  SYS_SD_SPI_CS_PER->OSPEEDR |= ((uint32_t)(GPIO_Speed_100MHz) << lPinPosition);
 8000a8c:	689a      	ldr	r2, [r3, #8]
 8000a8e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8000a92:	609a      	str	r2, [r3, #8]
  SYS_SD_SPI_CS_PER->OTYPER  &= ~GPIO_OTYPER_OT_4;
 8000a94:	685a      	ldr	r2, [r3, #4]
 8000a96:	f022 0210 	bic.w	r2, r2, #16
 8000a9a:	605a      	str	r2, [r3, #4]
  SYS_SD_SPI_CS_PER->OTYPER  |= (uint16_t)(GPIO_OType_PP << SYS_SD_SPI_CS_PIN_NO);
 8000a9c:	685a      	ldr	r2, [r3, #4]
 8000a9e:	605a      	str	r2, [r3, #4]
  SYS_SD_SPI_CS_PER->PUPDR   &= ~GPIO_PUPDR_PUPDR4;
 8000aa0:	68da      	ldr	r2, [r3, #12]
 8000aa2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000aa6:	60da      	str	r2, [r3, #12]
  SYS_SD_SPI_CS_PER->PUPDR   |= (((uint32_t)GPIO_PuPd_UP) << lPinPosition);
 8000aa8:	68da      	ldr	r2, [r3, #12]
 8000aaa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000aae:	60da      	str	r2, [r3, #12]

  // Initially the SPI port has 4 multiplexed lines to use as CS.
  // CS1 0 1 0 1
  SYS_SPI_CS_HIGH();
 8000ab0:	695a      	ldr	r2, [r3, #20]
 8000ab2:	f042 0210 	orr.w	r2, r2, #16
 8000ab6:	615a      	str	r2, [r3, #20]

  // SPI configuration.
  // Reset SPI
  RCC->APB2RSTR |= RCC_APB2Periph_SPI1;
 8000ab8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8000abc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000abe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000ac2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC->APB2RSTR &= ~RCC_APB2Periph_SPI1;
 8000ac4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ac6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000aca:	625a      	str	r2, [r3, #36]	; 0x24

  SYS_SD_SPI_PORT->CR1 |=
 8000acc:	f5a3 3384 	sub.w	r3, r3, #67584	; 0x10800
 8000ad0:	681a      	ldr	r2, [r3, #0]
      (uint16_t)((uint32_t)SPI_Direction_2Lines_FullDuplex
 8000ad2:	f440 7041 	orr.w	r0, r0, #772	; 0x304
  SYS_SD_SPI_PORT->CR1 |=
 8000ad6:	4310      	orrs	r0, r2
 8000ad8:	6018      	str	r0, [r3, #0]
                         | SPI_CPHA_1Edge
                         | SPI_NSS_Soft
                         | pClock
                         | SPI_FirstBit_MSB);

  SYS_SD_SPI_PORT->CR1 |= SPI_CR1_SPE;
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ae0:	601a      	str	r2, [r3, #0]

  if (gDevices & ARCADEIT_DEVICE_SERIAL)
 8000ae2:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <ArcadeIT_SPI_Port_Init+0x1c8>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8000aea:	d101      	bne.n	8000af0 <ArcadeIT_SPI_Port_Init+0x1b8>

  } // End if.

  return TRUE;

} // End ArcadeIT_SPI_Port_Init.
 8000aec:	2001      	movs	r0, #1
 8000aee:	bd08      	pop	{r3, pc}
    ArcadeIT_Serial_Port_String_Send(TEXT_SPI_PORT_INITED);
 8000af0:	4804      	ldr	r0, [pc, #16]	; (8000b04 <ArcadeIT_SPI_Port_Init+0x1cc>)
 8000af2:	f000 f813 	bl	8000b1c <ArcadeIT_Serial_Port_String_Send>
 8000af6:	e7f9      	b.n	8000aec <ArcadeIT_SPI_Port_Init+0x1b4>
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40020000 	.word	0x40020000
 8000b00:	20000084 	.word	0x20000084
 8000b04:	08001954 	.word	0x08001954

08000b08 <ArcadeIT_Serial_Port_Char_Send>:
   * RETURNS:     Nothing.
   */

  // wait until data register is empty. The status register should have the flag
  // Transmit data register empty
  while ((SYS_SERIAL_PORT->SR & SYS_SERIAL_FLAG_TXE) == RESET);
 8000b08:	4b03      	ldr	r3, [pc, #12]	; (8000b18 <ArcadeIT_Serial_Port_Char_Send+0x10>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000b10:	d0fa      	beq.n	8000b08 <ArcadeIT_Serial_Port_Char_Send>

  // send the character. We put the data into the data register so that the USART
  // start transmit it.
  SYS_SERIAL_PORT->DR = (pCharacter & (uint16_t)0x01FF);
 8000b12:	4b01      	ldr	r3, [pc, #4]	; (8000b18 <ArcadeIT_Serial_Port_Char_Send+0x10>)
 8000b14:	6058      	str	r0, [r3, #4]

} // End ArcadeIT_Serial_Port_Char_Send.
 8000b16:	4770      	bx	lr
 8000b18:	40004400 	.word	0x40004400

08000b1c <ArcadeIT_Serial_Port_String_Send>:
// -----------------------------------------------------------------------------
void ArcadeIT_Serial_Port_String_Send
(
    char *pString   // The string to send character by character to the serial port.
)
{
 8000b1c:	b510      	push	{r4, lr}
   */

  // while not NULL transmit next character.
  char lCharacter;

  while ((lCharacter = *((char*)pString++)) != 0)
 8000b1e:	e002      	b.n	8000b26 <ArcadeIT_Serial_Port_String_Send+0xa>
  {
    ArcadeIT_Serial_Port_Char_Send (lCharacter);
 8000b20:	f7ff fff2 	bl	8000b08 <ArcadeIT_Serial_Port_Char_Send>
  while ((lCharacter = *((char*)pString++)) != 0)
 8000b24:	4620      	mov	r0, r4
 8000b26:	1c44      	adds	r4, r0, #1
 8000b28:	7800      	ldrb	r0, [r0, #0]
 8000b2a:	2800      	cmp	r0, #0
 8000b2c:	d1f8      	bne.n	8000b20 <ArcadeIT_Serial_Port_String_Send+0x4>

  } // End while.

} // End ArcadeIT_Serial_Port_String_Send.
 8000b2e:	bd10      	pop	{r4, pc}

08000b30 <ArcadeIT_Serial_Port_Init>:
// -----------------------------------------------------------------------------
void ArcadeIT_Serial_Port_Init
(
    uint32_t pBaud   // Baud rate to set the serial port to.
)
{
 8000b30:	b508      	push	{r3, lr}
   */

  uint32_t lPinPosition;

  // ArcadeIT_Serial_Port_Init
  if ((RCC->AHB1ENR & RCC_AHB1Periph_GPIOA) == FALSE) RCC->AHB1ENR |= RCC_AHB1Periph_GPIOA;
 8000b32:	4b59      	ldr	r3, [pc, #356]	; (8000c98 <ArcadeIT_Serial_Port_Init+0x168>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f013 0f01 	tst.w	r3, #1
 8000b3a:	d104      	bne.n	8000b46 <ArcadeIT_Serial_Port_Init+0x16>
 8000b3c:	4a56      	ldr	r2, [pc, #344]	; (8000c98 <ArcadeIT_Serial_Port_Init+0x168>)
 8000b3e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
  if ((RCC->APB1ENR & RCC_APB1Periph_USART2) == FALSE) RCC->APB1ENR |= RCC_APB1Periph_USART2;
 8000b46:	4b54      	ldr	r3, [pc, #336]	; (8000c98 <ArcadeIT_Serial_Port_Init+0x168>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000b4e:	d104      	bne.n	8000b5a <ArcadeIT_Serial_Port_Init+0x2a>
 8000b50:	4a51      	ldr	r2, [pc, #324]	; (8000c98 <ArcadeIT_Serial_Port_Init+0x168>)
 8000b52:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b58:	6413      	str	r3, [r2, #64]	; 0x40
  if ((RCC->AHB1ENR & RCC_AHB1Periph_DMA1) == FALSE) RCC->AHB1ENR |= RCC_AHB1Periph_DMA1;
 8000b5a:	4b4f      	ldr	r3, [pc, #316]	; (8000c98 <ArcadeIT_Serial_Port_Init+0x168>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8000b62:	d104      	bne.n	8000b6e <ArcadeIT_Serial_Port_Init+0x3e>
 8000b64:	4a4c      	ldr	r2, [pc, #304]	; (8000c98 <ArcadeIT_Serial_Port_Init+0x168>)
 8000b66:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000b68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30

  // Configure the pin PA2 as alternate function 7 (USART Tx).
  lPinPosition = (SYS_SERIAL_TX_PIN_NO * 2);
  SYS_SERIAL_TX_PER->MODER   &= ~GPIO_MODER_MODER2;
 8000b6e:	4b4b      	ldr	r3, [pc, #300]	; (8000c9c <ArcadeIT_Serial_Port_Init+0x16c>)
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8000b76:	601a      	str	r2, [r3, #0]
  SYS_SERIAL_TX_PER->MODER   |= (((uint32_t)GPIO_Mode_AF) << lPinPosition);
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	f042 0220 	orr.w	r2, r2, #32
 8000b7e:	601a      	str	r2, [r3, #0]
  SYS_SERIAL_TX_PER->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR2;
 8000b80:	689a      	ldr	r2, [r3, #8]
 8000b82:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8000b86:	609a      	str	r2, [r3, #8]
  SYS_SERIAL_TX_PER->OSPEEDR |= ((uint32_t)(GPIO_Speed_50MHz) << lPinPosition);
 8000b88:	689a      	ldr	r2, [r3, #8]
 8000b8a:	f042 0220 	orr.w	r2, r2, #32
 8000b8e:	609a      	str	r2, [r3, #8]
  SYS_SERIAL_TX_PER->OTYPER  &= ~GPIO_OTYPER_OT_2;
 8000b90:	685a      	ldr	r2, [r3, #4]
 8000b92:	f022 0204 	bic.w	r2, r2, #4
 8000b96:	605a      	str	r2, [r3, #4]
  SYS_SERIAL_TX_PER->OTYPER  |= (uint16_t)(GPIO_OType_PP << SYS_SERIAL_TX_PIN_NO);
 8000b98:	685a      	ldr	r2, [r3, #4]
 8000b9a:	605a      	str	r2, [r3, #4]
  SYS_SERIAL_TX_PER->PUPDR   &= ~GPIO_PUPDR_PUPDR2;
 8000b9c:	68da      	ldr	r2, [r3, #12]
 8000b9e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8000ba2:	60da      	str	r2, [r3, #12]
  SYS_SERIAL_TX_PER->PUPDR   |= (((uint32_t)GPIO_PuPd_NOPULL) << lPinPosition);
 8000ba4:	68da      	ldr	r2, [r3, #12]
 8000ba6:	60da      	str	r2, [r3, #12]
  SYS_SERIAL_TX_PER->AFR[0] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)SYS_SERIAL_TX_PIN_NO & (uint32_t)0x07) * 4));
 8000ba8:	6a1a      	ldr	r2, [r3, #32]
 8000baa:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8000bae:	621a      	str	r2, [r3, #32]
  SYS_SERIAL_TX_PER->AFR[0] |=  ((uint32_t)(SYS_SERIAL_TX_AF) << ((uint32_t)((uint32_t)SYS_SERIAL_TX_PIN_NO & (uint32_t)0x07) * 4));
 8000bb0:	6a1a      	ldr	r2, [r3, #32]
 8000bb2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8000bb6:	621a      	str	r2, [r3, #32]

  // Configure the pin PA3 as alternate function 7 (USART Rx).
  lPinPosition = (SYS_SERIAL_RX_PIN_NO * 2);
  SYS_SERIAL_RX_PER->MODER   &= ~GPIO_MODER_MODER3;
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8000bbe:	601a      	str	r2, [r3, #0]
  SYS_SERIAL_RX_PER->MODER   |= (((uint32_t)GPIO_Mode_AF) << lPinPosition);
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000bc6:	601a      	str	r2, [r3, #0]
  SYS_SERIAL_RX_PER->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR3;
 8000bc8:	689a      	ldr	r2, [r3, #8]
 8000bca:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8000bce:	609a      	str	r2, [r3, #8]
  SYS_SERIAL_RX_PER->OSPEEDR |= ((uint32_t)(GPIO_Speed_50MHz) << lPinPosition);
 8000bd0:	689a      	ldr	r2, [r3, #8]
 8000bd2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000bd6:	609a      	str	r2, [r3, #8]
  SYS_SERIAL_RX_PER->OTYPER  &= ~GPIO_OTYPER_OT_3;
 8000bd8:	685a      	ldr	r2, [r3, #4]
 8000bda:	f022 0208 	bic.w	r2, r2, #8
 8000bde:	605a      	str	r2, [r3, #4]
  SYS_SERIAL_RX_PER->OTYPER  |= (uint16_t)(GPIO_OType_PP << SYS_SERIAL_RX_PIN_NO);
 8000be0:	685a      	ldr	r2, [r3, #4]
 8000be2:	605a      	str	r2, [r3, #4]
  SYS_SERIAL_RX_PER->PUPDR   &= ~GPIO_PUPDR_PUPDR3;
 8000be4:	68da      	ldr	r2, [r3, #12]
 8000be6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8000bea:	60da      	str	r2, [r3, #12]
  SYS_SERIAL_RX_PER->PUPDR   |= (((uint32_t)GPIO_PuPd_NOPULL) << lPinPosition);
 8000bec:	68da      	ldr	r2, [r3, #12]
 8000bee:	60da      	str	r2, [r3, #12]
  SYS_SERIAL_RX_PER->AFR[0] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)SYS_SERIAL_RX_PIN_NO & (uint32_t)0x07) * 4)) ;
 8000bf0:	6a1a      	ldr	r2, [r3, #32]
 8000bf2:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8000bf6:	621a      	str	r2, [r3, #32]
  SYS_SERIAL_RX_PER->AFR[0] |= ((uint32_t)(SYS_SERIAL_RX_AF) << ((uint32_t)((uint32_t)SYS_SERIAL_RX_PIN_NO & (uint32_t)0x07) * 4));
 8000bf8:	6a1a      	ldr	r2, [r3, #32]
 8000bfa:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 8000bfe:	621a      	str	r2, [r3, #32]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
  uint32_t integerdivider = 0x00;
  uint32_t fractionaldivider = 0x00;

  // USART CR2 Configuration
  tmpreg = SYS_SERIAL_PORT->CR2;
 8000c00:	f5a3 33de 	sub.w	r3, r3, #113664	; 0x1bc00
 8000c04:	691a      	ldr	r2, [r3, #16]
 8000c06:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000c0a:	0412      	lsls	r2, r2, #16
 8000c0c:	0c12      	lsrs	r2, r2, #16
  // Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
  // Set STOP[13:12] bits according to USART_StopBits value
  tmpreg |= (uint32_t)SYS_SERIAL_StopBits_1;

  // Write to USART CR2
  SYS_SERIAL_PORT->CR2 = (uint16_t)tmpreg;
 8000c0e:	611a      	str	r2, [r3, #16]

  // USART CR1 Configuration
  tmpreg = SYS_SERIAL_PORT->CR1;
 8000c10:	68da      	ldr	r2, [r3, #12]
  tmpreg = (uint32_t)(SYS_SERIAL_WordLength_8b
                    | SYS_SERIAL_Parity_No
                    |(SYS_SERIAL_Mode_Rx | SYS_SERIAL_Mode_Tx));

  // Write to USART CR1
  SYS_SERIAL_PORT->CR1 = (uint16_t)tmpreg;
 8000c12:	220c      	movs	r2, #12
 8000c14:	60da      	str	r2, [r3, #12]

  // USART CR3 Configuration
  tmpreg = SYS_SERIAL_PORT->CR3;
 8000c16:	695a      	ldr	r2, [r3, #20]
 8000c18:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000c1c:	0412      	lsls	r2, r2, #16
 8000c1e:	0c12      	lsrs	r2, r2, #16
  // Configure the USART HFC :
  //   Set CTSE and RTSE bits according to USART_HardwareFlowControl value
  tmpreg |= SYS_SERIAL_HardwareFlowControl_None;

  // Write to USART CR3
  SYS_SERIAL_PORT->CR3 = (uint16_t)tmpreg;
 8000c20:	615a      	str	r2, [r3, #20]

  // Configure the USART Baud Rate
  apbclock = (((HSE_VALUE / PLL_M) * PLL_N) / PLL_P) >> 2; // for the ArcadeIT! should be 45MHz

  // Determine the integer part
  if ((SYS_SERIAL_PORT->CR1 & USART_CR1_OVER8) != 0)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8000c28:	d026      	beq.n	8000c78 <ArcadeIT_Serial_Port_Init+0x148>
  {
    // Integer part computing in case Oversampling mode is 8 Samples
    integerdivider = ((25 * apbclock) / (2 * pBaud));
 8000c2a:	0040      	lsls	r0, r0, #1
 8000c2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ca0 <ArcadeIT_Serial_Port_Init+0x170>)
 8000c2e:	fbb3 f3f0 	udiv	r3, r3, r0
    integerdivider = ((25 * apbclock) / (4 * pBaud));
    // 25 * 45000000 / 4 * 115200
    // 1125000000 / 460800
    // ‭2441‬
  }
  tmpreg = (integerdivider / 100) << 4;
 8000c32:	4a1c      	ldr	r2, [pc, #112]	; (8000ca4 <ArcadeIT_Serial_Port_Init+0x174>)
 8000c34:	fba2 1203 	umull	r1, r2, r2, r3
 8000c38:	0952      	lsrs	r2, r2, #5
 8000c3a:	0111      	lsls	r1, r2, #4
  // ‭2441 / 100 * 16
  // ‭24 * 16 (FOUND 24, we already shift this left of 4 bits to create room for fraction)
  // ‭384 (0x18 << 4 = 0x180)‬

  // Determine the fractional part
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000c3c:	2064      	movs	r0, #100	; 0x64
 8000c3e:	fb02 3010 	mls	r0, r2, r0, r3
  // ‭2441 - 38400 / 16
  // ‭2441 - 2400
  // 41 (FOUND 41)

  // Implement the fractional part in the register
  if ((SYS_SERIAL_PORT->CR1 & USART_CR1_OVER8) != 0)
 8000c42:	4b19      	ldr	r3, [pc, #100]	; (8000ca8 <ArcadeIT_Serial_Port_Init+0x178>)
 8000c44:	68db      	ldr	r3, [r3, #12]
 8000c46:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8000c4a:	d11a      	bne.n	8000c82 <ArcadeIT_Serial_Port_Init+0x152>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
  }
  else // if ((USARTx->CR1 & USART_CR1_OVER8) == 0)
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000c4c:	0100      	lsls	r0, r0, #4
 8000c4e:	3032      	adds	r0, #50	; 0x32
 8000c50:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <ArcadeIT_Serial_Port_Init+0x174>)
 8000c52:	fba3 3000 	umull	r3, r0, r3, r0
 8000c56:	f3c0 1043 	ubfx	r0, r0, #5, #4
 8000c5a:	4308      	orrs	r0, r1
 8000c5c:	b280      	uxth	r0, r0
    // mmmmmmmmm   ffff
    // 0x180     |  0x7
  }

  // Write to USART BRR register
  SYS_SERIAL_PORT->BRR = (uint16_t)tmpreg;
 8000c5e:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <ArcadeIT_Serial_Port_Init+0x178>)
 8000c60:	6098      	str	r0, [r3, #8]

  // Enable the USART2
  SYS_SERIAL_PORT->CR1 |= USART_CR1_UE;
 8000c62:	68da      	ldr	r2, [r3, #12]
 8000c64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000c68:	60da      	str	r2, [r3, #12]

  ArcadeIT_Serial_Port_String_Send(RESET_DEVICE);
 8000c6a:	4810      	ldr	r0, [pc, #64]	; (8000cac <ArcadeIT_Serial_Port_Init+0x17c>)
 8000c6c:	f7ff ff56 	bl	8000b1c <ArcadeIT_Serial_Port_String_Send>

  ArcadeIT_Serial_Port_String_Send(TEXT_SERIAL_PORT_INITED);
 8000c70:	480f      	ldr	r0, [pc, #60]	; (8000cb0 <ArcadeIT_Serial_Port_Init+0x180>)
 8000c72:	f7ff ff53 	bl	8000b1c <ArcadeIT_Serial_Port_String_Send>

} // End ArcadeIT_Serial_Port_Init.
 8000c76:	bd08      	pop	{r3, pc}
    integerdivider = ((25 * apbclock) / (4 * pBaud));
 8000c78:	0080      	lsls	r0, r0, #2
 8000c7a:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <ArcadeIT_Serial_Port_Init+0x170>)
 8000c7c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000c80:	e7d7      	b.n	8000c32 <ArcadeIT_Serial_Port_Init+0x102>
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000c82:	00c3      	lsls	r3, r0, #3
 8000c84:	3332      	adds	r3, #50	; 0x32
 8000c86:	4807      	ldr	r0, [pc, #28]	; (8000ca4 <ArcadeIT_Serial_Port_Init+0x174>)
 8000c88:	fba0 2303 	umull	r2, r3, r0, r3
 8000c8c:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8000c90:	ea43 0001 	orr.w	r0, r3, r1
 8000c94:	e7e2      	b.n	8000c5c <ArcadeIT_Serial_Port_Init+0x12c>
 8000c96:	bf00      	nop
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40020000 	.word	0x40020000
 8000ca0:	430e2340 	.word	0x430e2340
 8000ca4:	51eb851f 	.word	0x51eb851f
 8000ca8:	40004400 	.word	0x40004400
 8000cac:	08001894 	.word	0x08001894
 8000cb0:	08001968 	.word	0x08001968

08000cb4 <ArcadeIT_Status_LEDS_Init>:

// //////////////////////////////////////////////////////////////////////////////
// Functions.
// //////////////////////////////////////////////////////////////////////////////
void ArcadeIT_Status_LEDS_Init(void)
{
 8000cb4:	b508      	push	{r3, lr}
 */

  uint32_t lPinPosition = 0;

  // Turn on the MCU peripheral by enabling its Clock.
  if ((RCC->AHB1ENR & RCC_AHB1Periph_GPIOH) == FALSE) RCC->AHB1ENR |= RCC_AHB1Periph_GPIOH;
 8000cb6:	4b2c      	ldr	r3, [pc, #176]	; (8000d68 <ArcadeIT_Status_LEDS_Init+0xb4>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000cbe:	d104      	bne.n	8000cca <ArcadeIT_Status_LEDS_Init+0x16>
 8000cc0:	4a29      	ldr	r2, [pc, #164]	; (8000d68 <ArcadeIT_Status_LEDS_Init+0xb4>)
 8000cc2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
  // level as default.
  // -----------------------
  lPinPosition = (SYS_STATUS_LED1_PIN_NO * 2); // the position is a multiple of 2

  // GPIO pin(PH2) in output
  SYS_STATUS_LED1_PER->MODER   &= ~GPIO_MODER_MODER2;
 8000cca:	4b28      	ldr	r3, [pc, #160]	; (8000d6c <ArcadeIT_Status_LEDS_Init+0xb8>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8000cd2:	601a      	str	r2, [r3, #0]
  SYS_STATUS_LED1_PER->MODER   |= (((uint32_t)GPIO_Mode_OUT) << lPinPosition);
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	f042 0210 	orr.w	r2, r2, #16
 8000cda:	601a      	str	r2, [r3, #0]
  SYS_STATUS_LED1_PER->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR2;
 8000cdc:	689a      	ldr	r2, [r3, #8]
 8000cde:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8000ce2:	609a      	str	r2, [r3, #8]
  SYS_STATUS_LED1_PER->OSPEEDR |= ((uint32_t)(GPIO_Speed_100MHz) << lPinPosition);
 8000ce4:	689a      	ldr	r2, [r3, #8]
 8000ce6:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8000cea:	609a      	str	r2, [r3, #8]
  SYS_STATUS_LED1_PER->OTYPER  &= ~GPIO_OTYPER_OT_2;
 8000cec:	685a      	ldr	r2, [r3, #4]
 8000cee:	f022 0204 	bic.w	r2, r2, #4
 8000cf2:	605a      	str	r2, [r3, #4]
  SYS_STATUS_LED1_PER->OTYPER  |= (uint16_t)(GPIO_OType_PP << SYS_STATUS_LED1_PIN_NO);
 8000cf4:	685a      	ldr	r2, [r3, #4]
 8000cf6:	605a      	str	r2, [r3, #4]
  SYS_STATUS_LED1_PER->PUPDR   &= ~GPIO_PUPDR_PUPDR2;
 8000cf8:	68da      	ldr	r2, [r3, #12]
 8000cfa:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8000cfe:	60da      	str	r2, [r3, #12]
  SYS_STATUS_LED1_PER->PUPDR   |= (((uint32_t)GPIO_PuPd_DOWN) << lPinPosition);
 8000d00:	68da      	ldr	r2, [r3, #12]
 8000d02:	f042 0220 	orr.w	r2, r2, #32
 8000d06:	60da      	str	r2, [r3, #12]

  // -----------------------
  lPinPosition = (SYS_STATUS_LED2_PIN_NO * 2); // the position is a multiple of 2

  // GPIO pin(PH3) in output
  SYS_STATUS_LED2_PER->MODER   &= ~GPIO_MODER_MODER3;
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8000d0e:	601a      	str	r2, [r3, #0]
  SYS_STATUS_LED2_PER->MODER   |= (((uint32_t)GPIO_Mode_OUT) << lPinPosition);
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d16:	601a      	str	r2, [r3, #0]
  SYS_STATUS_LED2_PER->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR3;
 8000d18:	689a      	ldr	r2, [r3, #8]
 8000d1a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8000d1e:	609a      	str	r2, [r3, #8]
  SYS_STATUS_LED2_PER->OSPEEDR |= ((uint32_t)(GPIO_Speed_100MHz) << lPinPosition);
 8000d20:	689a      	ldr	r2, [r3, #8]
 8000d22:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8000d26:	609a      	str	r2, [r3, #8]
  SYS_STATUS_LED2_PER->OTYPER  &= ~GPIO_OTYPER_OT_3;
 8000d28:	685a      	ldr	r2, [r3, #4]
 8000d2a:	f022 0208 	bic.w	r2, r2, #8
 8000d2e:	605a      	str	r2, [r3, #4]
  SYS_STATUS_LED2_PER->OTYPER  |= (uint16_t)(GPIO_OType_PP << SYS_STATUS_LED2_PIN_NO);
 8000d30:	685a      	ldr	r2, [r3, #4]
 8000d32:	605a      	str	r2, [r3, #4]
  SYS_STATUS_LED2_PER->PUPDR   &= ~GPIO_PUPDR_PUPDR3;
 8000d34:	68da      	ldr	r2, [r3, #12]
 8000d36:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8000d3a:	60da      	str	r2, [r3, #12]
  SYS_STATUS_LED2_PER->PUPDR   |= (((uint32_t)GPIO_PuPd_DOWN) << lPinPosition);
 8000d3c:	68da      	ldr	r2, [r3, #12]
 8000d3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d42:	60da      	str	r2, [r3, #12]

  // -----------------------
  // Put LEDs line LOW.
  SYS_STATUS_LED1_PER->ODR &= ~(SYS_STATUS_LED1_PIN);
 8000d44:	695a      	ldr	r2, [r3, #20]
 8000d46:	f022 0204 	bic.w	r2, r2, #4
 8000d4a:	615a      	str	r2, [r3, #20]
  SYS_STATUS_LED2_PER->ODR &= ~(SYS_STATUS_LED2_PIN);
 8000d4c:	695a      	ldr	r2, [r3, #20]
 8000d4e:	f022 0208 	bic.w	r2, r2, #8
 8000d52:	615a      	str	r2, [r3, #20]

  // Shows a message to serial port as debug
  if (gDevices & ARCADEIT_DEVICE_SERIAL)
 8000d54:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <ArcadeIT_Status_LEDS_Init+0xbc>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8000d5c:	d100      	bne.n	8000d60 <ArcadeIT_Status_LEDS_Init+0xac>
  {
    ArcadeIT_Serial_Port_String_Send(TEXT_STATUS_LEDS_INITED);

  } // End if.

} // End ArcadeIT_Status_LEDS_Init.
 8000d5e:	bd08      	pop	{r3, pc}
    ArcadeIT_Serial_Port_String_Send(TEXT_STATUS_LEDS_INITED);
 8000d60:	4804      	ldr	r0, [pc, #16]	; (8000d74 <ArcadeIT_Status_LEDS_Init+0xc0>)
 8000d62:	f7ff fedb 	bl	8000b1c <ArcadeIT_Serial_Port_String_Send>
} // End ArcadeIT_Status_LEDS_Init.
 8000d66:	e7fa      	b.n	8000d5e <ArcadeIT_Status_LEDS_Init+0xaa>
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40021c00 	.word	0x40021c00
 8000d70:	20000084 	.word	0x20000084
 8000d74:	08001980 	.word	0x08001980

08000d78 <ArcadeIT_Status_LED1_Toggle>:
  * PARAMETERS:  None.
  * RETURNS:     Nothing.
  */

  // Set LEDs line LOW or HIGH depending the current status of the LED.
  if (GPIOH->ODR & SYS_STATUS_LED1_PIN)
 8000d78:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <ArcadeIT_Status_LED1_Toggle+0x24>)
 8000d7a:	695b      	ldr	r3, [r3, #20]
 8000d7c:	f013 0f04 	tst.w	r3, #4
 8000d80:	d105      	bne.n	8000d8e <ArcadeIT_Status_LED1_Toggle+0x16>
  {
    GPIOH->ODR &= ~(SYS_STATUS_LED1_PIN);
  }
  else
  {
    GPIOH->ODR |= SYS_STATUS_LED1_PIN;
 8000d82:	4a06      	ldr	r2, [pc, #24]	; (8000d9c <ArcadeIT_Status_LED1_Toggle+0x24>)
 8000d84:	6953      	ldr	r3, [r2, #20]
 8000d86:	f043 0304 	orr.w	r3, r3, #4
 8000d8a:	6153      	str	r3, [r2, #20]

  } // End if.

} // End ArcadeIT_Status_LED1_Toggle.
 8000d8c:	4770      	bx	lr
    GPIOH->ODR &= ~(SYS_STATUS_LED1_PIN);
 8000d8e:	4a03      	ldr	r2, [pc, #12]	; (8000d9c <ArcadeIT_Status_LED1_Toggle+0x24>)
 8000d90:	6953      	ldr	r3, [r2, #20]
 8000d92:	f023 0304 	bic.w	r3, r3, #4
 8000d96:	6153      	str	r3, [r2, #20]
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	40021c00 	.word	0x40021c00

08000da0 <ArcadeIT_Status_LED2_Toggle>:
  * PARAMETERS:  None.
  * RETURNS:     Nothing.
  */

  // Set LEDs line LOW or HIGH depending the current status of the LED.
  if (SYS_STATUS_LED2_PER->ODR & SYS_STATUS_LED2_PIN)
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <ArcadeIT_Status_LED2_Toggle+0x24>)
 8000da2:	695b      	ldr	r3, [r3, #20]
 8000da4:	f013 0f08 	tst.w	r3, #8
 8000da8:	d105      	bne.n	8000db6 <ArcadeIT_Status_LED2_Toggle+0x16>
  {
    SYS_STATUS_LED2_PER->ODR &= ~(SYS_STATUS_LED2_PIN);
  }
  else
  {
    SYS_STATUS_LED2_PER->ODR |= SYS_STATUS_LED2_PIN;
 8000daa:	4a06      	ldr	r2, [pc, #24]	; (8000dc4 <ArcadeIT_Status_LED2_Toggle+0x24>)
 8000dac:	6953      	ldr	r3, [r2, #20]
 8000dae:	f043 0308 	orr.w	r3, r3, #8
 8000db2:	6153      	str	r3, [r2, #20]

  } // End if.

} // End ArcadeIT_Status_LED2_Toggle.
 8000db4:	4770      	bx	lr
    SYS_STATUS_LED2_PER->ODR &= ~(SYS_STATUS_LED2_PIN);
 8000db6:	4a03      	ldr	r2, [pc, #12]	; (8000dc4 <ArcadeIT_Status_LED2_Toggle+0x24>)
 8000db8:	6953      	ldr	r3, [r2, #20]
 8000dba:	f023 0308 	bic.w	r3, r3, #8
 8000dbe:	6153      	str	r3, [r2, #20]
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	40021c00 	.word	0x40021c00

08000dc8 <ArcadeIT_TestPad_Set>:
  *  RCC_MCO2Div_4
  *  RCC_MCO2Div_5
  *
  */

  uint32_t lTmpReg = RCC->CFGR;
 8000dc8:	4a03      	ldr	r2, [pc, #12]	; (8000dd8 <ArcadeIT_TestPad_Set+0x10>)
 8000dca:	6893      	ldr	r3, [r2, #8]
  lTmpReg  &= CFGR_MCO2_RESET_MASK;                 // Clear MCO2 and MCO2PRE[2:0] bits
 8000dcc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
  lTmpReg  |= pFrequencySystem | pFrequencyDivider; // Select MCO2 clock source and prescaler
 8000dd0:	4301      	orrs	r1, r0
 8000dd2:	4319      	orrs	r1, r3
  RCC->CFGR = lTmpReg;
 8000dd4:	6091      	str	r1, [r2, #8]

} // End ArcadeIT_TestPad_Set.
 8000dd6:	4770      	bx	lr
 8000dd8:	40023800 	.word	0x40023800

08000ddc <ArcadeIT_TestPad_Init>:
void ArcadeIT_TestPad_Init
(
    uint32_t pFrequencySystem,  // What frequency source to test.
    uint32_t pFrequencyDivider  // What divider to test.
)
{
 8000ddc:	b508      	push	{r3, lr}
  * RETURNS:     Nothing.
  */

  uint32_t lPinPosition;

  if ((RCC->AHB1ENR & RCC_AHB1Periph_GPIOC) == FALSE) RCC->AHB1ENR |= RCC_AHB1Periph_GPIOC;
 8000dde:	4b1d      	ldr	r3, [pc, #116]	; (8000e54 <ArcadeIT_TestPad_Init+0x78>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	f013 0f04 	tst.w	r3, #4
 8000de6:	d104      	bne.n	8000df2 <ArcadeIT_TestPad_Init+0x16>
 8000de8:	4a1a      	ldr	r2, [pc, #104]	; (8000e54 <ArcadeIT_TestPad_Init+0x78>)
 8000dea:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000dec:	f043 0304 	orr.w	r3, r3, #4
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30

  // Configure pin PC9 in alternate function 0 (MCO2)
  lPinPosition = (SYS_TESTPADS_PIN_NO * 2);

  SYS_TESTPADS_PER->MODER   &= ~GPIO_MODER_MODER9;
 8000df2:	4b19      	ldr	r3, [pc, #100]	; (8000e58 <ArcadeIT_TestPad_Init+0x7c>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8000dfa:	601a      	str	r2, [r3, #0]
  SYS_TESTPADS_PER->MODER   |= (((uint32_t)GPIO_Mode_AF) << lPinPosition);
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000e02:	601a      	str	r2, [r3, #0]

  // Maximum frequency allowed is 100MHz, so keep it in mind when you want
  // to test 180MHz, you have to set the divider at least 2
  SYS_TESTPADS_PER->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR9;
 8000e04:	689a      	ldr	r2, [r3, #8]
 8000e06:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8000e0a:	609a      	str	r2, [r3, #8]
  SYS_TESTPADS_PER->OSPEEDR |= ((uint32_t)(GPIO_Speed_100MHz) << lPinPosition);
 8000e0c:	689a      	ldr	r2, [r3, #8]
 8000e0e:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 8000e12:	609a      	str	r2, [r3, #8]
  SYS_TESTPADS_PER->OTYPER  &= ~GPIO_OTYPER_OT_9;
 8000e14:	685a      	ldr	r2, [r3, #4]
 8000e16:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000e1a:	605a      	str	r2, [r3, #4]
  SYS_TESTPADS_PER->OTYPER  |= (uint16_t)(GPIO_OType_PP << SYS_TESTPADS_PIN_NO);
 8000e1c:	685a      	ldr	r2, [r3, #4]
 8000e1e:	605a      	str	r2, [r3, #4]
  SYS_TESTPADS_PER->PUPDR   &= ~GPIO_PUPDR_PUPDR9;
 8000e20:	68da      	ldr	r2, [r3, #12]
 8000e22:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8000e26:	60da      	str	r2, [r3, #12]
  SYS_TESTPADS_PER->PUPDR   |= (((uint32_t)GPIO_PuPd_UP) << lPinPosition);
 8000e28:	68da      	ldr	r2, [r3, #12]
 8000e2a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000e2e:	60da      	str	r2, [r3, #12]
  SYS_TESTPADS_PER->AFR[1] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)SYS_TESTPADS_PIN_NO & (uint32_t)0x07) * 4));
 8000e30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e32:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000e36:	625a      	str	r2, [r3, #36]	; 0x24
  SYS_TESTPADS_PER->AFR[1] |=  ((uint32_t)(SYS_TESTPADS_AF) << ((uint32_t)((uint32_t)SYS_TESTPADS_PIN_NO & (uint32_t)0x07) * 4));
 8000e38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e3a:	625a      	str	r2, [r3, #36]	; 0x24

  ArcadeIT_TestPad_Set(pFrequencySystem, pFrequencyDivider);
 8000e3c:	f7ff ffc4 	bl	8000dc8 <ArcadeIT_TestPad_Set>

  // Shows a message to serial port as debug
  if (gDevices & ARCADEIT_DEVICE_SERIAL)
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <ArcadeIT_TestPad_Init+0x80>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8000e48:	d100      	bne.n	8000e4c <ArcadeIT_TestPad_Init+0x70>
    // Starts and configure the serial port.
    ArcadeIT_Serial_Port_String_Send(TEXT_TEST_PADS_INITED);

  } // End if.

} // End ArcadeIT_TestPads_Init.
 8000e4a:	bd08      	pop	{r3, pc}
    ArcadeIT_Serial_Port_String_Send(TEXT_TEST_PADS_INITED);
 8000e4c:	4804      	ldr	r0, [pc, #16]	; (8000e60 <ArcadeIT_TestPad_Init+0x84>)
 8000e4e:	f7ff fe65 	bl	8000b1c <ArcadeIT_Serial_Port_String_Send>
} // End ArcadeIT_TestPads_Init.
 8000e52:	e7fa      	b.n	8000e4a <ArcadeIT_TestPad_Init+0x6e>
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40020800 	.word	0x40020800
 8000e5c:	20000084 	.word	0x20000084
 8000e60:	08001998 	.word	0x08001998

08000e64 <ArcadeIT_Scheduler_Task_Init>:
  PARMS:        See above.
  RETURNS:      Nothing.
  */

  uint8_t lTask = 0;
  for (lTask = 0; lTask < ARCADEIT_SCHEDULER_MAX_TASKS; lTask++)
 8000e64:	2300      	movs	r3, #0
 8000e66:	2b04      	cmp	r3, #4
 8000e68:	d812      	bhi.n	8000e90 <ArcadeIT_Scheduler_Task_Init+0x2c>
{
 8000e6a:	b410      	push	{r4}
  {
    gArcadeITTasks[lTask].current_cycle = 0;
 8000e6c:	4c09      	ldr	r4, [pc, #36]	; (8000e94 <ArcadeIT_Scheduler_Task_Init+0x30>)
 8000e6e:	202c      	movs	r0, #44	; 0x2c
 8000e70:	fb00 f003 	mul.w	r0, r0, r3
 8000e74:	1821      	adds	r1, r4, r0
 8000e76:	2200      	movs	r2, #0
 8000e78:	604a      	str	r2, [r1, #4]
    gArcadeITTasks[lTask].cycles = 0;
 8000e7a:	5022      	str	r2, [r4, r0]
    gArcadeITTasks[lTask].time_period = 0;
 8000e7c:	608a      	str	r2, [r1, #8]
    gArcadeITTasks[lTask].time_current = 0;
 8000e7e:	60ca      	str	r2, [r1, #12]
    gArcadeITTasks[lTask].function = NULL;
 8000e80:	610a      	str	r2, [r1, #16]
  for (lTask = 0; lTask < ARCADEIT_SCHEDULER_MAX_TASKS; lTask++)
 8000e82:	3301      	adds	r3, #1
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	2b04      	cmp	r3, #4
 8000e88:	d9f0      	bls.n	8000e6c <ArcadeIT_Scheduler_Task_Init+0x8>
  {
    //ArcadeIT_Serial_Port_String_Send(TEXT_SCHEDULER_INITED);

  } // End if.

} // End ArcadeIT_Scheduler_Task_Init.
 8000e8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	200000a4 	.word	0x200000a4

08000e98 <ArcadeIT_Scheduler_Task_Set>:
  void *pFunctionPtr,        // The pointer to the function to execute.
  void *pParameters,         // The pointer to the parameters used by the function.
  uint32_t pCycles,          // The number of time that this task has to be executed. 0 = infinite.
  uint32_t pTimePeriod       // The time period in ms to elapse before the next execution.
)
{
 8000e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e9a:	469e      	mov	lr, r3
 8000e9c:	9f05      	ldr	r7, [sp, #20]
  DESCRIPTION:  Setup a scheduled task.
  PARMS:        See above.
  RETURNS:      Nothing.
  */

  if (pParameters != NULL)
 8000e9e:	b1f2      	cbz	r2, 8000ede <ArcadeIT_Scheduler_Task_Set+0x46>
 8000ea0:	4616      	mov	r6, r2
  {
    gArcadeITTasks[id].num_parameters = ((uint32_t*)pParameters)[PAR_1];
 8000ea2:	6814      	ldr	r4, [r2, #0]
 8000ea4:	4684      	mov	ip, r0
 8000ea6:	4d15      	ldr	r5, [pc, #84]	; (8000efc <ArcadeIT_Scheduler_Task_Set+0x64>)
 8000ea8:	222c      	movs	r2, #44	; 0x2c
 8000eaa:	fb02 5200 	mla	r2, r2, r0, r5
 8000eae:	7514      	strb	r4, [r2, #20]

    // Copy parameters.
    uint8_t lPars = 0;
    for (lPars = 0; lPars < gArcadeITTasks[id].num_parameters+1; lPars++)
 8000eb0:	2400      	movs	r4, #0
 8000eb2:	e00c      	b.n	8000ece <ArcadeIT_Scheduler_Task_Set+0x36>
    {
      gArcadeITTasks[id].parameters[lPars] = ((uint32_t*)pParameters)[lPars];
 8000eb4:	eb0c 028c 	add.w	r2, ip, ip, lsl #2
 8000eb8:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8000ebc:	4422      	add	r2, r4
 8000ebe:	3206      	adds	r2, #6
 8000ec0:	4d0e      	ldr	r5, [pc, #56]	; (8000efc <ArcadeIT_Scheduler_Task_Set+0x64>)
 8000ec2:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 8000ec6:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
    for (lPars = 0; lPars < gArcadeITTasks[id].num_parameters+1; lPars++)
 8000eca:	3401      	adds	r4, #1
 8000ecc:	b2e4      	uxtb	r4, r4
 8000ece:	4d0b      	ldr	r5, [pc, #44]	; (8000efc <ArcadeIT_Scheduler_Task_Set+0x64>)
 8000ed0:	222c      	movs	r2, #44	; 0x2c
 8000ed2:	fb02 520c 	mla	r2, r2, ip, r5
 8000ed6:	7d12      	ldrb	r2, [r2, #20]
 8000ed8:	3201      	adds	r2, #1
 8000eda:	4294      	cmp	r4, r2
 8000edc:	dbea      	blt.n	8000eb4 <ArcadeIT_Scheduler_Task_Set+0x1c>

    } // End for.

  } // End if.

  gArcadeITTasks[id].current_cycle = 0;
 8000ede:	4d07      	ldr	r5, [pc, #28]	; (8000efc <ArcadeIT_Scheduler_Task_Set+0x64>)
 8000ee0:	222c      	movs	r2, #44	; 0x2c
 8000ee2:	fb02 f000 	mul.w	r0, r2, r0
 8000ee6:	182a      	adds	r2, r5, r0
 8000ee8:	2400      	movs	r4, #0
 8000eea:	6054      	str	r4, [r2, #4]
  gArcadeITTasks[id].cycles = pCycles;
 8000eec:	f845 e000 	str.w	lr, [r5, r0]
  gArcadeITTasks[id].time_period = pTimePeriod;
 8000ef0:	6097      	str	r7, [r2, #8]
  gArcadeITTasks[id].time_current = gArcadeITTasks[id].time_period;
 8000ef2:	60d7      	str	r7, [r2, #12]
  gArcadeITTasks[id].function = pFunctionPtr;
 8000ef4:	6111      	str	r1, [r2, #16]
  gArcadeITTasks[id].execute = FALSE;
 8000ef6:	f882 4028 	strb.w	r4, [r2, #40]	; 0x28

} // End ArcadeIT_Scheduler_Task_Set.
 8000efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000efc:	200000a4 	.word	0x200000a4

08000f00 <ArcadeIT_Scheduler_Task_Unset>:
  DESCRIPTION:  Reset a scheduled task.
  PARMS:        See above.
  RETURNS:      Nothing.
  */

  gArcadeITTasks[id].current_cycle = 0;
 8000f00:	4906      	ldr	r1, [pc, #24]	; (8000f1c <ArcadeIT_Scheduler_Task_Unset+0x1c>)
 8000f02:	232c      	movs	r3, #44	; 0x2c
 8000f04:	fb03 f000 	mul.w	r0, r3, r0
 8000f08:	180a      	adds	r2, r1, r0
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	6053      	str	r3, [r2, #4]
  gArcadeITTasks[id].cycles = 0;
 8000f0e:	500b      	str	r3, [r1, r0]
  gArcadeITTasks[id].time_period = 0;
 8000f10:	6093      	str	r3, [r2, #8]
  gArcadeITTasks[id].time_current = 0;
 8000f12:	60d3      	str	r3, [r2, #12]
  gArcadeITTasks[id].function = NULL;
 8000f14:	6113      	str	r3, [r2, #16]
  gArcadeITTasks[id].execute = FALSE;
 8000f16:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28

} // End ArcadeIT_Scheduler_Task_Unset.
 8000f1a:	4770      	bx	lr
 8000f1c:	200000a4 	.word	0x200000a4

08000f20 <ArcadeIT_Scheduler_Update>:

// /////////////////////////////////////////////////////////////////////////////
void ArcadeIT_Scheduler_Update(void)
{
 8000f20:	b538      	push	{r3, r4, r5, lr}
  PARMS:        See above.
  RETURNS:      Nothing.
  */

  uint8_t lTask = 0;
  for (lTask = 0; lTask < ARCADEIT_SCHEDULER_MAX_TASKS; lTask++)
 8000f22:	2400      	movs	r4, #0
 8000f24:	e007      	b.n	8000f36 <ArcadeIT_Scheduler_Update+0x16>

            } // End if.
          }
          else
          {
            gArcadeITTasks[lTask].time_current = gArcadeITTasks[lTask].time_period;
 8000f26:	4b1f      	ldr	r3, [pc, #124]	; (8000fa4 <ArcadeIT_Scheduler_Update+0x84>)
 8000f28:	222c      	movs	r2, #44	; 0x2c
 8000f2a:	fb02 3104 	mla	r1, r2, r4, r3
 8000f2e:	688b      	ldr	r3, [r1, #8]
 8000f30:	60cb      	str	r3, [r1, #12]
  for (lTask = 0; lTask < ARCADEIT_SCHEDULER_MAX_TASKS; lTask++)
 8000f32:	3401      	adds	r4, #1
 8000f34:	b2e4      	uxtb	r4, r4
 8000f36:	2c04      	cmp	r4, #4
 8000f38:	d833      	bhi.n	8000fa2 <ArcadeIT_Scheduler_Update+0x82>
    if (gArcadeITTasks[lTask].function != NULL)
 8000f3a:	4621      	mov	r1, r4
 8000f3c:	4a19      	ldr	r2, [pc, #100]	; (8000fa4 <ArcadeIT_Scheduler_Update+0x84>)
 8000f3e:	232c      	movs	r3, #44	; 0x2c
 8000f40:	fb03 2304 	mla	r3, r3, r4, r2
 8000f44:	691b      	ldr	r3, [r3, #16]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d0f3      	beq.n	8000f32 <ArcadeIT_Scheduler_Update+0x12>
      if (gArcadeITTasks[lTask].execute == FALSE)
 8000f4a:	232c      	movs	r3, #44	; 0x2c
 8000f4c:	fb03 2304 	mla	r3, r3, r4, r2
 8000f50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1ec      	bne.n	8000f32 <ArcadeIT_Scheduler_Update+0x12>
        gArcadeITTasks[lTask].time_current--;
 8000f58:	4613      	mov	r3, r2
 8000f5a:	222c      	movs	r2, #44	; 0x2c
 8000f5c:	fb02 3204 	mla	r2, r2, r4, r3
 8000f60:	68d3      	ldr	r3, [r2, #12]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	60d3      	str	r3, [r2, #12]
        if (gArcadeITTasks[lTask].time_current == 0)
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d1e3      	bne.n	8000f32 <ArcadeIT_Scheduler_Update+0x12>
          gArcadeITTasks[lTask].execute = TRUE;
 8000f6a:	4a0e      	ldr	r2, [pc, #56]	; (8000fa4 <ArcadeIT_Scheduler_Update+0x84>)
 8000f6c:	232c      	movs	r3, #44	; 0x2c
 8000f6e:	fb03 f304 	mul.w	r3, r3, r4
 8000f72:	18d0      	adds	r0, r2, r3
 8000f74:	2501      	movs	r5, #1
 8000f76:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28
          if (gArcadeITTasks[lTask].cycles)
 8000f7a:	58d3      	ldr	r3, [r2, r3]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d0d2      	beq.n	8000f26 <ArcadeIT_Scheduler_Update+0x6>
            gArcadeITTasks[lTask].time_current = gArcadeITTasks[lTask].time_period;
 8000f80:	4610      	mov	r0, r2
 8000f82:	232c      	movs	r3, #44	; 0x2c
 8000f84:	fb03 f101 	mul.w	r1, r3, r1
 8000f88:	440a      	add	r2, r1
 8000f8a:	6893      	ldr	r3, [r2, #8]
 8000f8c:	60d3      	str	r3, [r2, #12]
            gArcadeITTasks[lTask].current_cycle++;
 8000f8e:	6853      	ldr	r3, [r2, #4]
 8000f90:	442b      	add	r3, r5
 8000f92:	6053      	str	r3, [r2, #4]
            if (gArcadeITTasks[lTask].current_cycle == gArcadeITTasks[lTask].cycles)
 8000f94:	5842      	ldr	r2, [r0, r1]
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d1cb      	bne.n	8000f32 <ArcadeIT_Scheduler_Update+0x12>
              ArcadeIT_Scheduler_Task_Unset(lTask);
 8000f9a:	4620      	mov	r0, r4
 8000f9c:	f7ff ffb0 	bl	8000f00 <ArcadeIT_Scheduler_Task_Unset>
 8000fa0:	e7c7      	b.n	8000f32 <ArcadeIT_Scheduler_Update+0x12>

    } // End if.

  } // End for.

} // End ArcadeIT_Scheduler_Update.
 8000fa2:	bd38      	pop	{r3, r4, r5, pc}
 8000fa4:	200000a4 	.word	0x200000a4

08000fa8 <ArcadeIT_Scheduler_Run>:

// /////////////////////////////////////////////////////////////////////////////
void ArcadeIT_Scheduler_Run(void)
{
 8000fa8:	b538      	push	{r3, r4, r5, lr}
  PARMS:        See above.
  RETURNS:      Nothing.
  */

  uint8_t lTask = 0;
  for (lTask = 0; lTask < ARCADEIT_SCHEDULER_MAX_TASKS; lTask++)
 8000faa:	2400      	movs	r4, #0
 8000fac:	e001      	b.n	8000fb2 <ArcadeIT_Scheduler_Run+0xa>
 8000fae:	3401      	adds	r4, #1
 8000fb0:	b2e4      	uxtb	r4, r4
 8000fb2:	2c04      	cmp	r4, #4
 8000fb4:	d814      	bhi.n	8000fe0 <ArcadeIT_Scheduler_Run+0x38>
  {
    if (gArcadeITTasks[lTask].execute)
 8000fb6:	4a0b      	ldr	r2, [pc, #44]	; (8000fe4 <ArcadeIT_Scheduler_Run+0x3c>)
 8000fb8:	232c      	movs	r3, #44	; 0x2c
 8000fba:	fb03 2304 	mla	r3, r3, r4, r2
 8000fbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d0f3      	beq.n	8000fae <ArcadeIT_Scheduler_Run+0x6>
    {
        // Here we call the function set for this task.
        gArcadeITTasks[lTask].function(gArcadeITTasks[lTask].parameters);
 8000fc6:	4610      	mov	r0, r2
 8000fc8:	232c      	movs	r3, #44	; 0x2c
 8000fca:	fb03 f304 	mul.w	r3, r3, r4
 8000fce:	18d5      	adds	r5, r2, r3
 8000fd0:	692a      	ldr	r2, [r5, #16]
 8000fd2:	3318      	adds	r3, #24
 8000fd4:	4418      	add	r0, r3
 8000fd6:	4790      	blx	r2

        // Unmark the function.
        gArcadeITTasks[lTask].execute = FALSE;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
 8000fde:	e7e6      	b.n	8000fae <ArcadeIT_Scheduler_Run+0x6>

    } // End if.

  } // End for.

} // End ArcadeIT_Scheduler_Run.
 8000fe0:	bd38      	pop	{r3, r4, r5, pc}
 8000fe2:	bf00      	nop
 8000fe4:	200000a4 	.word	0x200000a4

08000fe8 <__errno>:
 8000fe8:	4b01      	ldr	r3, [pc, #4]	; (8000ff0 <__errno+0x8>)
 8000fea:	6818      	ldr	r0, [r3, #0]
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20000000 	.word	0x20000000

08000ff4 <__libc_init_array>:
 8000ff4:	b570      	push	{r4, r5, r6, lr}
 8000ff6:	4e0d      	ldr	r6, [pc, #52]	; (800102c <__libc_init_array+0x38>)
 8000ff8:	4c0d      	ldr	r4, [pc, #52]	; (8001030 <__libc_init_array+0x3c>)
 8000ffa:	1ba4      	subs	r4, r4, r6
 8000ffc:	10a4      	asrs	r4, r4, #2
 8000ffe:	2500      	movs	r5, #0
 8001000:	42a5      	cmp	r5, r4
 8001002:	d109      	bne.n	8001018 <__libc_init_array+0x24>
 8001004:	4e0b      	ldr	r6, [pc, #44]	; (8001034 <__libc_init_array+0x40>)
 8001006:	4c0c      	ldr	r4, [pc, #48]	; (8001038 <__libc_init_array+0x44>)
 8001008:	f000 fc1e 	bl	8001848 <_init>
 800100c:	1ba4      	subs	r4, r4, r6
 800100e:	10a4      	asrs	r4, r4, #2
 8001010:	2500      	movs	r5, #0
 8001012:	42a5      	cmp	r5, r4
 8001014:	d105      	bne.n	8001022 <__libc_init_array+0x2e>
 8001016:	bd70      	pop	{r4, r5, r6, pc}
 8001018:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800101c:	4798      	blx	r3
 800101e:	3501      	adds	r5, #1
 8001020:	e7ee      	b.n	8001000 <__libc_init_array+0xc>
 8001022:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001026:	4798      	blx	r3
 8001028:	3501      	adds	r5, #1
 800102a:	e7f2      	b.n	8001012 <__libc_init_array+0x1e>
 800102c:	080019e8 	.word	0x080019e8
 8001030:	080019e8 	.word	0x080019e8
 8001034:	080019e8 	.word	0x080019e8
 8001038:	080019ec 	.word	0x080019ec

0800103c <siprintf>:
 800103c:	b40e      	push	{r1, r2, r3}
 800103e:	b500      	push	{lr}
 8001040:	b09c      	sub	sp, #112	; 0x70
 8001042:	ab1d      	add	r3, sp, #116	; 0x74
 8001044:	9002      	str	r0, [sp, #8]
 8001046:	9006      	str	r0, [sp, #24]
 8001048:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800104c:	4809      	ldr	r0, [pc, #36]	; (8001074 <siprintf+0x38>)
 800104e:	9107      	str	r1, [sp, #28]
 8001050:	9104      	str	r1, [sp, #16]
 8001052:	4909      	ldr	r1, [pc, #36]	; (8001078 <siprintf+0x3c>)
 8001054:	f853 2b04 	ldr.w	r2, [r3], #4
 8001058:	9105      	str	r1, [sp, #20]
 800105a:	6800      	ldr	r0, [r0, #0]
 800105c:	9301      	str	r3, [sp, #4]
 800105e:	a902      	add	r1, sp, #8
 8001060:	f000 f866 	bl	8001130 <_svfiprintf_r>
 8001064:	9b02      	ldr	r3, [sp, #8]
 8001066:	2200      	movs	r2, #0
 8001068:	701a      	strb	r2, [r3, #0]
 800106a:	b01c      	add	sp, #112	; 0x70
 800106c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001070:	b003      	add	sp, #12
 8001072:	4770      	bx	lr
 8001074:	20000000 	.word	0x20000000
 8001078:	ffff0208 	.word	0xffff0208

0800107c <__ssputs_r>:
 800107c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001080:	688e      	ldr	r6, [r1, #8]
 8001082:	429e      	cmp	r6, r3
 8001084:	4682      	mov	sl, r0
 8001086:	460c      	mov	r4, r1
 8001088:	4690      	mov	r8, r2
 800108a:	4699      	mov	r9, r3
 800108c:	d837      	bhi.n	80010fe <__ssputs_r+0x82>
 800108e:	898a      	ldrh	r2, [r1, #12]
 8001090:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001094:	d031      	beq.n	80010fa <__ssputs_r+0x7e>
 8001096:	6825      	ldr	r5, [r4, #0]
 8001098:	6909      	ldr	r1, [r1, #16]
 800109a:	1a6f      	subs	r7, r5, r1
 800109c:	6965      	ldr	r5, [r4, #20]
 800109e:	2302      	movs	r3, #2
 80010a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80010a4:	fb95 f5f3 	sdiv	r5, r5, r3
 80010a8:	f109 0301 	add.w	r3, r9, #1
 80010ac:	443b      	add	r3, r7
 80010ae:	429d      	cmp	r5, r3
 80010b0:	bf38      	it	cc
 80010b2:	461d      	movcc	r5, r3
 80010b4:	0553      	lsls	r3, r2, #21
 80010b6:	d530      	bpl.n	800111a <__ssputs_r+0x9e>
 80010b8:	4629      	mov	r1, r5
 80010ba:	f000 fb2b 	bl	8001714 <_malloc_r>
 80010be:	4606      	mov	r6, r0
 80010c0:	b950      	cbnz	r0, 80010d8 <__ssputs_r+0x5c>
 80010c2:	230c      	movs	r3, #12
 80010c4:	f8ca 3000 	str.w	r3, [sl]
 80010c8:	89a3      	ldrh	r3, [r4, #12]
 80010ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010ce:	81a3      	strh	r3, [r4, #12]
 80010d0:	f04f 30ff 	mov.w	r0, #4294967295
 80010d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010d8:	463a      	mov	r2, r7
 80010da:	6921      	ldr	r1, [r4, #16]
 80010dc:	f000 faa8 	bl	8001630 <memcpy>
 80010e0:	89a3      	ldrh	r3, [r4, #12]
 80010e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80010e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010ea:	81a3      	strh	r3, [r4, #12]
 80010ec:	6126      	str	r6, [r4, #16]
 80010ee:	6165      	str	r5, [r4, #20]
 80010f0:	443e      	add	r6, r7
 80010f2:	1bed      	subs	r5, r5, r7
 80010f4:	6026      	str	r6, [r4, #0]
 80010f6:	60a5      	str	r5, [r4, #8]
 80010f8:	464e      	mov	r6, r9
 80010fa:	454e      	cmp	r6, r9
 80010fc:	d900      	bls.n	8001100 <__ssputs_r+0x84>
 80010fe:	464e      	mov	r6, r9
 8001100:	4632      	mov	r2, r6
 8001102:	4641      	mov	r1, r8
 8001104:	6820      	ldr	r0, [r4, #0]
 8001106:	f000 fa9e 	bl	8001646 <memmove>
 800110a:	68a3      	ldr	r3, [r4, #8]
 800110c:	1b9b      	subs	r3, r3, r6
 800110e:	60a3      	str	r3, [r4, #8]
 8001110:	6823      	ldr	r3, [r4, #0]
 8001112:	441e      	add	r6, r3
 8001114:	6026      	str	r6, [r4, #0]
 8001116:	2000      	movs	r0, #0
 8001118:	e7dc      	b.n	80010d4 <__ssputs_r+0x58>
 800111a:	462a      	mov	r2, r5
 800111c:	f000 fb54 	bl	80017c8 <_realloc_r>
 8001120:	4606      	mov	r6, r0
 8001122:	2800      	cmp	r0, #0
 8001124:	d1e2      	bne.n	80010ec <__ssputs_r+0x70>
 8001126:	6921      	ldr	r1, [r4, #16]
 8001128:	4650      	mov	r0, sl
 800112a:	f000 faa5 	bl	8001678 <_free_r>
 800112e:	e7c8      	b.n	80010c2 <__ssputs_r+0x46>

08001130 <_svfiprintf_r>:
 8001130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001134:	461d      	mov	r5, r3
 8001136:	898b      	ldrh	r3, [r1, #12]
 8001138:	061f      	lsls	r7, r3, #24
 800113a:	b09d      	sub	sp, #116	; 0x74
 800113c:	4680      	mov	r8, r0
 800113e:	460c      	mov	r4, r1
 8001140:	4616      	mov	r6, r2
 8001142:	d50f      	bpl.n	8001164 <_svfiprintf_r+0x34>
 8001144:	690b      	ldr	r3, [r1, #16]
 8001146:	b96b      	cbnz	r3, 8001164 <_svfiprintf_r+0x34>
 8001148:	2140      	movs	r1, #64	; 0x40
 800114a:	f000 fae3 	bl	8001714 <_malloc_r>
 800114e:	6020      	str	r0, [r4, #0]
 8001150:	6120      	str	r0, [r4, #16]
 8001152:	b928      	cbnz	r0, 8001160 <_svfiprintf_r+0x30>
 8001154:	230c      	movs	r3, #12
 8001156:	f8c8 3000 	str.w	r3, [r8]
 800115a:	f04f 30ff 	mov.w	r0, #4294967295
 800115e:	e0c8      	b.n	80012f2 <_svfiprintf_r+0x1c2>
 8001160:	2340      	movs	r3, #64	; 0x40
 8001162:	6163      	str	r3, [r4, #20]
 8001164:	2300      	movs	r3, #0
 8001166:	9309      	str	r3, [sp, #36]	; 0x24
 8001168:	2320      	movs	r3, #32
 800116a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800116e:	2330      	movs	r3, #48	; 0x30
 8001170:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001174:	9503      	str	r5, [sp, #12]
 8001176:	f04f 0b01 	mov.w	fp, #1
 800117a:	4637      	mov	r7, r6
 800117c:	463d      	mov	r5, r7
 800117e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001182:	b10b      	cbz	r3, 8001188 <_svfiprintf_r+0x58>
 8001184:	2b25      	cmp	r3, #37	; 0x25
 8001186:	d13e      	bne.n	8001206 <_svfiprintf_r+0xd6>
 8001188:	ebb7 0a06 	subs.w	sl, r7, r6
 800118c:	d00b      	beq.n	80011a6 <_svfiprintf_r+0x76>
 800118e:	4653      	mov	r3, sl
 8001190:	4632      	mov	r2, r6
 8001192:	4621      	mov	r1, r4
 8001194:	4640      	mov	r0, r8
 8001196:	f7ff ff71 	bl	800107c <__ssputs_r>
 800119a:	3001      	adds	r0, #1
 800119c:	f000 80a4 	beq.w	80012e8 <_svfiprintf_r+0x1b8>
 80011a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80011a2:	4453      	add	r3, sl
 80011a4:	9309      	str	r3, [sp, #36]	; 0x24
 80011a6:	783b      	ldrb	r3, [r7, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	f000 809d 	beq.w	80012e8 <_svfiprintf_r+0x1b8>
 80011ae:	2300      	movs	r3, #0
 80011b0:	f04f 32ff 	mov.w	r2, #4294967295
 80011b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80011b8:	9304      	str	r3, [sp, #16]
 80011ba:	9307      	str	r3, [sp, #28]
 80011bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80011c0:	931a      	str	r3, [sp, #104]	; 0x68
 80011c2:	462f      	mov	r7, r5
 80011c4:	2205      	movs	r2, #5
 80011c6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80011ca:	4850      	ldr	r0, [pc, #320]	; (800130c <_svfiprintf_r+0x1dc>)
 80011cc:	f7ff f818 	bl	8000200 <memchr>
 80011d0:	9b04      	ldr	r3, [sp, #16]
 80011d2:	b9d0      	cbnz	r0, 800120a <_svfiprintf_r+0xda>
 80011d4:	06d9      	lsls	r1, r3, #27
 80011d6:	bf44      	itt	mi
 80011d8:	2220      	movmi	r2, #32
 80011da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80011de:	071a      	lsls	r2, r3, #28
 80011e0:	bf44      	itt	mi
 80011e2:	222b      	movmi	r2, #43	; 0x2b
 80011e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80011e8:	782a      	ldrb	r2, [r5, #0]
 80011ea:	2a2a      	cmp	r2, #42	; 0x2a
 80011ec:	d015      	beq.n	800121a <_svfiprintf_r+0xea>
 80011ee:	9a07      	ldr	r2, [sp, #28]
 80011f0:	462f      	mov	r7, r5
 80011f2:	2000      	movs	r0, #0
 80011f4:	250a      	movs	r5, #10
 80011f6:	4639      	mov	r1, r7
 80011f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80011fc:	3b30      	subs	r3, #48	; 0x30
 80011fe:	2b09      	cmp	r3, #9
 8001200:	d94d      	bls.n	800129e <_svfiprintf_r+0x16e>
 8001202:	b1b8      	cbz	r0, 8001234 <_svfiprintf_r+0x104>
 8001204:	e00f      	b.n	8001226 <_svfiprintf_r+0xf6>
 8001206:	462f      	mov	r7, r5
 8001208:	e7b8      	b.n	800117c <_svfiprintf_r+0x4c>
 800120a:	4a40      	ldr	r2, [pc, #256]	; (800130c <_svfiprintf_r+0x1dc>)
 800120c:	1a80      	subs	r0, r0, r2
 800120e:	fa0b f000 	lsl.w	r0, fp, r0
 8001212:	4318      	orrs	r0, r3
 8001214:	9004      	str	r0, [sp, #16]
 8001216:	463d      	mov	r5, r7
 8001218:	e7d3      	b.n	80011c2 <_svfiprintf_r+0x92>
 800121a:	9a03      	ldr	r2, [sp, #12]
 800121c:	1d11      	adds	r1, r2, #4
 800121e:	6812      	ldr	r2, [r2, #0]
 8001220:	9103      	str	r1, [sp, #12]
 8001222:	2a00      	cmp	r2, #0
 8001224:	db01      	blt.n	800122a <_svfiprintf_r+0xfa>
 8001226:	9207      	str	r2, [sp, #28]
 8001228:	e004      	b.n	8001234 <_svfiprintf_r+0x104>
 800122a:	4252      	negs	r2, r2
 800122c:	f043 0302 	orr.w	r3, r3, #2
 8001230:	9207      	str	r2, [sp, #28]
 8001232:	9304      	str	r3, [sp, #16]
 8001234:	783b      	ldrb	r3, [r7, #0]
 8001236:	2b2e      	cmp	r3, #46	; 0x2e
 8001238:	d10c      	bne.n	8001254 <_svfiprintf_r+0x124>
 800123a:	787b      	ldrb	r3, [r7, #1]
 800123c:	2b2a      	cmp	r3, #42	; 0x2a
 800123e:	d133      	bne.n	80012a8 <_svfiprintf_r+0x178>
 8001240:	9b03      	ldr	r3, [sp, #12]
 8001242:	1d1a      	adds	r2, r3, #4
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	9203      	str	r2, [sp, #12]
 8001248:	2b00      	cmp	r3, #0
 800124a:	bfb8      	it	lt
 800124c:	f04f 33ff 	movlt.w	r3, #4294967295
 8001250:	3702      	adds	r7, #2
 8001252:	9305      	str	r3, [sp, #20]
 8001254:	4d2e      	ldr	r5, [pc, #184]	; (8001310 <_svfiprintf_r+0x1e0>)
 8001256:	7839      	ldrb	r1, [r7, #0]
 8001258:	2203      	movs	r2, #3
 800125a:	4628      	mov	r0, r5
 800125c:	f7fe ffd0 	bl	8000200 <memchr>
 8001260:	b138      	cbz	r0, 8001272 <_svfiprintf_r+0x142>
 8001262:	2340      	movs	r3, #64	; 0x40
 8001264:	1b40      	subs	r0, r0, r5
 8001266:	fa03 f000 	lsl.w	r0, r3, r0
 800126a:	9b04      	ldr	r3, [sp, #16]
 800126c:	4303      	orrs	r3, r0
 800126e:	3701      	adds	r7, #1
 8001270:	9304      	str	r3, [sp, #16]
 8001272:	7839      	ldrb	r1, [r7, #0]
 8001274:	4827      	ldr	r0, [pc, #156]	; (8001314 <_svfiprintf_r+0x1e4>)
 8001276:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800127a:	2206      	movs	r2, #6
 800127c:	1c7e      	adds	r6, r7, #1
 800127e:	f7fe ffbf 	bl	8000200 <memchr>
 8001282:	2800      	cmp	r0, #0
 8001284:	d038      	beq.n	80012f8 <_svfiprintf_r+0x1c8>
 8001286:	4b24      	ldr	r3, [pc, #144]	; (8001318 <_svfiprintf_r+0x1e8>)
 8001288:	bb13      	cbnz	r3, 80012d0 <_svfiprintf_r+0x1a0>
 800128a:	9b03      	ldr	r3, [sp, #12]
 800128c:	3307      	adds	r3, #7
 800128e:	f023 0307 	bic.w	r3, r3, #7
 8001292:	3308      	adds	r3, #8
 8001294:	9303      	str	r3, [sp, #12]
 8001296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001298:	444b      	add	r3, r9
 800129a:	9309      	str	r3, [sp, #36]	; 0x24
 800129c:	e76d      	b.n	800117a <_svfiprintf_r+0x4a>
 800129e:	fb05 3202 	mla	r2, r5, r2, r3
 80012a2:	2001      	movs	r0, #1
 80012a4:	460f      	mov	r7, r1
 80012a6:	e7a6      	b.n	80011f6 <_svfiprintf_r+0xc6>
 80012a8:	2300      	movs	r3, #0
 80012aa:	3701      	adds	r7, #1
 80012ac:	9305      	str	r3, [sp, #20]
 80012ae:	4619      	mov	r1, r3
 80012b0:	250a      	movs	r5, #10
 80012b2:	4638      	mov	r0, r7
 80012b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80012b8:	3a30      	subs	r2, #48	; 0x30
 80012ba:	2a09      	cmp	r2, #9
 80012bc:	d903      	bls.n	80012c6 <_svfiprintf_r+0x196>
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d0c8      	beq.n	8001254 <_svfiprintf_r+0x124>
 80012c2:	9105      	str	r1, [sp, #20]
 80012c4:	e7c6      	b.n	8001254 <_svfiprintf_r+0x124>
 80012c6:	fb05 2101 	mla	r1, r5, r1, r2
 80012ca:	2301      	movs	r3, #1
 80012cc:	4607      	mov	r7, r0
 80012ce:	e7f0      	b.n	80012b2 <_svfiprintf_r+0x182>
 80012d0:	ab03      	add	r3, sp, #12
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	4622      	mov	r2, r4
 80012d6:	4b11      	ldr	r3, [pc, #68]	; (800131c <_svfiprintf_r+0x1ec>)
 80012d8:	a904      	add	r1, sp, #16
 80012da:	4640      	mov	r0, r8
 80012dc:	f3af 8000 	nop.w
 80012e0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80012e4:	4681      	mov	r9, r0
 80012e6:	d1d6      	bne.n	8001296 <_svfiprintf_r+0x166>
 80012e8:	89a3      	ldrh	r3, [r4, #12]
 80012ea:	065b      	lsls	r3, r3, #25
 80012ec:	f53f af35 	bmi.w	800115a <_svfiprintf_r+0x2a>
 80012f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80012f2:	b01d      	add	sp, #116	; 0x74
 80012f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012f8:	ab03      	add	r3, sp, #12
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	4622      	mov	r2, r4
 80012fe:	4b07      	ldr	r3, [pc, #28]	; (800131c <_svfiprintf_r+0x1ec>)
 8001300:	a904      	add	r1, sp, #16
 8001302:	4640      	mov	r0, r8
 8001304:	f000 f882 	bl	800140c <_printf_i>
 8001308:	e7ea      	b.n	80012e0 <_svfiprintf_r+0x1b0>
 800130a:	bf00      	nop
 800130c:	080019b4 	.word	0x080019b4
 8001310:	080019ba 	.word	0x080019ba
 8001314:	080019be 	.word	0x080019be
 8001318:	00000000 	.word	0x00000000
 800131c:	0800107d 	.word	0x0800107d

08001320 <_printf_common>:
 8001320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001324:	4691      	mov	r9, r2
 8001326:	461f      	mov	r7, r3
 8001328:	688a      	ldr	r2, [r1, #8]
 800132a:	690b      	ldr	r3, [r1, #16]
 800132c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001330:	4293      	cmp	r3, r2
 8001332:	bfb8      	it	lt
 8001334:	4613      	movlt	r3, r2
 8001336:	f8c9 3000 	str.w	r3, [r9]
 800133a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800133e:	4606      	mov	r6, r0
 8001340:	460c      	mov	r4, r1
 8001342:	b112      	cbz	r2, 800134a <_printf_common+0x2a>
 8001344:	3301      	adds	r3, #1
 8001346:	f8c9 3000 	str.w	r3, [r9]
 800134a:	6823      	ldr	r3, [r4, #0]
 800134c:	0699      	lsls	r1, r3, #26
 800134e:	bf42      	ittt	mi
 8001350:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001354:	3302      	addmi	r3, #2
 8001356:	f8c9 3000 	strmi.w	r3, [r9]
 800135a:	6825      	ldr	r5, [r4, #0]
 800135c:	f015 0506 	ands.w	r5, r5, #6
 8001360:	d107      	bne.n	8001372 <_printf_common+0x52>
 8001362:	f104 0a19 	add.w	sl, r4, #25
 8001366:	68e3      	ldr	r3, [r4, #12]
 8001368:	f8d9 2000 	ldr.w	r2, [r9]
 800136c:	1a9b      	subs	r3, r3, r2
 800136e:	42ab      	cmp	r3, r5
 8001370:	dc28      	bgt.n	80013c4 <_printf_common+0xa4>
 8001372:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001376:	6822      	ldr	r2, [r4, #0]
 8001378:	3300      	adds	r3, #0
 800137a:	bf18      	it	ne
 800137c:	2301      	movne	r3, #1
 800137e:	0692      	lsls	r2, r2, #26
 8001380:	d42d      	bmi.n	80013de <_printf_common+0xbe>
 8001382:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001386:	4639      	mov	r1, r7
 8001388:	4630      	mov	r0, r6
 800138a:	47c0      	blx	r8
 800138c:	3001      	adds	r0, #1
 800138e:	d020      	beq.n	80013d2 <_printf_common+0xb2>
 8001390:	6823      	ldr	r3, [r4, #0]
 8001392:	68e5      	ldr	r5, [r4, #12]
 8001394:	f8d9 2000 	ldr.w	r2, [r9]
 8001398:	f003 0306 	and.w	r3, r3, #6
 800139c:	2b04      	cmp	r3, #4
 800139e:	bf08      	it	eq
 80013a0:	1aad      	subeq	r5, r5, r2
 80013a2:	68a3      	ldr	r3, [r4, #8]
 80013a4:	6922      	ldr	r2, [r4, #16]
 80013a6:	bf0c      	ite	eq
 80013a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80013ac:	2500      	movne	r5, #0
 80013ae:	4293      	cmp	r3, r2
 80013b0:	bfc4      	itt	gt
 80013b2:	1a9b      	subgt	r3, r3, r2
 80013b4:	18ed      	addgt	r5, r5, r3
 80013b6:	f04f 0900 	mov.w	r9, #0
 80013ba:	341a      	adds	r4, #26
 80013bc:	454d      	cmp	r5, r9
 80013be:	d11a      	bne.n	80013f6 <_printf_common+0xd6>
 80013c0:	2000      	movs	r0, #0
 80013c2:	e008      	b.n	80013d6 <_printf_common+0xb6>
 80013c4:	2301      	movs	r3, #1
 80013c6:	4652      	mov	r2, sl
 80013c8:	4639      	mov	r1, r7
 80013ca:	4630      	mov	r0, r6
 80013cc:	47c0      	blx	r8
 80013ce:	3001      	adds	r0, #1
 80013d0:	d103      	bne.n	80013da <_printf_common+0xba>
 80013d2:	f04f 30ff 	mov.w	r0, #4294967295
 80013d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013da:	3501      	adds	r5, #1
 80013dc:	e7c3      	b.n	8001366 <_printf_common+0x46>
 80013de:	18e1      	adds	r1, r4, r3
 80013e0:	1c5a      	adds	r2, r3, #1
 80013e2:	2030      	movs	r0, #48	; 0x30
 80013e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80013e8:	4422      	add	r2, r4
 80013ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80013ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80013f2:	3302      	adds	r3, #2
 80013f4:	e7c5      	b.n	8001382 <_printf_common+0x62>
 80013f6:	2301      	movs	r3, #1
 80013f8:	4622      	mov	r2, r4
 80013fa:	4639      	mov	r1, r7
 80013fc:	4630      	mov	r0, r6
 80013fe:	47c0      	blx	r8
 8001400:	3001      	adds	r0, #1
 8001402:	d0e6      	beq.n	80013d2 <_printf_common+0xb2>
 8001404:	f109 0901 	add.w	r9, r9, #1
 8001408:	e7d8      	b.n	80013bc <_printf_common+0x9c>
	...

0800140c <_printf_i>:
 800140c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001410:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001414:	460c      	mov	r4, r1
 8001416:	7e09      	ldrb	r1, [r1, #24]
 8001418:	b085      	sub	sp, #20
 800141a:	296e      	cmp	r1, #110	; 0x6e
 800141c:	4617      	mov	r7, r2
 800141e:	4606      	mov	r6, r0
 8001420:	4698      	mov	r8, r3
 8001422:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001424:	f000 80b3 	beq.w	800158e <_printf_i+0x182>
 8001428:	d822      	bhi.n	8001470 <_printf_i+0x64>
 800142a:	2963      	cmp	r1, #99	; 0x63
 800142c:	d036      	beq.n	800149c <_printf_i+0x90>
 800142e:	d80a      	bhi.n	8001446 <_printf_i+0x3a>
 8001430:	2900      	cmp	r1, #0
 8001432:	f000 80b9 	beq.w	80015a8 <_printf_i+0x19c>
 8001436:	2958      	cmp	r1, #88	; 0x58
 8001438:	f000 8083 	beq.w	8001542 <_printf_i+0x136>
 800143c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001440:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001444:	e032      	b.n	80014ac <_printf_i+0xa0>
 8001446:	2964      	cmp	r1, #100	; 0x64
 8001448:	d001      	beq.n	800144e <_printf_i+0x42>
 800144a:	2969      	cmp	r1, #105	; 0x69
 800144c:	d1f6      	bne.n	800143c <_printf_i+0x30>
 800144e:	6820      	ldr	r0, [r4, #0]
 8001450:	6813      	ldr	r3, [r2, #0]
 8001452:	0605      	lsls	r5, r0, #24
 8001454:	f103 0104 	add.w	r1, r3, #4
 8001458:	d52a      	bpl.n	80014b0 <_printf_i+0xa4>
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6011      	str	r1, [r2, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	da03      	bge.n	800146a <_printf_i+0x5e>
 8001462:	222d      	movs	r2, #45	; 0x2d
 8001464:	425b      	negs	r3, r3
 8001466:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800146a:	486f      	ldr	r0, [pc, #444]	; (8001628 <_printf_i+0x21c>)
 800146c:	220a      	movs	r2, #10
 800146e:	e039      	b.n	80014e4 <_printf_i+0xd8>
 8001470:	2973      	cmp	r1, #115	; 0x73
 8001472:	f000 809d 	beq.w	80015b0 <_printf_i+0x1a4>
 8001476:	d808      	bhi.n	800148a <_printf_i+0x7e>
 8001478:	296f      	cmp	r1, #111	; 0x6f
 800147a:	d020      	beq.n	80014be <_printf_i+0xb2>
 800147c:	2970      	cmp	r1, #112	; 0x70
 800147e:	d1dd      	bne.n	800143c <_printf_i+0x30>
 8001480:	6823      	ldr	r3, [r4, #0]
 8001482:	f043 0320 	orr.w	r3, r3, #32
 8001486:	6023      	str	r3, [r4, #0]
 8001488:	e003      	b.n	8001492 <_printf_i+0x86>
 800148a:	2975      	cmp	r1, #117	; 0x75
 800148c:	d017      	beq.n	80014be <_printf_i+0xb2>
 800148e:	2978      	cmp	r1, #120	; 0x78
 8001490:	d1d4      	bne.n	800143c <_printf_i+0x30>
 8001492:	2378      	movs	r3, #120	; 0x78
 8001494:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001498:	4864      	ldr	r0, [pc, #400]	; (800162c <_printf_i+0x220>)
 800149a:	e055      	b.n	8001548 <_printf_i+0x13c>
 800149c:	6813      	ldr	r3, [r2, #0]
 800149e:	1d19      	adds	r1, r3, #4
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	6011      	str	r1, [r2, #0]
 80014a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80014a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80014ac:	2301      	movs	r3, #1
 80014ae:	e08c      	b.n	80015ca <_printf_i+0x1be>
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	6011      	str	r1, [r2, #0]
 80014b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80014b8:	bf18      	it	ne
 80014ba:	b21b      	sxthne	r3, r3
 80014bc:	e7cf      	b.n	800145e <_printf_i+0x52>
 80014be:	6813      	ldr	r3, [r2, #0]
 80014c0:	6825      	ldr	r5, [r4, #0]
 80014c2:	1d18      	adds	r0, r3, #4
 80014c4:	6010      	str	r0, [r2, #0]
 80014c6:	0628      	lsls	r0, r5, #24
 80014c8:	d501      	bpl.n	80014ce <_printf_i+0xc2>
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	e002      	b.n	80014d4 <_printf_i+0xc8>
 80014ce:	0668      	lsls	r0, r5, #25
 80014d0:	d5fb      	bpl.n	80014ca <_printf_i+0xbe>
 80014d2:	881b      	ldrh	r3, [r3, #0]
 80014d4:	4854      	ldr	r0, [pc, #336]	; (8001628 <_printf_i+0x21c>)
 80014d6:	296f      	cmp	r1, #111	; 0x6f
 80014d8:	bf14      	ite	ne
 80014da:	220a      	movne	r2, #10
 80014dc:	2208      	moveq	r2, #8
 80014de:	2100      	movs	r1, #0
 80014e0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80014e4:	6865      	ldr	r5, [r4, #4]
 80014e6:	60a5      	str	r5, [r4, #8]
 80014e8:	2d00      	cmp	r5, #0
 80014ea:	f2c0 8095 	blt.w	8001618 <_printf_i+0x20c>
 80014ee:	6821      	ldr	r1, [r4, #0]
 80014f0:	f021 0104 	bic.w	r1, r1, #4
 80014f4:	6021      	str	r1, [r4, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d13d      	bne.n	8001576 <_printf_i+0x16a>
 80014fa:	2d00      	cmp	r5, #0
 80014fc:	f040 808e 	bne.w	800161c <_printf_i+0x210>
 8001500:	4665      	mov	r5, ip
 8001502:	2a08      	cmp	r2, #8
 8001504:	d10b      	bne.n	800151e <_printf_i+0x112>
 8001506:	6823      	ldr	r3, [r4, #0]
 8001508:	07db      	lsls	r3, r3, #31
 800150a:	d508      	bpl.n	800151e <_printf_i+0x112>
 800150c:	6923      	ldr	r3, [r4, #16]
 800150e:	6862      	ldr	r2, [r4, #4]
 8001510:	429a      	cmp	r2, r3
 8001512:	bfde      	ittt	le
 8001514:	2330      	movle	r3, #48	; 0x30
 8001516:	f805 3c01 	strble.w	r3, [r5, #-1]
 800151a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800151e:	ebac 0305 	sub.w	r3, ip, r5
 8001522:	6123      	str	r3, [r4, #16]
 8001524:	f8cd 8000 	str.w	r8, [sp]
 8001528:	463b      	mov	r3, r7
 800152a:	aa03      	add	r2, sp, #12
 800152c:	4621      	mov	r1, r4
 800152e:	4630      	mov	r0, r6
 8001530:	f7ff fef6 	bl	8001320 <_printf_common>
 8001534:	3001      	adds	r0, #1
 8001536:	d14d      	bne.n	80015d4 <_printf_i+0x1c8>
 8001538:	f04f 30ff 	mov.w	r0, #4294967295
 800153c:	b005      	add	sp, #20
 800153e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001542:	4839      	ldr	r0, [pc, #228]	; (8001628 <_printf_i+0x21c>)
 8001544:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001548:	6813      	ldr	r3, [r2, #0]
 800154a:	6821      	ldr	r1, [r4, #0]
 800154c:	1d1d      	adds	r5, r3, #4
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	6015      	str	r5, [r2, #0]
 8001552:	060a      	lsls	r2, r1, #24
 8001554:	d50b      	bpl.n	800156e <_printf_i+0x162>
 8001556:	07ca      	lsls	r2, r1, #31
 8001558:	bf44      	itt	mi
 800155a:	f041 0120 	orrmi.w	r1, r1, #32
 800155e:	6021      	strmi	r1, [r4, #0]
 8001560:	b91b      	cbnz	r3, 800156a <_printf_i+0x15e>
 8001562:	6822      	ldr	r2, [r4, #0]
 8001564:	f022 0220 	bic.w	r2, r2, #32
 8001568:	6022      	str	r2, [r4, #0]
 800156a:	2210      	movs	r2, #16
 800156c:	e7b7      	b.n	80014de <_printf_i+0xd2>
 800156e:	064d      	lsls	r5, r1, #25
 8001570:	bf48      	it	mi
 8001572:	b29b      	uxthmi	r3, r3
 8001574:	e7ef      	b.n	8001556 <_printf_i+0x14a>
 8001576:	4665      	mov	r5, ip
 8001578:	fbb3 f1f2 	udiv	r1, r3, r2
 800157c:	fb02 3311 	mls	r3, r2, r1, r3
 8001580:	5cc3      	ldrb	r3, [r0, r3]
 8001582:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001586:	460b      	mov	r3, r1
 8001588:	2900      	cmp	r1, #0
 800158a:	d1f5      	bne.n	8001578 <_printf_i+0x16c>
 800158c:	e7b9      	b.n	8001502 <_printf_i+0xf6>
 800158e:	6813      	ldr	r3, [r2, #0]
 8001590:	6825      	ldr	r5, [r4, #0]
 8001592:	6961      	ldr	r1, [r4, #20]
 8001594:	1d18      	adds	r0, r3, #4
 8001596:	6010      	str	r0, [r2, #0]
 8001598:	0628      	lsls	r0, r5, #24
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	d501      	bpl.n	80015a2 <_printf_i+0x196>
 800159e:	6019      	str	r1, [r3, #0]
 80015a0:	e002      	b.n	80015a8 <_printf_i+0x19c>
 80015a2:	066a      	lsls	r2, r5, #25
 80015a4:	d5fb      	bpl.n	800159e <_printf_i+0x192>
 80015a6:	8019      	strh	r1, [r3, #0]
 80015a8:	2300      	movs	r3, #0
 80015aa:	6123      	str	r3, [r4, #16]
 80015ac:	4665      	mov	r5, ip
 80015ae:	e7b9      	b.n	8001524 <_printf_i+0x118>
 80015b0:	6813      	ldr	r3, [r2, #0]
 80015b2:	1d19      	adds	r1, r3, #4
 80015b4:	6011      	str	r1, [r2, #0]
 80015b6:	681d      	ldr	r5, [r3, #0]
 80015b8:	6862      	ldr	r2, [r4, #4]
 80015ba:	2100      	movs	r1, #0
 80015bc:	4628      	mov	r0, r5
 80015be:	f7fe fe1f 	bl	8000200 <memchr>
 80015c2:	b108      	cbz	r0, 80015c8 <_printf_i+0x1bc>
 80015c4:	1b40      	subs	r0, r0, r5
 80015c6:	6060      	str	r0, [r4, #4]
 80015c8:	6863      	ldr	r3, [r4, #4]
 80015ca:	6123      	str	r3, [r4, #16]
 80015cc:	2300      	movs	r3, #0
 80015ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80015d2:	e7a7      	b.n	8001524 <_printf_i+0x118>
 80015d4:	6923      	ldr	r3, [r4, #16]
 80015d6:	462a      	mov	r2, r5
 80015d8:	4639      	mov	r1, r7
 80015da:	4630      	mov	r0, r6
 80015dc:	47c0      	blx	r8
 80015de:	3001      	adds	r0, #1
 80015e0:	d0aa      	beq.n	8001538 <_printf_i+0x12c>
 80015e2:	6823      	ldr	r3, [r4, #0]
 80015e4:	079b      	lsls	r3, r3, #30
 80015e6:	d413      	bmi.n	8001610 <_printf_i+0x204>
 80015e8:	68e0      	ldr	r0, [r4, #12]
 80015ea:	9b03      	ldr	r3, [sp, #12]
 80015ec:	4298      	cmp	r0, r3
 80015ee:	bfb8      	it	lt
 80015f0:	4618      	movlt	r0, r3
 80015f2:	e7a3      	b.n	800153c <_printf_i+0x130>
 80015f4:	2301      	movs	r3, #1
 80015f6:	464a      	mov	r2, r9
 80015f8:	4639      	mov	r1, r7
 80015fa:	4630      	mov	r0, r6
 80015fc:	47c0      	blx	r8
 80015fe:	3001      	adds	r0, #1
 8001600:	d09a      	beq.n	8001538 <_printf_i+0x12c>
 8001602:	3501      	adds	r5, #1
 8001604:	68e3      	ldr	r3, [r4, #12]
 8001606:	9a03      	ldr	r2, [sp, #12]
 8001608:	1a9b      	subs	r3, r3, r2
 800160a:	42ab      	cmp	r3, r5
 800160c:	dcf2      	bgt.n	80015f4 <_printf_i+0x1e8>
 800160e:	e7eb      	b.n	80015e8 <_printf_i+0x1dc>
 8001610:	2500      	movs	r5, #0
 8001612:	f104 0919 	add.w	r9, r4, #25
 8001616:	e7f5      	b.n	8001604 <_printf_i+0x1f8>
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1ac      	bne.n	8001576 <_printf_i+0x16a>
 800161c:	7803      	ldrb	r3, [r0, #0]
 800161e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001622:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001626:	e76c      	b.n	8001502 <_printf_i+0xf6>
 8001628:	080019c5 	.word	0x080019c5
 800162c:	080019d6 	.word	0x080019d6

08001630 <memcpy>:
 8001630:	b510      	push	{r4, lr}
 8001632:	1e43      	subs	r3, r0, #1
 8001634:	440a      	add	r2, r1
 8001636:	4291      	cmp	r1, r2
 8001638:	d100      	bne.n	800163c <memcpy+0xc>
 800163a:	bd10      	pop	{r4, pc}
 800163c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001640:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001644:	e7f7      	b.n	8001636 <memcpy+0x6>

08001646 <memmove>:
 8001646:	4288      	cmp	r0, r1
 8001648:	b510      	push	{r4, lr}
 800164a:	eb01 0302 	add.w	r3, r1, r2
 800164e:	d807      	bhi.n	8001660 <memmove+0x1a>
 8001650:	1e42      	subs	r2, r0, #1
 8001652:	4299      	cmp	r1, r3
 8001654:	d00a      	beq.n	800166c <memmove+0x26>
 8001656:	f811 4b01 	ldrb.w	r4, [r1], #1
 800165a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800165e:	e7f8      	b.n	8001652 <memmove+0xc>
 8001660:	4283      	cmp	r3, r0
 8001662:	d9f5      	bls.n	8001650 <memmove+0xa>
 8001664:	1881      	adds	r1, r0, r2
 8001666:	1ad2      	subs	r2, r2, r3
 8001668:	42d3      	cmn	r3, r2
 800166a:	d100      	bne.n	800166e <memmove+0x28>
 800166c:	bd10      	pop	{r4, pc}
 800166e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001672:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8001676:	e7f7      	b.n	8001668 <memmove+0x22>

08001678 <_free_r>:
 8001678:	b538      	push	{r3, r4, r5, lr}
 800167a:	4605      	mov	r5, r0
 800167c:	2900      	cmp	r1, #0
 800167e:	d045      	beq.n	800170c <_free_r+0x94>
 8001680:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001684:	1f0c      	subs	r4, r1, #4
 8001686:	2b00      	cmp	r3, #0
 8001688:	bfb8      	it	lt
 800168a:	18e4      	addlt	r4, r4, r3
 800168c:	f000 f8d2 	bl	8001834 <__malloc_lock>
 8001690:	4a1f      	ldr	r2, [pc, #124]	; (8001710 <_free_r+0x98>)
 8001692:	6813      	ldr	r3, [r2, #0]
 8001694:	4610      	mov	r0, r2
 8001696:	b933      	cbnz	r3, 80016a6 <_free_r+0x2e>
 8001698:	6063      	str	r3, [r4, #4]
 800169a:	6014      	str	r4, [r2, #0]
 800169c:	4628      	mov	r0, r5
 800169e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80016a2:	f000 b8c8 	b.w	8001836 <__malloc_unlock>
 80016a6:	42a3      	cmp	r3, r4
 80016a8:	d90c      	bls.n	80016c4 <_free_r+0x4c>
 80016aa:	6821      	ldr	r1, [r4, #0]
 80016ac:	1862      	adds	r2, r4, r1
 80016ae:	4293      	cmp	r3, r2
 80016b0:	bf04      	itt	eq
 80016b2:	681a      	ldreq	r2, [r3, #0]
 80016b4:	685b      	ldreq	r3, [r3, #4]
 80016b6:	6063      	str	r3, [r4, #4]
 80016b8:	bf04      	itt	eq
 80016ba:	1852      	addeq	r2, r2, r1
 80016bc:	6022      	streq	r2, [r4, #0]
 80016be:	6004      	str	r4, [r0, #0]
 80016c0:	e7ec      	b.n	800169c <_free_r+0x24>
 80016c2:	4613      	mov	r3, r2
 80016c4:	685a      	ldr	r2, [r3, #4]
 80016c6:	b10a      	cbz	r2, 80016cc <_free_r+0x54>
 80016c8:	42a2      	cmp	r2, r4
 80016ca:	d9fa      	bls.n	80016c2 <_free_r+0x4a>
 80016cc:	6819      	ldr	r1, [r3, #0]
 80016ce:	1858      	adds	r0, r3, r1
 80016d0:	42a0      	cmp	r0, r4
 80016d2:	d10b      	bne.n	80016ec <_free_r+0x74>
 80016d4:	6820      	ldr	r0, [r4, #0]
 80016d6:	4401      	add	r1, r0
 80016d8:	1858      	adds	r0, r3, r1
 80016da:	4282      	cmp	r2, r0
 80016dc:	6019      	str	r1, [r3, #0]
 80016de:	d1dd      	bne.n	800169c <_free_r+0x24>
 80016e0:	6810      	ldr	r0, [r2, #0]
 80016e2:	6852      	ldr	r2, [r2, #4]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	4401      	add	r1, r0
 80016e8:	6019      	str	r1, [r3, #0]
 80016ea:	e7d7      	b.n	800169c <_free_r+0x24>
 80016ec:	d902      	bls.n	80016f4 <_free_r+0x7c>
 80016ee:	230c      	movs	r3, #12
 80016f0:	602b      	str	r3, [r5, #0]
 80016f2:	e7d3      	b.n	800169c <_free_r+0x24>
 80016f4:	6820      	ldr	r0, [r4, #0]
 80016f6:	1821      	adds	r1, r4, r0
 80016f8:	428a      	cmp	r2, r1
 80016fa:	bf04      	itt	eq
 80016fc:	6811      	ldreq	r1, [r2, #0]
 80016fe:	6852      	ldreq	r2, [r2, #4]
 8001700:	6062      	str	r2, [r4, #4]
 8001702:	bf04      	itt	eq
 8001704:	1809      	addeq	r1, r1, r0
 8001706:	6021      	streq	r1, [r4, #0]
 8001708:	605c      	str	r4, [r3, #4]
 800170a:	e7c7      	b.n	800169c <_free_r+0x24>
 800170c:	bd38      	pop	{r3, r4, r5, pc}
 800170e:	bf00      	nop
 8001710:	2000009c 	.word	0x2000009c

08001714 <_malloc_r>:
 8001714:	b570      	push	{r4, r5, r6, lr}
 8001716:	1ccd      	adds	r5, r1, #3
 8001718:	f025 0503 	bic.w	r5, r5, #3
 800171c:	3508      	adds	r5, #8
 800171e:	2d0c      	cmp	r5, #12
 8001720:	bf38      	it	cc
 8001722:	250c      	movcc	r5, #12
 8001724:	2d00      	cmp	r5, #0
 8001726:	4606      	mov	r6, r0
 8001728:	db01      	blt.n	800172e <_malloc_r+0x1a>
 800172a:	42a9      	cmp	r1, r5
 800172c:	d903      	bls.n	8001736 <_malloc_r+0x22>
 800172e:	230c      	movs	r3, #12
 8001730:	6033      	str	r3, [r6, #0]
 8001732:	2000      	movs	r0, #0
 8001734:	bd70      	pop	{r4, r5, r6, pc}
 8001736:	f000 f87d 	bl	8001834 <__malloc_lock>
 800173a:	4a21      	ldr	r2, [pc, #132]	; (80017c0 <_malloc_r+0xac>)
 800173c:	6814      	ldr	r4, [r2, #0]
 800173e:	4621      	mov	r1, r4
 8001740:	b991      	cbnz	r1, 8001768 <_malloc_r+0x54>
 8001742:	4c20      	ldr	r4, [pc, #128]	; (80017c4 <_malloc_r+0xb0>)
 8001744:	6823      	ldr	r3, [r4, #0]
 8001746:	b91b      	cbnz	r3, 8001750 <_malloc_r+0x3c>
 8001748:	4630      	mov	r0, r6
 800174a:	f000 f863 	bl	8001814 <_sbrk_r>
 800174e:	6020      	str	r0, [r4, #0]
 8001750:	4629      	mov	r1, r5
 8001752:	4630      	mov	r0, r6
 8001754:	f000 f85e 	bl	8001814 <_sbrk_r>
 8001758:	1c43      	adds	r3, r0, #1
 800175a:	d124      	bne.n	80017a6 <_malloc_r+0x92>
 800175c:	230c      	movs	r3, #12
 800175e:	6033      	str	r3, [r6, #0]
 8001760:	4630      	mov	r0, r6
 8001762:	f000 f868 	bl	8001836 <__malloc_unlock>
 8001766:	e7e4      	b.n	8001732 <_malloc_r+0x1e>
 8001768:	680b      	ldr	r3, [r1, #0]
 800176a:	1b5b      	subs	r3, r3, r5
 800176c:	d418      	bmi.n	80017a0 <_malloc_r+0x8c>
 800176e:	2b0b      	cmp	r3, #11
 8001770:	d90f      	bls.n	8001792 <_malloc_r+0x7e>
 8001772:	600b      	str	r3, [r1, #0]
 8001774:	50cd      	str	r5, [r1, r3]
 8001776:	18cc      	adds	r4, r1, r3
 8001778:	4630      	mov	r0, r6
 800177a:	f000 f85c 	bl	8001836 <__malloc_unlock>
 800177e:	f104 000b 	add.w	r0, r4, #11
 8001782:	1d23      	adds	r3, r4, #4
 8001784:	f020 0007 	bic.w	r0, r0, #7
 8001788:	1ac3      	subs	r3, r0, r3
 800178a:	d0d3      	beq.n	8001734 <_malloc_r+0x20>
 800178c:	425a      	negs	r2, r3
 800178e:	50e2      	str	r2, [r4, r3]
 8001790:	e7d0      	b.n	8001734 <_malloc_r+0x20>
 8001792:	428c      	cmp	r4, r1
 8001794:	684b      	ldr	r3, [r1, #4]
 8001796:	bf16      	itet	ne
 8001798:	6063      	strne	r3, [r4, #4]
 800179a:	6013      	streq	r3, [r2, #0]
 800179c:	460c      	movne	r4, r1
 800179e:	e7eb      	b.n	8001778 <_malloc_r+0x64>
 80017a0:	460c      	mov	r4, r1
 80017a2:	6849      	ldr	r1, [r1, #4]
 80017a4:	e7cc      	b.n	8001740 <_malloc_r+0x2c>
 80017a6:	1cc4      	adds	r4, r0, #3
 80017a8:	f024 0403 	bic.w	r4, r4, #3
 80017ac:	42a0      	cmp	r0, r4
 80017ae:	d005      	beq.n	80017bc <_malloc_r+0xa8>
 80017b0:	1a21      	subs	r1, r4, r0
 80017b2:	4630      	mov	r0, r6
 80017b4:	f000 f82e 	bl	8001814 <_sbrk_r>
 80017b8:	3001      	adds	r0, #1
 80017ba:	d0cf      	beq.n	800175c <_malloc_r+0x48>
 80017bc:	6025      	str	r5, [r4, #0]
 80017be:	e7db      	b.n	8001778 <_malloc_r+0x64>
 80017c0:	2000009c 	.word	0x2000009c
 80017c4:	200000a0 	.word	0x200000a0

080017c8 <_realloc_r>:
 80017c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ca:	4607      	mov	r7, r0
 80017cc:	4614      	mov	r4, r2
 80017ce:	460e      	mov	r6, r1
 80017d0:	b921      	cbnz	r1, 80017dc <_realloc_r+0x14>
 80017d2:	4611      	mov	r1, r2
 80017d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80017d8:	f7ff bf9c 	b.w	8001714 <_malloc_r>
 80017dc:	b922      	cbnz	r2, 80017e8 <_realloc_r+0x20>
 80017de:	f7ff ff4b 	bl	8001678 <_free_r>
 80017e2:	4625      	mov	r5, r4
 80017e4:	4628      	mov	r0, r5
 80017e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017e8:	f000 f826 	bl	8001838 <_malloc_usable_size_r>
 80017ec:	42a0      	cmp	r0, r4
 80017ee:	d20f      	bcs.n	8001810 <_realloc_r+0x48>
 80017f0:	4621      	mov	r1, r4
 80017f2:	4638      	mov	r0, r7
 80017f4:	f7ff ff8e 	bl	8001714 <_malloc_r>
 80017f8:	4605      	mov	r5, r0
 80017fa:	2800      	cmp	r0, #0
 80017fc:	d0f2      	beq.n	80017e4 <_realloc_r+0x1c>
 80017fe:	4631      	mov	r1, r6
 8001800:	4622      	mov	r2, r4
 8001802:	f7ff ff15 	bl	8001630 <memcpy>
 8001806:	4631      	mov	r1, r6
 8001808:	4638      	mov	r0, r7
 800180a:	f7ff ff35 	bl	8001678 <_free_r>
 800180e:	e7e9      	b.n	80017e4 <_realloc_r+0x1c>
 8001810:	4635      	mov	r5, r6
 8001812:	e7e7      	b.n	80017e4 <_realloc_r+0x1c>

08001814 <_sbrk_r>:
 8001814:	b538      	push	{r3, r4, r5, lr}
 8001816:	4c06      	ldr	r4, [pc, #24]	; (8001830 <_sbrk_r+0x1c>)
 8001818:	2300      	movs	r3, #0
 800181a:	4605      	mov	r5, r0
 800181c:	4608      	mov	r0, r1
 800181e:	6023      	str	r3, [r4, #0]
 8001820:	f7fe fd4c 	bl	80002bc <_sbrk>
 8001824:	1c43      	adds	r3, r0, #1
 8001826:	d102      	bne.n	800182e <_sbrk_r+0x1a>
 8001828:	6823      	ldr	r3, [r4, #0]
 800182a:	b103      	cbz	r3, 800182e <_sbrk_r+0x1a>
 800182c:	602b      	str	r3, [r5, #0]
 800182e:	bd38      	pop	{r3, r4, r5, pc}
 8001830:	20000180 	.word	0x20000180

08001834 <__malloc_lock>:
 8001834:	4770      	bx	lr

08001836 <__malloc_unlock>:
 8001836:	4770      	bx	lr

08001838 <_malloc_usable_size_r>:
 8001838:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800183c:	1f18      	subs	r0, r3, #4
 800183e:	2b00      	cmp	r3, #0
 8001840:	bfbc      	itt	lt
 8001842:	580b      	ldrlt	r3, [r1, r0]
 8001844:	18c0      	addlt	r0, r0, r3
 8001846:	4770      	bx	lr

08001848 <_init>:
 8001848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800184a:	bf00      	nop
 800184c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800184e:	bc08      	pop	{r3}
 8001850:	469e      	mov	lr, r3
 8001852:	4770      	bx	lr

08001854 <_fini>:
 8001854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001856:	bf00      	nop
 8001858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800185a:	bc08      	pop	{r3}
 800185c:	469e      	mov	lr, r3
 800185e:	4770      	bx	lr
