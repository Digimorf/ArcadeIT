
ArcadeIT_Ver021_F469_CMSIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ef8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00010280  080070b8  080070b8  000170b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017338  08017338  000301e4  2**0
                  CONTENTS
  4 .ARM          00000000  08017338  08017338  000301e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08017338  08017338  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017338  08017338  00027338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801733c  0801733c  0002733c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08017340  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d58  200001e4  08017524  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f3c  08017524  00030f3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000184b9  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000030d8  00000000  00000000  000486cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000920  00000000  00000000  0004b7a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000830  00000000  00000000  0004c0c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025846  00000000  00000000  0004c8f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d37b  00000000  00000000  0007213e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c21e0  00000000  00000000  0007f4b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00141699  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002398  00000000  00000000  00141714  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000093ce  00000000  00000000  00143aac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080070a0 	.word	0x080070a0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e8 	.word	0x200001e8
 80001fc:	080070a0 	.word	0x080070a0

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <main>:
// /////////////////////////////////////////////////////////////////////////////
// "M A I N"   E N T R Y   P O I N T
// /////////////////////////////////////////////////////////////////////////////

int main(void)
{
 8000bd8:	b508      	push	{r3, lr}
   ArcadeIT_Test_Bench();
 8000bda:	f000 faed 	bl	80011b8 <ArcadeIT_Test_Bench>

  return 0;

} // End main.
 8000bde:	2000      	movs	r0, #0
 8000be0:	bd08      	pop	{r3, pc}

08000be2 <NMI_Handler>:
 8000be2:	4770      	bx	lr

08000be4 <HardFault_Handler>:
 8000be4:	e7fe      	b.n	8000be4 <HardFault_Handler>

08000be6 <MemManage_Handler>:
 8000be6:	e7fe      	b.n	8000be6 <MemManage_Handler>

08000be8 <BusFault_Handler>:
 8000be8:	e7fe      	b.n	8000be8 <BusFault_Handler>

08000bea <UsageFault_Handler>:
 8000bea:	e7fe      	b.n	8000bea <UsageFault_Handler>

08000bec <SVC_Handler>:
 8000bec:	4770      	bx	lr

08000bee <DebugMon_Handler>:
 8000bee:	4770      	bx	lr

08000bf0 <PendSV_Handler>:
 8000bf0:	4770      	bx	lr

08000bf2 <_sbrk>:
 8000bf2:	b508      	push	{r3, lr}
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	f240 2200 	movw	r2, #512	; 0x200
 8000bfa:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000bfe:	6812      	ldr	r2, [r2, #0]
 8000c00:	b172      	cbz	r2, 8000c20 <_sbrk+0x2e>
 8000c02:	f240 2200 	movw	r2, #512	; 0x200
 8000c06:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000c0a:	6810      	ldr	r0, [r2, #0]
 8000c0c:	4403      	add	r3, r0
 8000c0e:	466a      	mov	r2, sp
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d80f      	bhi.n	8000c34 <_sbrk+0x42>
 8000c14:	f240 2200 	movw	r2, #512	; 0x200
 8000c18:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000c1c:	6013      	str	r3, [r2, #0]
 8000c1e:	bd08      	pop	{r3, pc}
 8000c20:	f240 2200 	movw	r2, #512	; 0x200
 8000c24:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000c28:	f640 7140 	movw	r1, #3904	; 0xf40
 8000c2c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8000c30:	6011      	str	r1, [r2, #0]
 8000c32:	e7e6      	b.n	8000c02 <_sbrk+0x10>
 8000c34:	f004 f9c0 	bl	8004fb8 <__errno>
 8000c38:	230c      	movs	r3, #12
 8000c3a:	6003      	str	r3, [r0, #0]
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	e7ed      	b.n	8000c1e <_sbrk+0x2c>
	...

08000c44 <Reset_Handler>:
 8000c44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c7c <LoopFillZerobss+0x14>
 8000c48:	2100      	movs	r1, #0
 8000c4a:	e003      	b.n	8000c54 <LoopCopyDataInit>

08000c4c <CopyDataInit>:
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <LoopFillZerobss+0x18>)
 8000c4e:	585b      	ldr	r3, [r3, r1]
 8000c50:	5043      	str	r3, [r0, r1]
 8000c52:	3104      	adds	r1, #4

08000c54 <LoopCopyDataInit>:
 8000c54:	480b      	ldr	r0, [pc, #44]	; (8000c84 <LoopFillZerobss+0x1c>)
 8000c56:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <LoopFillZerobss+0x20>)
 8000c58:	1842      	adds	r2, r0, r1
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	d3f6      	bcc.n	8000c4c <CopyDataInit>
 8000c5e:	4a0b      	ldr	r2, [pc, #44]	; (8000c8c <LoopFillZerobss+0x24>)
 8000c60:	e002      	b.n	8000c68 <LoopFillZerobss>

08000c62 <FillZerobss>:
 8000c62:	2300      	movs	r3, #0
 8000c64:	f842 3b04 	str.w	r3, [r2], #4

08000c68 <LoopFillZerobss>:
 8000c68:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <LoopFillZerobss+0x28>)
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d3f9      	bcc.n	8000c62 <FillZerobss>
 8000c6e:	f000 f848 	bl	8000d02 <ArcadeIT_System_Init>
 8000c72:	f004 f9a7 	bl	8004fc4 <__libc_init_array>
 8000c76:	f7ff ffaf 	bl	8000bd8 <main>
 8000c7a:	4770      	bx	lr
 8000c7c:	20050000 	.word	0x20050000
 8000c80:	08017340 	.word	0x08017340
 8000c84:	20000000 	.word	0x20000000
 8000c88:	200001e4 	.word	0x200001e4
 8000c8c:	200001e4 	.word	0x200001e4
 8000c90:	20000f3c 	.word	0x20000f3c

08000c94 <ADC_IRQHandler>:
 8000c94:	e7fe      	b.n	8000c94 <ADC_IRQHandler>

08000c96 <ArcadeIT_SysTick_Init>:

} // end ArcadeIT_SysTick_Deinit

// -----------------------------------------------------------------------------
int ArcadeIT_SysTick_Init (void)
{
 8000c96:	b508      	push	{r3, lr}
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8000c98:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000c9c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000ca0:	f64b 721f 	movw	r2, #48927	; 0xbf1f
 8000ca4:	f2c0 0202 	movt	r2, #2
 8000ca8:	605a      	str	r2, [r3, #4]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000caa:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8000cae:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8000cb2:	21f0      	movs	r1, #240	; 0xf0
 8000cb4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000cb8:	2100      	movs	r1, #0
 8000cba:	6099      	str	r1, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cbc:	2107      	movs	r1, #7
 8000cbe:	6019      	str	r1, [r3, #0]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000cc0:	23c0      	movs	r3, #192	; 0xc0
 8000cc2:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
  lRetStatus = SysTick_Config(ARCADEIT_HCLKS_PER_MS);

  // Sets the priority of the interrupt
  NVIC_SetPriority (SysTick_IRQn, NVIC_SYSTICK_PRIORITY << 2);

  if (gDevices & ARCADEIT_DEVICE_SERIAL)
 8000cc6:	f240 2308 	movw	r3, #520	; 0x208
 8000cca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8000cd4:	d101      	bne.n	8000cda <ArcadeIT_SysTick_Init+0x44>
  } // End if.

  // And return the status.
  return lRetStatus;

} // end ArcadeIT_SysTick_Init.
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	bd08      	pop	{r3, pc}
    ArcadeIT_Serial_Port_String_Send (TEXT_SYSTICK_INITED);
 8000cda:	f247 00d8 	movw	r0, #28888	; 0x70d8
 8000cde:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000ce2:	f001 fcd7 	bl	8002694 <ArcadeIT_Serial_Port_String_Send>
 8000ce6:	e7f6      	b.n	8000cd6 <ArcadeIT_SysTick_Init+0x40>

08000ce8 <ArcadeIT_System_Delay>:
   * PARAMETERS:  See above.
   * RETURNS:     Nothing
   */

  // Get the parameter from the parameters pointer.
  gSystemTimer = pDelay;
 8000ce8:	f240 2318 	movw	r3, #536	; 0x218
 8000cec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000cf0:	6018      	str	r0, [r3, #0]
  while (gSystemTimer);
 8000cf2:	f240 2318 	movw	r3, #536	; 0x218
 8000cf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d1f8      	bne.n	8000cf2 <ArcadeIT_System_Delay+0xa>

} // end ArcadeIT_System_Delay.
 8000d00:	4770      	bx	lr

08000d02 <ArcadeIT_System_Init>:

// -----------------------------------------------------------------------------
void ArcadeIT_System_Init (void)
{
 8000d02:	b082      	sub	sp, #8
   * DESCRIPTION: This function initializes the core of the system
   * PARAMETERS:  None.
   * RETURNS:     Nothing.
   */

  __IO uint32_t lStartUpCounter = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	9301      	str	r3, [sp, #4]

  SCB->AIRCR = ((uint32_t)0x05FA0000) | NVIC_PriorityGroup_2; // Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup 2 value
 8000d08:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000d0c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000d10:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000d14:	f2c0 52fa 	movt	r2, #1530	; 0x5fa
 8000d18:	60da      	str	r2, [r3, #12]
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  // FPU settings: set CP10 and CP11 Full Access
 8000d1a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000d1e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000d22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET;     // Vector Table Relocation in Internal FLASH
 8000d26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d2a:	609a      	str	r2, [r3, #8]

  // In ArcadeIT PLL (clocked by HSE) is used as System clock source
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000d2c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000d30:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000d3a:	601a      	str	r2, [r3, #0]

  // Wait till HSE is ready and if Time out is reached exit
  while(((RCC->CR & RCC_CR_HSERDY) == 0) && (++lStartUpCounter != HSE_STARTUP_TIMEOUT));
 8000d3c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000d40:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000d4a:	d108      	bne.n	8000d5e <ArcadeIT_System_Init+0x5c>
 8000d4c:	9b01      	ldr	r3, [sp, #4]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	9301      	str	r3, [sp, #4]
 8000d52:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8000d56:	f2c1 5275 	movt	r2, #5493	; 0x1575
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d1ee      	bne.n	8000d3c <ArcadeIT_System_Init+0x3a>

  if (RCC->CR & RCC_CR_HSERDY)
 8000d5e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000d62:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000d6c:	d066      	beq.n	8000e3c <ArcadeIT_System_Init+0x13a>
  {
    // Select regulator voltage output Scale 1 mode
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000d6e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000d72:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d78:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d7c:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000d7e:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8000d82:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8000d86:	6811      	ldr	r1, [r2, #0]
 8000d88:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8000d8c:	6011      	str	r1, [r2, #0]
    // HCLK = SYSCLK / 1
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000d8e:	689a      	ldr	r2, [r3, #8]
 8000d90:	609a      	str	r2, [r3, #8]
    // PCLK2 = HCLK / 2
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000d92:	689a      	ldr	r2, [r3, #8]
 8000d94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d98:	609a      	str	r2, [r3, #8]
    // PCLK1 = HCLK / 4
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4; // 0x00001400U
 8000d9a:	689a      	ldr	r2, [r3, #8]
 8000d9c:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8000da0:	609a      	str	r2, [r3, #8]
    // Configure the main PLL
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) - 1) << 16) | (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
 8000da2:	f642 5204 	movw	r2, #11524	; 0x2d04
 8000da6:	f2c0 7240 	movt	r2, #1856	; 0x740
 8000daa:	605a      	str	r2, [r3, #4]
    // Enable the main PLL
    RCC->CR |= RCC_CR_PLLON;
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000db2:	601a      	str	r2, [r3, #0]
    // Wait till the main PLL is ready
    while((RCC->CR & RCC_CR_PLLRDY) == 0) {}
 8000db4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000db8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000dc2:	d0f7      	beq.n	8000db4 <ArcadeIT_System_Init+0xb2>
    // Enable the Over-drive to extend the clock frequency to 180 Mhz
    PWR->CR |= PWR_CR_ODEN;
 8000dc4:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000dc8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000dd2:	601a      	str	r2, [r3, #0]
    while((PWR->CSR & PWR_CSR_ODRDY) == 0) {}
 8000dd4:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000dd8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000de2:	d0f7      	beq.n	8000dd4 <ArcadeIT_System_Init+0xd2>
    PWR->CR |= PWR_CR_ODSWEN;
 8000de4:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000de8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000df2:	601a      	str	r2, [r3, #0]
    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0) {}
 8000df4:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000df8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000e02:	d0f7      	beq.n	8000df4 <ArcadeIT_System_Init+0xf2>
    // Configure Flash prefetch, Instruction cache, Data cache and wait state
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000e04:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000e08:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e0c:	f240 7205 	movw	r2, #1797	; 0x705
 8000e10:	601a      	str	r2, [r3, #0]
    // Select the main PLL as system clock source
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000e12:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000e16:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e1a:	689a      	ldr	r2, [r3, #8]
 8000e1c:	f022 0203 	bic.w	r2, r2, #3
 8000e20:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000e22:	689a      	ldr	r2, [r3, #8]
 8000e24:	f042 0202 	orr.w	r2, r2, #2
 8000e28:	609a      	str	r2, [r3, #8]
    // Wait till the main PLL is used as system clock source
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL) {}
 8000e2a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000e2e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	f003 030c 	and.w	r3, r3, #12
 8000e38:	2b08      	cmp	r3, #8
 8000e3a:	d1f6      	bne.n	8000e2a <ArcadeIT_System_Init+0x128>
    // configuration. User can add here some code to deal with this error

  } // end if

  // HCLK counter, DWT struct is defined inside the core_cm4.h file
  DWT->CTRL |= 1;  // enable the counter
 8000e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e40:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	f042 0201 	orr.w	r2, r2, #1
 8000e4a:	601a      	str	r2, [r3, #0]
  DWT->CYCCNT = 0; // reset the counter
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	605a      	str	r2, [r3, #4]

} // end ArcadeIT_System_Init.
 8000e50:	b002      	add	sp, #8
 8000e52:	4770      	bx	lr

08000e54 <ArcadeIT_SysTick_Handler>:

} // end ArcadeIT_If_VBlank.

// -----------------------------------------------------------------------------
void ArcadeIT_SysTick_Handler (void)
{
 8000e54:	b508      	push	{r3, lr}
   * PARAMETERS:  TimeDivider: this is the number to divide the system clock by (i.e. 1000: MSec, 1000000: MicroSec... ).
   * RETURNS:     Nothing
   */

  // Decrement timers synchronized to the MCU in ms.
  gSystemTick++;
 8000e56:	f240 2314 	movw	r3, #532	; 0x214
 8000e5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	3201      	adds	r2, #1
 8000e62:	601a      	str	r2, [r3, #0]

  if (gSecondaryTimer > 0)
 8000e64:	f240 230c 	movw	r3, #524	; 0x20c
 8000e68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	b133      	cbz	r3, 8000e7e <ArcadeIT_SysTick_Handler+0x2a>
    gSecondaryTimer--;
 8000e70:	f240 230c 	movw	r3, #524	; 0x20c
 8000e74:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	3a01      	subs	r2, #1
 8000e7c:	601a      	str	r2, [r3, #0]

  if (gSystemTimer > 0)
 8000e7e:	f240 2318 	movw	r3, #536	; 0x218
 8000e82:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	b133      	cbz	r3, 8000e98 <ArcadeIT_SysTick_Handler+0x44>
    gSystemTimer--;
 8000e8a:	f240 2318 	movw	r3, #536	; 0x218
 8000e8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	3a01      	subs	r2, #1
 8000e96:	601a      	str	r2, [r3, #0]

  // Run the tasks scheduler.
  if (gUnits & ARCADEIT_UNIT_SCHEDULER)
 8000e98:	f240 231c 	movw	r3, #540	; 0x21c
 8000e9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000ea6:	d100      	bne.n	8000eaa <ArcadeIT_SysTick_Handler+0x56>
  {
      ArcadeIT_Scheduler_Update();

  } // End if.

} // end ArcadeIT_SysTick_Handler.
 8000ea8:	bd08      	pop	{r3, pc}
      ArcadeIT_Scheduler_Update();
 8000eaa:	f002 fb62 	bl	8003572 <ArcadeIT_Scheduler_Update>
} // end ArcadeIT_SysTick_Handler.
 8000eae:	e7fb      	b.n	8000ea8 <ArcadeIT_SysTick_Handler+0x54>

08000eb0 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000eb0:	b508      	push	{r3, lr}
  ArcadeIT_SysTick_Handler();
 8000eb2:	f7ff ffcf 	bl	8000e54 <ArcadeIT_SysTick_Handler>

} // End SysTick_Handler.
 8000eb6:	bd08      	pop	{r3, pc}

08000eb8 <ArcadeIT_ArcadeIT_Start>:

} // end ArcadeIT_PowerUP_Systems

// /////////////////////////////////////////////////////////////////////////////
void ArcadeIT_ArcadeIT_Start (void)
{
 8000eb8:	b500      	push	{lr}
 8000eba:	b0c1      	sub	sp, #260	; 0x104
   */

  char lString[256];

  // ---------------------------------------------------------------------------
  if (gDevices & ARCADEIT_DEVICE_SERIAL)
 8000ebc:	f240 2308 	movw	r3, #520	; 0x208
 8000ec0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8000eca:	d172      	bne.n	8000fb2 <ArcadeIT_ArcadeIT_Start+0xfa>

  } // End if.
  // ---------------------------------------------------------------------------
  // Clock and timer system. Thjis must be called before the SD card initialization.
  // 1ms System Tick timer.
  ArcadeIT_SysTick_Init();
 8000ecc:	f7ff fee3 	bl	8000c96 <ArcadeIT_SysTick_Init>

  // ---------------------------------------------------------------------------
  if (gDevices & ARCADEIT_DEVICE_TESTPADS)
 8000ed0:	f240 2308 	movw	r3, #520	; 0x208
 8000ed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000ede:	d16d      	bne.n	8000fbc <ArcadeIT_ArcadeIT_Start+0x104>
    //ArcadeIT_TestPad_Init (RCC_MCO2Source_PLLCLK, RCC_MCO2Div_4); // 45 MHz
    //ArcadeIT_TestPad_Init (RCC_MCO2Source_HSE, RCC_MCO2Div_1);    //  8 MHz

  } // End if.
  // ---------------------------------------------------------------------------
  if (gDevices & ARCADEIT_DEVICE_STATUSLED)
 8000ee0:	f240 2308 	movw	r3, #520	; 0x208
 8000ee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000eee:	d16b      	bne.n	8000fc8 <ArcadeIT_ArcadeIT_Start+0x110>
    ArcadeIT_Status_LEDS_Init();

  } // End if.
  // ---------------------------------------------------------------------------
  // Time and date system.
  if (gUnits & ARCADEIT_UNIT_RTC)
 8000ef0:	f240 231c 	movw	r3, #540	; 0x21c
 8000ef4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f013 0f01 	tst.w	r3, #1
 8000efe:	d166      	bne.n	8000fce <ArcadeIT_ArcadeIT_Start+0x116>

    } // End if.
  // ---------------------------------------------------------------------------
  // Systems scheduler task. This must be set AFTER the Systick has been initialized
  // because uses the ISR function that is handled by the Systick.
  if (gUnits & ARCADEIT_UNIT_SCHEDULER)
 8000f00:	f240 231c 	movw	r3, #540	; 0x21c
 8000f04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000f0e:	d161      	bne.n	8000fd4 <ArcadeIT_ArcadeIT_Start+0x11c>
    // Start the scheduler system.
    ArcadeIT_Scheduler_Task_Init();

  } // End if.
  // ---------------------------------------------------------------------------
  if (gDevices & ARCADEIT_DEVICE_BUS)
 8000f10:	f240 2308 	movw	r3, #520	; 0x208
 8000f14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f013 0f01 	tst.w	r3, #1
 8000f1e:	d15c      	bne.n	8000fda <ArcadeIT_ArcadeIT_Start+0x122>

  } // End if.
  // ---------------------------------------------------------------------------
  // The external SRAM must be set before output devices in case we want to use
  // it as a frame buffer
  if (gDevices & ARCADEIT_DEVICE_RAM_MODULE)
 8000f20:	f240 2308 	movw	r3, #520	; 0x208
 8000f24:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f013 0f02 	tst.w	r3, #2
 8000f2e:	d157      	bne.n	8000fe0 <ArcadeIT_ArcadeIT_Start+0x128>
    ArcadeIT_SRAM_Init ();

  } // End if.
  // ---------------------------------------------------------------------------
  // Start the SPI Port
  if (gDevices & ARCADEIT_DEVICE_SPI1)
 8000f30:	f240 2308 	movw	r3, #520	; 0x208
 8000f34:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f013 0f10 	tst.w	r3, #16
 8000f3e:	d155      	bne.n	8000fec <ArcadeIT_ArcadeIT_Start+0x134>
  {
    ArcadeIT_SPI_Port_Init (SPI_FREQ_45_00_MHz);

  } // End if.
  // ---------------------------------------------------------------------------
  if (gDevices & ARCADEIT_DEVICE_I2C)
 8000f40:	f240 2308 	movw	r3, #520	; 0x208
 8000f44:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f013 0f20 	tst.w	r3, #32
 8000f4e:	d151      	bne.n	8000ff4 <ArcadeIT_ArcadeIT_Start+0x13c>
    ArcadeIT_I2C_Port_Init(I2C_100kHz);

  } // End if.
  // ---------------------------------------------------------------------------
  // Storage systems
  if (gStorage & (ARCADEIT_STORAGE_RAM_DISK | ARCADEIT_STORAGE_SD_CARD_SPI1))
 8000f50:	f240 2310 	movw	r3, #528	; 0x210
 8000f54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f013 0f03 	tst.w	r3, #3
 8000f5e:	d013      	beq.n	8000f88 <ArcadeIT_ArcadeIT_Start+0xd0>
  {
    FRESULT lValue;

    if (gStorage & ARCADEIT_STORAGE_SD_CARD_SPI1)
 8000f60:	f013 0f02 	tst.w	r3, #2
 8000f64:	d14d      	bne.n	8001002 <ArcadeIT_ArcadeIT_Start+0x14a>

      } // End if.

    } // End if.
    // -------------------------------------------------------------------------
    if ((gStorage & ARCADEIT_STORAGE_RAM_DISK) && (gDevices & ARCADEIT_DEVICE_RAM_MODULE))
 8000f66:	f240 2310 	movw	r3, #528	; 0x210
 8000f6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f013 0f01 	tst.w	r3, #1
 8000f74:	d008      	beq.n	8000f88 <ArcadeIT_ArcadeIT_Start+0xd0>
 8000f76:	f240 2308 	movw	r3, #520	; 0x208
 8000f7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f013 0f02 	tst.w	r3, #2
 8000f84:	f040 80a1 	bne.w	80010ca <ArcadeIT_ArcadeIT_Start+0x212>

  } // End if.
  // ---------------------------------------------------------------------------
  // Set LCD output if any. This must be set AFTER the Systick has been initialized
  // Because uses the delay function that is handled by the Systick.
  if (gDevices & ARCADEIT_DEVICE_LCDS)
 8000f88:	f240 2308 	movw	r3, #520	; 0x208
 8000f8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000f96:	f040 80fc 	bne.w	8001192 <ArcadeIT_ArcadeIT_Start+0x2da>
    gLCDDriver[0].mirror = FALSE;

  } // End if.
  // ---------------------------------------------------------------------------
  // Shows a message to serial port as debug
  if (gDevices & ARCADEIT_DEVICE_SERIAL)
 8000f9a:	f240 2308 	movw	r3, #520	; 0x208
 8000f9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8000fa8:	f040 80ff 	bne.w	80011aa <ArcadeIT_ArcadeIT_Start+0x2f2>
  {
    ArcadeIT_Serial_Port_String_Send(CURSOR_NEWLINE);

  } // End if.

} // End ArcadeIT_Start
 8000fac:	b041      	add	sp, #260	; 0x104
 8000fae:	f85d fb04 	ldr.w	pc, [sp], #4
    ArcadeIT_Serial_Port_Init (SYS_SERIAL_SPEED);
 8000fb2:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8000fb6:	f001 fb77 	bl	80026a8 <ArcadeIT_Serial_Port_Init>
 8000fba:	e787      	b.n	8000ecc <ArcadeIT_ArcadeIT_Start+0x14>
    ArcadeIT_TestPad_Init (RCC_MCO2Source_SYSCLK, RCC_MCO2Div_4);  //  45 MHz
 8000fbc:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f001 fcfd 	bl	80029c0 <ArcadeIT_TestPad_Init>
 8000fc6:	e78b      	b.n	8000ee0 <ArcadeIT_ArcadeIT_Start+0x28>
    ArcadeIT_Status_LEDS_Init();
 8000fc8:	f001 fc52 	bl	8002870 <ArcadeIT_Status_LEDS_Init>
 8000fcc:	e790      	b.n	8000ef0 <ArcadeIT_ArcadeIT_Start+0x38>
      ArcadeIT_RTC_Init ();
 8000fce:	f001 f891 	bl	80020f4 <ArcadeIT_RTC_Init>
 8000fd2:	e795      	b.n	8000f00 <ArcadeIT_ArcadeIT_Start+0x48>
    ArcadeIT_Scheduler_Task_Init();
 8000fd4:	f002 fa66 	bl	80034a4 <ArcadeIT_Scheduler_Task_Init>
 8000fd8:	e79a      	b.n	8000f10 <ArcadeIT_ArcadeIT_Start+0x58>
    ArcadeIT_BUS_Port_Init ();
 8000fda:	f000 fa49 	bl	8001470 <ArcadeIT_BUS_Port_Init>
 8000fde:	e79f      	b.n	8000f20 <ArcadeIT_ArcadeIT_Start+0x68>
    ArcadeIT_BUS_Port_SRAM(BUS_SRAM_PRESCALER);
 8000fe0:	2002      	movs	r0, #2
 8000fe2:	f000 fbcb 	bl	800177c <ArcadeIT_BUS_Port_SRAM>
    ArcadeIT_SRAM_Init ();
 8000fe6:	f001 fa79 	bl	80024dc <ArcadeIT_SRAM_Init>
 8000fea:	e7a1      	b.n	8000f30 <ArcadeIT_ArcadeIT_Start+0x78>
    ArcadeIT_SPI_Port_Init (SPI_FREQ_45_00_MHz);
 8000fec:	2000      	movs	r0, #0
 8000fee:	f001 f96f 	bl	80022d0 <ArcadeIT_SPI_Port_Init>
 8000ff2:	e7a5      	b.n	8000f40 <ArcadeIT_ArcadeIT_Start+0x88>
    ArcadeIT_I2C_Port_Init(I2C_100kHz);
 8000ff4:	f248 60a0 	movw	r0, #34464	; 0x86a0
 8000ff8:	f2c0 0001 	movt	r0, #1
 8000ffc:	f000 fbfe 	bl	80017fc <ArcadeIT_I2C_Port_Init>
 8001000:	e7a6      	b.n	8000f50 <ArcadeIT_ArcadeIT_Start+0x98>
      lValue = ArcadeIT_SDCard_Disk_Start();
 8001002:	f002 f965 	bl	80032d0 <ArcadeIT_SDCard_Disk_Start>
      if (lValue == FR_OK)
 8001006:	b1c8      	cbz	r0, 800103c <ArcadeIT_ArcadeIT_Start+0x184>
        if (gDevices & ARCADEIT_DEVICE_SERIAL)
 8001008:	f240 2308 	movw	r3, #520	; 0x208
 800100c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001016:	d0a6      	beq.n	8000f66 <ArcadeIT_ArcadeIT_Start+0xae>
          sprintf(lString, "%s\n\r", ArcadeIT_Utility_Get_String_ID(lValue, (char*)gErrorMessages));
 8001018:	f248 313c 	movw	r1, #33596	; 0x833c
 800101c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001020:	f000 f978 	bl	8001314 <ArcadeIT_Utility_Get_String_ID>
 8001024:	4602      	mov	r2, r0
 8001026:	f247 01d0 	movw	r1, #28880	; 0x70d0
 800102a:	f6c0 0100 	movt	r1, #2048	; 0x800
 800102e:	4668      	mov	r0, sp
 8001030:	f004 fd2e 	bl	8005a90 <siprintf>
          ArcadeIT_Serial_Port_String_Send(lString);
 8001034:	4668      	mov	r0, sp
 8001036:	f001 fb2d 	bl	8002694 <ArcadeIT_Serial_Port_String_Send>
 800103a:	e794      	b.n	8000f66 <ArcadeIT_ArcadeIT_Start+0xae>
        lValue = f_chdrive(ArcadeIT_Utility_Get_String_ID(DEV_SD, (char*)gDriveName));
 800103c:	f248 3128 	movw	r1, #33576	; 0x8328
 8001040:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001044:	2001      	movs	r0, #1
 8001046:	f000 f965 	bl	8001314 <ArcadeIT_Utility_Get_String_ID>
 800104a:	f003 fabd 	bl	80045c8 <f_chdrive>
        if (lValue == FR_OK)
 800104e:	bb08      	cbnz	r0, 8001094 <ArcadeIT_ArcadeIT_Start+0x1dc>
          gCurrentDrive = DEV_SD;
 8001050:	f240 030c 	movw	r3, #12
 8001054:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001058:	2201      	movs	r2, #1
 800105a:	701a      	strb	r2, [r3, #0]
          if (gDevices & ARCADEIT_DEVICE_SERIAL)
 800105c:	f240 2308 	movw	r3, #520	; 0x208
 8001060:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800106a:	f43f af7c 	beq.w	8000f66 <ArcadeIT_ArcadeIT_Start+0xae>
            sprintf(lString, "Current drive: [%s]\n\r", ArcadeIT_Utility_Get_String_ID(gCurrentDrive, (char*)gDriveName));
 800106e:	f248 3128 	movw	r1, #33576	; 0x8328
 8001072:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001076:	4610      	mov	r0, r2
 8001078:	f000 f94c 	bl	8001314 <ArcadeIT_Utility_Get_String_ID>
 800107c:	4602      	mov	r2, r0
 800107e:	f247 01b8 	movw	r1, #28856	; 0x70b8
 8001082:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001086:	4668      	mov	r0, sp
 8001088:	f004 fd02 	bl	8005a90 <siprintf>
            ArcadeIT_Serial_Port_String_Send(lString);
 800108c:	4668      	mov	r0, sp
 800108e:	f001 fb01 	bl	8002694 <ArcadeIT_Serial_Port_String_Send>
 8001092:	e768      	b.n	8000f66 <ArcadeIT_ArcadeIT_Start+0xae>
          if (gDevices & ARCADEIT_DEVICE_SERIAL)
 8001094:	f240 2308 	movw	r3, #520	; 0x208
 8001098:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80010a2:	f43f af60 	beq.w	8000f66 <ArcadeIT_ArcadeIT_Start+0xae>
            sprintf(lString, "%s\n\r", ArcadeIT_Utility_Get_String_ID(lValue, (char*)gErrorMessages));
 80010a6:	f248 313c 	movw	r1, #33596	; 0x833c
 80010aa:	f6c0 0100 	movt	r1, #2048	; 0x800
 80010ae:	f000 f931 	bl	8001314 <ArcadeIT_Utility_Get_String_ID>
 80010b2:	4602      	mov	r2, r0
 80010b4:	f247 01d0 	movw	r1, #28880	; 0x70d0
 80010b8:	f6c0 0100 	movt	r1, #2048	; 0x800
 80010bc:	4668      	mov	r0, sp
 80010be:	f004 fce7 	bl	8005a90 <siprintf>
            ArcadeIT_Serial_Port_String_Send(lString);
 80010c2:	4668      	mov	r0, sp
 80010c4:	f001 fae6 	bl	8002694 <ArcadeIT_Serial_Port_String_Send>
 80010c8:	e74d      	b.n	8000f66 <ArcadeIT_ArcadeIT_Start+0xae>
      lValue = ArcadeIT_RAMDisk_Start();
 80010ca:	f001 fd2a 	bl	8002b22 <ArcadeIT_RAMDisk_Start>
      if (lValue == FR_OK)
 80010ce:	b1d0      	cbz	r0, 8001106 <ArcadeIT_ArcadeIT_Start+0x24e>
        if (gDevices & ARCADEIT_DEVICE_SERIAL)
 80010d0:	f240 2308 	movw	r3, #520	; 0x208
 80010d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80010de:	f43f af53 	beq.w	8000f88 <ArcadeIT_ArcadeIT_Start+0xd0>
          sprintf(lString, "%s\n\r", ArcadeIT_Utility_Get_String_ID(lValue, (char*)gErrorMessages));
 80010e2:	f248 313c 	movw	r1, #33596	; 0x833c
 80010e6:	f6c0 0100 	movt	r1, #2048	; 0x800
 80010ea:	f000 f913 	bl	8001314 <ArcadeIT_Utility_Get_String_ID>
 80010ee:	4602      	mov	r2, r0
 80010f0:	f247 01d0 	movw	r1, #28880	; 0x70d0
 80010f4:	f6c0 0100 	movt	r1, #2048	; 0x800
 80010f8:	4668      	mov	r0, sp
 80010fa:	f004 fcc9 	bl	8005a90 <siprintf>
          ArcadeIT_Serial_Port_String_Send(lString);
 80010fe:	4668      	mov	r0, sp
 8001100:	f001 fac8 	bl	8002694 <ArcadeIT_Serial_Port_String_Send>
 8001104:	e740      	b.n	8000f88 <ArcadeIT_ArcadeIT_Start+0xd0>
        lValue = f_chdrive(ArcadeIT_Utility_Get_String_ID(DEV_RAM, (char*)gDriveName));
 8001106:	f248 3128 	movw	r1, #33576	; 0x8328
 800110a:	f6c0 0100 	movt	r1, #2048	; 0x800
 800110e:	f000 f901 	bl	8001314 <ArcadeIT_Utility_Get_String_ID>
 8001112:	f003 fa59 	bl	80045c8 <f_chdrive>
        if (lValue == FR_OK)
 8001116:	bb08      	cbnz	r0, 800115c <ArcadeIT_ArcadeIT_Start+0x2a4>
          gCurrentDrive = DEV_RAM;
 8001118:	f240 030c 	movw	r3, #12
 800111c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]
          if (gDevices & ARCADEIT_DEVICE_SERIAL)
 8001124:	f240 2308 	movw	r3, #520	; 0x208
 8001128:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001132:	f43f af29 	beq.w	8000f88 <ArcadeIT_ArcadeIT_Start+0xd0>
            sprintf(lString, "Current drive: [%s]\n\r", ArcadeIT_Utility_Get_String_ID(gCurrentDrive, (char*)gDriveName));
 8001136:	f248 3128 	movw	r1, #33576	; 0x8328
 800113a:	f6c0 0100 	movt	r1, #2048	; 0x800
 800113e:	4610      	mov	r0, r2
 8001140:	f000 f8e8 	bl	8001314 <ArcadeIT_Utility_Get_String_ID>
 8001144:	4602      	mov	r2, r0
 8001146:	f247 01b8 	movw	r1, #28856	; 0x70b8
 800114a:	f6c0 0100 	movt	r1, #2048	; 0x800
 800114e:	4668      	mov	r0, sp
 8001150:	f004 fc9e 	bl	8005a90 <siprintf>
            ArcadeIT_Serial_Port_String_Send(lString);
 8001154:	4668      	mov	r0, sp
 8001156:	f001 fa9d 	bl	8002694 <ArcadeIT_Serial_Port_String_Send>
 800115a:	e715      	b.n	8000f88 <ArcadeIT_ArcadeIT_Start+0xd0>
          if (gDevices & ARCADEIT_DEVICE_SERIAL)
 800115c:	f240 2308 	movw	r3, #520	; 0x208
 8001160:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800116a:	f43f af0d 	beq.w	8000f88 <ArcadeIT_ArcadeIT_Start+0xd0>
            sprintf(lString, "%s\n\r", ArcadeIT_Utility_Get_String_ID(lValue, (char*)gErrorMessages));
 800116e:	f248 313c 	movw	r1, #33596	; 0x833c
 8001172:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001176:	f000 f8cd 	bl	8001314 <ArcadeIT_Utility_Get_String_ID>
 800117a:	4602      	mov	r2, r0
 800117c:	f247 01d0 	movw	r1, #28880	; 0x70d0
 8001180:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001184:	4668      	mov	r0, sp
 8001186:	f004 fc83 	bl	8005a90 <siprintf>
            ArcadeIT_Serial_Port_String_Send(lString);
 800118a:	4668      	mov	r0, sp
 800118c:	f001 fa82 	bl	8002694 <ArcadeIT_Serial_Port_String_Send>
 8001190:	e6fa      	b.n	8000f88 <ArcadeIT_ArcadeIT_Start+0xd0>
    ArcadeIT_BUS_Port_SRAM(3);
 8001192:	2003      	movs	r0, #3
 8001194:	f000 faf2 	bl	800177c <ArcadeIT_BUS_Port_SRAM>
    LCD_Driver_Start ();
 8001198:	f000 feb9 	bl	8001f0e <LCD_Driver_Start>
    gLCDDriver[0].mirror = FALSE;
 800119c:	f240 433c 	movw	r3, #1084	; 0x43c
 80011a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80011a4:	2200      	movs	r2, #0
 80011a6:	759a      	strb	r2, [r3, #22]
 80011a8:	e6f7      	b.n	8000f9a <ArcadeIT_ArcadeIT_Start+0xe2>
    ArcadeIT_Serial_Port_String_Send(CURSOR_NEWLINE);
 80011aa:	f248 107c 	movw	r0, #33148	; 0x817c
 80011ae:	f6c0 0000 	movt	r0, #2048	; 0x800
 80011b2:	f001 fa6f 	bl	8002694 <ArcadeIT_Serial_Port_String_Send>
} // End ArcadeIT_Start
 80011b6:	e6f9      	b.n	8000fac <ArcadeIT_ArcadeIT_Start+0xf4>

080011b8 <ArcadeIT_Test_Bench>:

// ////////////////////////////////////////////////////////////////////////////
uint16_t lFakePWM_Out = 0, lFakePWM_Counter = 0, lFakePWM_Counter_Limit = 18000, lFakePWM_Duty = 32, lFakePWM_Duty_Counter = 0, lFakePWM_Duty_Counter_limit = 255;

void ArcadeIT_Test_Bench (void)
{
 80011b8:	b510      	push	{r4, lr}
 80011ba:	b082      	sub	sp, #8
  // The following variables hold the flags that start the features/peripherals
  // of the ArcadeIT System. It could be possible to configure the ArcadeIT System from a
  // *.ini text file on the SD Card, or other sources.

  // System features.
  gUnits = NONE
 80011bc:	f240 231c 	movw	r3, #540	; 0x21c
 80011c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80011c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011c8:	601a      	str	r2, [r3, #0]
      //| ARCADEIT_UNIT_RTC             // Real time clock
      //| ARCADEIT_UNIT_DMM             // The custom ArcadeIt Dynamic Memory Manager
        | ARCADEIT_UNIT_SCHEDULER       // The task scheduler system.
      ;

  gStorage = NONE
 80011ca:	f240 2310 	movw	r3, #528	; 0x210
 80011ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80011d2:	2400      	movs	r4, #0
 80011d4:	601c      	str	r4, [r3, #0]
      //| ARCADEIT_STORAGE_RAM_DISK     // Ram disk with a FAT File system on the SRAM expansion
      //| ARCADEIT_STORAGE_SD_CARD_SPI1 // File system FAT on SD Card over the SPI1 port
      ;

  gDevices = NONE
 80011d6:	f240 2308 	movw	r3, #520	; 0x208
 80011da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80011de:	f244 1203 	movw	r2, #16643	; 0x4103
 80011e2:	f2c0 0203 	movt	r2, #3
 80011e6:	601a      	str	r2, [r3, #0]
        | ARCADEIT_DEVICE_SERIAL        // Serial port USART 2
        | ARCADEIT_DEVICE_STATUSLED     // Two Status LEDs
        | ARCADEIT_DEVICE_TESTPADS      // System clock test pads
       ;

  ArcadeIT_ArcadeIT_Start();
 80011e8:	f7ff fe66 	bl	8000eb8 <ArcadeIT_ArcadeIT_Start>
  char lString[256];

#if 1
  // ===========================================================================
  // Status LEDs
  for (uint8_t lCycles = 0; lCycles < 4; lCycles++)
 80011ec:	e00b      	b.n	8001206 <ArcadeIT_Test_Bench+0x4e>
  {
    ArcadeIT_Status_LED1_Toggle();
 80011ee:	f001 fba8 	bl	8002942 <ArcadeIT_Status_LED1_Toggle>
    ArcadeIT_System_Delay(250);
 80011f2:	20fa      	movs	r0, #250	; 0xfa
 80011f4:	f7ff fd78 	bl	8000ce8 <ArcadeIT_System_Delay>
    ArcadeIT_Status_LED2_Toggle();
 80011f8:	f001 fbbd 	bl	8002976 <ArcadeIT_Status_LED2_Toggle>
    ArcadeIT_System_Delay(250);
 80011fc:	20fa      	movs	r0, #250	; 0xfa
 80011fe:	f7ff fd73 	bl	8000ce8 <ArcadeIT_System_Delay>
  for (uint8_t lCycles = 0; lCycles < 4; lCycles++)
 8001202:	3401      	adds	r4, #1
 8001204:	b2e4      	uxtb	r4, r4
 8001206:	2c03      	cmp	r4, #3
 8001208:	d9f1      	bls.n	80011ee <ArcadeIT_Test_Bench+0x36>
  } // End if.
#endif
#if 1
  // --------------------------------------------------------------------------
  // We setup the scheduler to blink the Status LED 1 at 1Hz (every seconds).
  if (gUnits & ARCADEIT_UNIT_SCHEDULER)
 800120a:	f240 231c 	movw	r3, #540	; 0x21c
 800120e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001218:	d013      	beq.n	8001242 <ArcadeIT_Test_Bench+0x8a>
  {
    if (gDevices & ARCADEIT_DEVICE_STATUSLED)
 800121a:	f240 2308 	movw	r3, #520	; 0x208
 800121e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001228:	d00b      	beq.n	8001242 <ArcadeIT_Test_Bench+0x8a>
    {
          ArcadeIT_Scheduler_Task_Set (
 800122a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	2300      	movs	r3, #0
 8001232:	461a      	mov	r2, r3
 8001234:	f642 1143 	movw	r1, #10563	; 0x2943
 8001238:	f6c0 0100 	movt	r1, #2048	; 0x800
 800123c:	4618      	mov	r0, r3
 800123e:	f002 f94b 	bl	80034d8 <ArcadeIT_Scheduler_Task_Set>
  GPIOB->ODR     = 0;          // All outputs set to 0

  uint16_t GPIOB_Output = 0;
#endif

  LCD_0_Backlight_Set(100);
 8001242:	2064      	movs	r0, #100	; 0x64
 8001244:	f000 fe48 	bl	8001ed8 <LCD_0_Backlight_Set>
  LCD_1_Backlight_Set(100);
 8001248:	2064      	movs	r0, #100	; 0x64
 800124a:	f000 fe52 	bl	8001ef2 <LCD_1_Backlight_Set>

  gCubeMonitorTrigger1 = 1;
 800124e:	f240 2304 	movw	r3, #516	; 0x204
 8001252:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001256:	2201      	movs	r2, #1
 8001258:	701a      	strb	r2, [r3, #0]

  uint32_t color = 0xF800;

  //ArcadeIT_ChromeART_Fill(30, 30, 120, 60, color++, ARCADEIT_DEVICE_LCDS, LCD_1_ID);
  if ((RCC->AHB1ENR & RCC_AHB1Periph_DMA2D) == FALSE) RCC->AHB1ENR |= RCC_AHB1Periph_DMA2D;
 800125a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800125e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001264:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8001268:	d107      	bne.n	800127a <ArcadeIT_Test_Bench+0xc2>
 800126a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800126e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001272:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001274:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001278:	631a      	str	r2, [r3, #48]	; 0x30

  RCC->AHB1RSTR |= RCC_AHB1Periph_DMA2D;
 800127a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800127e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001282:	691a      	ldr	r2, [r3, #16]
 8001284:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001288:	611a      	str	r2, [r3, #16]
  RCC->AHB1RSTR &= ~RCC_AHB1Periph_DMA2D;
 800128a:	691a      	ldr	r2, [r3, #16]
 800128c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001290:	611a      	str	r2, [r3, #16]

  DMA2D->OOR = 1;
 8001292:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001296:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800129a:	2201      	movs	r2, #1
 800129c:	641a      	str	r2, [r3, #64]	; 0x40
  DMA2D->NLR = (320 << 16) | 1; // width << 16 | height
 800129e:	f2c0 1240 	movt	r2, #320	; 0x140
 80012a2:	645a      	str	r2, [r3, #68]	; 0x44
  DMA2D->OPFCCR = DMA2D_RGB565;
 80012a4:	2202      	movs	r2, #2
 80012a6:	635a      	str	r2, [r3, #52]	; 0x34
  DMA2D->OMAR = (uint32_t)(gDisplayAddress[0] + LCD_DATA);
 80012a8:	f240 0200 	movw	r2, #0
 80012ac:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80012b0:	6812      	ldr	r2, [r2, #0]
 80012b2:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80012b6:	63da      	str	r2, [r3, #60]	; 0x3c

  DMA2D->CR &= (uint32_t)CR_MASK;
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	f022 1203 	bic.w	r2, r2, #196611	; 0x30003
 80012be:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 80012c2:	601a      	str	r2, [r3, #0]
  DMA2D->CR |= DMA2D_R2M;
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80012ca:	601a      	str	r2, [r3, #0]
  uint32_t color = 0xF800;
 80012cc:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 80012d0:	4622      	mov	r2, r4

    // waits for 1 mS.
    ArcadeIT_System_Delay(10);
#endif

    while (DMA2D->CR & DMA2D_CR_START);
 80012d2:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80012d6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f013 0f01 	tst.w	r3, #1
 80012e0:	d1f7      	bne.n	80012d2 <ArcadeIT_Test_Bench+0x11a>
    DMA2D->OCOLR = (color++ & 0xFFFF);
 80012e2:	1c54      	adds	r4, r2, #1
 80012e4:	b292      	uxth	r2, r2
 80012e6:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80012ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012ee:	639a      	str	r2, [r3, #56]	; 0x38
    DMA2D->CR |= DMA2D_CR_START;
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	f042 0201 	orr.w	r2, r2, #1
 80012f6:	601a      	str	r2, [r3, #0]
    ArcadeIT_System_Delay(100);
 80012f8:	2064      	movs	r0, #100	; 0x64
 80012fa:	f7ff fcf5 	bl	8000ce8 <ArcadeIT_System_Delay>

    // Periodic tasks
    if (gUnits & ARCADEIT_UNIT_SCHEDULER)
 80012fe:	f240 231c 	movw	r3, #540	; 0x21c
 8001302:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f413 7f80 	tst.w	r3, #256	; 0x100
 800130c:	d0e0      	beq.n	80012d0 <ArcadeIT_Test_Bench+0x118>
    {
      ArcadeIT_Scheduler_Run();
 800130e:	f002 f981 	bl	8003614 <ArcadeIT_Scheduler_Run>
 8001312:	e7dd      	b.n	80012d0 <ArcadeIT_Test_Bench+0x118>

08001314 <ArcadeIT_Utility_Get_String_ID>:
  * PARAMETERS:  See above.
  * RETURNS:     Nothing.
  */

  // Temporary character.
  uint32_t lTempCharacter = 0;
 8001314:	2300      	movs	r3, #0

  char *msg = pBuffer;

  // Go through the characters of the string provided and transform them to upper case.
  while (lTempCharacter != pId)
 8001316:	e000      	b.n	800131a <ArcadeIT_Utility_Get_String_ID+0x6>
{
 8001318:	4611      	mov	r1, r2
  while (lTempCharacter != pId)
 800131a:	4283      	cmp	r3, r0
 800131c:	d005      	beq.n	800132a <ArcadeIT_Utility_Get_String_ID+0x16>
  {
    if (*msg++ == '\0') lTempCharacter++;
 800131e:	1c4a      	adds	r2, r1, #1
 8001320:	7809      	ldrb	r1, [r1, #0]
 8001322:	2900      	cmp	r1, #0
 8001324:	d1f8      	bne.n	8001318 <ArcadeIT_Utility_Get_String_ID+0x4>
 8001326:	3301      	adds	r3, #1
 8001328:	e7f6      	b.n	8001318 <ArcadeIT_Utility_Get_String_ID+0x4>

  } // End while.

  return msg;

} // End ArcadeIT_Utility_Get_String_ID.
 800132a:	4608      	mov	r0, r1
 800132c:	4770      	bx	lr

0800132e <FMC_NORSRAMInit>:
  */

void FMC_NORSRAMInit(
    FMC_NORSRAMInitTypeDef* FMC_NORSRAMInitStruct // structure of definitions for the banks
    )
{
 800132e:	b430      	push	{r4, r5}
  uint32_t tmpr = 0, tmpbcr = 0, tmpbwr = 0;

  /* Get the BTCR register value */
  tmpbcr = FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank];
 8001330:	6801      	ldr	r1, [r0, #0]
 8001332:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001336:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]

  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CBURSTRW and CCLKEN bits */
  tmpbcr &= ((uint32_t)~(FMC_BCR1_MBKEN    | FMC_BCR1_MUXEN    | FMC_BCR1_MTYP     | \
 800133a:	f44f 6490 	mov.w	r4, #1152	; 0x480
 800133e:	f6cf 74e7 	movt	r4, #65511	; 0xffe7
 8001342:	401c      	ands	r4, r3
                         FMC_BCR1_WAITPOL  | FMC_BCR1_WAITCFG  | \
                         FMC_BCR1_WREN     | FMC_BCR1_WAITEN   | FMC_BCR1_EXTMOD   | \
                         FMC_BCR1_ASYNCWAIT| FMC_BCR1_CBURSTRW | FMC_BCR1_CCLKEN));

  /* NOR/SRAM Bank control register configuration */
  tmpbcr |=  (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux     |
 8001344:	6843      	ldr	r3, [r0, #4]
                       FMC_NORSRAMInitStruct->FMC_MemoryType         |
 8001346:	6885      	ldr	r5, [r0, #8]
  tmpbcr |=  (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux     |
 8001348:	432b      	orrs	r3, r5
                       FMC_NORSRAMInitStruct->FMC_MemoryDataWidth    |
 800134a:	68c5      	ldr	r5, [r0, #12]
                       FMC_NORSRAMInitStruct->FMC_MemoryType         |
 800134c:	432b      	orrs	r3, r5
                       FMC_NORSRAMInitStruct->FMC_BurstAccessMode    |
 800134e:	6905      	ldr	r5, [r0, #16]
                       FMC_NORSRAMInitStruct->FMC_MemoryDataWidth    |
 8001350:	432b      	orrs	r3, r5
                       FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
 8001352:	6945      	ldr	r5, [r0, #20]
                       FMC_NORSRAMInitStruct->FMC_BurstAccessMode    |
 8001354:	432b      	orrs	r3, r5
                       FMC_NORSRAMInitStruct->FMC_WaitSignalActive   |
 8001356:	6985      	ldr	r5, [r0, #24]
                       FMC_NORSRAMInitStruct->FMC_WaitSignalPolarity |
 8001358:	432b      	orrs	r3, r5
                       FMC_NORSRAMInitStruct->FMC_WriteOperation     |
 800135a:	69c5      	ldr	r5, [r0, #28]
                       FMC_NORSRAMInitStruct->FMC_WaitSignalActive   |
 800135c:	432b      	orrs	r3, r5
                       FMC_NORSRAMInitStruct->FMC_WaitSignal         |
 800135e:	6a05      	ldr	r5, [r0, #32]
                       FMC_NORSRAMInitStruct->FMC_WriteOperation     |
 8001360:	432b      	orrs	r3, r5
                       FMC_NORSRAMInitStruct->FMC_ExtendedMode       |
 8001362:	6a45      	ldr	r5, [r0, #36]	; 0x24
                       FMC_NORSRAMInitStruct->FMC_WaitSignal         |
 8001364:	432b      	orrs	r3, r5
                       FMC_NORSRAMInitStruct->FMC_AsynchronousWait   |
 8001366:	6a85      	ldr	r5, [r0, #40]	; 0x28
                       FMC_NORSRAMInitStruct->FMC_ExtendedMode       |
 8001368:	432b      	orrs	r3, r5
                       FMC_NORSRAMInitStruct->FMC_WriteBurst         |
 800136a:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
                       FMC_NORSRAMInitStruct->FMC_AsynchronousWait   |
 800136c:	432b      	orrs	r3, r5
                       FMC_NORSRAMInitStruct->FMC_ContinousClock;
 800136e:	6b05      	ldr	r5, [r0, #48]	; 0x30
                       FMC_NORSRAMInitStruct->FMC_WriteBurst         |
 8001370:	432b      	orrs	r3, r5
  tmpbcr |=  (uint32_t)FMC_NORSRAMInitStruct->FMC_DataAddressMux     |
 8001372:	4323      	orrs	r3, r4

  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] = tmpbcr;
 8001374:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  if(FMC_NORSRAMInitStruct->FMC_MemoryType == FMC_MemoryType_NOR)
 8001378:	6883      	ldr	r3, [r0, #8]
 800137a:	2b08      	cmp	r3, #8
 800137c:	d02b      	beq.n	80013d6 <FMC_NORSRAMInit+0xa8>
    FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] |= (uint32_t)FMC_BCR1_FACCEN;

  } // end if

  /* Configure Continuous clock feature when bank2..4 is used */
  if((FMC_NORSRAMInitStruct->FMC_ContinousClock == FMC_CClock_SyncAsync) && (FMC_NORSRAMInitStruct->FMC_Bank != FMC_Bank1_NORSRAM1))
 800137e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001380:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001384:	d02f      	beq.n	80013e6 <FMC_NORSRAMInit+0xb8>

  } // end if

  /* NOR/SRAM Bank timing register configuration */
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime              |
 8001386:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8001388:	6813      	ldr	r3, [r2, #0]
                      (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4)        |
 800138a:	6851      	ldr	r1, [r2, #4]
            (uint32_t)FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressSetupTime              |
 800138c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
                      (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8)          |
 8001390:	6891      	ldr	r1, [r2, #8]
                      (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AddressHoldTime << 4)        |
 8001392:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                      (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
 8001396:	68d1      	ldr	r1, [r2, #12]
                      (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataSetupTime << 8)          |
 8001398:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                      (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision << 20)           |
 800139c:	6911      	ldr	r1, [r2, #16]
                      (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
 800139e:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
                      (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency << 24)           |
 80013a2:	6951      	ldr	r1, [r2, #20]
                      (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision << 20)           |
 80013a4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
                      FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_AccessMode;
 80013a8:	6991      	ldr	r1, [r2, #24]
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =
 80013aa:	6802      	ldr	r2, [r0, #0]
 80013ac:	3201      	adds	r2, #1
                      (FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_DataLatency << 24)           |
 80013ae:	430b      	orrs	r3, r1
  FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank+1] =
 80013b0:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 80013b4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* NOR/SRAM Bank timing register for write configuration, if extended mode is used */
  if(FMC_NORSRAMInitStruct->FMC_ExtendedMode == FMC_ExtendedMode_Enable)
 80013b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80013ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80013be:	d028      	beq.n	8001412 <FMC_NORSRAMInit+0xe4>

    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] = tmpbwr;
  }
  else
  {
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] = 0x0FFFFFFF;
 80013c0:	6802      	ldr	r2, [r0, #0]
 80013c2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80013c6:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80013ca:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80013ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  } // end if

} // end FMC_NORSRAMInit
 80013d2:	bc30      	pop	{r4, r5}
 80013d4:	4770      	bx	lr
    FMC_Bank1->BTCR[FMC_NORSRAMInitStruct->FMC_Bank] |= (uint32_t)FMC_BCR1_FACCEN;
 80013d6:	6801      	ldr	r1, [r0, #0]
 80013d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80013dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013e0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80013e4:	e7cb      	b.n	800137e <FMC_NORSRAMInit+0x50>
  if((FMC_NORSRAMInitStruct->FMC_ContinousClock == FMC_CClock_SyncAsync) && (FMC_NORSRAMInitStruct->FMC_Bank != FMC_Bank1_NORSRAM1))
 80013e6:	6802      	ldr	r2, [r0, #0]
 80013e8:	2a00      	cmp	r2, #0
 80013ea:	d0cc      	beq.n	8001386 <FMC_NORSRAMInit+0x58>
    tmpr = (uint32_t)((FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1]) & ~(((uint32_t)0x0F) << 20));
 80013ec:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80013f0:	6851      	ldr	r1, [r2, #4]
 80013f2:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1]  |= FMC_NORSRAMInitStruct->FMC_ContinousClock;
 80013f6:	6814      	ldr	r4, [r2, #0]
 80013f8:	4323      	orrs	r3, r4
 80013fa:	6013      	str	r3, [r2, #0]
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1]  |= FMC_BurstAccessMode_Enable;
 80013fc:	6813      	ldr	r3, [r2, #0]
 80013fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001402:	6013      	str	r3, [r2, #0]
    FMC_Bank1->BTCR[FMC_Bank1_NORSRAM1+1] = (uint32_t)(tmpr | (((FMC_NORSRAMInitStruct->FMC_ReadWriteTimingStruct->FMC_CLKDivision)-1) << 20));
 8001404:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001406:	691b      	ldr	r3, [r3, #16]
 8001408:	3b01      	subs	r3, #1
 800140a:	ea41 5303 	orr.w	r3, r1, r3, lsl #20
 800140e:	6053      	str	r3, [r2, #4]
 8001410:	e7b9      	b.n	8001386 <FMC_NORSRAMInit+0x58>
    tmpbwr = FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank];
 8001412:	6805      	ldr	r5, [r0, #0]
 8001414:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001418:	f2ca 0100 	movt	r1, #40960	; 0xa000
 800141c:	f851 3025 	ldr.w	r3, [r1, r5, lsl #2]
    tmpbwr &= ((uint32_t)~(FMC_BWTR1_ADDSET  | FMC_BWTR1_ADDHLD | FMC_BWTR1_DATAST | \
 8001420:	2400      	movs	r4, #0
 8001422:	f6cc 74f0 	movt	r4, #53232	; 0xcff0
 8001426:	401c      	ands	r4, r3
    tmpbwr |= (uint32_t)(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime             |
 8001428:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800142a:	6813      	ldr	r3, [r2, #0]
                        (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4)        |
 800142c:	6850      	ldr	r0, [r2, #4]
    tmpbwr |= (uint32_t)(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime             |
 800142e:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
                        (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8)          |
 8001432:	6890      	ldr	r0, [r2, #8]
                        (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressHoldTime << 4)        |
 8001434:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                        (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
 8001438:	68d0      	ldr	r0, [r2, #12]
                        (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_DataSetupTime << 8)          |
 800143a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                         FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AccessMode);
 800143e:	6992      	ldr	r2, [r2, #24]
                        (FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_BusTurnAroundDuration << 16) |
 8001440:	4313      	orrs	r3, r2
    tmpbwr |= (uint32_t)(FMC_NORSRAMInitStruct->FMC_WriteTimingStruct->FMC_AddressSetupTime             |
 8001442:	4323      	orrs	r3, r4
    FMC_Bank1E->BWTR[FMC_NORSRAMInitStruct->FMC_Bank] = tmpbwr;
 8001444:	f841 3025 	str.w	r3, [r1, r5, lsl #2]
 8001448:	e7c3      	b.n	80013d2 <FMC_NORSRAMInit+0xa4>

0800144a <FMC_NORSRAMCmd>:
void FMC_NORSRAMCmd(
    uint32_t FMC_Bank,
    FunctionalState NewState
    )
{
  if (NewState != DISABLE)
 800144a:	b941      	cbnz	r1, 800145e <FMC_NORSRAMCmd+0x14>
    FMC_Bank1->BTCR[FMC_Bank] |= 1;
  }
  else
  {
    /* Disable the selected NOR/SRAM Bank by clearing the PBKEN bit in the BCRx register */
    FMC_Bank1->BTCR[FMC_Bank] &= ~1;
 800144c:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001450:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8001454:	f023 0301 	bic.w	r3, r3, #1
 8001458:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  }
}
 800145c:	4770      	bx	lr
    FMC_Bank1->BTCR[FMC_Bank] |= 1;
 800145e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001462:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8001466:	f043 0301 	orr.w	r3, r3, #1
 800146a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800146e:	4770      	bx	lr

08001470 <ArcadeIT_BUS_Port_Init>:
// -----------------------------------------------------------------------------
int ArcadeIT_BUS_Port_Init (void)
{
 8001470:	b508      	push	{r3, lr}
   * PARAMETERS:  None.
   * RETURNS:     Nothing.
   */

  // Enable GPIOs clock If not yet.
  if ((RCC->AHB1ENR & RCC_AHB1Periph_GPIOD) == FALSE) RCC->AHB1ENR |= RCC_AHB1Periph_GPIOD;
 8001472:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001476:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800147a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147c:	f013 0f08 	tst.w	r3, #8
 8001480:	d107      	bne.n	8001492 <ArcadeIT_BUS_Port_Init+0x22>
 8001482:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001486:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800148a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800148c:	f042 0208 	orr.w	r2, r2, #8
 8001490:	631a      	str	r2, [r3, #48]	; 0x30
  if ((RCC->AHB1ENR & RCC_AHB1Periph_GPIOE) == FALSE) RCC->AHB1ENR |= RCC_AHB1Periph_GPIOE;
 8001492:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001496:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800149a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149c:	f013 0f10 	tst.w	r3, #16
 80014a0:	d107      	bne.n	80014b2 <ArcadeIT_BUS_Port_Init+0x42>
 80014a2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80014a6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014ac:	f042 0210 	orr.w	r2, r2, #16
 80014b0:	631a      	str	r2, [r3, #48]	; 0x30
  if ((RCC->AHB1ENR & RCC_AHB1Periph_GPIOF) == FALSE) RCC->AHB1ENR |= RCC_AHB1Periph_GPIOF;
 80014b2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80014b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014bc:	f013 0f20 	tst.w	r3, #32
 80014c0:	d107      	bne.n	80014d2 <ArcadeIT_BUS_Port_Init+0x62>
 80014c2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80014c6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014cc:	f042 0220 	orr.w	r2, r2, #32
 80014d0:	631a      	str	r2, [r3, #48]	; 0x30
  if ((RCC->AHB1ENR & RCC_AHB1Periph_GPIOG) == FALSE) RCC->AHB1ENR |= RCC_AHB1Periph_GPIOG;
 80014d2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80014d6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014dc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80014e0:	d107      	bne.n	80014f2 <ArcadeIT_BUS_Port_Init+0x82>
 80014e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80014e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014f0:	631a      	str	r2, [r3, #48]	; 0x30
  if ((RCC->AHB1ENR & RCC_AHB1Periph_GPIOI) == FALSE) RCC->AHB1ENR |= RCC_AHB1Periph_GPIOI;
 80014f2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80014f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001500:	d107      	bne.n	8001512 <ArcadeIT_BUS_Port_Init+0xa2>
 8001502:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001506:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800150a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800150c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001510:	631a      	str	r2, [r3, #48]	; 0x30
  if ((RCC->AHB3ENR & RCC_AHB3Periph_FMC) == FALSE) RCC->AHB3ENR |= RCC_AHB3Periph_FMC;
 8001512:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001516:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800151a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800151c:	f013 0f01 	tst.w	r3, #1
 8001520:	d107      	bne.n	8001532 <ArcadeIT_BUS_Port_Init+0xc2>
 8001522:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001526:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800152a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800152c:	f042 0201 	orr.w	r2, r2, #1
 8001530:	639a      	str	r2, [r3, #56]	; 0x38

  GPIOD->MODER   &= ~(GPIO_MODER_MODER0
 8001532:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001536:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800153a:	6819      	ldr	r1, [r3, #0]
 800153c:	f243 02f0 	movw	r2, #12528	; 0x30f0
 8001540:	f2c0 023f 	movt	r2, #63	; 0x3f
 8001544:	4011      	ands	r1, r2
 8001546:	6019      	str	r1, [r3, #0]
                    | GPIO_MODER_MODER12
                    | GPIO_MODER_MODER13
                    | GPIO_MODER_MODER14
                    | GPIO_MODER_MODER15
                    | GPIO_MODER_MODER7);
  GPIOD->MODER   |= (((uint32_t)GPIO_Mode_AF) << (FMC_D2_BUS_D2   * 2)
 8001548:	6818      	ldr	r0, [r3, #0]
 800154a:	f648 210a 	movw	r1, #35338	; 0x8a0a
 800154e:	f6ca 2180 	movt	r1, #43648	; 0xaa80
 8001552:	4301      	orrs	r1, r0
 8001554:	6019      	str	r1, [r3, #0]
                   | ((uint32_t)GPIO_Mode_AF) << (FMC_A18_BUS_A18 * 2)
                   | ((uint32_t)GPIO_Mode_AF) << (FMC_D0_BUS_D0   * 2)
                   | ((uint32_t)GPIO_Mode_AF) << (FMC_D1_BUS_D1   * 2)
                   | ((uint32_t)GPIO_Mode_AF) << (FMC_NE1_BUS_LCDEN * 2));

  GPIOD->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0
 8001556:	6899      	ldr	r1, [r3, #8]
 8001558:	4011      	ands	r1, r2
 800155a:	6099      	str	r1, [r3, #8]
                    | GPIO_OSPEEDER_OSPEEDR12
                    | GPIO_OSPEEDER_OSPEEDR13
                    | GPIO_OSPEEDER_OSPEEDR14
                    | GPIO_OSPEEDER_OSPEEDR15
                    | GPIO_OSPEEDER_OSPEEDR7);
  GPIOD->OSPEEDR |= (((uint32_t)GPIO_Speed_100MHz) << (FMC_D2_BUS_D2   * 2)
 800155c:	6898      	ldr	r0, [r3, #8]
 800155e:	f64c 710f 	movw	r1, #53007	; 0xcf0f
 8001562:	f6cf 71c0 	movt	r1, #65472	; 0xffc0
 8001566:	4301      	orrs	r1, r0
 8001568:	6099      	str	r1, [r3, #8]
                   | ((uint32_t)GPIO_Speed_100MHz) << (FMC_A18_BUS_A18 * 2)
                   | ((uint32_t)GPIO_Speed_100MHz) << (FMC_D0_BUS_D0   * 2)
                   | ((uint32_t)GPIO_Speed_100MHz) << (FMC_D1_BUS_D1   * 2)
                   | ((uint32_t)GPIO_Speed_100MHz) << (FMC_NE1_BUS_LCDEN * 2));

  GPIOD->OTYPER  &= ~(GPIO_OTYPER_OT_0
 800156a:	6859      	ldr	r1, [r3, #4]
 800156c:	f421 4178 	bic.w	r1, r1, #63488	; 0xf800
 8001570:	f021 01b3 	bic.w	r1, r1, #179	; 0xb3
 8001574:	6059      	str	r1, [r3, #4]
                    | GPIO_OTYPER_OT_12
                    | GPIO_OTYPER_OT_13
                    | GPIO_OTYPER_OT_14
                    | GPIO_OTYPER_OT_15
                    | GPIO_OTYPER_OT_7);
  GPIOD->OTYPER  |= ((uint32_t)(GPIO_OType_PP << FMC_D2_BUS_D2  )
 8001576:	6859      	ldr	r1, [r3, #4]
 8001578:	6059      	str	r1, [r3, #4]
                   | (uint32_t)(GPIO_OType_PP << FMC_A18_BUS_A18)
                   | (uint32_t)(GPIO_OType_PP << FMC_D0_BUS_D0  )
                   | (uint32_t)(GPIO_OType_PP << FMC_D1_BUS_D1  )
                   | (uint32_t)(GPIO_OType_PP << FMC_NE1_BUS_LCDEN ));

  GPIOD->PUPDR   &= ~(GPIO_PUPDR_PUPDR0
 800157a:	68d9      	ldr	r1, [r3, #12]
 800157c:	400a      	ands	r2, r1
 800157e:	60da      	str	r2, [r3, #12]
                    | GPIO_PUPDR_PUPDR12
                    | GPIO_PUPDR_PUPDR13
                    | GPIO_PUPDR_PUPDR14
                    | GPIO_PUPDR_PUPDR15
                    | GPIO_PUPDR_PUPDR7);
  GPIOD->PUPDR   |= (((uint32_t)GPIO_PuPd_NOPULL) << (FMC_D2_BUS_D2   * 2)
 8001580:	68da      	ldr	r2, [r3, #12]
 8001582:	60da      	str	r2, [r3, #12]
                   | ((uint32_t)GPIO_PuPd_NOPULL) << (FMC_A18_BUS_A18 * 2)
                   | ((uint32_t)GPIO_PuPd_NOPULL) << (FMC_D0_BUS_D0   * 2)
                   | ((uint32_t)GPIO_PuPd_NOPULL) << (FMC_D1_BUS_D1   * 2)
                   | ((uint32_t)GPIO_PuPd_NOPULL) << (FMC_NE1_BUS_LCDEN * 2));

  GPIOD->AFR[0] &= ~((uint32_t)0xF << (FMC_D2_BUS_D2  * 4)
 8001584:	6a1a      	ldr	r2, [r3, #32]
 8001586:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800158a:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 800158e:	621a      	str	r2, [r3, #32]
                   | (uint32_t)0xF << (FMC_D3_BUS_D3  * 4)
                   | (uint32_t)0xF << (FMC_NOE_BUS_RD * 4)
                   | (uint32_t)0xF << (FMC_NWE_BUS_WR * 4)
                   | (uint32_t)0xF << (FMC_NE1_BUS_LCDEN * 4));
  GPIOD->AFR[0] |=  ((uint32_t)(GPIO_AF_FMC << (FMC_D2_BUS_D2  * 4)))
 8001590:	6a1a      	ldr	r2, [r3, #32]
 8001592:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8001596:	f042 12cc 	orr.w	r2, r2, #13369548	; 0xcc00cc
 800159a:	621a      	str	r2, [r3, #32]
                  | ((uint32_t)(GPIO_AF_FMC << (FMC_D3_BUS_D3  * 4)))
                  | ((uint32_t)(GPIO_AF_FMC << (FMC_NOE_BUS_RD * 4)))
                  | ((uint32_t)(GPIO_AF_FMC << (FMC_NWE_BUS_WR * 4)))
                  | ((uint32_t)(GPIO_AF_FMC << (FMC_NE1_BUS_LCDEN * 4)));

  GPIOD->AFR[1] &= ~((uint32_t)0xF << ((FMC_A16_BUS_A16 - 8) * 4)
 800159c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800159e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80015a2:	625a      	str	r2, [r3, #36]	; 0x24
                   | (uint32_t)0xF << ((FMC_A17_BUS_A17 - 8) * 4)
                   | (uint32_t)0xF << ((FMC_A18_BUS_A18 - 8) * 4)
                   | (uint32_t)0xF << ((FMC_D0_BUS_D0   - 8) * 4)
                   | (uint32_t)0xF << ((FMC_D1_BUS_D1   - 8) * 4));
  GPIOD->AFR[1] |=  ((uint32_t)(GPIO_AF_FMC << ((FMC_A16_BUS_A16 - 8) * 4)))
 80015a4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80015a6:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80015aa:	f6cc 42cc 	movt	r2, #52428	; 0xcccc
 80015ae:	430a      	orrs	r2, r1
 80015b0:	625a      	str	r2, [r3, #36]	; 0x24
                  | ((uint32_t)(GPIO_AF_FMC << ((FMC_A17_BUS_A17 - 8) * 4)))
                  | ((uint32_t)(GPIO_AF_FMC << ((FMC_A18_BUS_A18 - 8) * 4)))
                  | ((uint32_t)(GPIO_AF_FMC << ((FMC_D0_BUS_D0   - 8) * 4)))
                  | ((uint32_t)(GPIO_AF_FMC << ((FMC_D1_BUS_D1   - 8) * 4)));
  // ---------------------------------------------------------------------------
  GPIOE->MODER   &= ~(GPIO_MODER_MODER3
 80015b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80015ba:	6819      	ldr	r1, [r3, #0]
 80015bc:	220f      	movs	r2, #15
 80015be:	f6cf 72c0 	movt	r2, #65472	; 0xffc0
 80015c2:	4011      	ands	r1, r2
 80015c4:	6019      	str	r1, [r3, #0]
                    | GPIO_MODER_MODER8
                    | GPIO_MODER_MODER9
                    | GPIO_MODER_MODER10
                    | GPIO_MODER_MODER2
                    | GPIO_MODER_MODER6 );
  GPIOE->MODER   |= (((uint32_t)GPIO_Mode_AF) << (FMC_A19_BUS_A19  * 2)
 80015c6:	6818      	ldr	r0, [r3, #0]
 80015c8:	f64a 21a0 	movw	r1, #43680	; 0xaaa0
 80015cc:	f2c0 012a 	movt	r1, #42	; 0x2a
 80015d0:	4301      	orrs	r1, r0
 80015d2:	6019      	str	r1, [r3, #0]
                   | ((uint32_t)GPIO_Mode_AF) << (FMC_D6_BUS_D6    * 2)
                   | ((uint32_t)GPIO_Mode_AF) << (FMC_D7_BUS_D7    * 2)
                   | ((uint32_t)GPIO_Mode_AF) << (FMC_A23_BUS_MUX1 * 2)
                   | ((uint32_t)GPIO_Mode_AF) << (FMC_A22_BUS_MUX0 * 2));

  GPIOE->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR3
 80015d4:	6899      	ldr	r1, [r3, #8]
 80015d6:	4011      	ands	r1, r2
 80015d8:	6099      	str	r1, [r3, #8]
                    | GPIO_OSPEEDER_OSPEEDR8
                    | GPIO_OSPEEDER_OSPEEDR9
                    | GPIO_OSPEEDER_OSPEEDR10
                    | GPIO_OSPEEDER_OSPEEDR2
                    | GPIO_OSPEEDER_OSPEEDR6 );
  GPIOE->OSPEEDR |= (((uint32_t)GPIO_Speed_100MHz) << (FMC_A19_BUS_A19  * 2)
 80015da:	6898      	ldr	r0, [r3, #8]
 80015dc:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 80015e0:	f2c0 013f 	movt	r1, #63	; 0x3f
 80015e4:	4301      	orrs	r1, r0
 80015e6:	6099      	str	r1, [r3, #8]
                   | ((uint32_t)GPIO_Speed_100MHz) << (FMC_D6_BUS_D6    * 2)
                   | ((uint32_t)GPIO_Speed_100MHz) << (FMC_D7_BUS_D7    * 2)
                   | ((uint32_t)GPIO_Speed_100MHz) << (FMC_A23_BUS_MUX1 * 2)
                   | ((uint32_t)GPIO_Speed_100MHz) << (FMC_A22_BUS_MUX0 * 2));

  GPIOE->OTYPER  &= ~(GPIO_OTYPER_OT_3
 80015e8:	6859      	ldr	r1, [r3, #4]
 80015ea:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 80015ee:	f021 0104 	bic.w	r1, r1, #4
 80015f2:	6059      	str	r1, [r3, #4]
                    | GPIO_OTYPER_OT_8
                    | GPIO_OTYPER_OT_9
                    | GPIO_OTYPER_OT_10
                    | GPIO_OTYPER_OT_2
                    | GPIO_OTYPER_OT_6 );
  GPIOE->OTYPER  |= ((uint32_t)(GPIO_OType_PP << FMC_A19_BUS_A19 )
 80015f4:	6859      	ldr	r1, [r3, #4]
 80015f6:	6059      	str	r1, [r3, #4]
                   | (uint32_t)(GPIO_OType_PP << FMC_D6_BUS_D6   )
                   | (uint32_t)(GPIO_OType_PP << FMC_D7_BUS_D7   )
                   | (uint32_t)(GPIO_OType_PP << FMC_A23_BUS_MUX1)
                   | (uint32_t)(GPIO_OType_PP << FMC_A22_BUS_MUX0));

  GPIOE->PUPDR   &= ~(GPIO_PUPDR_PUPDR3
 80015f8:	68d9      	ldr	r1, [r3, #12]
 80015fa:	400a      	ands	r2, r1
 80015fc:	60da      	str	r2, [r3, #12]
                    | GPIO_PUPDR_PUPDR8
                    | GPIO_PUPDR_PUPDR9
                    | GPIO_PUPDR_PUPDR10
                    | GPIO_PUPDR_PUPDR2
                    | GPIO_PUPDR_PUPDR6 );
  GPIOE->PUPDR   |= (((uint32_t)GPIO_PuPd_NOPULL) << (FMC_A19_BUS_A19  * 2)
 80015fe:	68da      	ldr	r2, [r3, #12]
 8001600:	60da      	str	r2, [r3, #12]
                   | ((uint32_t)GPIO_PuPd_NOPULL) << (FMC_D6_BUS_D6    * 2)
                   | ((uint32_t)GPIO_PuPd_NOPULL) << (FMC_D7_BUS_D7    * 2)
                   | ((uint32_t)GPIO_PuPd_NOPULL) << (FMC_A23_BUS_MUX1 * 2)
                   | ((uint32_t)GPIO_PuPd_NOPULL) << (FMC_A22_BUS_MUX0 * 2));

  GPIOE->AFR[0] &= ~((uint32_t)0xF << (FMC_A19_BUS_A19  * 4)
 8001602:	6a1a      	ldr	r2, [r3, #32]
 8001604:	b2d2      	uxtb	r2, r2
 8001606:	621a      	str	r2, [r3, #32]
                   | (uint32_t)0xF << (FMC_A20_BUS_A20  * 4)
                   | (uint32_t)0xF << (FMC_A21_BUS_A21  * 4)
                   | (uint32_t)0xF << (FMC_D4_BUS_D4    * 4)
                   | (uint32_t)0xF << (FMC_A23_BUS_MUX1 * 4)
                   | (uint32_t)0xF << (FMC_A22_BUS_MUX0 * 4));
  GPIOE->AFR[0] |=  ((uint32_t)(GPIO_AF_FMC << (FMC_A19_BUS_A19  * 4)))
 8001608:	6a1a      	ldr	r2, [r3, #32]
 800160a:	f042 22cc 	orr.w	r2, r2, #3422604288	; 0xcc00cc00
 800160e:	f442 024c 	orr.w	r2, r2, #13369344	; 0xcc0000
 8001612:	621a      	str	r2, [r3, #32]
                  | ((uint32_t)(GPIO_AF_FMC << (FMC_A21_BUS_A21  * 4)))
                  | ((uint32_t)(GPIO_AF_FMC << (FMC_D4_BUS_D4    * 4)))
                  | ((uint32_t)(GPIO_AF_FMC << (FMC_A23_BUS_MUX1 * 4)))
                  | ((uint32_t)(GPIO_AF_FMC << (FMC_A22_BUS_MUX0 * 4)));

  GPIOE->AFR[1] &= ~((uint32_t)0xF << ((FMC_D5_BUS_D5 - 8) * 4)
 8001614:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001616:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 800161a:	f022 020f 	bic.w	r2, r2, #15
 800161e:	625a      	str	r2, [r3, #36]	; 0x24
                   | (uint32_t)0xF << ((FMC_D6_BUS_D6 - 8) * 4)
                   | (uint32_t)0xF << ((FMC_D7_BUS_D7 - 8) * 4));
  GPIOE->AFR[1] |=  ((uint32_t)(GPIO_AF_FMC << ((FMC_D5_BUS_D5 - 8) * 4)))
 8001620:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001622:	f442 624c 	orr.w	r2, r2, #3264	; 0xcc0
 8001626:	f042 020c 	orr.w	r2, r2, #12
 800162a:	625a      	str	r2, [r3, #36]	; 0x24
                  | ((uint32_t)(GPIO_AF_FMC << ((FMC_D6_BUS_D6 - 8) * 4)))
                  | ((uint32_t)(GPIO_AF_FMC << ((FMC_D7_BUS_D7 - 8) * 4)));
  // ---------------------------------------------------------------------------
  GPIOF->MODER   &= ~(GPIO_MODER_MODER0
 800162c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001630:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001634:	6819      	ldr	r1, [r3, #0]
 8001636:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 800163a:	f2c0 02ff 	movt	r2, #255	; 0xff
 800163e:	4011      	ands	r1, r2
 8001640:	6019      	str	r1, [r3, #0]
                    | GPIO_MODER_MODER5
                    | GPIO_MODER_MODER12
                    | GPIO_MODER_MODER13
                    | GPIO_MODER_MODER14
                    | GPIO_MODER_MODER15);
  GPIOF->MODER   |= (((uint32_t)GPIO_Mode_AF) << (FMC_A00_BUS_A00* 2)
 8001642:	6818      	ldr	r0, [r3, #0]
 8001644:	f640 21aa 	movw	r1, #2730	; 0xaaa
 8001648:	f6ca 2100 	movt	r1, #43520	; 0xaa00
 800164c:	4301      	orrs	r1, r0
 800164e:	6019      	str	r1, [r3, #0]
                   | ((uint32_t)GPIO_Mode_AF) << (FMC_A06_BUS_A06* 2)
                   | ((uint32_t)GPIO_Mode_AF) << (FMC_A07_BUS_A07* 2)
                   | ((uint32_t)GPIO_Mode_AF) << (FMC_A08_BUS_A08* 2)
                   | ((uint32_t)GPIO_Mode_AF) << (FMC_A09_BUS_A09* 2));

  GPIOF->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0
 8001650:	6899      	ldr	r1, [r3, #8]
 8001652:	4011      	ands	r1, r2
 8001654:	6099      	str	r1, [r3, #8]
                    | GPIO_OSPEEDER_OSPEEDR5
                    | GPIO_OSPEEDER_OSPEEDR12
                    | GPIO_OSPEEDER_OSPEEDR13
                    | GPIO_OSPEEDER_OSPEEDR14
                    | GPIO_OSPEEDER_OSPEEDR15);
  GPIOF->OSPEEDR |= (((uint32_t)GPIO_Speed_100MHz) << (FMC_A00_BUS_A00 * 2)
 8001656:	6898      	ldr	r0, [r3, #8]
 8001658:	f640 71ff 	movw	r1, #4095	; 0xfff
 800165c:	f6cf 7100 	movt	r1, #65280	; 0xff00
 8001660:	4301      	orrs	r1, r0
 8001662:	6099      	str	r1, [r3, #8]
                   | ((uint32_t)GPIO_Speed_100MHz) << (FMC_A06_BUS_A06 * 2)
                   | ((uint32_t)GPIO_Speed_100MHz) << (FMC_A07_BUS_A07 * 2)
                   | ((uint32_t)GPIO_Speed_100MHz) << (FMC_A08_BUS_A08 * 2)
                   | ((uint32_t)GPIO_Speed_100MHz) << (FMC_A09_BUS_A09 * 2));

  GPIOF->OTYPER  &= ~(GPIO_OTYPER_OT_0
 8001664:	6859      	ldr	r1, [r3, #4]
 8001666:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
 800166a:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800166e:	6059      	str	r1, [r3, #4]
                    | GPIO_OTYPER_OT_5
                    | GPIO_OTYPER_OT_12
                    | GPIO_OTYPER_OT_13
                    | GPIO_OTYPER_OT_14
                    | GPIO_OTYPER_OT_15);
  GPIOF->OTYPER  |= ((uint32_t)(GPIO_OType_PP << FMC_A00_BUS_A00)
 8001670:	6859      	ldr	r1, [r3, #4]
 8001672:	6059      	str	r1, [r3, #4]
                   | (uint32_t)(GPIO_OType_PP << FMC_A06_BUS_A06)
                   | (uint32_t)(GPIO_OType_PP << FMC_A07_BUS_A07)
                   | (uint32_t)(GPIO_OType_PP << FMC_A08_BUS_A08)
                   | (uint32_t)(GPIO_OType_PP << FMC_A09_BUS_A09));

  GPIOF->PUPDR   &= ~(GPIO_PUPDR_PUPDR0
 8001674:	68d9      	ldr	r1, [r3, #12]
 8001676:	400a      	ands	r2, r1
 8001678:	60da      	str	r2, [r3, #12]
                    | GPIO_PUPDR_PUPDR5
                    | GPIO_PUPDR_PUPDR12
                    | GPIO_PUPDR_PUPDR13
                    | GPIO_PUPDR_PUPDR14
                    | GPIO_PUPDR_PUPDR15);
  GPIOF->PUPDR   |= (((uint32_t)GPIO_PuPd_NOPULL) << (FMC_A00_BUS_A00 * 2)
 800167a:	68da      	ldr	r2, [r3, #12]
 800167c:	60da      	str	r2, [r3, #12]
                   | ((uint32_t)GPIO_PuPd_NOPULL) << (FMC_A06_BUS_A06 * 2)
                   | ((uint32_t)GPIO_PuPd_NOPULL) << (FMC_A07_BUS_A07 * 2)
                   | ((uint32_t)GPIO_PuPd_NOPULL) << (FMC_A08_BUS_A08 * 2)
                   | ((uint32_t)GPIO_PuPd_NOPULL) << (FMC_A09_BUS_A09 * 2));

  GPIOF->AFR[0] &= ~((uint32_t)0xF << (FMC_A00_BUS_A00 * 4)
 800167e:	6a1a      	ldr	r2, [r3, #32]
 8001680:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8001684:	621a      	str	r2, [r3, #32]
                   | (uint32_t)0xF << (FMC_A01_BUS_A01 * 4)
                   | (uint32_t)0xF << (FMC_A02_BUS_A02 * 4)
                   | (uint32_t)0xF << (FMC_A03_BUS_A03 * 4)
                   | (uint32_t)0xF << (FMC_A04_BUS_A04 * 4)
                   | (uint32_t)0xF << (FMC_A05_BUS_A05 * 4));
  GPIOF->AFR[0] |=  ((uint32_t)(GPIO_AF_FMC << (FMC_A00_BUS_A00 * 4)))
 8001686:	6a1a      	ldr	r2, [r3, #32]
 8001688:	f042 12cc 	orr.w	r2, r2, #13369548	; 0xcc00cc
 800168c:	f442 424c 	orr.w	r2, r2, #52224	; 0xcc00
 8001690:	621a      	str	r2, [r3, #32]
                  | ((uint32_t)(GPIO_AF_FMC << (FMC_A02_BUS_A02 * 4)))
                  | ((uint32_t)(GPIO_AF_FMC << (FMC_A03_BUS_A03 * 4)))
                  | ((uint32_t)(GPIO_AF_FMC << (FMC_A04_BUS_A04 * 4)))
                  | ((uint32_t)(GPIO_AF_FMC << (FMC_A05_BUS_A05 * 4)));

  GPIOF->AFR[1] &= ~((uint32_t)0xF << ((FMC_A06_BUS_A06 - 8) * 4)
 8001692:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001694:	b292      	uxth	r2, r2
 8001696:	625a      	str	r2, [r3, #36]	; 0x24
                   | (uint32_t)0xF << ((FMC_A07_BUS_A07 - 8) * 4)
                   | (uint32_t)0xF << ((FMC_A08_BUS_A08 - 8) * 4)
                   | (uint32_t)0xF << ((FMC_A09_BUS_A09 - 8) * 4));
  GPIOF->AFR[1] |=  ((uint32_t)(GPIO_AF_FMC << ((FMC_A06_BUS_A06 - 8) * 4)))
 8001698:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800169a:	f042 424c 	orr.w	r2, r2, #3422552064	; 0xcc000000
 800169e:	f442 024c 	orr.w	r2, r2, #13369344	; 0xcc0000
 80016a2:	625a      	str	r2, [r3, #36]	; 0x24
                  | ((uint32_t)(GPIO_AF_FMC << ((FMC_A07_BUS_A07 - 8) * 4)))
                  | ((uint32_t)(GPIO_AF_FMC << ((FMC_A08_BUS_A08 - 8) * 4)))
                  | ((uint32_t)(GPIO_AF_FMC << ((FMC_A09_BUS_A09 - 8) * 4)));
  // ---------------------------------------------------------------------------
  GPIOG->MODER   &= ~(GPIO_MODER_MODER0
 80016a4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80016a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80016ac:	6819      	ldr	r1, [r3, #0]
 80016ae:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 80016b2:	f2cf 32f3 	movt	r2, #62451	; 0xf3f3
 80016b6:	4011      	ands	r1, r2
 80016b8:	6019      	str	r1, [r3, #0]
                    | GPIO_MODER_MODER3
                    | GPIO_MODER_MODER4
                    | GPIO_MODER_MODER5
                    | GPIO_MODER_MODER9
                    | GPIO_MODER_MODER13);
  GPIOG->MODER   |= (((uint32_t)GPIO_Mode_AF) << (FMC_A10_BUS_A10 * 2)
 80016ba:	6819      	ldr	r1, [r3, #0]
 80016bc:	f640 20aa 	movw	r0, #2730	; 0xaaa
 80016c0:	f6c0 0008 	movt	r0, #2056	; 0x808
 80016c4:	4301      	orrs	r1, r0
 80016c6:	6019      	str	r1, [r3, #0]
                   | ((uint32_t)GPIO_Mode_AF) << (FMC_A14_BUS_A14 * 2)
                   | ((uint32_t)GPIO_Mode_AF) << (FMC_A15_BUS_A15 * 2)
                   | ((uint32_t)GPIO_Mode_AF) << (FMC_NE2_SRAMEN  * 2)
                   | ((uint32_t)GPIO_Mode_AF) << (FMC_A24_MUX2    * 2));

  GPIOG->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0
 80016c8:	6899      	ldr	r1, [r3, #8]
 80016ca:	4011      	ands	r1, r2
 80016cc:	6099      	str	r1, [r3, #8]
                    | GPIO_OSPEEDER_OSPEEDR3
                    | GPIO_OSPEEDER_OSPEEDR4
                    | GPIO_OSPEEDER_OSPEEDR5
                    | GPIO_OSPEEDER_OSPEEDR9
                    | GPIO_OSPEEDER_OSPEEDR13);
  GPIOG->OSPEEDR |= (((uint32_t)GPIO_Speed_100MHz) << (FMC_A10_BUS_A10 * 2)
 80016ce:	6899      	ldr	r1, [r3, #8]
 80016d0:	f640 70ff 	movw	r0, #4095	; 0xfff
 80016d4:	f6c0 400c 	movt	r0, #3084	; 0xc0c
 80016d8:	4301      	orrs	r1, r0
 80016da:	6099      	str	r1, [r3, #8]
                   | ((uint32_t)GPIO_Speed_100MHz) << (FMC_A14_BUS_A14 * 2)
                   | ((uint32_t)GPIO_Speed_100MHz) << (FMC_A15_BUS_A15 * 2)
                   | ((uint32_t)GPIO_Speed_100MHz) << (FMC_NE2_SRAMEN  * 2)
                   | ((uint32_t)GPIO_Speed_100MHz) << (FMC_A24_MUX2    * 2));

  GPIOG->OTYPER  &= ~(GPIO_OTYPER_OT_0
 80016dc:	6859      	ldr	r1, [r3, #4]
 80016de:	f421 5108 	bic.w	r1, r1, #8704	; 0x2200
 80016e2:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80016e6:	6059      	str	r1, [r3, #4]
                    | GPIO_OTYPER_OT_3
                    | GPIO_OTYPER_OT_4
                    | GPIO_OTYPER_OT_5
                    | GPIO_OTYPER_OT_9
                    | GPIO_OTYPER_OT_13);
  GPIOG->OTYPER  |= ((uint32_t)(GPIO_OType_PP << FMC_A10_BUS_A10)
 80016e8:	6859      	ldr	r1, [r3, #4]
 80016ea:	6059      	str	r1, [r3, #4]
                   | (uint32_t)(GPIO_OType_PP << FMC_A14_BUS_A14)
                   | (uint32_t)(GPIO_OType_PP << FMC_A15_BUS_A15)
                   | (uint32_t)(GPIO_OType_PP << FMC_NE2_SRAMEN )
                   | (uint32_t)(GPIO_OType_PP << FMC_A24_MUX2   ));

  GPIOG->PUPDR   &= ~(GPIO_PUPDR_PUPDR0
 80016ec:	68d9      	ldr	r1, [r3, #12]
 80016ee:	400a      	ands	r2, r1
 80016f0:	60da      	str	r2, [r3, #12]
                    | GPIO_PUPDR_PUPDR3
                    | GPIO_PUPDR_PUPDR4
                    | GPIO_PUPDR_PUPDR5
                    | GPIO_PUPDR_PUPDR9
                    | GPIO_PUPDR_PUPDR13);
  GPIOG->PUPDR   |= (((uint32_t)GPIO_PuPd_NOPULL) << (FMC_A10_BUS_A10 * 2)
 80016f2:	68da      	ldr	r2, [r3, #12]
 80016f4:	60da      	str	r2, [r3, #12]
                   | ((uint32_t)GPIO_PuPd_NOPULL) << (FMC_A14_BUS_A14 * 2)
                   | ((uint32_t)GPIO_PuPd_NOPULL) << (FMC_A15_BUS_A15 * 2)
                   | ((uint32_t)GPIO_PuPd_NOPULL) << (FMC_NE2_SRAMEN  * 2)
                   | ((uint32_t)GPIO_PuPd_NOPULL) << (FMC_A24_MUX2    * 2));

  GPIOG->AFR[0] &= ~((uint32_t)0xF << (FMC_A10_BUS_A10 * 4)
 80016f6:	6a1a      	ldr	r2, [r3, #32]
 80016f8:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80016fc:	621a      	str	r2, [r3, #32]
                   | (uint32_t)0xF << (FMC_A11_BUS_A11 * 4)
                   | (uint32_t)0xF << (FMC_A12_BUS_A12 * 4)
                   | (uint32_t)0xF << (FMC_A13_BUS_A13 * 4)
                   | (uint32_t)0xF << (FMC_A14_BUS_A14 * 4)
                   | (uint32_t)0xF << (FMC_A15_BUS_A15 * 4));
  GPIOG->AFR[0] |=  ((uint32_t)(GPIO_AF_FMC << (FMC_A10_BUS_A10 * 4)))
 80016fe:	6a1a      	ldr	r2, [r3, #32]
 8001700:	f042 12cc 	orr.w	r2, r2, #13369548	; 0xcc00cc
 8001704:	f442 424c 	orr.w	r2, r2, #52224	; 0xcc00
 8001708:	621a      	str	r2, [r3, #32]
                  | ((uint32_t)(GPIO_AF_FMC << (FMC_A12_BUS_A12 * 4)))
                  | ((uint32_t)(GPIO_AF_FMC << (FMC_A13_BUS_A13 * 4)))
                  | ((uint32_t)(GPIO_AF_FMC << (FMC_A14_BUS_A14 * 4)))
                  | ((uint32_t)(GPIO_AF_FMC << (FMC_A15_BUS_A15 * 4)));

  GPIOG->AFR[1] &= ~((uint32_t)0xF << ((FMC_NE2_SRAMEN - 8) * 4)
 800170a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800170c:	f022 12f0 	bic.w	r2, r2, #15728880	; 0xf000f0
 8001710:	625a      	str	r2, [r3, #36]	; 0x24
                   | (uint32_t)0xF << ((FMC_A24_MUX2   - 8) * 4));
  GPIOG->AFR[1] |=  ((uint32_t)(GPIO_AF_FMC << ((FMC_NE2_SRAMEN - 8) * 4)))
 8001712:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001714:	f042 12c0 	orr.w	r2, r2, #12583104	; 0xc000c0
 8001718:	625a      	str	r2, [r3, #36]	; 0x24
                  | ((uint32_t)(GPIO_AF_FMC << ((FMC_A24_MUX2   - 8) * 4)));
  // ---------------------------------------------------------------------------
  GPIOI->MODER   &= ~(GPIO_MODER_MODER7);
 800171a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800171e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001728:	601a      	str	r2, [r3, #0]
  GPIOI->MODER   |= (((uint32_t)GPIO_Mode_OUT) << (BUS_IO * 2));
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001730:	601a      	str	r2, [r3, #0]

  GPIOI->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR7);
 8001732:	689a      	ldr	r2, [r3, #8]
 8001734:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001738:	609a      	str	r2, [r3, #8]
  GPIOI->OSPEEDR |= (((uint32_t)GPIO_Speed_100MHz) << (BUS_IO * 2));
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001740:	609a      	str	r2, [r3, #8]

  GPIOI->OTYPER  &= ~(GPIO_OTYPER_OT_7);
 8001742:	685a      	ldr	r2, [r3, #4]
 8001744:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001748:	605a      	str	r2, [r3, #4]
  GPIOI->OTYPER  |= ((uint32_t)(GPIO_OType_PP << BUS_IO));
 800174a:	685a      	ldr	r2, [r3, #4]
 800174c:	605a      	str	r2, [r3, #4]

  GPIOI->PUPDR   &= ~(GPIO_PUPDR_PUPDR7);
 800174e:	68da      	ldr	r2, [r3, #12]
 8001750:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001754:	60da      	str	r2, [r3, #12]
  GPIOI->PUPDR   |= (((uint32_t)GPIO_PuPd_NOPULL) << (BUS_IO * 2));
 8001756:	68da      	ldr	r2, [r3, #12]
 8001758:	60da      	str	r2, [r3, #12]
  // ---------------------------------------------------------------------------
  if (gDevices & ARCADEIT_DEVICE_SERIAL)
 800175a:	f240 2308 	movw	r3, #520	; 0x208
 800175e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001768:	d101      	bne.n	800176e <ArcadeIT_BUS_Port_Init+0x2fe>

  } // End if.

  return TRUE;

} // End ArcadeIT_BUS_Port_Init.
 800176a:	2001      	movs	r0, #1
 800176c:	bd08      	pop	{r3, pc}
    ArcadeIT_Serial_Port_String_Send(TEXT_BUS_INITED);
 800176e:	f247 00f4 	movw	r0, #28916	; 0x70f4
 8001772:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001776:	f000 ff8d 	bl	8002694 <ArcadeIT_Serial_Port_String_Send>
 800177a:	e7f6      	b.n	800176a <ArcadeIT_BUS_Port_Init+0x2fa>

0800177c <ArcadeIT_BUS_Port_SRAM>:

// -----------------------------------------------------------------------------
void ArcadeIT_BUS_Port_SRAM(
    uint8_t pScaler // speed divider to slow down the access time to the memory bank
    )
{
 800177c:	b530      	push	{r4, r5, lr}
 800177e:	b09f      	sub	sp, #124	; 0x7c
  FMC_NORSRAMInitTypeDef        lFMC_NORSRAMInitStructure;
  FMC_NORSRAMTimingInitTypeDef  lNORSRAMTimingStructure_R;
  FMC_NORSRAMTimingInitTypeDef  lNORSRAMTimingStructure_W;

  // SRAM Timing configuration.
  lNORSRAMTimingStructure_R.FMC_AddressSetupTime        = 2 * pScaler;
 8001780:	0043      	lsls	r3, r0, #1
 8001782:	9308      	str	r3, [sp, #32]
  lNORSRAMTimingStructure_R.FMC_AddressHoldTime         = 1 * pScaler;
 8001784:	9009      	str	r0, [sp, #36]	; 0x24
  lNORSRAMTimingStructure_R.FMC_DataSetupTime           = 2 * pScaler;
 8001786:	930a      	str	r3, [sp, #40]	; 0x28
  lNORSRAMTimingStructure_R.FMC_BusTurnAroundDuration   = 1;
 8001788:	2501      	movs	r5, #1
 800178a:	950b      	str	r5, [sp, #44]	; 0x2c
  lNORSRAMTimingStructure_R.FMC_CLKDivision             = 0;
 800178c:	2400      	movs	r4, #0
 800178e:	940c      	str	r4, [sp, #48]	; 0x30
  lNORSRAMTimingStructure_R.FMC_DataLatency             = 0;
 8001790:	940d      	str	r4, [sp, #52]	; 0x34
  lNORSRAMTimingStructure_R.FMC_AccessMode              = FMC_AccessMode_A;
 8001792:	940e      	str	r4, [sp, #56]	; 0x38

  lNORSRAMTimingStructure_W.FMC_AddressSetupTime        = 2 * pScaler;
 8001794:	9301      	str	r3, [sp, #4]
  lNORSRAMTimingStructure_W.FMC_AddressHoldTime         = 1 * pScaler;
 8001796:	9002      	str	r0, [sp, #8]
  lNORSRAMTimingStructure_W.FMC_DataSetupTime           = 2 * pScaler;
 8001798:	9303      	str	r3, [sp, #12]
  lNORSRAMTimingStructure_W.FMC_BusTurnAroundDuration   = 1;
 800179a:	9504      	str	r5, [sp, #16]
  lNORSRAMTimingStructure_W.FMC_CLKDivision             = 0;
 800179c:	9405      	str	r4, [sp, #20]
  lNORSRAMTimingStructure_W.FMC_DataLatency             = 0;
 800179e:	9406      	str	r4, [sp, #24]
  lNORSRAMTimingStructure_W.FMC_AccessMode              = FMC_AccessMode_A;
 80017a0:	9407      	str	r4, [sp, #28]

  // FMC SRAM control configuration.
  lFMC_NORSRAMInitStructure.FMC_Bank                    = FMC_Bank1_NORSRAM1;
 80017a2:	940f      	str	r4, [sp, #60]	; 0x3c
  lFMC_NORSRAMInitStructure.FMC_DataAddressMux          = FMC_DataAddressMux_Disable;
 80017a4:	9410      	str	r4, [sp, #64]	; 0x40
  lFMC_NORSRAMInitStructure.FMC_MemoryType              = FMC_MemoryType_SRAM;
 80017a6:	9411      	str	r4, [sp, #68]	; 0x44
  lFMC_NORSRAMInitStructure.FMC_MemoryDataWidth         = FMC_NORSRAM_MemoryDataWidth_8b;
 80017a8:	9412      	str	r4, [sp, #72]	; 0x48
  lFMC_NORSRAMInitStructure.FMC_BurstAccessMode         = FMC_BurstAccessMode_Disable;
 80017aa:	9413      	str	r4, [sp, #76]	; 0x4c
  lFMC_NORSRAMInitStructure.FMC_AsynchronousWait        = FMC_AsynchronousWait_Disable;
 80017ac:	9419      	str	r4, [sp, #100]	; 0x64
  lFMC_NORSRAMInitStructure.FMC_WaitSignalPolarity      = FMC_WaitSignalPolarity_Low;
 80017ae:	9414      	str	r4, [sp, #80]	; 0x50
  lFMC_NORSRAMInitStructure.FMC_WaitSignalActive        = FMC_WaitSignalActive_BeforeWaitState;
 80017b0:	9415      	str	r4, [sp, #84]	; 0x54
  lFMC_NORSRAMInitStructure.FMC_WriteOperation          = FMC_WriteOperation_Enable;
 80017b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017b6:	9316      	str	r3, [sp, #88]	; 0x58
  lFMC_NORSRAMInitStructure.FMC_WaitSignal              = FMC_WaitSignal_Disable;
 80017b8:	9417      	str	r4, [sp, #92]	; 0x5c
  lFMC_NORSRAMInitStructure.FMC_ExtendedMode            = FMC_ExtendedMode_Enable;
 80017ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017be:	9318      	str	r3, [sp, #96]	; 0x60
  lFMC_NORSRAMInitStructure.FMC_WriteBurst              = FMC_WriteBurst_Disable;
 80017c0:	941a      	str	r4, [sp, #104]	; 0x68
  lFMC_NORSRAMInitStructure.FMC_ContinousClock          = FMC_CClock_SyncOnly;
 80017c2:	941b      	str	r4, [sp, #108]	; 0x6c

  lFMC_NORSRAMInitStructure.FMC_ReadWriteTimingStruct   = &lNORSRAMTimingStructure_R;
 80017c4:	ab08      	add	r3, sp, #32
 80017c6:	931c      	str	r3, [sp, #112]	; 0x70
  lFMC_NORSRAMInitStructure.FMC_WriteTimingStruct       = &lNORSRAMTimingStructure_W;
 80017c8:	ab01      	add	r3, sp, #4
 80017ca:	931d      	str	r3, [sp, #116]	; 0x74

  /* SRAM configuration */
  FMC_NORSRAMInit(&lFMC_NORSRAMInitStructure);
 80017cc:	a80f      	add	r0, sp, #60	; 0x3c
 80017ce:	f7ff fdae 	bl	800132e <FMC_NORSRAMInit>

  /* Enable FMC Bank1_SRAM1 Bank */
  FMC_NORSRAMCmd(FMC_Bank1_NORSRAM1, ENABLE);
 80017d2:	4629      	mov	r1, r5
 80017d4:	4620      	mov	r0, r4
 80017d6:	f7ff fe38 	bl	800144a <FMC_NORSRAMCmd>

  if (gDevices & ARCADEIT_DEVICE_SERIAL)
 80017da:	f240 2308 	movw	r3, #520	; 0x208
 80017de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80017e8:	d101      	bne.n	80017ee <ArcadeIT_BUS_Port_SRAM+0x72>
  {
    ArcadeIT_Serial_Port_String_Send(TEXT_SRAM_PORT_SET);

  } // End if.

}; // End ArcadeIT_Bus_Port_SRAM.
 80017ea:	b01f      	add	sp, #124	; 0x7c
 80017ec:	bd30      	pop	{r4, r5, pc}
    ArcadeIT_Serial_Port_String_Send(TEXT_SRAM_PORT_SET);
 80017ee:	f247 100c 	movw	r0, #28940	; 0x710c
 80017f2:	f6c0 0000 	movt	r0, #2048	; 0x800
 80017f6:	f000 ff4d 	bl	8002694 <ArcadeIT_Serial_Port_String_Send>
}; // End ArcadeIT_Bus_Port_SRAM.
 80017fa:	e7f6      	b.n	80017ea <ArcadeIT_BUS_Port_SRAM+0x6e>

080017fc <ArcadeIT_I2C_Port_Init>:

// -----------------------------------------------------------------------------
void ArcadeIT_I2C_Port_Init(
    uint32_t pClock     // The frequency clock of the I2C device
    )
{
 80017fc:	b538      	push	{r3, r4, r5, lr}
 80017fe:	4605      	mov	r5, r0
  uint32_t lPinPosition;

  // configure the pins of the I2C
  lPinPosition = (SYS_I2C_SCL_PIN_NO * 2);

  if ((RCC->AHB1ENR & RCC_AHB1Periph_GPIOH) == FALSE) RCC->AHB1ENR |= RCC_AHB1Periph_GPIOH;
 8001800:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001804:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800180e:	d107      	bne.n	8001820 <ArcadeIT_I2C_Port_Init+0x24>
 8001810:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001814:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001818:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800181a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800181e:	631a      	str	r2, [r3, #48]	; 0x30
  if ((RCC->APB1ENR & RCC_APB1Periph_I2C2) == FALSE) RCC->APB1ENR |= RCC_APB1Periph_I2C2;
 8001820:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001824:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800182e:	d107      	bne.n	8001840 <ArcadeIT_I2C_Port_Init+0x44>
 8001830:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001834:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001838:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800183a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800183e:	641a      	str	r2, [r3, #64]	; 0x40

  // Configure the pin PH4 as alternate function 4 (I2C SCL).
  SYS_I2C_SCL_PER->MODER   &= ~GPIO_MODER_MODER4;
 8001840:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001844:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800184e:	601a      	str	r2, [r3, #0]
  SYS_I2C_SCL_PER->MODER   |= (((uint32_t)GPIO_Mode_AF) << lPinPosition);
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001856:	601a      	str	r2, [r3, #0]
  SYS_I2C_SCL_PER->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR4;
 8001858:	689a      	ldr	r2, [r3, #8]
 800185a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800185e:	609a      	str	r2, [r3, #8]
  SYS_I2C_SCL_PER->OSPEEDR |= ((uint32_t)(GPIO_Speed_2MHz) << lPinPosition);
 8001860:	689a      	ldr	r2, [r3, #8]
 8001862:	609a      	str	r2, [r3, #8]
  SYS_I2C_SCL_PER->OTYPER  &= ~GPIO_OTYPER_OT_4;
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	f022 0210 	bic.w	r2, r2, #16
 800186a:	605a      	str	r2, [r3, #4]
  SYS_I2C_SCL_PER->OTYPER  |= (uint16_t)(GPIO_OType_OD << SYS_I2C_SCL_PIN_NO);
 800186c:	685a      	ldr	r2, [r3, #4]
 800186e:	f042 0210 	orr.w	r2, r2, #16
 8001872:	605a      	str	r2, [r3, #4]
  SYS_I2C_SCL_PER->PUPDR   &= ~GPIO_PUPDR_PUPDR4;
 8001874:	68da      	ldr	r2, [r3, #12]
 8001876:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800187a:	60da      	str	r2, [r3, #12]
  SYS_I2C_SCL_PER->PUPDR   |= (((uint32_t)GPIO_PuPd_NOPULL) << lPinPosition);
 800187c:	68da      	ldr	r2, [r3, #12]
 800187e:	60da      	str	r2, [r3, #12]
  SYS_I2C_SCL_PER->AFR[0]  &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)SYS_I2C_SCL_PIN_NO & (uint32_t)0x07) * 4));
 8001880:	6a1a      	ldr	r2, [r3, #32]
 8001882:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8001886:	621a      	str	r2, [r3, #32]
  SYS_I2C_SCL_PER->AFR[0]  |= ((uint32_t)(SYS_I2C_AF) << ((uint32_t)((uint32_t)SYS_I2C_SCL_PIN_NO & (uint32_t)0x07) * 4));
 8001888:	6a1a      	ldr	r2, [r3, #32]
 800188a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800188e:	621a      	str	r2, [r3, #32]

  lPinPosition = (SYS_I2C_SDA_PIN_NO * 2);

  // Configure the pin PH5 as alternate function 4 (I2C SDA).
  SYS_I2C_SDA_PER->MODER   &= ~GPIO_MODER_MODER5;
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001896:	601a      	str	r2, [r3, #0]
  SYS_I2C_SDA_PER->MODER   |= (((uint32_t)GPIO_Mode_AF) << lPinPosition);
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800189e:	601a      	str	r2, [r3, #0]
  SYS_I2C_SDA_PER->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR5;
 80018a0:	689a      	ldr	r2, [r3, #8]
 80018a2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80018a6:	609a      	str	r2, [r3, #8]
  SYS_I2C_SDA_PER->OSPEEDR |= ((uint32_t)(GPIO_Speed_2MHz) << lPinPosition);
 80018a8:	689a      	ldr	r2, [r3, #8]
 80018aa:	609a      	str	r2, [r3, #8]
  SYS_I2C_SDA_PER->OTYPER  &= ~GPIO_OTYPER_OT_5;
 80018ac:	685a      	ldr	r2, [r3, #4]
 80018ae:	f022 0220 	bic.w	r2, r2, #32
 80018b2:	605a      	str	r2, [r3, #4]
  SYS_I2C_SDA_PER->OTYPER  |= (uint16_t)(GPIO_OType_OD << SYS_I2C_SDA_PIN_NO);
 80018b4:	685a      	ldr	r2, [r3, #4]
 80018b6:	f042 0220 	orr.w	r2, r2, #32
 80018ba:	605a      	str	r2, [r3, #4]
  SYS_I2C_SDA_PER->PUPDR   &= ~GPIO_PUPDR_PUPDR5;
 80018bc:	68da      	ldr	r2, [r3, #12]
 80018be:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80018c2:	60da      	str	r2, [r3, #12]
  SYS_I2C_SDA_PER->PUPDR   |= (((uint32_t)GPIO_PuPd_NOPULL) << lPinPosition);
 80018c4:	68da      	ldr	r2, [r3, #12]
 80018c6:	60da      	str	r2, [r3, #12]
  SYS_I2C_SDA_PER->AFR[0] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)SYS_I2C_SDA_PIN_NO & (uint32_t)0x07) * 4)) ;
 80018c8:	6a1a      	ldr	r2, [r3, #32]
 80018ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80018ce:	621a      	str	r2, [r3, #32]
  SYS_I2C_SDA_PER->AFR[0] |= ((uint32_t)(SYS_I2C_AF) << ((uint32_t)((uint32_t)SYS_I2C_SDA_PIN_NO & (uint32_t)0x07) * 4));
 80018d0:	6a1a      	ldr	r2, [r3, #32]
 80018d2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80018d6:	621a      	str	r2, [r3, #32]

  // reset the I2C peripheral
  I2C2->CR1 |= I2C_CR1_SWRST;
 80018d8:	f44f 44b0 	mov.w	r4, #22528	; 0x5800
 80018dc:	f2c4 0400 	movt	r4, #16384	; 0x4000
 80018e0:	6823      	ldr	r3, [r4, #0]
 80018e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018e6:	6023      	str	r3, [r4, #0]
  ArcadeIT_System_Delay(1000);
 80018e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018ec:	f7ff f9fc 	bl	8000ce8 <ArcadeIT_System_Delay>
  I2C2->CR1 = 0x0;
 80018f0:	2300      	movs	r3, #0
 80018f2:	6023      	str	r3, [r4, #0]

  // configure the I2C port
  I2C2->CR1 &= ~I2C_CR1_PE;
 80018f4:	6823      	ldr	r3, [r4, #0]
 80018f6:	f023 0301 	bic.w	r3, r3, #1
 80018fa:	6023      	str	r3, [r4, #0]
  uint16_t result = 0x04;
  uint8_t lDuty = I2C_DUTY_2;

  freqrange = (apbclock / 1000000);

  I2C2->CR2 &= ~I2C_CR2_FREQ;
 80018fc:	6863      	ldr	r3, [r4, #4]
 80018fe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001902:	6063      	str	r3, [r4, #4]
  I2C2->CR2 |= freqrange;
 8001904:	6863      	ldr	r3, [r4, #4]
 8001906:	f043 032d 	orr.w	r3, r3, #45	; 0x2d
 800190a:	6063      	str	r3, [r4, #4]

  // Configure speed in standard mode
  if (pClock <= 100000)
 800190c:	f248 63a0 	movw	r3, #34464	; 0x86a0
 8001910:	f2c0 0301 	movt	r3, #1
 8001914:	429d      	cmp	r5, r3
 8001916:	d83f      	bhi.n	8001998 <ArcadeIT_I2C_Port_Init+0x19c>
  {
    // Standard mode speed calculate
    result = (uint16_t)(apbclock / (pClock << 1));
 8001918:	006d      	lsls	r5, r5, #1
 800191a:	f24a 5040 	movw	r0, #42304	; 0xa540
 800191e:	f2c0 20ae 	movt	r0, #686	; 0x2ae
 8001922:	fbb0 f0f5 	udiv	r0, r0, r5
 8001926:	b280      	uxth	r0, r0

    // Test if CCR value is under 0x4
    if (result < 0x04)
 8001928:	2803      	cmp	r0, #3
 800192a:	d800      	bhi.n	800192e <ArcadeIT_I2C_Port_Init+0x132>
    {
      // Set minimum allowed value
      result = 0x04;
 800192c:	2004      	movs	r0, #4

    // Set speed value for standard mode
    tmpreg |= result;

    // Set Maximum Rise Time for standard mode
    I2C2->TRISE = freqrange + 1;
 800192e:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 8001932:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001936:	222e      	movs	r2, #46	; 0x2e
 8001938:	621a      	str	r2, [r3, #32]
    // Set Maximum Rise Time for fast mode
    I2C2->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);

  } // End if.

  I2C2->CCR = tmpreg;
 800193a:	f44f 42b0 	mov.w	r2, #22528	; 0x5800
 800193e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001942:	61d0      	str	r0, [r2, #28]
  I2C2->OAR1 = I2C_AcknowledgedAddress_7bit;
 8001944:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001948:	6093      	str	r3, [r2, #8]
  I2C2->OAR2 = 0;
 800194a:	f44f 42b0 	mov.w	r2, #22528	; 0x5800
 800194e:	f363 421f 	bfi	r2, r3, #16, #16
 8001952:	2100      	movs	r1, #0
 8001954:	60d1      	str	r1, [r2, #12]
  I2C2->CR1 |= I2C_CR1_ACK;
 8001956:	f44f 42b0 	mov.w	r2, #22528	; 0x5800
 800195a:	f363 421f 	bfi	r2, r3, #16, #16
 800195e:	6812      	ldr	r2, [r2, #0]
 8001960:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001964:	f44f 41b0 	mov.w	r1, #22528	; 0x5800
 8001968:	f363 411f 	bfi	r1, r3, #16, #16
 800196c:	600a      	str	r2, [r1, #0]
  I2C2->CR1 |= I2C_CR1_PE;
 800196e:	f44f 42b0 	mov.w	r2, #22528	; 0x5800
 8001972:	f363 421f 	bfi	r2, r3, #16, #16
 8001976:	6812      	ldr	r2, [r2, #0]
 8001978:	f042 0201 	orr.w	r2, r2, #1
 800197c:	f44f 41b0 	mov.w	r1, #22528	; 0x5800
 8001980:	f363 411f 	bfi	r1, r3, #16, #16
 8001984:	600a      	str	r2, [r1, #0]

  // Shows a message to serial port as debug
  if (gDevices & ARCADEIT_DEVICE_SERIAL)
 8001986:	f240 2308 	movw	r3, #520	; 0x208
 800198a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001994:	d117      	bne.n	80019c6 <ArcadeIT_I2C_Port_Init+0x1ca>
  {
    ArcadeIT_Serial_Port_String_Send(TEXT_I2C_INITED);

  } // End if.

} // end ArcadeIT_I2C_Port_Init
 8001996:	bd38      	pop	{r3, r4, r5, pc}
      result = (uint16_t)(apbclock / (pClock * 3));
 8001998:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800199c:	f24a 5340 	movw	r3, #42304	; 0xa540
 80019a0:	f2c0 23ae 	movt	r3, #686	; 0x2ae
 80019a4:	fbb3 f3f5 	udiv	r3, r3, r5
 80019a8:	b298      	uxth	r0, r3
    if ((result & I2C_CCR_CCR) == 0)
 80019aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019ae:	b90b      	cbnz	r3, 80019b4 <ArcadeIT_I2C_Port_Init+0x1b8>
      result |= (uint16_t)0x0001;
 80019b0:	f040 0001 	orr.w	r0, r0, #1
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 80019b4:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
    I2C2->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);
 80019b8:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 80019bc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80019c0:	220e      	movs	r2, #14
 80019c2:	621a      	str	r2, [r3, #32]
 80019c4:	e7b9      	b.n	800193a <ArcadeIT_I2C_Port_Init+0x13e>
    ArcadeIT_Serial_Port_String_Send(TEXT_I2C_INITED);
 80019c6:	f247 1020 	movw	r0, #28960	; 0x7120
 80019ca:	f6c0 0000 	movt	r0, #2048	; 0x800
 80019ce:	f000 fe61 	bl	8002694 <ArcadeIT_Serial_Port_String_Send>
} // end ArcadeIT_I2C_Port_Init
 80019d2:	e7e0      	b.n	8001996 <ArcadeIT_I2C_Port_Init+0x19a>

080019d4 <LCD_Parallel_Port_Setup>:
// /////////////////////////////////////////////////////////////////////////////
void LCD_Parallel_Port_Setup
(
  uint8_t pPort   // port number (LCD 0 or 1)
)
{
 80019d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  */


  uint32_t lPinPosition;

  if ((RCC->AHB1ENR & RCC_AHB1Periph_GPIOH) == FALSE) RCC->AHB1ENR |= RCC_AHB1Periph_GPIOH;
 80019d6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80019da:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80019de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80019e4:	d107      	bne.n	80019f6 <LCD_Parallel_Port_Setup+0x22>
 80019e6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80019ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80019ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019f4:	631a      	str	r2, [r3, #48]	; 0x30

  // Configure the Reset pin that is common to both LCDs
  lPinPosition = (SYS_LCD_RESET_PIN_NO * 2);
  SYS_LCD_RESET_PER->MODER   &= ~GPIO_MODER_MODER7;
 80019f6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80019fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001a04:	601a      	str	r2, [r3, #0]
  SYS_LCD_RESET_PER->MODER   |= (((uint32_t)GPIO_Mode_OUT) << lPinPosition);
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a0c:	601a      	str	r2, [r3, #0]
  SYS_LCD_RESET_PER->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR7;
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001a14:	609a      	str	r2, [r3, #8]
  SYS_LCD_RESET_PER->OSPEEDR |= ((uint32_t)(GPIO_Speed_100MHz) << lPinPosition);
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001a1c:	609a      	str	r2, [r3, #8]
  SYS_LCD_RESET_PER->OTYPER  &= ~GPIO_OTYPER_OT_7;
 8001a1e:	685a      	ldr	r2, [r3, #4]
 8001a20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a24:	605a      	str	r2, [r3, #4]
  SYS_LCD_RESET_PER->OTYPER  |= (uint16_t)(GPIO_OType_PP << SYS_LCD_RESET_PIN_NO);
 8001a26:	685a      	ldr	r2, [r3, #4]
 8001a28:	605a      	str	r2, [r3, #4]
  SYS_LCD_RESET_PER->PUPDR   &= ~GPIO_PUPDR_PUPDR7;
 8001a2a:	68da      	ldr	r2, [r3, #12]
 8001a2c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001a30:	60da      	str	r2, [r3, #12]
  SYS_LCD_RESET_PER->PUPDR   |= (((uint32_t)GPIO_PuPd_UP) << lPinPosition);
 8001a32:	68da      	ldr	r2, [r3, #12]
 8001a34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a38:	60da      	str	r2, [r3, #12]
   * at 60Hz. So this is the way used to calculate the TIM parameters
   * 1 tick = 5,55ns (180 Mhz)
   *
   */

  if ((RCC->APB2ENR & RCC_APB2Periph_TIM1) == FALSE) RCC->APB2ENR |= RCC_APB2Periph_TIM1;
 8001a3a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001a3e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a44:	f013 0f01 	tst.w	r3, #1
 8001a48:	d107      	bne.n	8001a5a <LCD_Parallel_Port_Setup+0x86>
 8001a4a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001a4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a54:	f042 0201 	orr.w	r2, r2, #1
 8001a58:	645a      	str	r2, [r3, #68]	; 0x44
  if ((RCC->AHB1ENR & RCC_AHB1Periph_GPIOE) == FALSE) RCC->AHB1ENR |= RCC_AHB1Periph_GPIOE;
 8001a5a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001a5e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a64:	f013 0f10 	tst.w	r3, #16
 8001a68:	d107      	bne.n	8001a7a <LCD_Parallel_Port_Setup+0xa6>
 8001a6a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001a6e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a74:	f042 0210 	orr.w	r2, r2, #16
 8001a78:	631a      	str	r2, [r3, #48]	; 0x30

  if (pPort & LCD_1_ID)
 8001a7a:	f010 0501 	ands.w	r5, r0, #1
 8001a7e:	d029      	beq.n	8001ad4 <LCD_Parallel_Port_Setup+0x100>
  {
    lPinPosition = (SYS_LCD_1_BL_PWM_PIN_NO * 2);
    SYS_LCD_1_BL_PWM_PER->MODER   &= ~GPIO_MODER_MODER13;
 8001a80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a84:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8001a8e:	601a      	str	r2, [r3, #0]
    SYS_LCD_1_BL_PWM_PER->MODER   |= (((uint32_t)GPIO_Mode_AF) << lPinPosition);
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001a96:	601a      	str	r2, [r3, #0]
    SYS_LCD_1_BL_PWM_PER->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR13;
 8001a98:	689a      	ldr	r2, [r3, #8]
 8001a9a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8001a9e:	609a      	str	r2, [r3, #8]
    SYS_LCD_1_BL_PWM_PER->OSPEEDR |= ((uint32_t)(GPIO_Speed_50MHz) << lPinPosition);
 8001aa0:	689a      	ldr	r2, [r3, #8]
 8001aa2:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001aa6:	609a      	str	r2, [r3, #8]
    SYS_LCD_1_BL_PWM_PER->OTYPER  &= ~GPIO_OTYPER_OT_13;
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001aae:	605a      	str	r2, [r3, #4]
    SYS_LCD_1_BL_PWM_PER->OTYPER  |= (uint16_t)(GPIO_OType_PP << SYS_LCD_1_BL_PWM_PIN_NO);
 8001ab0:	685a      	ldr	r2, [r3, #4]
 8001ab2:	605a      	str	r2, [r3, #4]
    SYS_LCD_1_BL_PWM_PER->PUPDR   &= ~GPIO_PUPDR_PUPDR13;
 8001ab4:	68da      	ldr	r2, [r3, #12]
 8001ab6:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8001aba:	60da      	str	r2, [r3, #12]
    SYS_LCD_1_BL_PWM_PER->PUPDR   |= (((uint32_t)GPIO_PuPd_UP) << lPinPosition);
 8001abc:	68da      	ldr	r2, [r3, #12]
 8001abe:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001ac2:	60da      	str	r2, [r3, #12]
    SYS_LCD_1_BL_PWM_PER->AFR[1] &= ~((uint32_t)(0xF << ((SYS_LCD_1_BL_PWM_PIN_NO - 8) * 4)));
 8001ac4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ac6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001aca:	625a      	str	r2, [r3, #36]	; 0x24
    SYS_LCD_1_BL_PWM_PER->AFR[1] |=  (uint32_t)(SYS_LCD_BL_PWM_TIMER_AF << ((SYS_LCD_1_BL_PWM_PIN_NO - 8) * 4));
 8001acc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ace:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001ad2:	625a      	str	r2, [r3, #36]	; 0x24

  } // end if

  if (pPort & LCD_2_ID)
 8001ad4:	f010 0602 	ands.w	r6, r0, #2
 8001ad8:	d029      	beq.n	8001b2e <LCD_Parallel_Port_Setup+0x15a>
  {
    lPinPosition = (SYS_LCD_2_BL_PWM_PIN_NO * 2);
    SYS_LCD_2_BL_PWM_PER->MODER   &= ~GPIO_MODER_MODER14;
 8001ada:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ade:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ae8:	601a      	str	r2, [r3, #0]
    SYS_LCD_2_BL_PWM_PER->MODER   |= (((uint32_t)GPIO_Mode_AF) << lPinPosition);
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001af0:	601a      	str	r2, [r3, #0]
    SYS_LCD_2_BL_PWM_PER->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR14;
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001af8:	609a      	str	r2, [r3, #8]
    SYS_LCD_2_BL_PWM_PER->OSPEEDR |= ((uint32_t)(GPIO_Speed_50MHz) << lPinPosition);
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001b00:	609a      	str	r2, [r3, #8]
    SYS_LCD_2_BL_PWM_PER->OTYPER  &= ~GPIO_OTYPER_OT_14;
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001b08:	605a      	str	r2, [r3, #4]
    SYS_LCD_2_BL_PWM_PER->OTYPER  |= (uint16_t)(GPIO_OType_PP << SYS_LCD_2_BL_PWM_PIN_NO);
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	605a      	str	r2, [r3, #4]
    SYS_LCD_2_BL_PWM_PER->PUPDR   &= ~GPIO_PUPDR_PUPDR14;
 8001b0e:	68da      	ldr	r2, [r3, #12]
 8001b10:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b14:	60da      	str	r2, [r3, #12]
    SYS_LCD_2_BL_PWM_PER->PUPDR   |= (((uint32_t)GPIO_PuPd_UP) << lPinPosition);
 8001b16:	68da      	ldr	r2, [r3, #12]
 8001b18:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b1c:	60da      	str	r2, [r3, #12]
    SYS_LCD_2_BL_PWM_PER->AFR[1] &= ~((uint32_t)(0xF << ((SYS_LCD_2_BL_PWM_PIN_NO - 8) * 4)));
 8001b1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b24:	625a      	str	r2, [r3, #36]	; 0x24
    SYS_LCD_2_BL_PWM_PER->AFR[1] |=  (uint32_t)(SYS_LCD_BL_PWM_TIMER_AF << ((SYS_LCD_2_BL_PWM_PIN_NO - 8) * 4));
 8001b26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b28:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001b2c:	625a      	str	r2, [r3, #36]	; 0x24
  uint32_t TIMER_Frequency = ARCADEIT_SYS_CLOCK;
  uint32_t COUNTER_Frequency = LCD_BACKLIGHT_PWM_STEPS * LCD_BACKLIGHT_PWM_FREQUENCY;
  uint32_t PSC_Value = (TIMER_Frequency / COUNTER_Frequency) - 1;
  uint16_t ARR_Value = LCD_BACKLIGHT_PWM_STEPS - 1;

  TIM1->CR1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8001b2e:	2300      	movs	r3, #0
 8001b30:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001b3a:	0412      	lsls	r2, r2, #16
 8001b3c:	0c12      	lsrs	r2, r2, #16
 8001b3e:	601a      	str	r2, [r3, #0]
  TIM1->CR1 &=  (uint16_t)(~TIM_CR1_CKD);
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001b46:	0412      	lsls	r2, r2, #16
 8001b48:	0c12      	lsrs	r2, r2, #16
 8001b4a:	601a      	str	r2, [r3, #0]
  TIM1->CR1 |= (uint32_t)TIM_CKD_DIV4;
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b52:	601a      	str	r2, [r3, #0]

  TIM1->ARR = ARR_Value;
 8001b54:	2263      	movs	r2, #99	; 0x63
 8001b56:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM1->PSC = PSC_Value;
 8001b58:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8001b5c:	629a      	str	r2, [r3, #40]	; 0x28
  TIM1->RCR = 0;
 8001b5e:	2200      	movs	r2, #0
 8001b60:	631a      	str	r2, [r3, #48]	; 0x30

  TIM1->EGR = TIM_PSCReloadMode_Immediate;
 8001b62:	2201      	movs	r2, #1
 8001b64:	615a      	str	r2, [r3, #20]

  TIM1->CCER |=   (((pPort & LCD_1_ID) ? TIM_CCER_CC3E   : 0) | ((pPort & LCD_2_ID) ? TIM_CCER_CC4E   : 0));
 8001b66:	6a19      	ldr	r1, [r3, #32]
 8001b68:	0202      	lsls	r2, r0, #8
 8001b6a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001b6e:	02c4      	lsls	r4, r0, #11
 8001b70:	f404 5480 	and.w	r4, r4, #4096	; 0x1000
 8001b74:	4322      	orrs	r2, r4
 8001b76:	430a      	orrs	r2, r1
 8001b78:	621a      	str	r2, [r3, #32]
  TIM1->CCER &=  ~(((pPort & LCD_1_ID) ? TIM_CCER_CC3P   : 0) | ((pPort & LCD_2_ID) ? TIM_CCER_CC4P   : 0));
 8001b7a:	6a1c      	ldr	r4, [r3, #32]
 8001b7c:	0247      	lsls	r7, r0, #9
 8001b7e:	f407 7100 	and.w	r1, r7, #512	; 0x200
 8001b82:	0302      	lsls	r2, r0, #12
 8001b84:	f402 5c00 	and.w	ip, r2, #8192	; 0x2000
 8001b88:	ea41 010c 	orr.w	r1, r1, ip
 8001b8c:	ea24 0401 	bic.w	r4, r4, r1
 8001b90:	621c      	str	r4, [r3, #32]
  TIM1->CCER |=   (((pPort & LCD_1_ID) ? TIM_CCER_CC3P   : 0) | ((pPort & LCD_2_ID) ? TIM_CCER_CC4P   : 0));
 8001b92:	6a1c      	ldr	r4, [r3, #32]
 8001b94:	4321      	orrs	r1, r4
 8001b96:	6219      	str	r1, [r3, #32]

  TIM1->CCMR2 &= ~(((pPort & LCD_1_ID) ? TIM_CCMR2_OC3CE : 0) | ((pPort & LCD_2_ID) ? TIM_CCMR2_OC4CE : 0));
 8001b98:	69dc      	ldr	r4, [r3, #28]
 8001b9a:	01c1      	lsls	r1, r0, #7
 8001b9c:	b2c9      	uxtb	r1, r1
 8001b9e:	ea4f 3c80 	mov.w	ip, r0, lsl #14
 8001ba2:	f40c 4c00 	and.w	ip, ip, #32768	; 0x8000
 8001ba6:	ea41 010c 	orr.w	r1, r1, ip
 8001baa:	ea24 0101 	bic.w	r1, r4, r1
 8001bae:	61d9      	str	r1, [r3, #28]
  TIM1->CCMR2 &= ~(((pPort & LCD_1_ID) ? TIM_CCMR2_OC3M  : 0) | ((pPort & LCD_2_ID) ? TIM_CCMR2_OC4M  : 0));
 8001bb0:	69d9      	ldr	r1, [r3, #28]
 8001bb2:	2d00      	cmp	r5, #0
 8001bb4:	d060      	beq.n	8001c78 <LCD_Parallel_Port_Setup+0x2a4>
 8001bb6:	2370      	movs	r3, #112	; 0x70
 8001bb8:	2e00      	cmp	r6, #0
 8001bba:	d05f      	beq.n	8001c7c <LCD_Parallel_Port_Setup+0x2a8>
 8001bbc:	f44f 44e0 	mov.w	r4, #28672	; 0x7000
 8001bc0:	4323      	orrs	r3, r4
 8001bc2:	ea21 0103 	bic.w	r1, r1, r3
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001bcc:	61d9      	str	r1, [r3, #28]
  TIM1->CCMR2 |=  (((pPort & LCD_1_ID) ? TIM_OC3Mode_PWM : 0) | ((pPort & LCD_2_ID) ? TIM_OC4Mode_PWM : 0));
 8001bce:	69d9      	ldr	r1, [r3, #28]
 8001bd0:	2d00      	cmp	r5, #0
 8001bd2:	d055      	beq.n	8001c80 <LCD_Parallel_Port_Setup+0x2ac>
 8001bd4:	2360      	movs	r3, #96	; 0x60
 8001bd6:	2e00      	cmp	r6, #0
 8001bd8:	d054      	beq.n	8001c84 <LCD_Parallel_Port_Setup+0x2b0>
 8001bda:	f44f 44c0 	mov.w	r4, #24576	; 0x6000
 8001bde:	4323      	orrs	r3, r4
 8001be0:	4319      	orrs	r1, r3
 8001be2:	2300      	movs	r3, #0
 8001be4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001be8:	61d9      	str	r1, [r3, #28]
  TIM1->CCMR2 |=  (((pPort & LCD_1_ID) ? TIM_CCMR2_OC3PE : 0) | ((pPort & LCD_2_ID) ? TIM_CCMR2_OC4PE : 0));
 8001bea:	69d9      	ldr	r1, [r3, #28]
 8001bec:	00c4      	lsls	r4, r0, #3
 8001bee:	f004 0408 	and.w	r4, r4, #8
 8001bf2:	ea4f 2c80 	mov.w	ip, r0, lsl #10
 8001bf6:	f40c 6c00 	and.w	ip, ip, #2048	; 0x800
 8001bfa:	ea44 040c 	orr.w	r4, r4, ip
 8001bfe:	430c      	orrs	r4, r1
 8001c00:	61dc      	str	r4, [r3, #28]
  TIM1->CCMR2 &= ~(((pPort & LCD_1_ID) ? TIM_CCMR2_OC3FE : 0) | ((pPort & LCD_2_ID) ? TIM_CCMR2_OC4FE : 0));
 8001c02:	69dc      	ldr	r4, [r3, #28]
 8001c04:	0081      	lsls	r1, r0, #2
 8001c06:	f001 0104 	and.w	r1, r1, #4
 8001c0a:	f407 6780 	and.w	r7, r7, #1024	; 0x400
 8001c0e:	4339      	orrs	r1, r7
 8001c10:	ea24 0101 	bic.w	r1, r4, r1
 8001c14:	61d9      	str	r1, [r3, #28]
  TIM1->CCMR2 &= ~(((pPort & LCD_1_ID) ? TIM_CCMR2_CC3S  : 0) | ((pPort & LCD_2_ID) ? TIM_CCMR2_CC4S  : 0));
 8001c16:	69d9      	ldr	r1, [r3, #28]
 8001c18:	2d00      	cmp	r5, #0
 8001c1a:	d035      	beq.n	8001c88 <LCD_Parallel_Port_Setup+0x2b4>
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	2e00      	cmp	r6, #0
 8001c20:	d034      	beq.n	8001c8c <LCD_Parallel_Port_Setup+0x2b8>
 8001c22:	f44f 7440 	mov.w	r4, #768	; 0x300
 8001c26:	4323      	orrs	r3, r4
 8001c28:	ea21 0103 	bic.w	r1, r1, r3
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001c32:	61d9      	str	r1, [r3, #28]

  TIM1->CR2 |=    (((pPort & LCD_1_ID) ? TIM_CR2_OIS3    : 0) | ((pPort & LCD_2_ID) ? TIM_CR2_OIS4    : 0));
 8001c34:	6859      	ldr	r1, [r3, #4]
 8001c36:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001c3a:	0340      	lsls	r0, r0, #13
 8001c3c:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
 8001c40:	4310      	orrs	r0, r2
 8001c42:	4308      	orrs	r0, r1
 8001c44:	6058      	str	r0, [r3, #4]

  TIM1->CCR3 = 0;
 8001c46:	2200      	movs	r2, #0
 8001c48:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM1->CCR4 = 0;
 8001c4a:	641a      	str	r2, [r3, #64]	; 0x40

  TIM1->BDTR = 0;
 8001c4c:	645a      	str	r2, [r3, #68]	; 0x44
  TIM1->BDTR |= TIM_BDTR_MOE;
 8001c4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c54:	645a      	str	r2, [r3, #68]	; 0x44

  TIM1->CR2 |= TIM_CR2_CCPC;
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	f042 0201 	orr.w	r2, r2, #1
 8001c5c:	605a      	str	r2, [r3, #4]

  TIM1->CR1 |= TIM_CR1_CEN;
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	f042 0201 	orr.w	r2, r2, #1
 8001c64:	601a      	str	r2, [r3, #0]

  // Shows a message to serial port as debug
  if (gDevices & ARCADEIT_DEVICE_SERIAL)
 8001c66:	f240 2308 	movw	r3, #520	; 0x208
 8001c6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001c74:	d10c      	bne.n	8001c90 <LCD_Parallel_Port_Setup+0x2bc>
    // Starts and configure the serial port.
    ArcadeIT_Serial_Port_String_Send("LCD hardware setup." CURSOR_NEWLINE);

  } // End if.

} // End LCD_Parallel_Port_Setup.
 8001c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  TIM1->CCMR2 &= ~(((pPort & LCD_1_ID) ? TIM_CCMR2_OC3M  : 0) | ((pPort & LCD_2_ID) ? TIM_CCMR2_OC4M  : 0));
 8001c78:	2300      	movs	r3, #0
 8001c7a:	e79d      	b.n	8001bb8 <LCD_Parallel_Port_Setup+0x1e4>
 8001c7c:	2400      	movs	r4, #0
 8001c7e:	e79f      	b.n	8001bc0 <LCD_Parallel_Port_Setup+0x1ec>
  TIM1->CCMR2 |=  (((pPort & LCD_1_ID) ? TIM_OC3Mode_PWM : 0) | ((pPort & LCD_2_ID) ? TIM_OC4Mode_PWM : 0));
 8001c80:	2300      	movs	r3, #0
 8001c82:	e7a8      	b.n	8001bd6 <LCD_Parallel_Port_Setup+0x202>
 8001c84:	2400      	movs	r4, #0
 8001c86:	e7aa      	b.n	8001bde <LCD_Parallel_Port_Setup+0x20a>
  TIM1->CCMR2 &= ~(((pPort & LCD_1_ID) ? TIM_CCMR2_CC3S  : 0) | ((pPort & LCD_2_ID) ? TIM_CCMR2_CC4S  : 0));
 8001c88:	2300      	movs	r3, #0
 8001c8a:	e7c8      	b.n	8001c1e <LCD_Parallel_Port_Setup+0x24a>
 8001c8c:	2400      	movs	r4, #0
 8001c8e:	e7ca      	b.n	8001c26 <LCD_Parallel_Port_Setup+0x252>
    ArcadeIT_Serial_Port_String_Send("LCD hardware setup." CURSOR_NEWLINE);
 8001c90:	f247 104c 	movw	r0, #29004	; 0x714c
 8001c94:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001c98:	f000 fcfc 	bl	8002694 <ArcadeIT_Serial_Port_String_Send>
} // End LCD_Parallel_Port_Setup.
 8001c9c:	e7eb      	b.n	8001c76 <LCD_Parallel_Port_Setup+0x2a2>

08001c9e <LCD_Wr_Data>:
  DESCRIPTION:  Write data to the LCD.
  PARMS:        See above.
  RETURNS:      Nothing.
  */

  __IO uint8_t* lLCDPtr = gLCDDriver[pLCDId].address;
 8001c9e:	f240 423c 	movw	r2, #1084	; 0x43c
 8001ca2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001ca6:	f44f 730d 	mov.w	r3, #564	; 0x234
 8001caa:	fb03 2000 	mla	r0, r3, r0, r2
 8001cae:	6883      	ldr	r3, [r0, #8]

  lLCDPtr[LCD_DATA] = pData;
 8001cb0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001cb4:	7019      	strb	r1, [r3, #0]

} // End LCD_Wr_Data.
 8001cb6:	4770      	bx	lr

08001cb8 <LCD_Wr_Register>:
  DESCRIPTION:  Select a register to the LCD.
  PARMS:        See above.
  RETURNS:      Nothing.
  */

  __IO uint8_t* lLCDPtr = gLCDDriver[pLCDId].address;
 8001cb8:	f240 423c 	movw	r2, #1084	; 0x43c
 8001cbc:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001cc0:	f44f 730d 	mov.w	r3, #564	; 0x234
 8001cc4:	fb03 2000 	mla	r0, r3, r0, r2
 8001cc8:	6883      	ldr	r3, [r0, #8]

  lLCDPtr[LCD_REGISTER] = pRegister;
 8001cca:	7019      	strb	r1, [r3, #0]

} // End LCD_Wr_Register. 
 8001ccc:	4770      	bx	lr

08001cce <LCD_Area_Set>:
  uint16_t pX1,
  uint16_t pY1,
  uint16_t pX2,
  uint16_t pY2
)
{  
 8001cce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cd2:	4604      	mov	r4, r0
 8001cd4:	4688      	mov	r8, r1
 8001cd6:	4616      	mov	r6, r2
 8001cd8:	461f      	mov	r7, r3
 8001cda:	f8bd 5018 	ldrh.w	r5, [sp, #24]
  PARMS:        See above.
  RETURNS:      Nothing.
  */

  #if (LCD_CONTROLLER == ILI9341)
  LCD_Wr_Register(pLCDId, COLUMN_ADDRESS_SET);
 8001cde:	212a      	movs	r1, #42	; 0x2a
 8001ce0:	f7ff ffea 	bl	8001cb8 <LCD_Wr_Register>
  LCD_Wr_Data(pLCDId, pX1 >> 8);
 8001ce4:	ea4f 2118 	mov.w	r1, r8, lsr #8
 8001ce8:	4620      	mov	r0, r4
 8001cea:	f7ff ffd8 	bl	8001c9e <LCD_Wr_Data>
  LCD_Wr_Data(pLCDId, pX1);
 8001cee:	fa5f f188 	uxtb.w	r1, r8
 8001cf2:	4620      	mov	r0, r4
 8001cf4:	f7ff ffd3 	bl	8001c9e <LCD_Wr_Data>
  LCD_Wr_Data(pLCDId, pX2 >> 8);
 8001cf8:	0a39      	lsrs	r1, r7, #8
 8001cfa:	4620      	mov	r0, r4
 8001cfc:	f7ff ffcf 	bl	8001c9e <LCD_Wr_Data>
  LCD_Wr_Data(pLCDId, pX2);
 8001d00:	b2f9      	uxtb	r1, r7
 8001d02:	4620      	mov	r0, r4
 8001d04:	f7ff ffcb 	bl	8001c9e <LCD_Wr_Data>

  LCD_Wr_Register(pLCDId, PAGE_ADDRESS_SET);
 8001d08:	212b      	movs	r1, #43	; 0x2b
 8001d0a:	4620      	mov	r0, r4
 8001d0c:	f7ff ffd4 	bl	8001cb8 <LCD_Wr_Register>
  LCD_Wr_Data(pLCDId, pY1 >> 8);
 8001d10:	0a31      	lsrs	r1, r6, #8
 8001d12:	4620      	mov	r0, r4
 8001d14:	f7ff ffc3 	bl	8001c9e <LCD_Wr_Data>
  LCD_Wr_Data(pLCDId, pY1);
 8001d18:	b2f1      	uxtb	r1, r6
 8001d1a:	4620      	mov	r0, r4
 8001d1c:	f7ff ffbf 	bl	8001c9e <LCD_Wr_Data>
  LCD_Wr_Data(pLCDId, pY2 >> 8);
 8001d20:	0a29      	lsrs	r1, r5, #8
 8001d22:	4620      	mov	r0, r4
 8001d24:	f7ff ffbb 	bl	8001c9e <LCD_Wr_Data>
  LCD_Wr_Data(pLCDId, pY2);
 8001d28:	b2e9      	uxtb	r1, r5
 8001d2a:	4620      	mov	r0, r4
 8001d2c:	f7ff ffb7 	bl	8001c9e <LCD_Wr_Data>

  LCD_Wr_Register(pLCDId, MEMORY_WRITE);
 8001d30:	212c      	movs	r1, #44	; 0x2c
 8001d32:	4620      	mov	r0, r4
 8001d34:	f7ff ffc0 	bl	8001cb8 <LCD_Wr_Register>
  LCD_Wr_Data(pLCDId, pY2);

  LCD_Wr_Register(pLCDId, 0x22);
  #endif

} // End LCD_Area_Set.
 8001d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001d3c <LCD_Clear>:
void LCD_Clear
(
  uint8_t pLCDId, // The id of the display.
  uint32_t pColor // The Color in hex format 0x00RRGGBB.
)
{
 8001d3c:	b4f0      	push	{r4, r5, r6, r7}

  lRed = (( pColor >> 16 ) & 0xFF );
  lGreen = (( pColor >> 8 ) & 0xFF );
  lBlue = (( pColor ) & 0xFF );

  __IO uint8_t* lLCDPtr = gDisplayAddress[pLCDId];
 8001d3e:	4604      	mov	r4, r0
 8001d40:	f240 0300 	movw	r3, #0
 8001d44:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d48:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]

  uint16_t y, x, c = RGB_TO_16BIT565(lRed, lGreen, lBlue);
 8001d4c:	f3c1 03c4 	ubfx	r3, r1, #3, #5
 8001d50:	f3c1 2085 	ubfx	r0, r1, #10, #6
 8001d54:	0140      	lsls	r0, r0, #5
 8001d56:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 8001d5a:	b200      	sxth	r0, r0
 8001d5c:	f3c1 41c4 	ubfx	r1, r1, #19, #5
 8001d60:	4308      	orrs	r0, r1
 8001d62:	b285      	uxth	r5, r0
  for(y = 0; y < gLCDDriver[pLCDId].height; y++)
 8001d64:	2700      	movs	r7, #0
 8001d66:	e014      	b.n	8001d92 <LCD_Clear+0x56>
  {
    for (x = 0; x < gLCDDriver[pLCDId].width; x++)
    {
      	lLCDPtr[LCD_DATA] = c >> 8;
 8001d68:	0a2a      	lsrs	r2, r5, #8
 8001d6a:	f506 3180 	add.w	r1, r6, #65536	; 0x10000
 8001d6e:	700a      	strb	r2, [r1, #0]
      	lLCDPtr[LCD_DATA] = c & 0xFF;
 8001d70:	b2c2      	uxtb	r2, r0
 8001d72:	700a      	strb	r2, [r1, #0]
    for (x = 0; x < gLCDDriver[pLCDId].width; x++)
 8001d74:	3301      	adds	r3, #1
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	f240 413c 	movw	r1, #1084	; 0x43c
 8001d7c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8001d80:	f44f 720d 	mov.w	r2, #564	; 0x234
 8001d84:	fb02 1204 	mla	r2, r2, r4, r1
 8001d88:	8852      	ldrh	r2, [r2, #2]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d8ec      	bhi.n	8001d68 <LCD_Clear+0x2c>
  for(y = 0; y < gLCDDriver[pLCDId].height; y++)
 8001d8e:	3701      	adds	r7, #1
 8001d90:	b2bf      	uxth	r7, r7
 8001d92:	f240 423c 	movw	r2, #1084	; 0x43c
 8001d96:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001d9a:	f44f 730d 	mov.w	r3, #564	; 0x234
 8001d9e:	fb03 2304 	mla	r3, r3, r4, r2
 8001da2:	889b      	ldrh	r3, [r3, #4]
 8001da4:	42bb      	cmp	r3, r7
 8001da6:	d901      	bls.n	8001dac <LCD_Clear+0x70>
    for (x = 0; x < gLCDDriver[pLCDId].width; x++)
 8001da8:	2300      	movs	r3, #0
 8001daa:	e7e5      	b.n	8001d78 <LCD_Clear+0x3c>

    } // End for.

  } // End for.

} // End LCD_Clear.
 8001dac:	bcf0      	pop	{r4, r5, r6, r7}
 8001dae:	4770      	bx	lr

08001db0 <LCD_Reset>:

// /////////////////////////////////////////////////////////////////////////////
void LCD_Reset(void)
{
 8001db0:	b510      	push	{r4, lr}
  DESCRIPTION:  Resets the LCDs by asserting and deasserting the Reset line.
  PARMS:        See above.
  RETURNS:      Nothing.
  */

  ARCADEIT_LCD_RST_HIGH();
 8001db2:	f44f 54e0 	mov.w	r4, #7168	; 0x1c00
 8001db6:	f2c4 0402 	movt	r4, #16386	; 0x4002
 8001dba:	6963      	ldr	r3, [r4, #20]
 8001dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dc0:	6163      	str	r3, [r4, #20]
  ArcadeIT_System_Delay(1);   // Delay 1ms
 8001dc2:	2001      	movs	r0, #1
 8001dc4:	f7fe ff90 	bl	8000ce8 <ArcadeIT_System_Delay>

  ARCADEIT_LCD_RST_LOW();
 8001dc8:	6963      	ldr	r3, [r4, #20]
 8001dca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001dce:	6163      	str	r3, [r4, #20]
  ArcadeIT_System_Delay(20);  // Delay 20ms
 8001dd0:	2014      	movs	r0, #20
 8001dd2:	f7fe ff89 	bl	8000ce8 <ArcadeIT_System_Delay>

  ARCADEIT_LCD_RST_HIGH();
 8001dd6:	6963      	ldr	r3, [r4, #20]
 8001dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ddc:	6163      	str	r3, [r4, #20]
  ArcadeIT_System_Delay(120); // Delay 120ms
 8001dde:	2078      	movs	r0, #120	; 0x78
 8001de0:	f7fe ff82 	bl	8000ce8 <ArcadeIT_System_Delay>

} // End LCD_Reset.
 8001de4:	bd10      	pop	{r4, pc}

08001de6 <LCD_Configure>:
void LCD_Configure
(
  uint8_t pLCDNumber,     // Id of the LCD to set orientation.
  uint16_t *pData
)
{
 8001de6:	b570      	push	{r4, r5, r6, lr}
 8001de8:	4606      	mov	r6, r0
 8001dea:	460d      	mov	r5, r1
  DESCRIPTION:  Initializes the LCD sending the commands sequence to set orientation.
  PARMS:        See above.
  RETURNS:      Nothing.
  */

  uint16_t lIndex = 0;
 8001dec:	2400      	movs	r4, #0

  // Select the LCD.
  while ( pData[lIndex] > 0 )
 8001dee:	e008      	b.n	8001e02 <LCD_Configure+0x1c>
  {
      switch (pData[lIndex])
      {
          case LCD_CMD_REGISTER:
              lIndex++;
 8001df0:	3401      	adds	r4, #1
 8001df2:	b2a4      	uxth	r4, r4
              LCD_Wr_Register(pLCDNumber, pData[lIndex]);
 8001df4:	f815 1014 	ldrb.w	r1, [r5, r4, lsl #1]
 8001df8:	4630      	mov	r0, r6
 8001dfa:	f7ff ff5d 	bl	8001cb8 <LCD_Wr_Register>
              ArcadeIT_System_Delay(pData[lIndex]);
          break;

      } // End switch.

      lIndex++;
 8001dfe:	3401      	adds	r4, #1
 8001e00:	b2a4      	uxth	r4, r4
  while ( pData[lIndex] > 0 )
 8001e02:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
 8001e06:	b1ab      	cbz	r3, 8001e34 <LCD_Configure+0x4e>
      switch (pData[lIndex])
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d004      	beq.n	8001e16 <LCD_Configure+0x30>
 8001e0c:	2b03      	cmp	r3, #3
 8001e0e:	d00a      	beq.n	8001e26 <LCD_Configure+0x40>
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d1f4      	bne.n	8001dfe <LCD_Configure+0x18>
 8001e14:	e7ec      	b.n	8001df0 <LCD_Configure+0xa>
              lIndex++;
 8001e16:	3401      	adds	r4, #1
 8001e18:	b2a4      	uxth	r4, r4
              LCD_Wr_Data(pLCDNumber, pData[lIndex]);
 8001e1a:	f815 1014 	ldrb.w	r1, [r5, r4, lsl #1]
 8001e1e:	4630      	mov	r0, r6
 8001e20:	f7ff ff3d 	bl	8001c9e <LCD_Wr_Data>
          break;
 8001e24:	e7eb      	b.n	8001dfe <LCD_Configure+0x18>
              lIndex++;
 8001e26:	3401      	adds	r4, #1
 8001e28:	b2a4      	uxth	r4, r4
              ArcadeIT_System_Delay(pData[lIndex]);
 8001e2a:	f835 0014 	ldrh.w	r0, [r5, r4, lsl #1]
 8001e2e:	f7fe ff5b 	bl	8000ce8 <ArcadeIT_System_Delay>
          break;
 8001e32:	e7e4      	b.n	8001dfe <LCD_Configure+0x18>

  } // End while;

} // End LCD_Configure.
 8001e34:	bd70      	pop	{r4, r5, r6, pc}

08001e36 <LCD_Parallel_Init>:
  uint16_t pLCDWidth,          // width of the LCD.
  uint16_t pLCDHeight,         // height of the LCD.
  uint8_t pOrientation,        // Orientation of the LCD: 0 Horizontal, 1: Vertical.
  uint32_t pBackgroundColor    // The Color in hex format 0x00RRGGBB.
)
{
 8001e36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	4688      	mov	r8, r1
 8001e3e:	f89d 6020 	ldrb.w	r6, [sp, #32]
  DESCRIPTION:  Initializes 23636the LCD.
  PARMS:        See above.
  RETURNS:      Nothing.
  */

  pLCDId--;
 8001e42:	3801      	subs	r0, #1
 8001e44:	b2c4      	uxtb	r4, r0

  gLCDDriver[pLCDId].id = pLCDId;
 8001e46:	f240 403c 	movw	r0, #1084	; 0x43c
 8001e4a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001e4e:	f44f 710d 	mov.w	r1, #564	; 0x234
 8001e52:	fb01 f104 	mul.w	r1, r1, r4
 8001e56:	1845      	adds	r5, r0, r1
 8001e58:	5444      	strb	r4, [r0, r1]
  gLCDDriver[pLCDId].type = pLCDType;
 8001e5a:	f885 8001 	strb.w	r8, [r5, #1]
  gLCDDriver[pLCDId].width = pLCDWidth;
 8001e5e:	806a      	strh	r2, [r5, #2]
  gLCDDriver[pLCDId].height = pLCDHeight;
 8001e60:	80ab      	strh	r3, [r5, #4]
  gLCDDriver[pLCDId].orientation = pOrientation;
 8001e62:	71ae      	strb	r6, [r5, #6]
  gLCDDriver[pLCDId].video_buffer_memory = gLCDLineBuffer;
  gLCDDriver[pLCDId].scanline = 0;
 8001e64:	2700      	movs	r7, #0
 8001e66:	842f      	strh	r7, [r5, #32]
  gLCDDriver[pLCDId].address = gDisplayAddress[pLCDId];
 8001e68:	f240 0100 	movw	r1, #0
 8001e6c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8001e70:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
 8001e74:	60a9      	str	r1, [r5, #8]

  gLCDDriver[pLCDId].video_buffer_memory = (uint8_t*)malloc(gLCDDriver[pLCDId].width * gLCDDriver[pLCDId].height);
 8001e76:	fb03 f002 	mul.w	r0, r3, r2
 8001e7a:	f003 f8c7 	bl	800500c <malloc>
 8001e7e:	61e8      	str	r0, [r5, #28]

  LCD_Configure(pLCDId, (uint16_t*)&gLCDSequence[pLCDType][pOrientation][0]);
 8001e80:	eb06 0648 	add.w	r6, r6, r8, lsl #1
 8001e84:	f247 1164 	movw	r1, #29028	; 0x7164
 8001e88:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001e8c:	eb01 2146 	add.w	r1, r1, r6, lsl #9
 8001e90:	4620      	mov	r0, r4
 8001e92:	f7ff ffa8 	bl	8001de6 <LCD_Configure>

  LCD_Area_Set(pLCDId, 0, 0, 320, 240);
 8001e96:	23f0      	movs	r3, #240	; 0xf0
 8001e98:	9300      	str	r3, [sp, #0]
 8001e9a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001e9e:	463a      	mov	r2, r7
 8001ea0:	4639      	mov	r1, r7
 8001ea2:	4620      	mov	r0, r4
 8001ea4:	f7ff ff13 	bl	8001cce <LCD_Area_Set>

  // Clear the display with the background color.
  LCD_Clear(pLCDId, pBackgroundColor);
 8001ea8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001eaa:	4620      	mov	r0, r4
 8001eac:	f7ff ff46 	bl	8001d3c <LCD_Clear>

  // ---------------------------------------------------------------------------
  // Configure the DMA Stream for fast transfer to LCD using DMA
  // if ((RCC_AHB1ENR & RCC_AHB1Periph_DMA2) == FALSE) RCC_AHB1PeriphClockCmd (RCC_AHB1Periph_DMA2, ENABLE);

  if ((RCC->AHB1ENR & RCC_AHB1Periph_DMA2D) == FALSE) RCC->AHB1ENR |= RCC_AHB1Periph_DMA2D;
 8001eb0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001eb4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8001ebe:	d107      	bne.n	8001ed0 <LCD_Parallel_Init+0x9a>
 8001ec0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001ec4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ec8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001eca:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001ece:	631a      	str	r2, [r3, #48]	; 0x30
  lNVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init (&lNVIC_InitStructure);
  DMA2D_ITConfig(DMA2D_IT_TC, ENABLE);
  */

}; // End LCD_Parallel_Init.
 8001ed0:	b002      	add	sp, #8
 8001ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001ed6 <DMA2_Stream0_IRQHandler>:

      DMA2_Stream0->CR |= DMA_SxCR_TCIE;        // enable transfer complete interrupt
      DMA2_Stream0->CR |= DMA_SxCR_EN;
    }
    */
}
 8001ed6:	4770      	bx	lr

08001ed8 <LCD_0_Backlight_Set>:
} // LCD_Active.

// /////////////////////////////////////////////////////////////////////////////
void LCD_0_Backlight_Set(uint32_t pValue)
{
  gLCDDriver[0].brightness = (pValue <= LCD_BACKLIGHT_PWM_STEPS) ? pValue : LCD_BACKLIGHT_PWM_STEPS;
 8001ed8:	2864      	cmp	r0, #100	; 0x64
 8001eda:	bf28      	it	cs
 8001edc:	2064      	movcs	r0, #100	; 0x64
 8001ede:	f240 433c 	movw	r3, #1084	; 0x43c
 8001ee2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ee6:	60d8      	str	r0, [r3, #12]

  TIM1->CCR3 = gLCDDriver[0].brightness;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001eee:	63d8      	str	r0, [r3, #60]	; 0x3c

} // End
 8001ef0:	4770      	bx	lr

08001ef2 <LCD_1_Backlight_Set>:
} // End

// /////////////////////////////////////////////////////////////////////////////
void LCD_1_Backlight_Set(uint32_t pValue)
{
  gLCDDriver[1].brightness = (pValue <= LCD_BACKLIGHT_PWM_STEPS) ? pValue : LCD_BACKLIGHT_PWM_STEPS;
 8001ef2:	2864      	cmp	r0, #100	; 0x64
 8001ef4:	bf28      	it	cs
 8001ef6:	2064      	movcs	r0, #100	; 0x64
 8001ef8:	f240 433c 	movw	r3, #1084	; 0x43c
 8001efc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001f00:	f8c3 0240 	str.w	r0, [r3, #576]	; 0x240

  TIM1->CCR4 = gLCDDriver[1].brightness;
 8001f04:	2300      	movs	r3, #0
 8001f06:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001f0a:	6418      	str	r0, [r3, #64]	; 0x40

} // End
 8001f0c:	4770      	bx	lr

08001f0e <LCD_Driver_Start>:

} // End LCD_Backlight_On

// /////////////////////////////////////////////////////////////////////////////
void LCD_Driver_Start(void)
{
 8001f0e:	b530      	push	{r4, r5, lr}
 8001f10:	b0c3      	sub	sp, #268	; 0x10c
  RETURNS:      Nothing.
  */

  char lString[256];

  LCD_Parallel_Port_Setup(LCD_1_ID | LCD_2_ID);
 8001f12:	2003      	movs	r0, #3
 8001f14:	f7ff fd5e 	bl	80019d4 <LCD_Parallel_Port_Setup>

  // Hardware Reset of the LCDs.
  LCD_Reset();
 8001f18:	f7ff ff4a 	bl	8001db0 <LCD_Reset>

  // Initialize the LCDs.
  LCD_Parallel_Init(LCD_1_ID, ARCADEIT_A100_LCD, ARCADEIT_A100_LCD_WIDTH, ARCADEIT_A100_LCD_HEIGHT, HORIZONTAL, 0x000000);
 8001f1c:	2400      	movs	r4, #0
 8001f1e:	9401      	str	r4, [sp, #4]
 8001f20:	9400      	str	r4, [sp, #0]
 8001f22:	23f0      	movs	r3, #240	; 0xf0
 8001f24:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f28:	4621      	mov	r1, r4
 8001f2a:	2001      	movs	r0, #1
 8001f2c:	f7ff ff83 	bl	8001e36 <LCD_Parallel_Init>
  LCD_Parallel_Init(LCD_2_ID, ARCADEIT_A100_LCD, ARCADEIT_A100_LCD_WIDTH, ARCADEIT_A100_LCD_HEIGHT, HORIZONTAL, 0x000000);
 8001f30:	9401      	str	r4, [sp, #4]
 8001f32:	9400      	str	r4, [sp, #0]
 8001f34:	23f0      	movs	r3, #240	; 0xf0
 8001f36:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f3a:	4621      	mov	r1, r4
 8001f3c:	2002      	movs	r0, #2
 8001f3e:	f7ff ff7a 	bl	8001e36 <LCD_Parallel_Init>
    //ArcadeIT_TGA_Load(1, gDisplayAddress[1], gLCDDriver[1].boot_image, -1, FALSE, TO_LCD);
    //ArcadeIT_TGA_Load(1, gDisplayAddress[1], &EmulatorScreen_Pacman[1], -1, TRUE, TO_LCD);
    //ArcadeIT_TGA_Load_LCD(1, 0, EmulatorScreen_Pacman, -1);
  } // End if.

  if (gDevices & ARCADEIT_DEVICE_SERIAL)
 8001f42:	f240 2308 	movw	r3, #520	; 0x208
 8001f46:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001f50:	d101      	bne.n	8001f56 <LCD_Driver_Start+0x48>
    sprintf(lString, TEXT_LCD_INITED);
    ArcadeIT_Serial_Port_String_Send(lString);

  } // End if.

} // End LCD_Driver_Init.
 8001f52:	b043      	add	sp, #268	; 0x10c
 8001f54:	bd30      	pop	{r4, r5, pc}
    sprintf(lString, TEXT_LCD_INITED);
 8001f56:	ad02      	add	r5, sp, #8
 8001f58:	f247 1434 	movw	r4, #28980	; 0x7134
 8001f5c:	f6c0 0400 	movt	r4, #2048	; 0x800
 8001f60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f64:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f68:	f845 0b04 	str.w	r0, [r5], #4
 8001f6c:	7029      	strb	r1, [r5, #0]
    ArcadeIT_Serial_Port_String_Send(lString);
 8001f6e:	a802      	add	r0, sp, #8
 8001f70:	f000 fb90 	bl	8002694 <ArcadeIT_Serial_Port_String_Send>
} // End LCD_Driver_Init.
 8001f74:	e7ed      	b.n	8001f52 <LCD_Driver_Start+0x44>

08001f76 <ArcadeIT_RTC_ReadBackupRegister>:
// -----------------------------------------------------------------------------
uint32_t ArcadeIT_RTC_ReadBackupRegister
(
    uint32_t RTC_BKP_DR // RTC Backup data Register number.
)
{
 8001f76:	b082      	sub	sp, #8
   * DESCRIPTION: Reads data from the specified RTC Backup data Register.
   * PARAMETERS:  See above.
   * RETURNS:     Nothing.
   */

  __IO uint32_t tmp = 0;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	9301      	str	r3, [sp, #4]

  tmp = RTC_BASE + 0x50;
 8001f7c:	f642 0350 	movw	r3, #10320	; 0x2850
 8001f80:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001f84:	9301      	str	r3, [sp, #4]
  tmp += (RTC_BKP_DR * 4);
 8001f86:	9b01      	ldr	r3, [sp, #4]
 8001f88:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001f8c:	9001      	str	r0, [sp, #4]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8001f8e:	9b01      	ldr	r3, [sp, #4]
 8001f90:	6818      	ldr	r0, [r3, #0]

} // end ArcadeIT_RTC_ReadBackupRegister
 8001f92:	b002      	add	sp, #8
 8001f94:	4770      	bx	lr

08001f96 <ArcadeIT_RTC_WriteBackupRegister>:
// -----------------------------------------------------------------------------
void ArcadeIT_RTC_WriteBackupRegister(
    uint32_t RTC_BKP_DR, // RTC Backup data Register number.
    uint32_t Data        // Data to be written in the specified RTC Backup data register.
)
{
 8001f96:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	9301      	str	r3, [sp, #4]

  tmp = RTC_BASE + 0x50;
 8001f9c:	f642 0350 	movw	r3, #10320	; 0x2850
 8001fa0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001fa4:	9301      	str	r3, [sp, #4]
  tmp += (RTC_BKP_DR * 4);
 8001fa6:	9b01      	ldr	r3, [sp, #4]
 8001fa8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001fac:	9001      	str	r0, [sp, #4]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8001fae:	9b01      	ldr	r3, [sp, #4]
 8001fb0:	6019      	str	r1, [r3, #0]

} // end RTC_WriteBackupRegister
 8001fb2:	b002      	add	sp, #8
 8001fb4:	4770      	bx	lr

08001fb6 <ArcadeIT_RCC_LSEConfig>:
  * RETURNS:     Nothing.
  */

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8001fb6:	f643 0370 	movw	r3, #14448	; 0x3870
 8001fba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8001fc2:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8001fc4:	2801      	cmp	r0, #1
 8001fc6:	d003      	beq.n	8001fd0 <ArcadeIT_RCC_LSEConfig+0x1a>
 8001fc8:	2804      	cmp	r0, #4
 8001fca:	d008      	beq.n	8001fde <ArcadeIT_RCC_LSEConfig+0x28>

  } // end switch

  return 0;

} // end ArcadeIT_RCC_LSEConfig
 8001fcc:	2000      	movs	r0, #0
 8001fce:	4770      	bx	lr
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 8001fd0:	f643 0370 	movw	r3, #14448	; 0x3870
 8001fd4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001fd8:	2201      	movs	r2, #1
 8001fda:	701a      	strb	r2, [r3, #0]
      break;
 8001fdc:	e7f6      	b.n	8001fcc <ArcadeIT_RCC_LSEConfig+0x16>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8001fde:	f643 0370 	movw	r3, #14448	; 0x3870
 8001fe2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001fe6:	2205      	movs	r2, #5
 8001fe8:	701a      	strb	r2, [r3, #0]
      break;
 8001fea:	e7ef      	b.n	8001fcc <ArcadeIT_RCC_LSEConfig+0x16>

08001fec <ArcadeIT_RCC_GetFlagStatus>:
  uint32_t tmp = 0;
  uint32_t statusreg = 0;
  FlagStatus bitstatus = RESET;

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8001fec:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d00f      	beq.n	8002012 <ArcadeIT_RCC_GetFlagStatus+0x26>
    statusreg = RCC->CR;
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d013      	beq.n	800201e <ArcadeIT_RCC_GetFlagStatus+0x32>
    statusreg = RCC->BDCR;
  else                        /* The flag to check is in CSR register */
    statusreg = RCC->CSR;
 8001ff6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001ffa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ffe:	6f5b      	ldr	r3, [r3, #116]	; 0x74

  /* Get the flag position */
  tmp = RCC_FLAG & ((uint8_t)0x1F);
 8002000:	f000 001f 	and.w	r0, r0, #31
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8002004:	fa23 f000 	lsr.w	r0, r3, r0
 8002008:	f010 0f01 	tst.w	r0, #1
 800200c:	d10d      	bne.n	800202a <ArcadeIT_RCC_GetFlagStatus+0x3e>
    bitstatus = SET;
  else
    bitstatus = RESET;
 800200e:	2000      	movs	r0, #0

  /* Return the flag status */
  return bitstatus;

} // end ArcadeIT_RCC_GetFlagStatus
 8002010:	4770      	bx	lr
    statusreg = RCC->CR;
 8002012:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002016:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	e7f0      	b.n	8002000 <ArcadeIT_RCC_GetFlagStatus+0x14>
    statusreg = RCC->BDCR;
 800201e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002022:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002028:	e7ea      	b.n	8002000 <ArcadeIT_RCC_GetFlagStatus+0x14>
    bitstatus = SET;
 800202a:	2001      	movs	r0, #1
 800202c:	4770      	bx	lr

0800202e <ArcadeIT_RTC_WaitForSynchro>:

// -----------------------------------------------------------------------------
ErrorStatus ArcadeIT_RTC_WaitForSynchro(void)
{
 800202e:	b082      	sub	sp, #8
  *              synchronized with RTC APB clock.
  * PARAMETERS:  None.
  * RETURNS:     A Status.
  */

  __IO uint32_t synchrocounter = 0;
 8002030:	2300      	movs	r3, #0
 8002032:	9301      	str	r3, [sp, #4]
  ErrorStatus status = ERROR;
  uint32_t synchrostatus = 0x00;

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8002034:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002038:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800203c:	22ca      	movs	r2, #202	; 0xca
 800203e:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8002040:	2253      	movs	r2, #83	; 0x53
 8002042:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear RSF flag */
  RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 8002044:	68da      	ldr	r2, [r3, #12]
 8002046:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800204a:	60da      	str	r2, [r3, #12]

  /* Wait the registers to be synchronised */
  do
  {
    synchrostatus = RTC->ISR & RTC_ISR_RSF;
 800204c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002050:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002054:	68da      	ldr	r2, [r3, #12]
 8002056:	f002 0220 	and.w	r2, r2, #32
    synchrocounter++;
 800205a:	9b01      	ldr	r3, [sp, #4]
 800205c:	3301      	adds	r3, #1
 800205e:	9301      	str	r3, [sp, #4]

  } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 8002060:	9b01      	ldr	r3, [sp, #4]
 8002062:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002066:	d001      	beq.n	800206c <ArcadeIT_RTC_WaitForSynchro+0x3e>
 8002068:	2a00      	cmp	r2, #0
 800206a:	d0ef      	beq.n	800204c <ArcadeIT_RTC_WaitForSynchro+0x1e>

  if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 800206c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002070:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	f013 0f20 	tst.w	r3, #32
 800207a:	d108      	bne.n	800208e <ArcadeIT_RTC_WaitForSynchro+0x60>
    status = SUCCESS;
  else
    status = ERROR;
 800207c:	2001      	movs	r0, #1

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 800207e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002082:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002086:	22ff      	movs	r2, #255	; 0xff
 8002088:	625a      	str	r2, [r3, #36]	; 0x24

  return (status);

} // end ArcadeIT_RTC_WaitForSynchro
 800208a:	b002      	add	sp, #8
 800208c:	4770      	bx	lr
    status = SUCCESS;
 800208e:	2000      	movs	r0, #0
 8002090:	e7f5      	b.n	800207e <ArcadeIT_RTC_WaitForSynchro+0x50>

08002092 <ArcadeIT_RTC_EnterInitMode>:

// -----------------------------------------------------------------------------
ErrorStatus ArcadeIT_RTC_EnterInitMode(void)
{
 8002092:	b082      	sub	sp, #8
  * DESCRIPTION: Enters the RTC Initialization mode.
  * PARAMETERS:  None.
  * RETURNS:     An ErrorStatus.
  */

  __IO uint32_t initcounter = 0x00;
 8002094:	2300      	movs	r3, #0
 8002096:	9301      	str	r3, [sp, #4]
  ErrorStatus status = ERROR;
  uint32_t initstatus = 0x00;

  /* Check if the Initialization mode is set */
  if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002098:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800209c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80020a6:	d122      	bne.n	80020ee <ArcadeIT_RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    RTC->ISR = (uint32_t)RTC_INIT_MASK;
 80020a8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80020ac:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80020b0:	f04f 32ff 	mov.w	r2, #4294967295
 80020b4:	60da      	str	r2, [r3, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    do
    {
      initstatus = RTC->ISR & RTC_ISR_INITF;
 80020b6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80020ba:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80020be:	68da      	ldr	r2, [r3, #12]
 80020c0:	f002 0240 	and.w	r2, r2, #64	; 0x40
      initcounter++;
 80020c4:	9b01      	ldr	r3, [sp, #4]
 80020c6:	3301      	adds	r3, #1
 80020c8:	9301      	str	r3, [sp, #4]

    } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 80020ca:	9b01      	ldr	r3, [sp, #4]
 80020cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020d0:	d001      	beq.n	80020d6 <ArcadeIT_RTC_EnterInitMode+0x44>
 80020d2:	2a00      	cmp	r2, #0
 80020d4:	d0ef      	beq.n	80020b6 <ArcadeIT_RTC_EnterInitMode+0x24>

    if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 80020d6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80020da:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80020e4:	d101      	bne.n	80020ea <ArcadeIT_RTC_EnterInitMode+0x58>
      status = SUCCESS;
    else
      status = ERROR;
 80020e6:	2001      	movs	r0, #1
 80020e8:	e002      	b.n	80020f0 <ArcadeIT_RTC_EnterInitMode+0x5e>
      status = SUCCESS;
 80020ea:	2000      	movs	r0, #0
 80020ec:	e000      	b.n	80020f0 <ArcadeIT_RTC_EnterInitMode+0x5e>
  }
  else
    status = SUCCESS;
 80020ee:	2000      	movs	r0, #0

  return (status);

} // end ArcadeIT_RTC_EnterInitMode
 80020f0:	b002      	add	sp, #8
 80020f2:	4770      	bx	lr

080020f4 <ArcadeIT_RTC_Init>:

// -----------------------------------------------------------------------------
void ArcadeIT_RTC_Init(void)
{
 80020f4:	b508      	push	{r3, lr}
  * DESCRIPTION: This function modify the string provided to upper case.
  * PARAMETERS:  None.
  * RETURNS:     Nothing.
  */

  if (ArcadeIT_RTC_ReadBackupRegister(RTC_BKP_DR0) != FIRST_DATA)
 80020f6:	2000      	movs	r0, #0
 80020f8:	f7ff ff3d 	bl	8001f76 <ArcadeIT_RTC_ReadBackupRegister>
 80020fc:	f243 23f2 	movw	r3, #13042	; 0x32f2
 8002100:	4298      	cmp	r0, r3
 8002102:	d073      	beq.n	80021ec <ArcadeIT_RTC_Init+0xf8>
  {
    // Enable the PWR clock if not yet.
    if ((RCC->APB1ENR & RCC_APB1Periph_PWR) == FALSE) RCC->APB1ENR |= RCC_APB1Periph_PWR;
 8002104:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002108:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002112:	d107      	bne.n	8002124 <ArcadeIT_RTC_Init+0x30>
 8002114:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002118:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800211c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800211e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002122:	641a      	str	r2, [r3, #64]	; 0x40

    // Allow access to RTC.
    *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002124:	2320      	movs	r3, #32
 8002126:	f2c4 230e 	movt	r3, #16910	; 0x420e
 800212a:	2001      	movs	r0, #1
 800212c:	6018      	str	r0, [r3, #0]
    RTC->WPR = 0xCA;
 800212e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002132:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002136:	22ca      	movs	r2, #202	; 0xca
 8002138:	625a      	str	r2, [r3, #36]	; 0x24
    RTC->WPR = 0x53;
 800213a:	2253      	movs	r2, #83	; 0x53
 800213c:	625a      	str	r2, [r3, #36]	; 0x24

    // Reset RTC Domain.
    *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)(ENABLE);
 800213e:	f44f 6364 	mov.w	r3, #3648	; 0xe40
 8002142:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8002146:	6018      	str	r0, [r3, #0]
    *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)(DISABLE);
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]

    // Enable the LSE OSC.
    *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)DISABLE;
 800214c:	f44f 6368 	mov.w	r3, #3712	; 0xe80
 8002150:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8002154:	601a      	str	r2, [r3, #0]
    ArcadeIT_RCC_LSEConfig(RCC_LSE_ON);
 8002156:	f7ff ff2e 	bl	8001fb6 <ArcadeIT_RCC_LSEConfig>

    // Wait till LSE is ready.
    while(ArcadeIT_RCC_GetFlagStatus(RCC_FLAG_LSERDY) == RESET) {};
 800215a:	2041      	movs	r0, #65	; 0x41
 800215c:	f7ff ff46 	bl	8001fec <ArcadeIT_RCC_GetFlagStatus>
 8002160:	2800      	cmp	r0, #0
 8002162:	d0fa      	beq.n	800215a <ArcadeIT_RTC_Init+0x66>
      /* Store the new value */
      RCC->CFGR = tmpreg;
    }

    /* Select the RTC clock source */
    RCC->BDCR |= (RCC_RTCCLKSource_LSE & 0x00000FFF);
 8002164:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002168:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800216c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800216e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002172:	671a      	str	r2, [r3, #112]	; 0x70

    // Enable the RTC Clock.
    *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)ENABLE;
 8002174:	f640 633c 	movw	r3, #3644	; 0xe3c
 8002178:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800217c:	2201      	movs	r2, #1
 800217e:	601a      	str	r2, [r3, #0]

    // Wait for RTC APB registers synchronization.
    ArcadeIT_RTC_WaitForSynchro();
 8002180:	f7ff ff55 	bl	800202e <ArcadeIT_RTC_WaitForSynchro>

    /* Disable the write protection for RTC registers */
    RTC->WPR = 0xCA;
 8002184:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002188:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800218c:	22ca      	movs	r2, #202	; 0xca
 800218e:	625a      	str	r2, [r3, #36]	; 0x24
    RTC->WPR = 0x53;
 8002190:	2253      	movs	r2, #83	; 0x53
 8002192:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (ArcadeIT_RTC_EnterInitMode() != ERROR)
 8002194:	f7ff ff7d 	bl	8002092 <ArcadeIT_RTC_EnterInitMode>
 8002198:	2801      	cmp	r0, #1
 800219a:	d013      	beq.n	80021c4 <ArcadeIT_RTC_Init+0xd0>
    {
      /* Clear RTC CR FMT Bit */
      RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 800219c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80021a0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80021a4:	689a      	ldr	r2, [r3, #8]
 80021a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021aa:	609a      	str	r2, [r3, #8]

      /* Set RTC_CR register */
      RTC->CR |=  ((uint32_t)(RTC_HourFormat_24));
 80021ac:	689a      	ldr	r2, [r3, #8]
 80021ae:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      RTC->PRER = (uint32_t)(255);
 80021b0:	22ff      	movs	r2, #255	; 0xff
 80021b2:	611a      	str	r2, [r3, #16]
      RTC->PRER |= (uint32_t)(127 << 16);
 80021b4:	691a      	ldr	r2, [r3, #16]
 80021b6:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
 80021ba:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      RTC->ISR &= (uint32_t)~RTC_ISR_INIT;
 80021bc:	68da      	ldr	r2, [r3, #12]
 80021be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021c2:	60da      	str	r2, [r3, #12]

    } // end if

    /* Enable the write protection for RTC registers */
    RTC->WPR = 0xFF;
 80021c4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80021c8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80021cc:	22ff      	movs	r2, #255	; 0xff
 80021ce:	625a      	str	r2, [r3, #36]	; 0x24

    // Indicator for the RTC configuration.
    ArcadeIT_RTC_WriteBackupRegister(RTC_BKP_DR0, FIRST_DATA);
 80021d0:	f243 21f2 	movw	r1, #13042	; 0x32f2
 80021d4:	2000      	movs	r0, #0
 80021d6:	f7ff fede 	bl	8001f96 <ArcadeIT_RTC_WriteBackupRegister>
    // Enable BKPSRAM Clock.
    RCC->AHB1ENR |= RCC_AHB1Periph_BKPSRAM;

  } // End if.

  if (gDevices & ARCADEIT_DEVICE_SERIAL)
 80021da:	f240 2308 	movw	r3, #520	; 0x208
 80021de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80021e8:	d10b      	bne.n	8002202 <ArcadeIT_RTC_Init+0x10e>
  {
    ArcadeIT_Serial_Port_String_Send(TEXT_RTC_INITED);

  } // End if.

} // End ArcadeIT_RTC_Init.
 80021ea:	bd08      	pop	{r3, pc}
    ArcadeIT_RTC_WaitForSynchro();
 80021ec:	f7ff ff1f 	bl	800202e <ArcadeIT_RTC_WaitForSynchro>
    RCC->AHB1ENR |= RCC_AHB1Periph_BKPSRAM;
 80021f0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80021f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80021f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021fa:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80021fe:	631a      	str	r2, [r3, #48]	; 0x30
 8002200:	e7eb      	b.n	80021da <ArcadeIT_RTC_Init+0xe6>
    ArcadeIT_Serial_Port_String_Send(TEXT_RTC_INITED);
 8002202:	f248 1064 	movw	r0, #33124	; 0x8164
 8002206:	f6c0 0000 	movt	r0, #2048	; 0x800
 800220a:	f000 fa43 	bl	8002694 <ArcadeIT_Serial_Port_String_Send>
} // End ArcadeIT_RTC_Init.
 800220e:	e7ec      	b.n	80021ea <ArcadeIT_RTC_Init+0xf6>

08002210 <ArcadeIT_RTC_TimeDate_Get>:
  return status;
}

// -----------------------------------------------------------------------------
rtc_time_t ArcadeIT_RTC_TimeDate_Get(void)
{
 8002210:	b410      	push	{r4}

  rtc_time_t lTempTime;

  uint32_t tmpreg;

  tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK);
 8002212:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8002216:	f2c4 0100 	movt	r1, #16384	; 0x4000
 800221a:	680b      	ldr	r3, [r1, #0]
 800221c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002220:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  lTempTime.hour = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8002224:	f3c3 4405 	ubfx	r4, r3, #16, #6
 8002228:	70c4      	strb	r4, [r0, #3]
  lTempTime.min = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 800222a:	f3c3 2406 	ubfx	r4, r3, #8, #7
 800222e:	7104      	strb	r4, [r0, #4]
  lTempTime.sec = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002230:	7143      	strb	r3, [r0, #5]

  tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK);
 8002232:	684b      	ldr	r3, [r1, #4]
 8002234:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002238:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  lTempTime.month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800223c:	f3c3 2104 	ubfx	r1, r3, #8, #5
 8002240:	7001      	strb	r1, [r0, #0]
  lTempTime.mday = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002242:	7043      	strb	r3, [r0, #1]
  lTempTime.year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8002244:	0c1b      	lsrs	r3, r3, #16
 8002246:	7083      	strb	r3, [r0, #2]

  return lTempTime;

} // End ArcadeIT_RTC_TimeDate_Get.
 8002248:	f85d 4b04 	ldr.w	r4, [sp], #4
 800224c:	4770      	bx	lr

0800224e <ArcadeIT_SPI_Port_RW_Byte>:
  // The read byte.
  uint8_t lParameter;
  uint32_t lTimeout;

  //Wait until the transmit buffer is empty.
  lTimeout = SYS_SD_SPI_TIMEOUT;
 800224e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4

  while ((SYS_SD_SPI_PORT->SR & SPI_I2S_FLAG_TXE) == RESET)
 8002252:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002256:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f013 0f02 	tst.w	r3, #2
 8002260:	d103      	bne.n	800226a <ArcadeIT_SPI_Port_RW_Byte+0x1c>
  {
    if (lTimeout-- == 0) break;
 8002262:	1e53      	subs	r3, r2, #1
 8002264:	b10a      	cbz	r2, 800226a <ArcadeIT_SPI_Port_RW_Byte+0x1c>
 8002266:	461a      	mov	r2, r3
 8002268:	e7f3      	b.n	8002252 <ArcadeIT_SPI_Port_RW_Byte+0x4>
  };

  // Send the byte.
  SYS_SD_SPI_PORT->DR = pData;
 800226a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800226e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002272:	60d8      	str	r0, [r3, #12]

  // Wait to receive a byte.
  lTimeout = SYS_SD_SPI_TIMEOUT;
 8002274:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  while ((SYS_SD_SPI_PORT->SR & SPI_I2S_FLAG_RXNE) == RESET)
 8002278:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800227c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f013 0f01 	tst.w	r3, #1
 8002286:	d103      	bne.n	8002290 <ArcadeIT_SPI_Port_RW_Byte+0x42>
  {
    if (lTimeout-- == 0) break;
 8002288:	1e53      	subs	r3, r2, #1
 800228a:	b10a      	cbz	r2, 8002290 <ArcadeIT_SPI_Port_RW_Byte+0x42>
 800228c:	461a      	mov	r2, r3
 800228e:	e7f3      	b.n	8002278 <ArcadeIT_SPI_Port_RW_Byte+0x2a>
  };

  // Return the byte read from the SPI bus.
  lParameter = SYS_SD_SPI_PORT->DR;
 8002290:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002294:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002298:	68d8      	ldr	r0, [r3, #12]

  return lParameter;

} // End ArcadeIT_SPI_Port_RW_Byte.
 800229a:	b2c0      	uxtb	r0, r0
 800229c:	4770      	bx	lr

0800229e <ArcadeIT_SPI_Port_Read_Buffer>:
void ArcadeIT_SPI_Port_Read_Buffer
(
  uint8_t *pBuffer,       // Pointer to data buffer.
  uint32_t pNumberOfBytes // Number of bytes to receive.
)
{
 800229e:	b570      	push	{r4, r5, r6, lr}
 80022a0:	4606      	mov	r6, r0
 80022a2:	460d      	mov	r5, r1
  * RETURNS:     Nothing.
  */

  uint8_t lData;

  for (uint32_t lBytes = 0; lBytes < pNumberOfBytes; lBytes++)
 80022a4:	2400      	movs	r4, #0
 80022a6:	e004      	b.n	80022b2 <ArcadeIT_SPI_Port_Read_Buffer+0x14>
  {
    // Receive the data block into buffer.
    lData = ArcadeIT_SPI_Port_RW_Byte(ARCADEIT_DUMMY_BYTE);
 80022a8:	20ff      	movs	r0, #255	; 0xff
 80022aa:	f7ff ffd0 	bl	800224e <ArcadeIT_SPI_Port_RW_Byte>
    pBuffer[lBytes] = lData;
 80022ae:	5530      	strb	r0, [r6, r4]
  for (uint32_t lBytes = 0; lBytes < pNumberOfBytes; lBytes++)
 80022b0:	3401      	adds	r4, #1
 80022b2:	42ac      	cmp	r4, r5
 80022b4:	d3f8      	bcc.n	80022a8 <ArcadeIT_SPI_Port_Read_Buffer+0xa>

  } // End for.

} // End ArcadeIT_SPI_Port_Read_Buffer.
 80022b6:	bd70      	pop	{r4, r5, r6, pc}

080022b8 <ArcadeIT_SPI_Port_Write_Buffer>:
void ArcadeIT_SPI_Port_Write_Buffer
(
  uint8_t *pBuffer,       // Pointer to data buffer.
  uint32_t pNumberOfBytes // Number of bytes to send.
)
{
 80022b8:	b570      	push	{r4, r5, r6, lr}
 80022ba:	4606      	mov	r6, r0
 80022bc:	460d      	mov	r5, r1
  * DESCRIPTION: This function is used to write a block of memory to the SPI port.
  * PARAMETERS:  See above.
  * RETURNS:     Nothing.
  */

  for (uint32_t lBytes = 0; lBytes < pNumberOfBytes; lBytes++)
 80022be:	2400      	movs	r4, #0
 80022c0:	e003      	b.n	80022ca <ArcadeIT_SPI_Port_Write_Buffer+0x12>
  {
    // Sends the data block to the SPI.
    ArcadeIT_SPI_Port_RW_Byte(pBuffer[lBytes]);
 80022c2:	5d30      	ldrb	r0, [r6, r4]
 80022c4:	f7ff ffc3 	bl	800224e <ArcadeIT_SPI_Port_RW_Byte>
  for (uint32_t lBytes = 0; lBytes < pNumberOfBytes; lBytes++)
 80022c8:	3401      	adds	r4, #1
 80022ca:	42ac      	cmp	r4, r5
 80022cc:	d3f9      	bcc.n	80022c2 <ArcadeIT_SPI_Port_Write_Buffer+0xa>

  } // End for.

} // End ArcadeIT_SPI_Port_Write_Buffer.
 80022ce:	bd70      	pop	{r4, r5, r6, pc}

080022d0 <ArcadeIT_SPI_Port_Init>:

// /////////////////////////////////////////////////////////////////////////////
int ArcadeIT_SPI_Port_Init (
  uint16_t pClock // the clock frequency to set the SPI port
  )
{
 80022d0:	b508      	push	{r3, lr}
   * PARAMETERS:  None.
   * RETURNS:     Nothing.
   */

  // Enable GPIOs used by the SPI.
  if ((RCC->AHB1ENR & RCC_AHB1Periph_GPIOA) == FALSE) RCC->AHB1ENR |= RCC_AHB1Periph_GPIOA;
 80022d2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80022d6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80022da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022dc:	f013 0f01 	tst.w	r3, #1
 80022e0:	d107      	bne.n	80022f2 <ArcadeIT_SPI_Port_Init+0x22>
 80022e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80022e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80022ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022ec:	f042 0201 	orr.w	r2, r2, #1
 80022f0:	631a      	str	r2, [r3, #48]	; 0x30
  if ((RCC->AHB1ENR & RCC_AHB1Periph_GPIOC) == FALSE) RCC->AHB1ENR |= RCC_AHB1Periph_GPIOC;
 80022f2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80022f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80022fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fc:	f013 0f04 	tst.w	r3, #4
 8002300:	d107      	bne.n	8002312 <ArcadeIT_SPI_Port_Init+0x42>
 8002302:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002306:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800230a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800230c:	f042 0204 	orr.w	r2, r2, #4
 8002310:	631a      	str	r2, [r3, #48]	; 0x30
  if ((RCC->AHB1ENR & RCC_AHB1Periph_GPIOD) == FALSE) RCC->AHB1ENR |= RCC_AHB1Periph_GPIOD;
 8002312:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002316:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800231a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231c:	f013 0f08 	tst.w	r3, #8
 8002320:	d107      	bne.n	8002332 <ArcadeIT_SPI_Port_Init+0x62>
 8002322:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002326:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800232a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800232c:	f042 0208 	orr.w	r2, r2, #8
 8002330:	631a      	str	r2, [r3, #48]	; 0x30
  if ((RCC->APB2ENR & RCC_APB2Periph_SPI1) == FALSE) RCC->APB2ENR |= RCC_APB2Periph_SPI1;
 8002332:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002336:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800233a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002340:	d107      	bne.n	8002352 <ArcadeIT_SPI_Port_Init+0x82>
 8002342:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002346:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800234a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800234c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002350:	645a      	str	r2, [r3, #68]	; 0x44
  uint32_t lPinPosition;

  // Configure the output line SCK as alternate function.
  lPinPosition = (SYS_SD_SPI_SCK_PIN_NO * 2);

  SYS_SD_SPI_SCK_PER->MODER   &= ~GPIO_MODER_MODER5;
 8002352:	2300      	movs	r3, #0
 8002354:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800235e:	601a      	str	r2, [r3, #0]
  SYS_SD_SPI_SCK_PER->MODER   |= (((uint32_t)GPIO_Mode_AF) << lPinPosition);
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002366:	601a      	str	r2, [r3, #0]
  SYS_SD_SPI_SCK_PER->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR5;
 8002368:	689a      	ldr	r2, [r3, #8]
 800236a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800236e:	609a      	str	r2, [r3, #8]
  SYS_SD_SPI_SCK_PER->OSPEEDR |= ((uint32_t)(GPIO_Speed_100MHz) << lPinPosition);
 8002370:	689a      	ldr	r2, [r3, #8]
 8002372:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
 8002376:	609a      	str	r2, [r3, #8]
  SYS_SD_SPI_SCK_PER->OTYPER  &= ~GPIO_OTYPER_OT_5;
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	f022 0220 	bic.w	r2, r2, #32
 800237e:	605a      	str	r2, [r3, #4]
  SYS_SD_SPI_SCK_PER->OTYPER  |= (uint16_t)(GPIO_OType_PP << SYS_SD_SPI_SCK_PIN_NO);
 8002380:	685a      	ldr	r2, [r3, #4]
 8002382:	605a      	str	r2, [r3, #4]
  SYS_SD_SPI_SCK_PER->PUPDR   &= ~GPIO_PUPDR_PUPDR5;
 8002384:	68da      	ldr	r2, [r3, #12]
 8002386:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800238a:	60da      	str	r2, [r3, #12]
  SYS_SD_SPI_SCK_PER->PUPDR   |= (((uint32_t)GPIO_PuPd_DOWN) << lPinPosition);
 800238c:	68da      	ldr	r2, [r3, #12]
 800238e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002392:	60da      	str	r2, [r3, #12]

  SYS_SD_SPI_SCK_PER->AFR[0]  &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)SYS_SD_SPI_SCK_PIN_NO & (uint32_t)0x07) * 4));
 8002394:	6a1a      	ldr	r2, [r3, #32]
 8002396:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800239a:	621a      	str	r2, [r3, #32]
  SYS_SD_SPI_SCK_PER->AFR[0]  |= ((uint32_t)(SYS_SD_SPI_AF) << ((uint32_t)((uint32_t)SYS_SD_SPI_SCK_PIN_NO & (uint32_t)0x07) * 4));
 800239c:	6a1a      	ldr	r2, [r3, #32]
 800239e:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80023a2:	621a      	str	r2, [r3, #32]

  // Configure the output line MOSI as alternate function.
  lPinPosition = (SYS_SD_SPI_MOSI_PIN_NO * 2);

  SYS_SD_SPI_MOSI_PER->MODER   &= ~GPIO_MODER_MODER7;
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80023aa:	601a      	str	r2, [r3, #0]
  SYS_SD_SPI_MOSI_PER->MODER   |= (((uint32_t)GPIO_Mode_AF) << lPinPosition);
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023b2:	601a      	str	r2, [r3, #0]
  SYS_SD_SPI_MOSI_PER->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR7;
 80023b4:	689a      	ldr	r2, [r3, #8]
 80023b6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80023ba:	609a      	str	r2, [r3, #8]
  SYS_SD_SPI_MOSI_PER->OSPEEDR |= ((uint32_t)(GPIO_Speed_100MHz) << lPinPosition);
 80023bc:	689a      	ldr	r2, [r3, #8]
 80023be:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80023c2:	609a      	str	r2, [r3, #8]
  SYS_SD_SPI_MOSI_PER->OTYPER  &= ~GPIO_OTYPER_OT_7;
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023ca:	605a      	str	r2, [r3, #4]
  SYS_SD_SPI_MOSI_PER->OTYPER  |= (uint16_t)(GPIO_OType_PP << SYS_SD_SPI_MOSI_PIN_NO);
 80023cc:	685a      	ldr	r2, [r3, #4]
 80023ce:	605a      	str	r2, [r3, #4]
  SYS_SD_SPI_MOSI_PER->PUPDR   &= ~GPIO_PUPDR_PUPDR7;
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80023d6:	60da      	str	r2, [r3, #12]
  SYS_SD_SPI_MOSI_PER->PUPDR   |= (((uint32_t)GPIO_PuPd_DOWN) << lPinPosition);
 80023d8:	68da      	ldr	r2, [r3, #12]
 80023da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023de:	60da      	str	r2, [r3, #12]

  SYS_SD_SPI_MOSI_PER->AFR[0]  &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)SYS_SD_SPI_MOSI_PIN_NO & (uint32_t)0x07) * 4));
 80023e0:	6a1a      	ldr	r2, [r3, #32]
 80023e2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80023e6:	621a      	str	r2, [r3, #32]
  SYS_SD_SPI_MOSI_PER->AFR[0]  |= ((uint32_t)(SYS_SD_SPI_AF) << ((uint32_t)((uint32_t)SYS_SD_SPI_MOSI_PIN_NO & (uint32_t)0x07) * 4));
 80023e8:	6a1a      	ldr	r2, [r3, #32]
 80023ea:	f042 42a0 	orr.w	r2, r2, #1342177280	; 0x50000000
 80023ee:	621a      	str	r2, [r3, #32]

  // Configure the output line MISO as alternate function.
  lPinPosition = (SYS_SD_SPI_MISO_PIN_NO * 2);

  SYS_SD_SPI_MISO_PER->MODER   &= ~GPIO_MODER_MODER6;
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80023f6:	601a      	str	r2, [r3, #0]
  SYS_SD_SPI_MISO_PER->MODER   |= (((uint32_t)GPIO_Mode_AF) << lPinPosition);
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023fe:	601a      	str	r2, [r3, #0]
  SYS_SD_SPI_MISO_PER->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR6;
 8002400:	689a      	ldr	r2, [r3, #8]
 8002402:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002406:	609a      	str	r2, [r3, #8]
  SYS_SD_SPI_MISO_PER->OSPEEDR |= ((uint32_t)(GPIO_Speed_100MHz) << lPinPosition);
 8002408:	689a      	ldr	r2, [r3, #8]
 800240a:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 800240e:	609a      	str	r2, [r3, #8]
  SYS_SD_SPI_MISO_PER->OTYPER  &= ~GPIO_OTYPER_OT_6;
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002416:	605a      	str	r2, [r3, #4]
  SYS_SD_SPI_MISO_PER->OTYPER  |= (uint16_t)(GPIO_OType_PP << SYS_SD_SPI_MISO_PIN_NO);
 8002418:	685a      	ldr	r2, [r3, #4]
 800241a:	605a      	str	r2, [r3, #4]
  SYS_SD_SPI_MISO_PER->PUPDR   &= ~GPIO_PUPDR_PUPDR6;
 800241c:	68da      	ldr	r2, [r3, #12]
 800241e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002422:	60da      	str	r2, [r3, #12]
  SYS_SD_SPI_MISO_PER->PUPDR   |= (((uint32_t)GPIO_PuPd_UP) << lPinPosition);
 8002424:	68da      	ldr	r2, [r3, #12]
 8002426:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800242a:	60da      	str	r2, [r3, #12]

  SYS_SD_SPI_MISO_PER->AFR[0]  &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)SYS_SD_SPI_MISO_PIN_NO & (uint32_t)0x07) * 4));
 800242c:	6a1a      	ldr	r2, [r3, #32]
 800242e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002432:	621a      	str	r2, [r3, #32]
  SYS_SD_SPI_MISO_PER->AFR[0]  |= ((uint32_t)(SYS_SD_SPI_AF) << ((uint32_t)((uint32_t)SYS_SD_SPI_MISO_PIN_NO & (uint32_t)0x07) * 4));
 8002434:	6a1a      	ldr	r2, [r3, #32]
 8002436:	f042 62a0 	orr.w	r2, r2, #83886080	; 0x5000000
 800243a:	621a      	str	r2, [r3, #32]

  // Configure the output line CS as a normal output GPIO.
  lPinPosition = (SYS_SD_SPI_CS_PIN_NO * 2);

  SYS_SD_SPI_CS_PER->MODER   &= ~GPIO_MODER_MODER4;
 800243c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002440:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800244a:	601a      	str	r2, [r3, #0]
  SYS_SD_SPI_CS_PER->MODER   |= (((uint32_t)GPIO_Mode_OUT) << lPinPosition);
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002452:	601a      	str	r2, [r3, #0]
  SYS_SD_SPI_CS_PER->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR4;
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800245a:	609a      	str	r2, [r3, #8]
  SYS_SD_SPI_CS_PER->OSPEEDR |= ((uint32_t)(GPIO_Speed_100MHz) << lPinPosition);
 800245c:	689a      	ldr	r2, [r3, #8]
 800245e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002462:	609a      	str	r2, [r3, #8]
  SYS_SD_SPI_CS_PER->OTYPER  &= ~GPIO_OTYPER_OT_4;
 8002464:	685a      	ldr	r2, [r3, #4]
 8002466:	f022 0210 	bic.w	r2, r2, #16
 800246a:	605a      	str	r2, [r3, #4]
  SYS_SD_SPI_CS_PER->OTYPER  |= (uint16_t)(GPIO_OType_PP << SYS_SD_SPI_CS_PIN_NO);
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	605a      	str	r2, [r3, #4]
  SYS_SD_SPI_CS_PER->PUPDR   &= ~GPIO_PUPDR_PUPDR4;
 8002470:	68da      	ldr	r2, [r3, #12]
 8002472:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002476:	60da      	str	r2, [r3, #12]
  SYS_SD_SPI_CS_PER->PUPDR   |= (((uint32_t)GPIO_PuPd_UP) << lPinPosition);
 8002478:	68da      	ldr	r2, [r3, #12]
 800247a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800247e:	60da      	str	r2, [r3, #12]

  // Initially the SPI port has 4 multiplexed lines to use as CS.
  // CS1 0 1 0 1
  SYS_SPI_CS_HIGH();
 8002480:	695a      	ldr	r2, [r3, #20]
 8002482:	f042 0210 	orr.w	r2, r2, #16
 8002486:	615a      	str	r2, [r3, #20]

  // SPI configuration.
  // Reset SPI
  RCC->APB2RSTR |= RCC_APB2Periph_SPI1;
 8002488:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800248c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002490:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002492:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002496:	625a      	str	r2, [r3, #36]	; 0x24
  RCC->APB2RSTR &= ~RCC_APB2Periph_SPI1;
 8002498:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800249a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800249e:	625a      	str	r2, [r3, #36]	; 0x24

  // configuration of SPI port for common use
  SYS_SD_SPI_PORT->CR1 |=
 80024a0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80024a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80024a8:	681a      	ldr	r2, [r3, #0]
      (uint16_t)((uint32_t)SPI_Direction_2Lines_FullDuplex
 80024aa:	f440 7041 	orr.w	r0, r0, #772	; 0x304
  SYS_SD_SPI_PORT->CR1 |=
 80024ae:	4310      	orrs	r0, r2
 80024b0:	6018      	str	r0, [r3, #0]
                         | SPI_CPHA_1Edge
                         | SPI_NSS_Soft
                         | pClock
                         | SPI_FirstBit_MSB);

  SYS_SD_SPI_PORT->CR1 |= SPI_CR1_SPE;
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024b8:	601a      	str	r2, [r3, #0]

  if (gDevices & ARCADEIT_DEVICE_SERIAL)
 80024ba:	f240 2308 	movw	r3, #520	; 0x208
 80024be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80024c8:	d101      	bne.n	80024ce <ArcadeIT_SPI_Port_Init+0x1fe>

  } // End if.

  return TRUE;

} // End ArcadeIT_SPI_Port_Init.
 80024ca:	2001      	movs	r0, #1
 80024cc:	bd08      	pop	{r3, pc}
    ArcadeIT_Serial_Port_String_Send(TEXT_SPI_PORT_INITED);
 80024ce:	f248 1080 	movw	r0, #33152	; 0x8180
 80024d2:	f6c0 0000 	movt	r0, #2048	; 0x800
 80024d6:	f000 f8dd 	bl	8002694 <ArcadeIT_Serial_Port_String_Send>
 80024da:	e7f6      	b.n	80024ca <ArcadeIT_SPI_Port_Init+0x1fa>

080024dc <ArcadeIT_SRAM_Init>:
  char lString[ARCADEIT_STRING_LENGTH_MAX];
  uint8_t lRead = 0;
  uint8_t lMemoryBanks = 0;
  uint32_t lErrorBytes = 0, lBytes = 0;

  if (gStatus[DEV_RAM] == STA_NOINIT)
 80024dc:	f240 0310 	movw	r3, #16
 80024e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d005      	beq.n	80024f6 <ArcadeIT_SRAM_Init+0x1a>

    } // End if.

  } // End if.

  return gStatus[DEV_RAM];
 80024ea:	f240 0310 	movw	r3, #16
 80024ee:	f2c2 0300 	movt	r3, #8192	; 0x2000

} // End ArcadeIT_SRAM_Init.
 80024f2:	7818      	ldrb	r0, [r3, #0]
 80024f4:	4770      	bx	lr
{
 80024f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024f8:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
    gStatus[DEV_RAM] &= ~STA_NOINIT;  // Clear STA_NOINIT flag
 80024fc:	f240 0210 	movw	r2, #16
 8002500:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002504:	f023 0301 	bic.w	r3, r3, #1
 8002508:	7013      	strb	r3, [r2, #0]
    for (lBanks = 0; lBanks < 4; lBanks++)
 800250a:	2400      	movs	r4, #0
  uint8_t lMemoryBanks = 0;
 800250c:	4625      	mov	r5, r4
    for (lBanks = 0; lBanks < 4; lBanks++)
 800250e:	e036      	b.n	800257e <ArcadeIT_SRAM_Init+0xa2>
        sprintf(lString, "Checking memory bank %d: ", lBanks);
 8002510:	4622      	mov	r2, r4
 8002512:	f248 1194 	movw	r1, #33172	; 0x8194
 8002516:	f6c0 0100 	movt	r1, #2048	; 0x800
 800251a:	4668      	mov	r0, sp
 800251c:	f003 fab8 	bl	8005a90 <siprintf>
        ArcadeIT_Serial_Port_String_Send(lString);
 8002520:	4668      	mov	r0, sp
 8002522:	f000 f8b7 	bl	8002694 <ArcadeIT_Serial_Port_String_Send>
 8002526:	e034      	b.n	8002592 <ArcadeIT_SRAM_Init+0xb6>
        gRAMAddress[lBytes] = lBytes & 0xFF;
 8002528:	f240 0308 	movw	r3, #8
 800252c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	5459      	strb	r1, [r3, r1]
      for (lBytes = lBanks*512*1024; lBytes < (uint32_t)((lBanks+1)*512*1024); lBytes++)
 8002534:	3101      	adds	r1, #1
 8002536:	1c7b      	adds	r3, r7, #1
 8002538:	04db      	lsls	r3, r3, #19
 800253a:	428b      	cmp	r3, r1
 800253c:	d8f4      	bhi.n	8002528 <ArcadeIT_SRAM_Init+0x4c>
 800253e:	2600      	movs	r6, #0
 8002540:	e000      	b.n	8002544 <ArcadeIT_SRAM_Init+0x68>
      for (lBytes = lBanks*512*1024; lBytes < (uint32_t)((lBanks+1)*512*1024); lBytes++)
 8002542:	3201      	adds	r2, #1
 8002544:	4293      	cmp	r3, r2
 8002546:	d90a      	bls.n	800255e <ArcadeIT_SRAM_Init+0x82>
        lRead = gRAMAddress[lBytes];
 8002548:	f240 0108 	movw	r1, #8
 800254c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8002550:	6809      	ldr	r1, [r1, #0]
 8002552:	5c88      	ldrb	r0, [r1, r2]
        if (lRead != (lBytes & 0xFF))
 8002554:	b2d1      	uxtb	r1, r2
 8002556:	4288      	cmp	r0, r1
 8002558:	d0f3      	beq.n	8002542 <ArcadeIT_SRAM_Init+0x66>
            lErrorBytes++;
 800255a:	3601      	adds	r6, #1
 800255c:	e7f1      	b.n	8002542 <ArcadeIT_SRAM_Init+0x66>
      if (lErrorBytes == 0)
 800255e:	bb1e      	cbnz	r6, 80025a8 <ArcadeIT_SRAM_Init+0xcc>
        lMemoryBanks |= (1<<lBanks);
 8002560:	2301      	movs	r3, #1
 8002562:	fa03 f707 	lsl.w	r7, r3, r7
 8002566:	433d      	orrs	r5, r7
 8002568:	b2ed      	uxtb	r5, r5
        if (gDevices & ARCADEIT_DEVICE_SERIAL)
 800256a:	f240 2308 	movw	r3, #520	; 0x208
 800256e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002578:	d10f      	bne.n	800259a <ArcadeIT_SRAM_Init+0xbe>
    for (lBanks = 0; lBanks < 4; lBanks++)
 800257a:	3401      	adds	r4, #1
 800257c:	b2e4      	uxtb	r4, r4
 800257e:	2c03      	cmp	r4, #3
 8002580:	d821      	bhi.n	80025c6 <ArcadeIT_SRAM_Init+0xea>
      if (gDevices & ARCADEIT_DEVICE_SERIAL)
 8002582:	f240 2308 	movw	r3, #520	; 0x208
 8002586:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002590:	d1be      	bne.n	8002510 <ArcadeIT_SRAM_Init+0x34>
      for (lBytes = lBanks*512*1024; lBytes < (uint32_t)((lBanks+1)*512*1024); lBytes++)
 8002592:	4627      	mov	r7, r4
 8002594:	04e2      	lsls	r2, r4, #19
 8002596:	4611      	mov	r1, r2
 8002598:	e7cd      	b.n	8002536 <ArcadeIT_SRAM_Init+0x5a>
          ArcadeIT_Serial_Port_String_Send("OK" CURSOR_NEWLINE);
 800259a:	f248 10b0 	movw	r0, #33200	; 0x81b0
 800259e:	f6c0 0000 	movt	r0, #2048	; 0x800
 80025a2:	f000 f877 	bl	8002694 <ArcadeIT_Serial_Port_String_Send>
 80025a6:	e7e8      	b.n	800257a <ArcadeIT_SRAM_Init+0x9e>
        if (gDevices & ARCADEIT_DEVICE_SERIAL)
 80025a8:	f240 2308 	movw	r3, #520	; 0x208
 80025ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80025b6:	d0e0      	beq.n	800257a <ArcadeIT_SRAM_Init+0x9e>
          ArcadeIT_Serial_Port_String_Send("-" CURSOR_NEWLINE);
 80025b8:	f248 10b8 	movw	r0, #33208	; 0x81b8
 80025bc:	f6c0 0000 	movt	r0, #2048	; 0x800
 80025c0:	f000 f868 	bl	8002694 <ArcadeIT_Serial_Port_String_Send>
 80025c4:	e7d9      	b.n	800257a <ArcadeIT_SRAM_Init+0x9e>
    switch (lMemoryBanks)
 80025c6:	2d03      	cmp	r5, #3
 80025c8:	d035      	beq.n	8002636 <ArcadeIT_SRAM_Init+0x15a>
 80025ca:	2d0f      	cmp	r5, #15
 80025cc:	d03b      	beq.n	8002646 <ArcadeIT_SRAM_Init+0x16a>
 80025ce:	2d01      	cmp	r5, #1
 80025d0:	d01a      	beq.n	8002608 <ArcadeIT_SRAM_Init+0x12c>
        gRAMSize = 0;
 80025d2:	f240 2320 	movw	r3, #544	; 0x220
 80025d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80025da:	2200      	movs	r2, #0
 80025dc:	601a      	str	r2, [r3, #0]
        gStatus[DEV_RAM] = STA_NOINIT;
 80025de:	f240 0310 	movw	r3, #16
 80025e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80025e6:	2201      	movs	r2, #1
 80025e8:	701a      	strb	r2, [r3, #0]
        if (gDevices & ARCADEIT_DEVICE_SERIAL)
 80025ea:	f240 2308 	movw	r3, #520	; 0x208
 80025ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80025f8:	d00d      	beq.n	8002616 <ArcadeIT_SRAM_Init+0x13a>
          ArcadeIT_Serial_Port_String_Send("SRAM R/W Error or not present." CURSOR_NEWLINE);
 80025fa:	f248 10bc 	movw	r0, #33212	; 0x81bc
 80025fe:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002602:	f000 f847 	bl	8002694 <ArcadeIT_Serial_Port_String_Send>
 8002606:	e006      	b.n	8002616 <ArcadeIT_SRAM_Init+0x13a>
        gRAMSize = 1 * 512 * 1024;
 8002608:	f240 2320 	movw	r3, #544	; 0x220
 800260c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002610:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002614:	601a      	str	r2, [r3, #0]
    if (gDevices & ARCADEIT_DEVICE_SERIAL)
 8002616:	f240 2308 	movw	r3, #520	; 0x208
 800261a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002624:	d117      	bne.n	8002656 <ArcadeIT_SRAM_Init+0x17a>
  return gStatus[DEV_RAM];
 8002626:	f240 0310 	movw	r3, #16
 800262a:	f2c2 0300 	movt	r3, #8192	; 0x2000
} // End ArcadeIT_SRAM_Init.
 800262e:	7818      	ldrb	r0, [r3, #0]
 8002630:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
 8002634:	bdf0      	pop	{r4, r5, r6, r7, pc}
        gRAMSize = 2 * 512 * 1024;
 8002636:	f240 2320 	movw	r3, #544	; 0x220
 800263a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800263e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002642:	601a      	str	r2, [r3, #0]
        break;
 8002644:	e7e7      	b.n	8002616 <ArcadeIT_SRAM_Init+0x13a>
        gRAMSize = 4 * 512 * 1024;
 8002646:	f240 2320 	movw	r3, #544	; 0x220
 800264a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800264e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002652:	601a      	str	r2, [r3, #0]
        break;
 8002654:	e7df      	b.n	8002616 <ArcadeIT_SRAM_Init+0x13a>
      sprintf(lString, "RAM: %luKB." CURSOR_NEWLINE, (gRAMSize/1024));
 8002656:	f240 2320 	movw	r3, #544	; 0x220
 800265a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	0a92      	lsrs	r2, r2, #10
 8002662:	f248 11e0 	movw	r1, #33248	; 0x81e0
 8002666:	f6c0 0100 	movt	r1, #2048	; 0x800
 800266a:	4668      	mov	r0, sp
 800266c:	f003 fa10 	bl	8005a90 <siprintf>
      ArcadeIT_Serial_Port_String_Send(lString);
 8002670:	4668      	mov	r0, sp
 8002672:	f000 f80f 	bl	8002694 <ArcadeIT_Serial_Port_String_Send>
 8002676:	e7d6      	b.n	8002626 <ArcadeIT_SRAM_Init+0x14a>

08002678 <ArcadeIT_Serial_Port_Char_Send>:
   * RETURNS:     Nothing.
   */

  // wait until data register is empty. The status register should have the flag
  // Transmit data register empty
  while ((SYS_SERIAL_PORT->SR & SYS_SERIAL_FLAG_TXE) == RESET);
 8002678:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 800267c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002686:	d0f7      	beq.n	8002678 <ArcadeIT_Serial_Port_Char_Send>

  // send the character. We put the data into the data register so that the USART
  // start transmit it.
  SYS_SERIAL_PORT->DR = (pCharacter & (uint16_t)0x01FF);
 8002688:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 800268c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002690:	6058      	str	r0, [r3, #4]

} // End ArcadeIT_Serial_Port_Char_Send.
 8002692:	4770      	bx	lr

08002694 <ArcadeIT_Serial_Port_String_Send>:
// -----------------------------------------------------------------------------
void ArcadeIT_Serial_Port_String_Send
(
    char *pString   // The string to send character by character to the serial port.
)
{
 8002694:	b510      	push	{r4, lr}
   */

  // while not NULL transmit next character.
  char lCharacter;

  while ((lCharacter = *((char*)pString++)) != 0)
 8002696:	e002      	b.n	800269e <ArcadeIT_Serial_Port_String_Send+0xa>
  {
    ArcadeIT_Serial_Port_Char_Send (lCharacter);
 8002698:	f7ff ffee 	bl	8002678 <ArcadeIT_Serial_Port_Char_Send>
  while ((lCharacter = *((char*)pString++)) != 0)
 800269c:	4620      	mov	r0, r4
 800269e:	1c44      	adds	r4, r0, #1
 80026a0:	7800      	ldrb	r0, [r0, #0]
 80026a2:	2800      	cmp	r0, #0
 80026a4:	d1f8      	bne.n	8002698 <ArcadeIT_Serial_Port_String_Send+0x4>

  } // End while.

} // End ArcadeIT_Serial_Port_String_Send.
 80026a6:	bd10      	pop	{r4, pc}

080026a8 <ArcadeIT_Serial_Port_Init>:
// -----------------------------------------------------------------------------
void ArcadeIT_Serial_Port_Init
(
    uint32_t pBaud   // Baud rate to set the serial port to.
)
{
 80026a8:	b508      	push	{r3, lr}
   */

  uint32_t lPinPosition;

  // ArcadeIT_Serial_Port_Init
  if ((RCC->AHB1ENR & RCC_AHB1Periph_GPIOA) == FALSE) RCC->AHB1ENR |= RCC_AHB1Periph_GPIOA;
 80026aa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80026ae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80026b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b4:	f013 0f01 	tst.w	r3, #1
 80026b8:	d107      	bne.n	80026ca <ArcadeIT_Serial_Port_Init+0x22>
 80026ba:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80026be:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80026c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026c4:	f042 0201 	orr.w	r2, r2, #1
 80026c8:	631a      	str	r2, [r3, #48]	; 0x30
  if ((RCC->APB1ENR & RCC_APB1Periph_USART2) == FALSE) RCC->APB1ENR |= RCC_APB1Periph_USART2;
 80026ca:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80026ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80026d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80026d8:	d107      	bne.n	80026ea <ArcadeIT_Serial_Port_Init+0x42>
 80026da:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80026de:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80026e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026e4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80026e8:	641a      	str	r2, [r3, #64]	; 0x40
  if ((RCC->AHB1ENR & RCC_AHB1Periph_DMA1) == FALSE) RCC->AHB1ENR |= RCC_AHB1Periph_DMA1;
 80026ea:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80026ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80026f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f4:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80026f8:	d107      	bne.n	800270a <ArcadeIT_Serial_Port_Init+0x62>
 80026fa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80026fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002702:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002704:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002708:	631a      	str	r2, [r3, #48]	; 0x30

  // Configure the pin PA2 as alternate function 7 (USART Tx).
  lPinPosition = (SYS_SERIAL_TX_PIN_NO * 2);
  SYS_SERIAL_TX_PER->MODER   &= ~GPIO_MODER_MODER2;
 800270a:	2300      	movs	r3, #0
 800270c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002716:	601a      	str	r2, [r3, #0]
  SYS_SERIAL_TX_PER->MODER   |= (((uint32_t)GPIO_Mode_AF) << lPinPosition);
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	f042 0220 	orr.w	r2, r2, #32
 800271e:	601a      	str	r2, [r3, #0]
  SYS_SERIAL_TX_PER->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR2;
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002726:	609a      	str	r2, [r3, #8]
  SYS_SERIAL_TX_PER->OSPEEDR |= ((uint32_t)(GPIO_Speed_50MHz) << lPinPosition);
 8002728:	689a      	ldr	r2, [r3, #8]
 800272a:	f042 0220 	orr.w	r2, r2, #32
 800272e:	609a      	str	r2, [r3, #8]
  SYS_SERIAL_TX_PER->OTYPER  &= ~GPIO_OTYPER_OT_2;
 8002730:	685a      	ldr	r2, [r3, #4]
 8002732:	f022 0204 	bic.w	r2, r2, #4
 8002736:	605a      	str	r2, [r3, #4]
  SYS_SERIAL_TX_PER->OTYPER  |= (uint16_t)(GPIO_OType_PP << SYS_SERIAL_TX_PIN_NO);
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	605a      	str	r2, [r3, #4]
  SYS_SERIAL_TX_PER->PUPDR   &= ~GPIO_PUPDR_PUPDR2;
 800273c:	68da      	ldr	r2, [r3, #12]
 800273e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002742:	60da      	str	r2, [r3, #12]
  SYS_SERIAL_TX_PER->PUPDR   |= (((uint32_t)GPIO_PuPd_NOPULL) << lPinPosition);
 8002744:	68da      	ldr	r2, [r3, #12]
 8002746:	60da      	str	r2, [r3, #12]
  SYS_SERIAL_TX_PER->AFR[0] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)SYS_SERIAL_TX_PIN_NO & (uint32_t)0x07) * 4));
 8002748:	6a1a      	ldr	r2, [r3, #32]
 800274a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800274e:	621a      	str	r2, [r3, #32]
  SYS_SERIAL_TX_PER->AFR[0] |=  ((uint32_t)(SYS_SERIAL_TX_AF) << ((uint32_t)((uint32_t)SYS_SERIAL_TX_PIN_NO & (uint32_t)0x07) * 4));
 8002750:	6a1a      	ldr	r2, [r3, #32]
 8002752:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002756:	621a      	str	r2, [r3, #32]

  // Configure the pin PA3 as alternate function 7 (USART Rx).
  lPinPosition = (SYS_SERIAL_RX_PIN_NO * 2);
  SYS_SERIAL_RX_PER->MODER   &= ~GPIO_MODER_MODER3;
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800275e:	601a      	str	r2, [r3, #0]
  SYS_SERIAL_RX_PER->MODER   |= (((uint32_t)GPIO_Mode_AF) << lPinPosition);
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002766:	601a      	str	r2, [r3, #0]
  SYS_SERIAL_RX_PER->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR3;
 8002768:	689a      	ldr	r2, [r3, #8]
 800276a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800276e:	609a      	str	r2, [r3, #8]
  SYS_SERIAL_RX_PER->OSPEEDR |= ((uint32_t)(GPIO_Speed_50MHz) << lPinPosition);
 8002770:	689a      	ldr	r2, [r3, #8]
 8002772:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002776:	609a      	str	r2, [r3, #8]
  SYS_SERIAL_RX_PER->OTYPER  &= ~GPIO_OTYPER_OT_3;
 8002778:	685a      	ldr	r2, [r3, #4]
 800277a:	f022 0208 	bic.w	r2, r2, #8
 800277e:	605a      	str	r2, [r3, #4]
  SYS_SERIAL_RX_PER->OTYPER  |= (uint16_t)(GPIO_OType_PP << SYS_SERIAL_RX_PIN_NO);
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	605a      	str	r2, [r3, #4]
  SYS_SERIAL_RX_PER->PUPDR   &= ~GPIO_PUPDR_PUPDR3;
 8002784:	68da      	ldr	r2, [r3, #12]
 8002786:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800278a:	60da      	str	r2, [r3, #12]
  SYS_SERIAL_RX_PER->PUPDR   |= (((uint32_t)GPIO_PuPd_NOPULL) << lPinPosition);
 800278c:	68da      	ldr	r2, [r3, #12]
 800278e:	60da      	str	r2, [r3, #12]
  SYS_SERIAL_RX_PER->AFR[0] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)SYS_SERIAL_RX_PIN_NO & (uint32_t)0x07) * 4)) ;
 8002790:	6a1a      	ldr	r2, [r3, #32]
 8002792:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8002796:	621a      	str	r2, [r3, #32]
  SYS_SERIAL_RX_PER->AFR[0] |= ((uint32_t)(SYS_SERIAL_RX_AF) << ((uint32_t)((uint32_t)SYS_SERIAL_RX_PIN_NO & (uint32_t)0x07) * 4));
 8002798:	6a1a      	ldr	r2, [r3, #32]
 800279a:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 800279e:	621a      	str	r2, [r3, #32]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
  uint32_t integerdivider = 0x00;
  uint32_t fractionaldivider = 0x00;

  // USART CR2 Configuration
  tmpreg = SYS_SERIAL_PORT->CR2;
 80027a0:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 80027a4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80027a8:	691a      	ldr	r2, [r3, #16]
 80027aa:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80027ae:	0412      	lsls	r2, r2, #16
 80027b0:	0c12      	lsrs	r2, r2, #16
  // Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
  // Set STOP[13:12] bits according to USART_StopBits value
  tmpreg |= (uint32_t)SYS_SERIAL_StopBits_1;

  // Write to USART CR2
  SYS_SERIAL_PORT->CR2 = (uint16_t)tmpreg;
 80027b2:	611a      	str	r2, [r3, #16]

  // USART CR1 Configuration
  tmpreg = SYS_SERIAL_PORT->CR1;
 80027b4:	68da      	ldr	r2, [r3, #12]
  tmpreg = (uint32_t)(SYS_SERIAL_WordLength_8b
                    | SYS_SERIAL_Parity_No
                    |(SYS_SERIAL_Mode_Rx | SYS_SERIAL_Mode_Tx));

  // Write to USART CR1
  SYS_SERIAL_PORT->CR1 = (uint16_t)tmpreg;
 80027b6:	220c      	movs	r2, #12
 80027b8:	60da      	str	r2, [r3, #12]

  // USART CR3 Configuration
  tmpreg = SYS_SERIAL_PORT->CR3;
 80027ba:	695a      	ldr	r2, [r3, #20]
 80027bc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80027c0:	0412      	lsls	r2, r2, #16
 80027c2:	0c12      	lsrs	r2, r2, #16
  // Configure the USART HFC :
  //   Set CTSE and RTSE bits according to USART_HardwareFlowControl value
  tmpreg |= SYS_SERIAL_HardwareFlowControl_None;

  // Write to USART CR3
  SYS_SERIAL_PORT->CR3 = (uint16_t)tmpreg;
 80027c4:	615a      	str	r2, [r3, #20]

  // Configure the USART Baud Rate
  apbclock = (((HSE_VALUE / PLL_M) * PLL_N) / PLL_P) >> 2; // for the ArcadeIT! should be 45MHz

  // Determine the integer part
  if ((SYS_SERIAL_PORT->CR1 & USART_CR1_OVER8) != 0)
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80027cc:	d03b      	beq.n	8002846 <ArcadeIT_Serial_Port_Init+0x19e>
  {
    // Integer part computing in case Oversampling mode is 8 Samples
    integerdivider = ((25 * apbclock) / (2 * pBaud));
 80027ce:	0040      	lsls	r0, r0, #1
 80027d0:	f44f 520d 	mov.w	r2, #9024	; 0x2340
 80027d4:	f2c4 320e 	movt	r2, #17166	; 0x430e
 80027d8:	fbb2 f2f0 	udiv	r2, r2, r0
    integerdivider = ((25 * apbclock) / (4 * pBaud));
    // 25 * 45000000 / 4 * 115200
    // 1125000000 / 460800
    // ‭2441‬
  }
  tmpreg = (integerdivider / 100) << 4;
 80027dc:	f248 531f 	movw	r3, #34079	; 0x851f
 80027e0:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 80027e4:	fba3 1302 	umull	r1, r3, r3, r2
 80027e8:	095b      	lsrs	r3, r3, #5
 80027ea:	0119      	lsls	r1, r3, #4
  // ‭2441 / 100 * 16
  // ‭24 * 16 (FOUND 24, we already shift this left of 4 bits to create room for fraction)
  // ‭384 (0x18 << 4 = 0x180)‬

  // Determine the fractional part
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80027ec:	2064      	movs	r0, #100	; 0x64
 80027ee:	fb03 2010 	mls	r0, r3, r0, r2
  // ‭2441 - 38400 / 16
  // ‭2441 - 2400
  // 41 (FOUND 41)

  // Implement the fractional part in the register
  if ((SYS_SERIAL_PORT->CR1 & USART_CR1_OVER8) != 0)
 80027f2:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 80027f6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002800:	d129      	bne.n	8002856 <ArcadeIT_Serial_Port_Init+0x1ae>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
  }
  else // if ((USARTx->CR1 & USART_CR1_OVER8) == 0)
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8002802:	0100      	lsls	r0, r0, #4
 8002804:	3032      	adds	r0, #50	; 0x32
 8002806:	f248 531f 	movw	r3, #34079	; 0x851f
 800280a:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 800280e:	fba3 3000 	umull	r3, r0, r3, r0
 8002812:	f3c0 1043 	ubfx	r0, r0, #5, #4
 8002816:	4308      	orrs	r0, r1
 8002818:	b280      	uxth	r0, r0
    // mmmmmmmmm   ffff
    // 0x180     |  0x7
  }

  // Write to USART BRR register
  SYS_SERIAL_PORT->BRR = (uint16_t)tmpreg;
 800281a:	f44f 4288 	mov.w	r2, #17408	; 0x4400
 800281e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002822:	6090      	str	r0, [r2, #8]

  // Enable the USART2
  SYS_SERIAL_PORT->CR1 |= USART_CR1_UE;
 8002824:	68d3      	ldr	r3, [r2, #12]
 8002826:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800282a:	60d3      	str	r3, [r2, #12]

  ArcadeIT_Serial_Port_String_Send(RESET_DEVICE);
 800282c:	f248 10f0 	movw	r0, #33264	; 0x81f0
 8002830:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002834:	f7ff ff2e 	bl	8002694 <ArcadeIT_Serial_Port_String_Send>

  ArcadeIT_Serial_Port_String_Send(TEXT_SERIAL_PORT_INITED);
 8002838:	f248 10f4 	movw	r0, #33268	; 0x81f4
 800283c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002840:	f7ff ff28 	bl	8002694 <ArcadeIT_Serial_Port_String_Send>

} // End ArcadeIT_Serial_Port_Init.
 8002844:	bd08      	pop	{r3, pc}
    integerdivider = ((25 * apbclock) / (4 * pBaud));
 8002846:	0080      	lsls	r0, r0, #2
 8002848:	f44f 520d 	mov.w	r2, #9024	; 0x2340
 800284c:	f2c4 320e 	movt	r2, #17166	; 0x430e
 8002850:	fbb2 f2f0 	udiv	r2, r2, r0
 8002854:	e7c2      	b.n	80027dc <ArcadeIT_Serial_Port_Init+0x134>
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8002856:	00c3      	lsls	r3, r0, #3
 8002858:	3332      	adds	r3, #50	; 0x32
 800285a:	f248 501f 	movw	r0, #34079	; 0x851f
 800285e:	f2c5 10eb 	movt	r0, #20971	; 0x51eb
 8002862:	fba0 2303 	umull	r2, r3, r0, r3
 8002866:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800286a:	ea43 0001 	orr.w	r0, r3, r1
 800286e:	e7d3      	b.n	8002818 <ArcadeIT_Serial_Port_Init+0x170>

08002870 <ArcadeIT_Status_LEDS_Init>:

// //////////////////////////////////////////////////////////////////////////////
// Functions.
// //////////////////////////////////////////////////////////////////////////////
void ArcadeIT_Status_LEDS_Init(void)
{
 8002870:	b508      	push	{r3, lr}
 */

  uint32_t lPinPosition = 0;

  // Turn on the MCU peripheral by enabling its Clock.
  if ((RCC->AHB1ENR & RCC_AHB1Periph_GPIOH) == FALSE) RCC->AHB1ENR |= RCC_AHB1Periph_GPIOH;
 8002872:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002876:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800287a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002880:	d107      	bne.n	8002892 <ArcadeIT_Status_LEDS_Init+0x22>
 8002882:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002886:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800288a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800288c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002890:	631a      	str	r2, [r3, #48]	; 0x30
  // level as default.
  // -----------------------
  lPinPosition = (SYS_STATUS_LED1_PIN_NO * 2); // the position is a multiple of 2

  // GPIO pin(PH2) in output
  SYS_STATUS_LED1_PER->MODER   &= ~GPIO_MODER_MODER2;
 8002892:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002896:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80028a0:	601a      	str	r2, [r3, #0]
  SYS_STATUS_LED1_PER->MODER   |= (((uint32_t)GPIO_Mode_OUT) << lPinPosition);
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	f042 0210 	orr.w	r2, r2, #16
 80028a8:	601a      	str	r2, [r3, #0]
  SYS_STATUS_LED1_PER->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR2;
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80028b0:	609a      	str	r2, [r3, #8]
  SYS_STATUS_LED1_PER->OSPEEDR |= ((uint32_t)(GPIO_Speed_100MHz) << lPinPosition);
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80028b8:	609a      	str	r2, [r3, #8]
  SYS_STATUS_LED1_PER->OTYPER  &= ~GPIO_OTYPER_OT_2;
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	f022 0204 	bic.w	r2, r2, #4
 80028c0:	605a      	str	r2, [r3, #4]
  SYS_STATUS_LED1_PER->OTYPER  |= (uint16_t)(GPIO_OType_PP << SYS_STATUS_LED1_PIN_NO);
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	605a      	str	r2, [r3, #4]
  SYS_STATUS_LED1_PER->PUPDR   &= ~GPIO_PUPDR_PUPDR2;
 80028c6:	68da      	ldr	r2, [r3, #12]
 80028c8:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80028cc:	60da      	str	r2, [r3, #12]
  SYS_STATUS_LED1_PER->PUPDR   |= (((uint32_t)GPIO_PuPd_DOWN) << lPinPosition);
 80028ce:	68da      	ldr	r2, [r3, #12]
 80028d0:	f042 0220 	orr.w	r2, r2, #32
 80028d4:	60da      	str	r2, [r3, #12]

  // -----------------------
  lPinPosition = (SYS_STATUS_LED2_PIN_NO * 2); // the position is a multiple of 2

  // GPIO pin(PH3) in output
  SYS_STATUS_LED2_PER->MODER   &= ~GPIO_MODER_MODER3;
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80028dc:	601a      	str	r2, [r3, #0]
  SYS_STATUS_LED2_PER->MODER   |= (((uint32_t)GPIO_Mode_OUT) << lPinPosition);
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028e4:	601a      	str	r2, [r3, #0]
  SYS_STATUS_LED2_PER->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR3;
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80028ec:	609a      	str	r2, [r3, #8]
  SYS_STATUS_LED2_PER->OSPEEDR |= ((uint32_t)(GPIO_Speed_100MHz) << lPinPosition);
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80028f4:	609a      	str	r2, [r3, #8]
  SYS_STATUS_LED2_PER->OTYPER  &= ~GPIO_OTYPER_OT_3;
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	f022 0208 	bic.w	r2, r2, #8
 80028fc:	605a      	str	r2, [r3, #4]
  SYS_STATUS_LED2_PER->OTYPER  |= (uint16_t)(GPIO_OType_PP << SYS_STATUS_LED2_PIN_NO);
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	605a      	str	r2, [r3, #4]
  SYS_STATUS_LED2_PER->PUPDR   &= ~GPIO_PUPDR_PUPDR3;
 8002902:	68da      	ldr	r2, [r3, #12]
 8002904:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002908:	60da      	str	r2, [r3, #12]
  SYS_STATUS_LED2_PER->PUPDR   |= (((uint32_t)GPIO_PuPd_DOWN) << lPinPosition);
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002910:	60da      	str	r2, [r3, #12]

  // -----------------------
  // Put LEDs line LOW.
  SYS_STATUS_LED1_PER->ODR &= ~(SYS_STATUS_LED1_PIN);
 8002912:	695a      	ldr	r2, [r3, #20]
 8002914:	f022 0204 	bic.w	r2, r2, #4
 8002918:	615a      	str	r2, [r3, #20]
  SYS_STATUS_LED2_PER->ODR &= ~(SYS_STATUS_LED2_PIN);
 800291a:	695a      	ldr	r2, [r3, #20]
 800291c:	f022 0208 	bic.w	r2, r2, #8
 8002920:	615a      	str	r2, [r3, #20]

  // Shows a message to serial port as debug
  if (gDevices & ARCADEIT_DEVICE_SERIAL)
 8002922:	f240 2308 	movw	r3, #520	; 0x208
 8002926:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002930:	d100      	bne.n	8002934 <ArcadeIT_Status_LEDS_Init+0xc4>
  {
    ArcadeIT_Serial_Port_String_Send(TEXT_STATUS_LEDS_INITED);

  } // End if.

} // End ArcadeIT_Status_LEDS_Init.
 8002932:	bd08      	pop	{r3, pc}
    ArcadeIT_Serial_Port_String_Send(TEXT_STATUS_LEDS_INITED);
 8002934:	f248 200c 	movw	r0, #33292	; 0x820c
 8002938:	f6c0 0000 	movt	r0, #2048	; 0x800
 800293c:	f7ff feaa 	bl	8002694 <ArcadeIT_Serial_Port_String_Send>
} // End ArcadeIT_Status_LEDS_Init.
 8002940:	e7f7      	b.n	8002932 <ArcadeIT_Status_LEDS_Init+0xc2>

08002942 <ArcadeIT_Status_LED1_Toggle>:
  * PARAMETERS:  None.
  * RETURNS:     Nothing.
  */

  // Set LEDs line LOW or HIGH depending the current status of the LED.
  if (GPIOH->ODR & SYS_STATUS_LED1_PIN)
 8002942:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002946:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800294a:	695b      	ldr	r3, [r3, #20]
 800294c:	f013 0f04 	tst.w	r3, #4
 8002950:	d108      	bne.n	8002964 <ArcadeIT_Status_LED1_Toggle+0x22>
  {
    GPIOH->ODR &= ~(SYS_STATUS_LED1_PIN);
  }
  else
  {
    GPIOH->ODR |= SYS_STATUS_LED1_PIN;
 8002952:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002956:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800295a:	695a      	ldr	r2, [r3, #20]
 800295c:	f042 0204 	orr.w	r2, r2, #4
 8002960:	615a      	str	r2, [r3, #20]

  } // End if.

} // End ArcadeIT_Status_LED1_Toggle.
 8002962:	4770      	bx	lr
    GPIOH->ODR &= ~(SYS_STATUS_LED1_PIN);
 8002964:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002968:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800296c:	695a      	ldr	r2, [r3, #20]
 800296e:	f022 0204 	bic.w	r2, r2, #4
 8002972:	615a      	str	r2, [r3, #20]
 8002974:	4770      	bx	lr

08002976 <ArcadeIT_Status_LED2_Toggle>:
  * PARAMETERS:  None.
  * RETURNS:     Nothing.
  */

  // Set LEDs line LOW or HIGH depending the current status of the LED.
  if (SYS_STATUS_LED2_PER->ODR & SYS_STATUS_LED2_PIN)
 8002976:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800297a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	f013 0f08 	tst.w	r3, #8
 8002984:	d108      	bne.n	8002998 <ArcadeIT_Status_LED2_Toggle+0x22>
  {
    SYS_STATUS_LED2_PER->ODR &= ~(SYS_STATUS_LED2_PIN);
  }
  else
  {
    SYS_STATUS_LED2_PER->ODR |= SYS_STATUS_LED2_PIN;
 8002986:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800298a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800298e:	695a      	ldr	r2, [r3, #20]
 8002990:	f042 0208 	orr.w	r2, r2, #8
 8002994:	615a      	str	r2, [r3, #20]

  } // End if.

} // End ArcadeIT_Status_LED2_Toggle.
 8002996:	4770      	bx	lr
    SYS_STATUS_LED2_PER->ODR &= ~(SYS_STATUS_LED2_PIN);
 8002998:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800299c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80029a0:	695a      	ldr	r2, [r3, #20]
 80029a2:	f022 0208 	bic.w	r2, r2, #8
 80029a6:	615a      	str	r2, [r3, #20]
 80029a8:	4770      	bx	lr

080029aa <ArcadeIT_TestPad_Set>:
  *  RCC_MCO2Div_4
  *  RCC_MCO2Div_5
  *
  */

  uint32_t lTmpReg = RCC->CFGR;
 80029aa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80029ae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80029b2:	689a      	ldr	r2, [r3, #8]
  lTmpReg  &= CFGR_MCO2_RESET_MASK;                 // Clear MCO2 and MCO2PRE[2:0] bits
 80029b4:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
  lTmpReg  |= pFrequencySystem | pFrequencyDivider; // Select MCO2 clock source and prescaler
 80029b8:	4301      	orrs	r1, r0
 80029ba:	4311      	orrs	r1, r2
  RCC->CFGR = lTmpReg;
 80029bc:	6099      	str	r1, [r3, #8]

} // End ArcadeIT_TestPad_Set.
 80029be:	4770      	bx	lr

080029c0 <ArcadeIT_TestPad_Init>:
void ArcadeIT_TestPad_Init
(
    uint32_t pFrequencySystem,  // What frequency source to test.
    uint32_t pFrequencyDivider  // What divider to test.
)
{
 80029c0:	b508      	push	{r3, lr}
  * RETURNS:     Nothing.
  */

  uint32_t lPinPosition;

  if ((RCC->AHB1ENR & RCC_AHB1Periph_GPIOC) == FALSE) RCC->AHB1ENR |= RCC_AHB1Periph_GPIOC;
 80029c2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80029c6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80029ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029cc:	f013 0f04 	tst.w	r3, #4
 80029d0:	d107      	bne.n	80029e2 <ArcadeIT_TestPad_Init+0x22>
 80029d2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80029d6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80029da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029dc:	f042 0204 	orr.w	r2, r2, #4
 80029e0:	631a      	str	r2, [r3, #48]	; 0x30

  // Configure pin PC9 in alternate function 0 (MCO2)
  lPinPosition = (SYS_TESTPADS_PIN_NO * 2);

  SYS_TESTPADS_PER->MODER   &= ~GPIO_MODER_MODER9;
 80029e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80029f0:	601a      	str	r2, [r3, #0]
  SYS_TESTPADS_PER->MODER   |= (((uint32_t)GPIO_Mode_AF) << lPinPosition);
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80029f8:	601a      	str	r2, [r3, #0]

  // Maximum frequency allowed is 100MHz, so keep it in mind when you want
  // to test 180MHz, you have to set the divider at least 2
  SYS_TESTPADS_PER->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR9;
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002a00:	609a      	str	r2, [r3, #8]
  SYS_TESTPADS_PER->OSPEEDR |= ((uint32_t)(GPIO_Speed_100MHz) << lPinPosition);
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 8002a08:	609a      	str	r2, [r3, #8]
  SYS_TESTPADS_PER->OTYPER  &= ~GPIO_OTYPER_OT_9;
 8002a0a:	685a      	ldr	r2, [r3, #4]
 8002a0c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a10:	605a      	str	r2, [r3, #4]
  SYS_TESTPADS_PER->OTYPER  |= (uint16_t)(GPIO_OType_PP << SYS_TESTPADS_PIN_NO);
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	605a      	str	r2, [r3, #4]
  SYS_TESTPADS_PER->PUPDR   &= ~GPIO_PUPDR_PUPDR9;
 8002a16:	68da      	ldr	r2, [r3, #12]
 8002a18:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002a1c:	60da      	str	r2, [r3, #12]
  SYS_TESTPADS_PER->PUPDR   |= (((uint32_t)GPIO_PuPd_UP) << lPinPosition);
 8002a1e:	68da      	ldr	r2, [r3, #12]
 8002a20:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002a24:	60da      	str	r2, [r3, #12]
  SYS_TESTPADS_PER->AFR[1] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)SYS_TESTPADS_PIN_NO & (uint32_t)0x07) * 4));
 8002a26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a28:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002a2c:	625a      	str	r2, [r3, #36]	; 0x24
  SYS_TESTPADS_PER->AFR[1] |=  ((uint32_t)(SYS_TESTPADS_AF) << ((uint32_t)((uint32_t)SYS_TESTPADS_PIN_NO & (uint32_t)0x07) * 4));
 8002a2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a30:	625a      	str	r2, [r3, #36]	; 0x24

  ArcadeIT_TestPad_Set(pFrequencySystem, pFrequencyDivider);
 8002a32:	f7ff ffba 	bl	80029aa <ArcadeIT_TestPad_Set>

  // Shows a message to serial port as debug
  if (gDevices & ARCADEIT_DEVICE_SERIAL)
 8002a36:	f240 2308 	movw	r3, #520	; 0x208
 8002a3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002a44:	d100      	bne.n	8002a48 <ArcadeIT_TestPad_Init+0x88>
    // Starts and configure the serial port.
    ArcadeIT_Serial_Port_String_Send(TEXT_TEST_PADS_INITED);

  } // End if.

} // End ArcadeIT_TestPads_Init.
 8002a46:	bd08      	pop	{r3, pc}
    ArcadeIT_Serial_Port_String_Send(TEXT_TEST_PADS_INITED);
 8002a48:	f248 2024 	movw	r0, #33316	; 0x8224
 8002a4c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002a50:	f7ff fe20 	bl	8002694 <ArcadeIT_Serial_Port_String_Send>
} // End ArcadeIT_TestPads_Init.
 8002a54:	e7f7      	b.n	8002a46 <ArcadeIT_TestPad_Init+0x86>

08002a56 <ArcadeIT_RAMDisk_Initialize>:
// /////////////////////////////////////////////////////////////////////////////
// Functions
// /////////////////////////////////////////////////////////////////////////////
DRESULT ArcadeIT_RAMDisk_Initialize(void)
{
  if (gRAMSize >= (512 * 1024))
 8002a56:	f240 2320 	movw	r3, #544	; 0x220
 8002a5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a64:	d20d      	bcs.n	8002a82 <ArcadeIT_RAMDisk_Initialize+0x2c>
    gStatus[DEV_RAM] &= ~STA_NOINIT;  // Clear STA_NOINIT flag
  else
    gStatus[DEV_RAM] |= STA_NOINIT;  // STA_NOINIT flag
 8002a66:	f240 0310 	movw	r3, #16
 8002a6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a6e:	781a      	ldrb	r2, [r3, #0]
 8002a70:	f042 0201 	orr.w	r2, r2, #1
 8002a74:	701a      	strb	r2, [r3, #0]

  return gStatus[DEV_RAM];
 8002a76:	f240 0310 	movw	r3, #16
 8002a7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
 8002a7e:	7818      	ldrb	r0, [r3, #0]
 8002a80:	4770      	bx	lr
    gStatus[DEV_RAM] &= ~STA_NOINIT;  // Clear STA_NOINIT flag
 8002a82:	f240 0310 	movw	r3, #16
 8002a86:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a8a:	781a      	ldrb	r2, [r3, #0]
 8002a8c:	f022 0201 	bic.w	r2, r2, #1
 8002a90:	701a      	strb	r2, [r3, #0]
 8002a92:	e7f0      	b.n	8002a76 <ArcadeIT_RAMDisk_Initialize+0x20>

08002a94 <ArcadeIT_RAMDisk_Status>:
  * PARAMETERS:  None.
  * RETURNS:     Nothing.
  */

  // Return disk status.
  return gStatus[DEV_RAM];
 8002a94:	f240 0310 	movw	r3, #16
 8002a98:	f2c2 0300 	movt	r3, #8192	; 0x2000

} // End ArcadeIT_SDCard_Disk_Status.
 8002a9c:	7818      	ldrb	r0, [r3, #0]
 8002a9e:	4770      	bx	lr

08002aa0 <ArcadeIT_RAMDisk_Read>:
  * DESCRIPTION: This function reads a block of data from the RAM disk.
  * PARAMETERS:  See above.
  * RETURNS:     Nothing.
  */

  if (!pCount) return RES_PARERR;   // Check parameter
 8002aa0:	b16a      	cbz	r2, 8002abe <ArcadeIT_RAMDisk_Read+0x1e>
{
 8002aa2:	b508      	push	{r3, lr}

  uint32_t lBufferSize = (BLOCK_SIZE * pCount) + pCount;

  memcpy(pBuffer, (gRAMAddress + (pSector * BLOCK_SIZE)), lBufferSize);
 8002aa4:	f240 0308 	movw	r3, #8
 8002aa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	eb02 2242 	add.w	r2, r2, r2, lsl #9
 8002ab2:	eb03 2141 	add.w	r1, r3, r1, lsl #9
 8002ab6:	f002 fac3 	bl	8005040 <memcpy>

  // Return result
  return RES_OK;
 8002aba:	2000      	movs	r0, #0

} // End ArcadeIT_RAMDisk_Read.
 8002abc:	bd08      	pop	{r3, pc}
  if (!pCount) return RES_PARERR;   // Check parameter
 8002abe:	2004      	movs	r0, #4
} // End ArcadeIT_RAMDisk_Read.
 8002ac0:	4770      	bx	lr

08002ac2 <ArcadeIT_RAMDisk_Write>:
  * DESCRIPTION: This function writes a block of data into the RAM disk.
  * PARAMETERS:  See above.
  * RETURNS:     Nothing.
  */

  if (!pCount) return RES_PARERR;   // Check parameter
 8002ac2:	b17a      	cbz	r2, 8002ae4 <ArcadeIT_RAMDisk_Write+0x22>
{
 8002ac4:	b508      	push	{r3, lr}
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	4601      	mov	r1, r0

  uint32_t lBufferSize = (BLOCK_SIZE * pCount) + pCount;

  memcpy((gRAMAddress + (pSector * BLOCK_SIZE)), pBuffer, lBufferSize);
 8002aca:	f240 0008 	movw	r0, #8
 8002ace:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002ad2:	6800      	ldr	r0, [r0, #0]
 8002ad4:	eb02 2242 	add.w	r2, r2, r2, lsl #9
 8002ad8:	eb00 2043 	add.w	r0, r0, r3, lsl #9
 8002adc:	f002 fab0 	bl	8005040 <memcpy>

  return RES_OK;
 8002ae0:	2000      	movs	r0, #0

} // End ArcadeIT_RAMDisk_Write.
 8002ae2:	bd08      	pop	{r3, pc}
  if (!pCount) return RES_PARERR;   // Check parameter
 8002ae4:	2004      	movs	r0, #4
} // End ArcadeIT_RAMDisk_Write.
 8002ae6:	4770      	bx	lr

08002ae8 <ArcadeIT_RAMDisk_Ioctl>:

  DRESULT lResult;

  lResult = RES_ERROR;

  switch (pCommand)
 8002ae8:	2803      	cmp	r0, #3
 8002aea:	d818      	bhi.n	8002b1e <ArcadeIT_RAMDisk_Ioctl+0x36>
 8002aec:	e8df f000 	tbb	[pc, r0]
 8002af0:	0d120402 	.word	0x0d120402
  {
    case CTRL_SYNC :    // Wait for end of internal write process of the drive
      lResult = RES_OK;
 8002af4:	2000      	movs	r0, #0
 8002af6:	4770      	bx	lr
      break;

    case GET_SECTOR_COUNT : // Get drive capacity in unit of sector (DWORD)
       *(DWORD*)pBuffer = gRAMSize / SECTOR_SIZE;
 8002af8:	f240 2320 	movw	r3, #544	; 0x220
 8002afc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	0a5b      	lsrs	r3, r3, #9
 8002b04:	600b      	str	r3, [r1, #0]
       lResult = RES_OK;
 8002b06:	2000      	movs	r0, #0
      break;
 8002b08:	4770      	bx	lr

    case GET_BLOCK_SIZE : // Get erase block size in unit of sector (DWORD)
       *(DWORD*)pBuffer = BLOCK_SIZE;
 8002b0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b0e:	600b      	str	r3, [r1, #0]
       lResult = RES_OK;
 8002b10:	2000      	movs	r0, #0
      break;
 8002b12:	4770      	bx	lr

    case GET_SECTOR_SIZE : // Get erase block size in unit of sector (DWORD)
       *(WORD*)pBuffer = BLOCK_SIZE;
 8002b14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b18:	800b      	strh	r3, [r1, #0]
       lResult = RES_OK;
 8002b1a:	2000      	movs	r0, #0
      break;
 8002b1c:	4770      	bx	lr

    default: lResult = RES_PARERR; break;
 8002b1e:	2004      	movs	r0, #4

  } // End switch.

  return lResult;

} // End ArcadeIT_RAMDisk_Ioctl.
 8002b20:	4770      	bx	lr

08002b22 <ArcadeIT_RAMDisk_Start>:

// -----------------------------------------------------------------------------
FRESULT ArcadeIT_RAMDisk_Start(void)
{
 8002b22:	b530      	push	{r4, r5, lr}
 8002b24:	f5ad 5d90 	sub.w	sp, sp, #4608	; 0x1200
 8002b28:	b085      	sub	sp, #20

  FATFS *lFileSystemReferenceTemp;

  lActive = FR_NOT_READY;

  lResult = f_mkfs(ArcadeIT_Utility_Get_String_ID(DEV_RAM, (char*)gDriveName), NULL, lBuffer, sizeof(lBuffer));
 8002b2a:	f248 3128 	movw	r1, #33576	; 0x8328
 8002b2e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002b32:	2000      	movs	r0, #0
 8002b34:	f7fe fbee 	bl	8001314 <ArcadeIT_Utility_Get_String_ID>
 8002b38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b3c:	aa84      	add	r2, sp, #528	; 0x210
 8002b3e:	2100      	movs	r1, #0
 8002b40:	f001 fe62 	bl	8004808 <f_mkfs>
  if (lResult == FR_OK)
 8002b44:	2800      	cmp	r0, #0
 8002b46:	d178      	bne.n	8002c3a <ArcadeIT_RAMDisk_Start+0x118>
  {
    lResult = f_mount(&gFileSystemRAM, ArcadeIT_Utility_Get_String_ID(DEV_RAM, (char*)gDriveName), 1);
 8002b48:	f248 3128 	movw	r1, #33576	; 0x8328
 8002b4c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002b50:	f7fe fbe0 	bl	8001314 <ArcadeIT_Utility_Get_String_ID>
 8002b54:	2201      	movs	r2, #1
 8002b56:	4601      	mov	r1, r0
 8002b58:	f640 10e4 	movw	r0, #2532	; 0x9e4
 8002b5c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002b60:	f001 fd06 	bl	8004570 <f_mount>
    if (lResult == FR_OK)
 8002b64:	4604      	mov	r4, r0
 8002b66:	2800      	cmp	r0, #0
 8002b68:	d154      	bne.n	8002c14 <ArcadeIT_RAMDisk_Start+0xf2>
    {
      // FIXME Include only with a debug flag
      sprintf(lString, "RAM Disk Device: [%s] ", ArcadeIT_Utility_Get_String_ID(DEV_RAM, (char*)gDriveName));
 8002b6a:	f248 3528 	movw	r5, #33576	; 0x8328
 8002b6e:	f6c0 0500 	movt	r5, #2048	; 0x800
 8002b72:	4629      	mov	r1, r5
 8002b74:	f7fe fbce 	bl	8001314 <ArcadeIT_Utility_Get_String_ID>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	f248 2140 	movw	r1, #33344	; 0x8240
 8002b7e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002b82:	a803      	add	r0, sp, #12
 8002b84:	f002 ff84 	bl	8005a90 <siprintf>
      //ArcadeIT_Terminal_Debug(0, lString);
      ArcadeIT_Serial_Port_String_Send(lString);
 8002b88:	a803      	add	r0, sp, #12
 8002b8a:	f7ff fd83 	bl	8002694 <ArcadeIT_Serial_Port_String_Send>

      f_chdrive(ArcadeIT_Utility_Get_String_ID(DEV_RAM, (char*)gDriveName));
 8002b8e:	4629      	mov	r1, r5
 8002b90:	2000      	movs	r0, #0
 8002b92:	f7fe fbbf 	bl	8001314 <ArcadeIT_Utility_Get_String_ID>
 8002b96:	f001 fd17 	bl	80045c8 <f_chdrive>

      f_setlabel(ARCADEIT_TEXT_RAMDISK_NAME);
 8002b9a:	f248 2058 	movw	r0, #33368	; 0x8258
 8002b9e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002ba2:	f001 fd91 	bl	80046c8 <f_setlabel>

      lResult = f_getfree(ArcadeIT_Utility_Get_String_ID(DEV_RAM, (char*)gDriveName), &lFreeCluster, &lFileSystemReferenceTemp);
 8002ba6:	4629      	mov	r1, r5
 8002ba8:	2000      	movs	r0, #0
 8002baa:	f7fe fbb3 	bl	8001314 <ArcadeIT_Utility_Get_String_ID>
 8002bae:	aa02      	add	r2, sp, #8
 8002bb0:	a983      	add	r1, sp, #524	; 0x20c
 8002bb2:	f001 fd1e 	bl	80045f2 <f_getfree>
      if (lResult == FR_OK)
 8002bb6:	4605      	mov	r5, r0
 8002bb8:	b9d0      	cbnz	r0, 8002bf0 <ArcadeIT_RAMDisk_Start+0xce>
        // end of the formula.

        // FIXME Include only with a debug flag
        sprintf(lString,
               "%lu/%lu KiB free.\n\r",
               (lFreeCluster * ((lFileSystemReferenceTemp->csize * SECTOR_SIZE)))/1024,
 8002bba:	9b02      	ldr	r3, [sp, #8]
 8002bbc:	8959      	ldrh	r1, [r3, #10]
 8002bbe:	9a83      	ldr	r2, [sp, #524]	; 0x20c
 8002bc0:	fb02 f201 	mul.w	r2, r2, r1
               ((lFileSystemReferenceTemp->n_fatent - 2) * ((lFileSystemReferenceTemp->csize * SECTOR_SIZE)))/1024
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	3b02      	subs	r3, #2
 8002bc8:	fb03 f301 	mul.w	r3, r3, r1
        sprintf(lString,
 8002bcc:	a903      	add	r1, sp, #12
 8002bce:	9101      	str	r1, [sp, #4]
 8002bd0:	f3c3 0355 	ubfx	r3, r3, #1, #22
 8002bd4:	f3c2 0255 	ubfx	r2, r2, #1, #22
 8002bd8:	f248 2160 	movw	r1, #33376	; 0x8260
 8002bdc:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002be0:	9801      	ldr	r0, [sp, #4]
 8002be2:	f002 ff55 	bl	8005a90 <siprintf>
               );
        // Print the free space.
        ArcadeIT_Serial_Port_String_Send(lString);
 8002be6:	9801      	ldr	r0, [sp, #4]
 8002be8:	f7ff fd54 	bl	8002694 <ArcadeIT_Serial_Port_String_Send>

        return FALSE;

      } // End if get free.

      lActive = FR_OK;
 8002bec:	462c      	mov	r4, r5
 8002bee:	e025      	b.n	8002c3c <ArcadeIT_RAMDisk_Start+0x11a>
        sprintf(lString, "%s" CURSOR_NEWLINE, ArcadeIT_Utility_Get_String_ID(lResult, (char*)gErrorMessages));
 8002bf0:	f248 313c 	movw	r1, #33596	; 0x833c
 8002bf4:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002bf8:	f7fe fb8c 	bl	8001314 <ArcadeIT_Utility_Get_String_ID>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	f247 01d0 	movw	r1, #28880	; 0x70d0
 8002c02:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002c06:	a803      	add	r0, sp, #12
 8002c08:	f002 ff42 	bl	8005a90 <siprintf>
        ArcadeIT_Serial_Port_String_Send(lString);
 8002c0c:	a803      	add	r0, sp, #12
 8002c0e:	f7ff fd41 	bl	8002694 <ArcadeIT_Serial_Port_String_Send>
        return FALSE;
 8002c12:	e013      	b.n	8002c3c <ArcadeIT_RAMDisk_Start+0x11a>
    }
    else
    {
      // FIXME Include only with a debug flag
      sprintf(lString, "Mounting RAM Disk Drive: %s", ArcadeIT_Utility_Get_String_ID(lResult, (char*)gErrorMessages));
 8002c14:	f248 313c 	movw	r1, #33596	; 0x833c
 8002c18:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002c1c:	f7fe fb7a 	bl	8001314 <ArcadeIT_Utility_Get_String_ID>
 8002c20:	4602      	mov	r2, r0
 8002c22:	f248 2174 	movw	r1, #33396	; 0x8274
 8002c26:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002c2a:	a803      	add	r0, sp, #12
 8002c2c:	f002 ff30 	bl	8005a90 <siprintf>
      //ArcadeIT_Terminal_Debug(0, lString);
      ArcadeIT_Serial_Port_String_Send(lString);
 8002c30:	a803      	add	r0, sp, #12
 8002c32:	f7ff fd2f 	bl	8002694 <ArcadeIT_Serial_Port_String_Send>
  lActive = FR_NOT_READY;
 8002c36:	2403      	movs	r4, #3
 8002c38:	e000      	b.n	8002c3c <ArcadeIT_RAMDisk_Start+0x11a>
 8002c3a:	2403      	movs	r4, #3

  } // End if.

  return lActive;

} // End ArcadeIT_RAMDisk_Initialize.
 8002c3c:	4620      	mov	r0, r4
 8002c3e:	f50d 5d90 	add.w	sp, sp, #4608	; 0x1200
 8002c42:	b005      	add	sp, #20
 8002c44:	bd30      	pop	{r4, r5, pc}

08002c46 <wait_ready>:
// /////////////////////////////////////////////////////////////////////////////
static int32_t wait_ready
(
  uint32_t pTimeOut   // Timeout in milliseconds.
)
{
 8002c46:	b508      	push	{r3, lr}
  // pTimeOut:  Timeout [ms]
  // lReturnValue : 1:Ready, 0:Timeout

  uint8_t lData;

  gSecondaryTimer = pTimeOut;
 8002c48:	f240 230c 	movw	r3, #524	; 0x20c
 8002c4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c50:	6018      	str	r0, [r3, #0]

  do {
    lData = ArcadeIT_SPI_Port_RW_Byte(DUMMY_BYTE);
 8002c52:	20ff      	movs	r0, #255	; 0xff
 8002c54:	f7ff fafb 	bl	800224e <ArcadeIT_SPI_Port_RW_Byte>
    // This loop takes a time. Insert rot_rdq() here for multi task environment.

  } while (lData != DUMMY_BYTE && gSecondaryTimer); // Wait for card goes ready or timeout
 8002c58:	28ff      	cmp	r0, #255	; 0xff
 8002c5a:	d006      	beq.n	8002c6a <wait_ready+0x24>
 8002c5c:	f240 230c 	movw	r3, #524	; 0x20c
 8002c60:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1f3      	bne.n	8002c52 <wait_ready+0xc>

  return (lData == DUMMY_BYTE) ? 1 : 0;

} // End wait_ready.
 8002c6a:	28ff      	cmp	r0, #255	; 0xff
 8002c6c:	bf14      	ite	ne
 8002c6e:	2000      	movne	r0, #0
 8002c70:	2001      	moveq	r0, #1
 8002c72:	bd08      	pop	{r3, pc}

08002c74 <sd_deselect>:

// /////////////////////////////////////////////////////////////////////////////
static void sd_deselect(void)
{
 8002c74:	b508      	push	{r3, lr}
  // Deselect card and release SPI.
  SYS_SPI_CS_HIGH();
 8002c76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c7a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002c7e:	695a      	ldr	r2, [r3, #20]
 8002c80:	f042 0210 	orr.w	r2, r2, #16
 8002c84:	615a      	str	r2, [r3, #20]

  // Dummy clock (force DO hi-z for multiple slave SPI).
  ArcadeIT_SPI_Port_RW_Byte(DUMMY_BYTE);
 8002c86:	20ff      	movs	r0, #255	; 0xff
 8002c88:	f7ff fae1 	bl	800224e <ArcadeIT_SPI_Port_RW_Byte>

} // End sd_deselect.
 8002c8c:	bd08      	pop	{r3, pc}

08002c8e <sd_select>:

// /////////////////////////////////////////////////////////////////////////////
static int sd_select (void) /* 1:OK, 0:Timeout */
{
 8002c8e:	b508      	push	{r3, lr}
  // Select card and wait for ready
  // lReturnValue :  1:OK, 0:Timeout
  SYS_SPI_CS_LOW();
 8002c90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c94:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002c98:	695a      	ldr	r2, [r3, #20]
 8002c9a:	f022 0210 	bic.w	r2, r2, #16
 8002c9e:	615a      	str	r2, [r3, #20]

  // Dummy clock (force DO enabled).
  ArcadeIT_SPI_Port_RW_Byte(DUMMY_BYTE);
 8002ca0:	20ff      	movs	r0, #255	; 0xff
 8002ca2:	f7ff fad4 	bl	800224e <ArcadeIT_SPI_Port_RW_Byte>

  if (wait_ready(ARCADEIT_MILLISECOND)) return TRUE; // OK
 8002ca6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002caa:	f7ff ffcc 	bl	8002c46 <wait_ready>
 8002cae:	b108      	cbz	r0, 8002cb4 <sd_select+0x26>
 8002cb0:	2001      	movs	r0, #1

  sd_deselect();

  return FALSE; // Timeout.

} // End sd_select.
 8002cb2:	bd08      	pop	{r3, pc}
  sd_deselect();
 8002cb4:	f7ff ffde 	bl	8002c74 <sd_deselect>
  return FALSE; // Timeout.
 8002cb8:	2000      	movs	r0, #0
 8002cba:	e7fa      	b.n	8002cb2 <sd_select+0x24>

08002cbc <send_cmd>:
(
  BYTE  pCommand,   // Command index
  DWORD pArgument   // Argument
                    // Return value: R1 resp (bit7==1:Failed to send)
)
{
 8002cbc:	b538      	push	{r3, r4, r5, lr}
 8002cbe:	4604      	mov	r4, r0
 8002cc0:	460d      	mov	r5, r1
  BYTE n, lResult;

  uint8_t lData;

  if (pCommand & 0x80)
 8002cc2:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002cc6:	d12c      	bne.n	8002d22 <send_cmd+0x66>
    if (lResult > 1) return lResult;

  } // End if.

  // Select the card and wait for ready except to stop multiple block read.
  if (pCommand != CMD12)
 8002cc8:	2c0c      	cmp	r4, #12
 8002cca:	d004      	beq.n	8002cd6 <send_cmd+0x1a>
  {
    sd_deselect();
 8002ccc:	f7ff ffd2 	bl	8002c74 <sd_deselect>

    if (!sd_select()) return DUMMY_BYTE;
 8002cd0:	f7ff ffdd 	bl	8002c8e <sd_select>
 8002cd4:	b3b0      	cbz	r0, 8002d44 <send_cmd+0x88>

  } // End if.

  // Send command packet.
  ArcadeIT_SPI_Port_RW_Byte(0x40 | pCommand);          // Start + command index
 8002cd6:	f044 0040 	orr.w	r0, r4, #64	; 0x40
 8002cda:	f7ff fab8 	bl	800224e <ArcadeIT_SPI_Port_RW_Byte>
  ArcadeIT_SPI_Port_RW_Byte((pArgument >> 24) & 0xFF); // Argument[31..24]
 8002cde:	0e28      	lsrs	r0, r5, #24
 8002ce0:	f7ff fab5 	bl	800224e <ArcadeIT_SPI_Port_RW_Byte>
  ArcadeIT_SPI_Port_RW_Byte((pArgument >> 16) & 0xFF); // Argument[23..16]
 8002ce4:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8002ce8:	f7ff fab1 	bl	800224e <ArcadeIT_SPI_Port_RW_Byte>
  ArcadeIT_SPI_Port_RW_Byte((pArgument >> 8) & 0xFF);  // Argument[15..8]
 8002cec:	f3c5 2007 	ubfx	r0, r5, #8, #8
 8002cf0:	f7ff faad 	bl	800224e <ArcadeIT_SPI_Port_RW_Byte>
  ArcadeIT_SPI_Port_RW_Byte(pArgument & 0xFF);         // Argument[7..0]
 8002cf4:	b2e8      	uxtb	r0, r5
 8002cf6:	f7ff faaa 	bl	800224e <ArcadeIT_SPI_Port_RW_Byte>

  lData = 0x01;                        // Dummy CRC + Stop.
  if (pCommand == CMD0) lData = 0x95;  // Valid CRC for CMD0(0).
 8002cfa:	b1dc      	cbz	r4, 8002d34 <send_cmd+0x78>
  lData = 0x01;                        // Dummy CRC + Stop.
 8002cfc:	2001      	movs	r0, #1
  if (pCommand == CMD8) lData = 0x87;  // Valid CRC for CMD8(0x1AA).
 8002cfe:	2c08      	cmp	r4, #8
 8002d00:	d01a      	beq.n	8002d38 <send_cmd+0x7c>

  ArcadeIT_SPI_Port_RW_Byte(lData);
 8002d02:	f7ff faa4 	bl	800224e <ArcadeIT_SPI_Port_RW_Byte>

  // Receive command response.
  lData = DUMMY_BYTE;

  // Discard following one byte when CMD12.
  if (pCommand == CMD12) ArcadeIT_SPI_Port_RW_Byte(lData);
 8002d06:	2c0c      	cmp	r4, #12
 8002d08:	d018      	beq.n	8002d3c <send_cmd+0x80>
  if (pCommand == CMD8) lData = 0x87;  // Valid CRC for CMD8(0x1AA).
 8002d0a:	240a      	movs	r4, #10

  // Wait for response (10 bytes max).
  n = 10;
  do {
    lResult = ArcadeIT_SPI_Port_RW_Byte(lData);
 8002d0c:	20ff      	movs	r0, #255	; 0xff
 8002d0e:	f7ff fa9e 	bl	800224e <ArcadeIT_SPI_Port_RW_Byte>

  } while ((lResult & 0x80) && --n);
 8002d12:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002d16:	d003      	beq.n	8002d20 <send_cmd+0x64>
 8002d18:	1e63      	subs	r3, r4, #1
 8002d1a:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8002d1e:	d1f5      	bne.n	8002d0c <send_cmd+0x50>

  // Return received response.
  return lResult;

} // End send_cmd.
 8002d20:	bd38      	pop	{r3, r4, r5, pc}
    pCommand &= 0x7F;
 8002d22:	f000 047f 	and.w	r4, r0, #127	; 0x7f
    lResult = send_cmd(CMD55, 0);
 8002d26:	2100      	movs	r1, #0
 8002d28:	2037      	movs	r0, #55	; 0x37
 8002d2a:	f7ff ffc7 	bl	8002cbc <send_cmd>
    if (lResult > 1) return lResult;
 8002d2e:	2801      	cmp	r0, #1
 8002d30:	d8f6      	bhi.n	8002d20 <send_cmd+0x64>
 8002d32:	e7c9      	b.n	8002cc8 <send_cmd+0xc>
  if (pCommand == CMD0) lData = 0x95;  // Valid CRC for CMD0(0).
 8002d34:	2095      	movs	r0, #149	; 0x95
 8002d36:	e7e2      	b.n	8002cfe <send_cmd+0x42>
  if (pCommand == CMD8) lData = 0x87;  // Valid CRC for CMD8(0x1AA).
 8002d38:	2087      	movs	r0, #135	; 0x87
 8002d3a:	e7e2      	b.n	8002d02 <send_cmd+0x46>
  if (pCommand == CMD12) ArcadeIT_SPI_Port_RW_Byte(lData);
 8002d3c:	20ff      	movs	r0, #255	; 0xff
 8002d3e:	f7ff fa86 	bl	800224e <ArcadeIT_SPI_Port_RW_Byte>
 8002d42:	e7e2      	b.n	8002d0a <send_cmd+0x4e>
    if (!sd_select()) return DUMMY_BYTE;
 8002d44:	20ff      	movs	r0, #255	; 0xff
 8002d46:	e7eb      	b.n	8002d20 <send_cmd+0x64>

08002d48 <sd_read_block>:
{
 8002d48:	b538      	push	{r3, r4, r5, lr}
 8002d4a:	4604      	mov	r4, r0
 8002d4c:	460d      	mov	r5, r1
  gSecondaryTimer = 200;
 8002d4e:	f240 230c 	movw	r3, #524	; 0x20c
 8002d52:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d56:	22c8      	movs	r2, #200	; 0xc8
 8002d58:	601a      	str	r2, [r3, #0]
    lToken = ArcadeIT_SPI_Port_RW_Byte(DUMMY_BYTE);
 8002d5a:	20ff      	movs	r0, #255	; 0xff
 8002d5c:	f7ff fa77 	bl	800224e <ArcadeIT_SPI_Port_RW_Byte>
  } while ((lToken == DUMMY_BYTE) && gSecondaryTimer);
 8002d60:	28ff      	cmp	r0, #255	; 0xff
 8002d62:	d106      	bne.n	8002d72 <sd_read_block+0x2a>
 8002d64:	f240 230c 	movw	r3, #524	; 0x20c
 8002d68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1f3      	bne.n	8002d5a <sd_read_block+0x12>
  if(lToken != 0xFE) return 0;
 8002d72:	28fe      	cmp	r0, #254	; 0xfe
 8002d74:	d001      	beq.n	8002d7a <sd_read_block+0x32>
 8002d76:	2000      	movs	r0, #0
} // End sd_read_block.
 8002d78:	bd38      	pop	{r3, r4, r5, pc}
  ArcadeIT_SPI_Port_Read_Buffer(pBuffer, pNumberOfBytes);
 8002d7a:	4629      	mov	r1, r5
 8002d7c:	4620      	mov	r0, r4
 8002d7e:	f7ff fa8e 	bl	800229e <ArcadeIT_SPI_Port_Read_Buffer>
  ArcadeIT_SPI_Port_RW_Byte(DUMMY_BYTE);
 8002d82:	20ff      	movs	r0, #255	; 0xff
 8002d84:	f7ff fa63 	bl	800224e <ArcadeIT_SPI_Port_RW_Byte>
  ArcadeIT_SPI_Port_RW_Byte(DUMMY_BYTE);
 8002d88:	20ff      	movs	r0, #255	; 0xff
 8002d8a:	f7ff fa60 	bl	800224e <ArcadeIT_SPI_Port_RW_Byte>
  return 1;
 8002d8e:	2001      	movs	r0, #1
 8002d90:	e7f2      	b.n	8002d78 <sd_read_block+0x30>

08002d92 <sd_write_block>:
{
 8002d92:	b538      	push	{r3, r4, r5, lr}
 8002d94:	4605      	mov	r5, r0
 8002d96:	460c      	mov	r4, r1
  if (!wait_ready(500)) return 0;
 8002d98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d9c:	f7ff ff53 	bl	8002c46 <wait_ready>
 8002da0:	b908      	cbnz	r0, 8002da6 <sd_write_block+0x14>
 8002da2:	2000      	movs	r0, #0
} // End sd_write_block.
 8002da4:	bd38      	pop	{r3, r4, r5, pc}
  ArcadeIT_SPI_Port_RW_Byte(pToken);
 8002da6:	4620      	mov	r0, r4
 8002da8:	f7ff fa51 	bl	800224e <ArcadeIT_SPI_Port_RW_Byte>
  if (pToken != 0xFD)
 8002dac:	2cfd      	cmp	r4, #253	; 0xfd
 8002dae:	d013      	beq.n	8002dd8 <sd_write_block+0x46>
    ArcadeIT_SPI_Port_Write_Buffer(pBuffer, 512);
 8002db0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002db4:	4628      	mov	r0, r5
 8002db6:	f7ff fa7f 	bl	80022b8 <ArcadeIT_SPI_Port_Write_Buffer>
    ArcadeIT_SPI_Port_RW_Byte(DUMMY_BYTE);
 8002dba:	20ff      	movs	r0, #255	; 0xff
 8002dbc:	f7ff fa47 	bl	800224e <ArcadeIT_SPI_Port_RW_Byte>
    ArcadeIT_SPI_Port_RW_Byte(DUMMY_BYTE);
 8002dc0:	20ff      	movs	r0, #255	; 0xff
 8002dc2:	f7ff fa44 	bl	800224e <ArcadeIT_SPI_Port_RW_Byte>
    lResponse = ArcadeIT_SPI_Port_RW_Byte(DUMMY_BYTE);
 8002dc6:	20ff      	movs	r0, #255	; 0xff
 8002dc8:	f7ff fa41 	bl	800224e <ArcadeIT_SPI_Port_RW_Byte>
    if ((lResponse & 0x1F) != 0x05) return 0;
 8002dcc:	f000 001f 	and.w	r0, r0, #31
 8002dd0:	2805      	cmp	r0, #5
 8002dd2:	d003      	beq.n	8002ddc <sd_write_block+0x4a>
 8002dd4:	2000      	movs	r0, #0
 8002dd6:	e7e5      	b.n	8002da4 <sd_write_block+0x12>
  return 1;
 8002dd8:	2001      	movs	r0, #1
 8002dda:	e7e3      	b.n	8002da4 <sd_write_block+0x12>
 8002ddc:	2001      	movs	r0, #1
 8002dde:	e7e1      	b.n	8002da4 <sd_write_block+0x12>

08002de0 <ArcadeIT_SDCard_Disk_Initialize>:

// /////////////////////////////////////////////////////////////////////////////
DSTATUS ArcadeIT_SDCard_Disk_Initialize(void)
{
 8002de0:	b570      	push	{r4, r5, r6, lr}
 8002de2:	b082      	sub	sp, #8
  BYTE n, cmd, ty, ocr[4];

  BYTE lData = DUMMY_BYTE;

  SYS_SPI_SLOW();
 8002de4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002de8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 8002df2:	601a      	str	r2, [r3, #0]

  // Send 80 dummy clocks.
  for (n = 40; n; n--) ArcadeIT_SPI_Port_RW_Byte(DUMMY_BYTE);
 8002df4:	2428      	movs	r4, #40	; 0x28
 8002df6:	e004      	b.n	8002e02 <ArcadeIT_SDCard_Disk_Initialize+0x22>
 8002df8:	20ff      	movs	r0, #255	; 0xff
 8002dfa:	f7ff fa28 	bl	800224e <ArcadeIT_SPI_Port_RW_Byte>
 8002dfe:	3c01      	subs	r4, #1
 8002e00:	b2e4      	uxtb	r4, r4
 8002e02:	2c00      	cmp	r4, #0
 8002e04:	d1f8      	bne.n	8002df8 <ArcadeIT_SDCard_Disk_Initialize+0x18>

  ty = 0;
  if (send_cmd(CMD0, 0) == 1)
 8002e06:	2100      	movs	r1, #0
 8002e08:	4608      	mov	r0, r1
 8002e0a:	f7ff ff57 	bl	8002cbc <send_cmd>
 8002e0e:	4605      	mov	r5, r0
 8002e10:	2801      	cmp	r0, #1
 8002e12:	d016      	beq.n	8002e42 <ArcadeIT_SDCard_Disk_Initialize+0x62>

    } // End if.

  } // End if.

  gCardType = ty;  // Card type
 8002e14:	f640 6358 	movw	r3, #3672	; 0xe58
 8002e18:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e1c:	701c      	strb	r4, [r3, #0]

  sd_deselect();
 8002e1e:	f7ff ff29 	bl	8002c74 <sd_deselect>

  if (ty)
 8002e22:	2c00      	cmp	r4, #0
 8002e24:	f040 808e 	bne.w	8002f44 <ArcadeIT_SDCard_Disk_Initialize+0x164>
    gStatus[DEV_SD] &= ~STA_NOINIT;  // Clear STA_NOINIT flag
  }
  else
  {
    // Failed
    gStatus[DEV_SD] = STA_NOINIT;
 8002e28:	f240 0310 	movw	r3, #16
 8002e2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e30:	2201      	movs	r2, #1
 8002e32:	705a      	strb	r2, [r3, #1]

  } // End if.

  return gStatus[DEV_SD];
 8002e34:	f240 0310 	movw	r3, #16
 8002e38:	f2c2 0300 	movt	r3, #8192	; 0x2000

} // End ArcadeIT_SDCard_Disk_Initialize.
 8002e3c:	7858      	ldrb	r0, [r3, #1]
 8002e3e:	b002      	add	sp, #8
 8002e40:	bd70      	pop	{r4, r5, r6, pc}
    if (send_cmd(CMD8, 0x1AA) == 1)
 8002e42:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002e46:	2008      	movs	r0, #8
 8002e48:	f7ff ff38 	bl	8002cbc <send_cmd>
 8002e4c:	2801      	cmp	r0, #1
 8002e4e:	d148      	bne.n	8002ee2 <ArcadeIT_SDCard_Disk_Initialize+0x102>
      for (n = 0; n < 4; n++)
 8002e50:	4625      	mov	r5, r4
 8002e52:	e008      	b.n	8002e66 <ArcadeIT_SDCard_Disk_Initialize+0x86>
        lData = ArcadeIT_SPI_Port_RW_Byte(DUMMY_BYTE);
 8002e54:	20ff      	movs	r0, #255	; 0xff
 8002e56:	f7ff f9fa 	bl	800224e <ArcadeIT_SPI_Port_RW_Byte>
        ocr[n] = lData;
 8002e5a:	ab02      	add	r3, sp, #8
 8002e5c:	442b      	add	r3, r5
 8002e5e:	f803 0c04 	strb.w	r0, [r3, #-4]
      for (n = 0; n < 4; n++)
 8002e62:	3501      	adds	r5, #1
 8002e64:	b2ed      	uxtb	r5, r5
 8002e66:	2d03      	cmp	r5, #3
 8002e68:	d9f4      	bls.n	8002e54 <ArcadeIT_SDCard_Disk_Initialize+0x74>
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8002e6a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d1d0      	bne.n	8002e14 <ArcadeIT_SDCard_Disk_Initialize+0x34>
 8002e72:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002e76:	2baa      	cmp	r3, #170	; 0xaa
 8002e78:	d1cc      	bne.n	8002e14 <ArcadeIT_SDCard_Disk_Initialize+0x34>
        gSecondaryTimer = ARCADEIT_MILLISECOND;
 8002e7a:	f240 230c 	movw	r3, #524	; 0x20c
 8002e7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e86:	601a      	str	r2, [r3, #0]
        while (gSecondaryTimer && send_cmd(ACMD41, 1UL << 30)); // Wait for end of initialization with ACMD41(HCS)
 8002e88:	f240 230c 	movw	r3, #524	; 0x20c
 8002e8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	b133      	cbz	r3, 8002ea2 <ArcadeIT_SDCard_Disk_Initialize+0xc2>
 8002e94:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002e98:	20a9      	movs	r0, #169	; 0xa9
 8002e9a:	f7ff ff0f 	bl	8002cbc <send_cmd>
 8002e9e:	2800      	cmp	r0, #0
 8002ea0:	d1f2      	bne.n	8002e88 <ArcadeIT_SDCard_Disk_Initialize+0xa8>
        if (gSecondaryTimer && send_cmd(CMD58, 0) == 0)
 8002ea2:	f240 230c 	movw	r3, #524	; 0x20c
 8002ea6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0b1      	beq.n	8002e14 <ArcadeIT_SDCard_Disk_Initialize+0x34>
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	203a      	movs	r0, #58	; 0x3a
 8002eb4:	f7ff ff02 	bl	8002cbc <send_cmd>
 8002eb8:	4605      	mov	r5, r0
 8002eba:	b148      	cbz	r0, 8002ed0 <ArcadeIT_SDCard_Disk_Initialize+0xf0>
 8002ebc:	e7aa      	b.n	8002e14 <ArcadeIT_SDCard_Disk_Initialize+0x34>
            lData = ArcadeIT_SPI_Port_RW_Byte(DUMMY_BYTE);
 8002ebe:	20ff      	movs	r0, #255	; 0xff
 8002ec0:	f7ff f9c5 	bl	800224e <ArcadeIT_SPI_Port_RW_Byte>
            ocr[n] = lData;
 8002ec4:	ab02      	add	r3, sp, #8
 8002ec6:	442b      	add	r3, r5
 8002ec8:	f803 0c04 	strb.w	r0, [r3, #-4]
          for (n = 0; n < 4; n++)
 8002ecc:	3501      	adds	r5, #1
 8002ece:	b2ed      	uxtb	r5, r5
 8002ed0:	2d03      	cmp	r5, #3
 8002ed2:	d9f4      	bls.n	8002ebe <ArcadeIT_SDCard_Disk_Initialize+0xde>
          ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;  // Card id SDv2
 8002ed4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002ed8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002edc:	d030      	beq.n	8002f40 <ArcadeIT_SDCard_Disk_Initialize+0x160>
 8002ede:	240c      	movs	r4, #12
 8002ee0:	e798      	b.n	8002e14 <ArcadeIT_SDCard_Disk_Initialize+0x34>
      if (send_cmd(ACMD41, 0) <= 1)
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	20a9      	movs	r0, #169	; 0xa9
 8002ee6:	f7ff fee9 	bl	8002cbc <send_cmd>
 8002eea:	2801      	cmp	r0, #1
 8002eec:	d925      	bls.n	8002f3a <ArcadeIT_SDCard_Disk_Initialize+0x15a>
        ty = CT_MMC;
 8002eee:	462e      	mov	r6, r5
      gSecondaryTimer = ARCADEIT_MILLISECOND;
 8002ef0:	f240 230c 	movw	r3, #524	; 0x20c
 8002ef4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ef8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002efc:	601a      	str	r2, [r3, #0]
      while (gSecondaryTimer && send_cmd(cmd, 0));    // Wait for end of initialization
 8002efe:	f240 230c 	movw	r3, #524	; 0x20c
 8002f02:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	b12b      	cbz	r3, 8002f16 <ArcadeIT_SDCard_Disk_Initialize+0x136>
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	4628      	mov	r0, r5
 8002f0e:	f7ff fed5 	bl	8002cbc <send_cmd>
 8002f12:	2800      	cmp	r0, #0
 8002f14:	d1f3      	bne.n	8002efe <ArcadeIT_SDCard_Disk_Initialize+0x11e>
      if (!gSecondaryTimer || send_cmd(CMD16, 512) != 0) // Set block length: 512
 8002f16:	f240 230c 	movw	r3, #524	; 0x20c
 8002f1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f43f af77 	beq.w	8002e14 <ArcadeIT_SDCard_Disk_Initialize+0x34>
 8002f26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f2a:	2010      	movs	r0, #16
 8002f2c:	f7ff fec6 	bl	8002cbc <send_cmd>
 8002f30:	2800      	cmp	r0, #0
 8002f32:	f47f af6f 	bne.w	8002e14 <ArcadeIT_SDCard_Disk_Initialize+0x34>
 8002f36:	4634      	mov	r4, r6
 8002f38:	e76c      	b.n	8002e14 <ArcadeIT_SDCard_Disk_Initialize+0x34>
        ty = CT_SD1;
 8002f3a:	2602      	movs	r6, #2
        cmd = ACMD41;  // SDv1 (ACMD41(0))
 8002f3c:	25a9      	movs	r5, #169	; 0xa9
 8002f3e:	e7d7      	b.n	8002ef0 <ArcadeIT_SDCard_Disk_Initialize+0x110>
          ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;  // Card id SDv2
 8002f40:	2404      	movs	r4, #4
 8002f42:	e767      	b.n	8002e14 <ArcadeIT_SDCard_Disk_Initialize+0x34>
    SYS_SPI_FAST();                      // Set fast clock
 8002f44:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002f48:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8002f4c:	6813      	ldr	r3, [r2, #0]
 8002f4e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8002f52:	f043 0308 	orr.w	r3, r3, #8
 8002f56:	6013      	str	r3, [r2, #0]
    gStatus[DEV_SD] &= ~STA_NOINIT;  // Clear STA_NOINIT flag
 8002f58:	f240 0310 	movw	r3, #16
 8002f5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f60:	785a      	ldrb	r2, [r3, #1]
 8002f62:	f022 0201 	bic.w	r2, r2, #1
 8002f66:	705a      	strb	r2, [r3, #1]
 8002f68:	e764      	b.n	8002e34 <ArcadeIT_SDCard_Disk_Initialize+0x54>

08002f6a <ArcadeIT_SDCard_Disk_Status>:

// /////////////////////////////////////////////////////////////////////////////
DSTATUS ArcadeIT_SDCard_Disk_Status (void)
{
  // Return disk status.
  return gStatus[DEV_SD];
 8002f6a:	f240 0310 	movw	r3, #16
 8002f6e:	f2c2 0300 	movt	r3, #8192	; 0x2000

} // End ArcadeIT_SDCard_Disk_Status.
 8002f72:	7858      	ldrb	r0, [r3, #1]
 8002f74:	4770      	bx	lr

08002f76 <ArcadeIT_SDCard_Disk_Read>:
  BYTE *pBuffer,   // Pointer to the data buffer to store read data
  DWORD pSector,   // Start pSector number (LBA)
  UINT  pCount     // Number of sectors to read (1..128)
)
{
  if (!pCount) return RES_PARERR;   // Check parameter
 8002f76:	2a00      	cmp	r2, #0
 8002f78:	d03b      	beq.n	8002ff2 <ArcadeIT_SDCard_Disk_Read+0x7c>
{
 8002f7a:	b538      	push	{r3, r4, r5, lr}
 8002f7c:	4605      	mov	r5, r0
 8002f7e:	4614      	mov	r4, r2

  if (gStatus[DEV_SD] & STA_NOINIT) return RES_NOTRDY; // Check if drive is ready
 8002f80:	f240 0310 	movw	r3, #16
 8002f84:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f88:	785b      	ldrb	r3, [r3, #1]
 8002f8a:	f013 0f01 	tst.w	r3, #1
 8002f8e:	d132      	bne.n	8002ff6 <ArcadeIT_SDCard_Disk_Read+0x80>

  if (!(gCardType & CT_BLOCK)) pSector *= 512;  // LBA of BA conversion (byte addressing cards)
 8002f90:	f640 6358 	movw	r3, #3672	; 0xe58
 8002f94:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	f013 0f08 	tst.w	r3, #8
 8002f9e:	d100      	bne.n	8002fa2 <ArcadeIT_SDCard_Disk_Read+0x2c>
 8002fa0:	0249      	lsls	r1, r1, #9

  if (pCount == 1)
 8002fa2:	2c01      	cmp	r4, #1
 8002fa4:	d017      	beq.n	8002fd6 <ArcadeIT_SDCard_Disk_Read+0x60>
    }
  }
  else
  {
    // Multiple pSector read
    if (send_cmd(CMD18, pSector) == 0)
 8002fa6:	2012      	movs	r0, #18
 8002fa8:	f7ff fe88 	bl	8002cbc <send_cmd>
 8002fac:	b968      	cbnz	r0, 8002fca <ArcadeIT_SDCard_Disk_Read+0x54>
    {
      // READ_MULTIPLE_BLOCK
      do {
        if (!sd_read_block(pBuffer, 512)) break;
 8002fae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002fb2:	4628      	mov	r0, r5
 8002fb4:	f7ff fec8 	bl	8002d48 <sd_read_block>
 8002fb8:	b118      	cbz	r0, 8002fc2 <ArcadeIT_SDCard_Disk_Read+0x4c>

        pBuffer += 512;
 8002fba:	f505 7500 	add.w	r5, r5, #512	; 0x200

      } while (--pCount);
 8002fbe:	3c01      	subs	r4, #1
 8002fc0:	d1f5      	bne.n	8002fae <ArcadeIT_SDCard_Disk_Read+0x38>

      // STOP_TRANSMISSION
      send_cmd(CMD12, 0);
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	200c      	movs	r0, #12
 8002fc6:	f7ff fe79 	bl	8002cbc <send_cmd>
    }
  }

  sd_deselect();
 8002fca:	f7ff fe53 	bl	8002c74 <sd_deselect>

  // Return result
  return pCount ? RES_ERROR : RES_OK;
 8002fce:	1c20      	adds	r0, r4, #0
 8002fd0:	bf18      	it	ne
 8002fd2:	2001      	movne	r0, #1

} // End ArcadeIT_SDCard_Disk_Read.
 8002fd4:	bd38      	pop	{r3, r4, r5, pc}
    if ((send_cmd(CMD17, pSector) == 0) && sd_read_block(pBuffer, 512))
 8002fd6:	2011      	movs	r0, #17
 8002fd8:	f7ff fe70 	bl	8002cbc <send_cmd>
 8002fdc:	2800      	cmp	r0, #0
 8002fde:	d1f4      	bne.n	8002fca <ArcadeIT_SDCard_Disk_Read+0x54>
 8002fe0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002fe4:	4628      	mov	r0, r5
 8002fe6:	f7ff feaf 	bl	8002d48 <sd_read_block>
 8002fea:	2800      	cmp	r0, #0
 8002fec:	d0ed      	beq.n	8002fca <ArcadeIT_SDCard_Disk_Read+0x54>
      pCount = 0;
 8002fee:	2400      	movs	r4, #0
 8002ff0:	e7eb      	b.n	8002fca <ArcadeIT_SDCard_Disk_Read+0x54>
  if (!pCount) return RES_PARERR;   // Check parameter
 8002ff2:	2004      	movs	r0, #4
} // End ArcadeIT_SDCard_Disk_Read.
 8002ff4:	4770      	bx	lr
  if (gStatus[DEV_SD] & STA_NOINIT) return RES_NOTRDY; // Check if drive is ready
 8002ff6:	2003      	movs	r0, #3
 8002ff8:	e7ec      	b.n	8002fd4 <ArcadeIT_SDCard_Disk_Read+0x5e>

08002ffa <ArcadeIT_SDCard_Disk_Write>:
  const BYTE *pBuffer,   // Pointer to the data to write
  DWORD pSector,   // Start pSector number (LBA)
  UINT  pCount     // Number of sectors to write (1..128)
)
{
  if (!pCount) return RES_PARERR;   // Check parameter
 8002ffa:	2a00      	cmp	r2, #0
 8002ffc:	d04a      	beq.n	8003094 <ArcadeIT_SDCard_Disk_Write+0x9a>
{
 8002ffe:	b570      	push	{r4, r5, r6, lr}
 8003000:	4605      	mov	r5, r0
 8003002:	460e      	mov	r6, r1
 8003004:	4614      	mov	r4, r2
  if (gStatus[DEV_SD] & STA_NOINIT) return RES_NOTRDY; // Check if drive is ready
 8003006:	f240 0310 	movw	r3, #16
 800300a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800300e:	785b      	ldrb	r3, [r3, #1]
 8003010:	f013 0f01 	tst.w	r3, #1
 8003014:	d140      	bne.n	8003098 <ArcadeIT_SDCard_Disk_Write+0x9e>
  if (gStatus[DEV_SD] & STA_PROTECT) return RES_WRPRT; // Check write protect
 8003016:	f013 0f04 	tst.w	r3, #4
 800301a:	d13f      	bne.n	800309c <ArcadeIT_SDCard_Disk_Write+0xa2>

  if (!(gCardType & CT_BLOCK)) pSector *= 512;  // LBA ==> BA conversion (byte addressing cards)
 800301c:	f640 6358 	movw	r3, #3672	; 0xe58
 8003020:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	f013 0f08 	tst.w	r3, #8
 800302a:	d100      	bne.n	800302e <ArcadeIT_SDCard_Disk_Write+0x34>
 800302c:	024e      	lsls	r6, r1, #9

  if (pCount == 1)
 800302e:	2c01      	cmp	r4, #1
 8003030:	d01b      	beq.n	800306a <ArcadeIT_SDCard_Disk_Write+0x70>

    } // End if.
  }
  else
  {        // Multiple pSector write
    if (gCardType & CT_SDC) send_cmd(ACMD23, pCount); // Predefine number of sectors
 8003032:	f013 0f06 	tst.w	r3, #6
 8003036:	d126      	bne.n	8003086 <ArcadeIT_SDCard_Disk_Write+0x8c>

    if (send_cmd(CMD25, pSector) == 0)
 8003038:	4631      	mov	r1, r6
 800303a:	2019      	movs	r0, #25
 800303c:	f7ff fe3e 	bl	8002cbc <send_cmd>
 8003040:	b968      	cbnz	r0, 800305e <ArcadeIT_SDCard_Disk_Write+0x64>
    {
      // WRITE_MULTIPLE_BLOCK
      do {
        if (!sd_write_block((BYTE*)pBuffer, 0xFC)) break;
 8003042:	21fc      	movs	r1, #252	; 0xfc
 8003044:	4628      	mov	r0, r5
 8003046:	f7ff fea4 	bl	8002d92 <sd_write_block>
 800304a:	b118      	cbz	r0, 8003054 <ArcadeIT_SDCard_Disk_Write+0x5a>

        pBuffer += 512;
 800304c:	f505 7500 	add.w	r5, r5, #512	; 0x200

      } while (--pCount);
 8003050:	3c01      	subs	r4, #1
 8003052:	d1f6      	bne.n	8003042 <ArcadeIT_SDCard_Disk_Write+0x48>

      if (!sd_write_block(0, 0xFD)) pCount = 1;  // STOP_TRAN token
 8003054:	21fd      	movs	r1, #253	; 0xfd
 8003056:	2000      	movs	r0, #0
 8003058:	f7ff fe9b 	bl	8002d92 <sd_write_block>
 800305c:	b1c0      	cbz	r0, 8003090 <ArcadeIT_SDCard_Disk_Write+0x96>

    } // End if.

  } // End if.

  sd_deselect();
 800305e:	f7ff fe09 	bl	8002c74 <sd_deselect>

  // Return result.
  return pCount ? RES_ERROR : RES_OK;
 8003062:	1c20      	adds	r0, r4, #0
 8003064:	bf18      	it	ne
 8003066:	2001      	movne	r0, #1

} // End ArcadeIT_SDCard_Disk_Write.
 8003068:	bd70      	pop	{r4, r5, r6, pc}
    if ((send_cmd(CMD24, pSector) == 0) && sd_write_block((BYTE*)pBuffer, 0xFE))
 800306a:	4631      	mov	r1, r6
 800306c:	2018      	movs	r0, #24
 800306e:	f7ff fe25 	bl	8002cbc <send_cmd>
 8003072:	2800      	cmp	r0, #0
 8003074:	d1f3      	bne.n	800305e <ArcadeIT_SDCard_Disk_Write+0x64>
 8003076:	21fe      	movs	r1, #254	; 0xfe
 8003078:	4628      	mov	r0, r5
 800307a:	f7ff fe8a 	bl	8002d92 <sd_write_block>
 800307e:	2800      	cmp	r0, #0
 8003080:	d0ed      	beq.n	800305e <ArcadeIT_SDCard_Disk_Write+0x64>
      pCount = 0;
 8003082:	2400      	movs	r4, #0
 8003084:	e7eb      	b.n	800305e <ArcadeIT_SDCard_Disk_Write+0x64>
    if (gCardType & CT_SDC) send_cmd(ACMD23, pCount); // Predefine number of sectors
 8003086:	4621      	mov	r1, r4
 8003088:	2097      	movs	r0, #151	; 0x97
 800308a:	f7ff fe17 	bl	8002cbc <send_cmd>
 800308e:	e7d3      	b.n	8003038 <ArcadeIT_SDCard_Disk_Write+0x3e>
      if (!sd_write_block(0, 0xFD)) pCount = 1;  // STOP_TRAN token
 8003090:	2401      	movs	r4, #1
 8003092:	e7e4      	b.n	800305e <ArcadeIT_SDCard_Disk_Write+0x64>
  if (!pCount) return RES_PARERR;   // Check parameter
 8003094:	2004      	movs	r0, #4
} // End ArcadeIT_SDCard_Disk_Write.
 8003096:	4770      	bx	lr
  if (gStatus[DEV_SD] & STA_NOINIT) return RES_NOTRDY; // Check if drive is ready
 8003098:	2003      	movs	r0, #3
 800309a:	e7e5      	b.n	8003068 <ArcadeIT_SDCard_Disk_Write+0x6e>
  if (gStatus[DEV_SD] & STA_PROTECT) return RES_WRPRT; // Check write protect
 800309c:	2002      	movs	r0, #2
 800309e:	e7e3      	b.n	8003068 <ArcadeIT_SDCard_Disk_Write+0x6e>

080030a0 <ArcadeIT_SDCard_Disk_Ioctl>:
DRESULT ArcadeIT_SDCard_Disk_Ioctl
(
  BYTE pCommand,   // Control command code
  void *pBuffer    // Pointer to the conrtol data
)
{
 80030a0:	b530      	push	{r4, r5, lr}
 80030a2:	b085      	sub	sp, #20
  DRESULT res;
  BYTE n, csd[16];
  DWORD *dp, st, ed, csize;

  if (gStatus[DEV_SD] & STA_NOINIT) return RES_NOTRDY; // Check if drive is ready
 80030a4:	f240 0310 	movw	r3, #16
 80030a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80030ac:	785b      	ldrb	r3, [r3, #1]
 80030ae:	f013 0f01 	tst.w	r3, #1
 80030b2:	f040 810b 	bne.w	80032cc <ArcadeIT_SDCard_Disk_Ioctl+0x22c>
 80030b6:	460d      	mov	r5, r1

  res = RES_ERROR;

  switch (pCommand)
 80030b8:	2804      	cmp	r0, #4
 80030ba:	f200 80fb 	bhi.w	80032b4 <ArcadeIT_SDCard_Disk_Ioctl+0x214>
 80030be:	e8df f010 	tbh	[pc, r0, lsl #1]
 80030c2:	0005      	.short	0x0005
 80030c4:	00f9000c 	.word	0x00f9000c
 80030c8:	00b60055 	.word	0x00b60055
  {
    case CTRL_SYNC :    // Wait for end of internal write process of the drive
      if (sd_select()) res = RES_OK;
 80030cc:	f7ff fddf 	bl	8002c8e <sd_select>
 80030d0:	2800      	cmp	r0, #0
 80030d2:	f040 80f1 	bne.w	80032b8 <ArcadeIT_SDCard_Disk_Ioctl+0x218>
  res = RES_ERROR;
 80030d6:	2401      	movs	r4, #1
 80030d8:	e005      	b.n	80030e6 <ArcadeIT_SDCard_Disk_Ioctl+0x46>
      break;

    case GET_SECTOR_COUNT : // Get drive capacity in unit of sector (DWORD)
      if ((send_cmd(CMD9, 0) == 0) && sd_read_block(csd, 16))
 80030da:	2100      	movs	r1, #0
 80030dc:	2009      	movs	r0, #9
 80030de:	f7ff fded 	bl	8002cbc <send_cmd>
 80030e2:	b128      	cbz	r0, 80030f0 <ArcadeIT_SDCard_Disk_Ioctl+0x50>
  res = RES_ERROR;
 80030e4:	2401      	movs	r4, #1

    default: res = RES_PARERR; break;

  } // End switch.

  sd_deselect();
 80030e6:	f7ff fdc5 	bl	8002c74 <sd_deselect>

  return res;

} // End ArcadeIT_SDCard_Disk_Ioctl.
 80030ea:	4620      	mov	r0, r4
 80030ec:	b005      	add	sp, #20
 80030ee:	bd30      	pop	{r4, r5, pc}
      if ((send_cmd(CMD9, 0) == 0) && sd_read_block(csd, 16))
 80030f0:	2110      	movs	r1, #16
 80030f2:	4668      	mov	r0, sp
 80030f4:	f7ff fe28 	bl	8002d48 <sd_read_block>
 80030f8:	2800      	cmp	r0, #0
 80030fa:	f000 80df 	beq.w	80032bc <ArcadeIT_SDCard_Disk_Ioctl+0x21c>
        if ((csd[0] >> 6) == 1)
 80030fe:	f89d 3000 	ldrb.w	r3, [sp]
 8003102:	099b      	lsrs	r3, r3, #6
 8003104:	2b01      	cmp	r3, #1
 8003106:	d020      	beq.n	800314a <ArcadeIT_SDCard_Disk_Ioctl+0xaa>
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8003108:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800310c:	f002 020f 	and.w	r2, r2, #15
 8003110:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8003114:	eb02 12d3 	add.w	r2, r2, r3, lsr #7
 8003118:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	f003 0306 	and.w	r3, r3, #6
 8003122:	441a      	add	r2, r3
          csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8003124:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8003128:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	eb03 1391 	add.w	r3, r3, r1, lsr #6
 8003132:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8003136:	0289      	lsls	r1, r1, #10
 8003138:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
 800313c:	440b      	add	r3, r1
 800313e:	3301      	adds	r3, #1
          *(DWORD*)pBuffer = csize << (n - 9);
 8003140:	3a07      	subs	r2, #7
 8003142:	4093      	lsls	r3, r2
 8003144:	602b      	str	r3, [r5, #0]
        res = RES_OK;
 8003146:	2400      	movs	r4, #0
 8003148:	e7cd      	b.n	80030e6 <ArcadeIT_SDCard_Disk_Ioctl+0x46>
          csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800314a:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800314e:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8003152:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003156:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800315a:	0412      	lsls	r2, r2, #16
 800315c:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 8003160:	4413      	add	r3, r2
 8003162:	3301      	adds	r3, #1
          *(DWORD*)pBuffer = csize << 10;
 8003164:	029b      	lsls	r3, r3, #10
 8003166:	602b      	str	r3, [r5, #0]
        res = RES_OK;
 8003168:	2400      	movs	r4, #0
 800316a:	e7bc      	b.n	80030e6 <ArcadeIT_SDCard_Disk_Ioctl+0x46>
      if (gCardType & CT_SD2)
 800316c:	f640 6358 	movw	r3, #3672	; 0xe58
 8003170:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	f013 0f04 	tst.w	r3, #4
 800317a:	d020      	beq.n	80031be <ArcadeIT_SDCard_Disk_Ioctl+0x11e>
        if (send_cmd(ACMD13, 0) == 0)
 800317c:	2100      	movs	r1, #0
 800317e:	208d      	movs	r0, #141	; 0x8d
 8003180:	f7ff fd9c 	bl	8002cbc <send_cmd>
 8003184:	b108      	cbz	r0, 800318a <ArcadeIT_SDCard_Disk_Ioctl+0xea>
  res = RES_ERROR;
 8003186:	2401      	movs	r4, #1
 8003188:	e7ad      	b.n	80030e6 <ArcadeIT_SDCard_Disk_Ioctl+0x46>
          ArcadeIT_SPI_Port_RW_Byte(DUMMY_BYTE);
 800318a:	20ff      	movs	r0, #255	; 0xff
 800318c:	f7ff f85f 	bl	800224e <ArcadeIT_SPI_Port_RW_Byte>
          if (sd_read_block(csd, 16))
 8003190:	2110      	movs	r1, #16
 8003192:	4668      	mov	r0, sp
 8003194:	f7ff fdd8 	bl	8002d48 <sd_read_block>
 8003198:	b978      	cbnz	r0, 80031ba <ArcadeIT_SDCard_Disk_Ioctl+0x11a>
  res = RES_ERROR;
 800319a:	2401      	movs	r4, #1
 800319c:	e7a3      	b.n	80030e6 <ArcadeIT_SDCard_Disk_Ioctl+0x46>
            for (n = 64 - 16; n; n--) ArcadeIT_SPI_Port_RW_Byte(DUMMY_BYTE); // Purge trailing data
 800319e:	20ff      	movs	r0, #255	; 0xff
 80031a0:	f7ff f855 	bl	800224e <ArcadeIT_SPI_Port_RW_Byte>
 80031a4:	3c01      	subs	r4, #1
 80031a6:	b2e4      	uxtb	r4, r4
 80031a8:	2c00      	cmp	r4, #0
 80031aa:	d1f8      	bne.n	800319e <ArcadeIT_SDCard_Disk_Ioctl+0xfe>
            *(DWORD*)pBuffer = 16UL << (csd[10] >> 4);
 80031ac:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80031b0:	091a      	lsrs	r2, r3, #4
 80031b2:	2310      	movs	r3, #16
 80031b4:	4093      	lsls	r3, r2
 80031b6:	602b      	str	r3, [r5, #0]
 80031b8:	e795      	b.n	80030e6 <ArcadeIT_SDCard_Disk_Ioctl+0x46>
            for (n = 64 - 16; n; n--) ArcadeIT_SPI_Port_RW_Byte(DUMMY_BYTE); // Purge trailing data
 80031ba:	2430      	movs	r4, #48	; 0x30
 80031bc:	e7f4      	b.n	80031a8 <ArcadeIT_SDCard_Disk_Ioctl+0x108>
        if ((send_cmd(CMD9, 0) == 0) && sd_read_block(csd, 16))
 80031be:	2100      	movs	r1, #0
 80031c0:	2009      	movs	r0, #9
 80031c2:	f7ff fd7b 	bl	8002cbc <send_cmd>
 80031c6:	b108      	cbz	r0, 80031cc <ArcadeIT_SDCard_Disk_Ioctl+0x12c>
  res = RES_ERROR;
 80031c8:	2401      	movs	r4, #1
 80031ca:	e78c      	b.n	80030e6 <ArcadeIT_SDCard_Disk_Ioctl+0x46>
        if ((send_cmd(CMD9, 0) == 0) && sd_read_block(csd, 16))
 80031cc:	2110      	movs	r1, #16
 80031ce:	4668      	mov	r0, sp
 80031d0:	f7ff fdba 	bl	8002d48 <sd_read_block>
 80031d4:	2800      	cmp	r0, #0
 80031d6:	d073      	beq.n	80032c0 <ArcadeIT_SDCard_Disk_Ioctl+0x220>
          if (gCardType & CT_SD1)
 80031d8:	f640 6358 	movw	r3, #3672	; 0xe58
 80031dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	f013 0f02 	tst.w	r3, #2
 80031e6:	d011      	beq.n	800320c <ArcadeIT_SDCard_Disk_Ioctl+0x16c>
            *(DWORD*)pBuffer = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80031e8:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80031f2:	f89d 200b 	ldrb.w	r2, [sp, #11]
 80031f6:	eb03 13d2 	add.w	r3, r3, r2, lsr #7
 80031fa:	3301      	adds	r3, #1
 80031fc:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8003200:	0992      	lsrs	r2, r2, #6
 8003202:	3a01      	subs	r2, #1
 8003204:	4093      	lsls	r3, r2
 8003206:	602b      	str	r3, [r5, #0]
          res = RES_OK;
 8003208:	2400      	movs	r4, #0
 800320a:	e76c      	b.n	80030e6 <ArcadeIT_SDCard_Disk_Ioctl+0x46>
            *(DWORD*)pBuffer = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800320c:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8003210:	f3c3 0284 	ubfx	r2, r3, #2, #5
 8003214:	f89d 100b 	ldrb.w	r1, [sp, #11]
 8003218:	00cb      	lsls	r3, r1, #3
 800321a:	f003 0318 	and.w	r3, r3, #24
 800321e:	eb03 1351 	add.w	r3, r3, r1, lsr #5
 8003222:	3301      	adds	r3, #1
 8003224:	fb02 3303 	mla	r3, r2, r3, r3
 8003228:	602b      	str	r3, [r5, #0]
          res = RES_OK;
 800322a:	2400      	movs	r4, #0
 800322c:	e75b      	b.n	80030e6 <ArcadeIT_SDCard_Disk_Ioctl+0x46>
      if (!(gCardType & CT_SDC)) break;        // Check if the card is SDC
 800322e:	f640 6358 	movw	r3, #3672	; 0xe58
 8003232:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	f013 0f06 	tst.w	r3, #6
 800323c:	d101      	bne.n	8003242 <ArcadeIT_SDCard_Disk_Ioctl+0x1a2>
  res = RES_ERROR;
 800323e:	2401      	movs	r4, #1
 8003240:	e751      	b.n	80030e6 <ArcadeIT_SDCard_Disk_Ioctl+0x46>
      if (disk_ioctl(DEV_SD, SD_GET_CSD, csd)) break; // Get CSD
 8003242:	466a      	mov	r2, sp
 8003244:	210b      	movs	r1, #11
 8003246:	2001      	movs	r0, #1
 8003248:	f000 fa74 	bl	8003734 <disk_ioctl>
 800324c:	4604      	mov	r4, r0
 800324e:	bbc8      	cbnz	r0, 80032c4 <ArcadeIT_SDCard_Disk_Ioctl+0x224>
      if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break; // Check if sector erase can be applied to the card
 8003250:	f89d 3000 	ldrb.w	r3, [sp]
 8003254:	099b      	lsrs	r3, r3, #6
 8003256:	d104      	bne.n	8003262 <ArcadeIT_SDCard_Disk_Ioctl+0x1c2>
 8003258:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800325c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003260:	d032      	beq.n	80032c8 <ArcadeIT_SDCard_Disk_Ioctl+0x228>
      dp = pBuffer; st = dp[0]; ed = dp[1];        // Load sector block
 8003262:	6829      	ldr	r1, [r5, #0]
 8003264:	686d      	ldr	r5, [r5, #4]
      if (!(gCardType & CT_BLOCK))
 8003266:	f640 6358 	movw	r3, #3672	; 0xe58
 800326a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	f013 0f08 	tst.w	r3, #8
 8003274:	d101      	bne.n	800327a <ArcadeIT_SDCard_Disk_Ioctl+0x1da>
        st *= 512; ed *= 512;
 8003276:	0249      	lsls	r1, r1, #9
 8003278:	026d      	lsls	r5, r5, #9
      if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000))
 800327a:	2020      	movs	r0, #32
 800327c:	f7ff fd1e 	bl	8002cbc <send_cmd>
 8003280:	b108      	cbz	r0, 8003286 <ArcadeIT_SDCard_Disk_Ioctl+0x1e6>
  res = RES_ERROR;
 8003282:	2401      	movs	r4, #1
 8003284:	e72f      	b.n	80030e6 <ArcadeIT_SDCard_Disk_Ioctl+0x46>
      if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000))
 8003286:	4629      	mov	r1, r5
 8003288:	2021      	movs	r0, #33	; 0x21
 800328a:	f7ff fd17 	bl	8002cbc <send_cmd>
 800328e:	b108      	cbz	r0, 8003294 <ArcadeIT_SDCard_Disk_Ioctl+0x1f4>
  res = RES_ERROR;
 8003290:	2401      	movs	r4, #1
 8003292:	e728      	b.n	80030e6 <ArcadeIT_SDCard_Disk_Ioctl+0x46>
      if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000))
 8003294:	2100      	movs	r1, #0
 8003296:	2026      	movs	r0, #38	; 0x26
 8003298:	f7ff fd10 	bl	8002cbc <send_cmd>
 800329c:	b108      	cbz	r0, 80032a2 <ArcadeIT_SDCard_Disk_Ioctl+0x202>
  res = RES_ERROR;
 800329e:	2401      	movs	r4, #1
 80032a0:	e721      	b.n	80030e6 <ArcadeIT_SDCard_Disk_Ioctl+0x46>
      if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000))
 80032a2:	f247 5030 	movw	r0, #30000	; 0x7530
 80032a6:	f7ff fcce 	bl	8002c46 <wait_ready>
 80032aa:	2800      	cmp	r0, #0
 80032ac:	f47f af1b 	bne.w	80030e6 <ArcadeIT_SDCard_Disk_Ioctl+0x46>
  res = RES_ERROR;
 80032b0:	2401      	movs	r4, #1
 80032b2:	e718      	b.n	80030e6 <ArcadeIT_SDCard_Disk_Ioctl+0x46>
    default: res = RES_PARERR; break;
 80032b4:	2404      	movs	r4, #4
 80032b6:	e716      	b.n	80030e6 <ArcadeIT_SDCard_Disk_Ioctl+0x46>
      if (sd_select()) res = RES_OK;
 80032b8:	2400      	movs	r4, #0
 80032ba:	e714      	b.n	80030e6 <ArcadeIT_SDCard_Disk_Ioctl+0x46>
  res = RES_ERROR;
 80032bc:	2401      	movs	r4, #1
 80032be:	e712      	b.n	80030e6 <ArcadeIT_SDCard_Disk_Ioctl+0x46>
 80032c0:	2401      	movs	r4, #1
 80032c2:	e710      	b.n	80030e6 <ArcadeIT_SDCard_Disk_Ioctl+0x46>
 80032c4:	2401      	movs	r4, #1
 80032c6:	e70e      	b.n	80030e6 <ArcadeIT_SDCard_Disk_Ioctl+0x46>
 80032c8:	2401      	movs	r4, #1
 80032ca:	e70c      	b.n	80030e6 <ArcadeIT_SDCard_Disk_Ioctl+0x46>
  if (gStatus[DEV_SD] & STA_NOINIT) return RES_NOTRDY; // Check if drive is ready
 80032cc:	2403      	movs	r4, #3
 80032ce:	e70c      	b.n	80030ea <ArcadeIT_SDCard_Disk_Ioctl+0x4a>

080032d0 <ArcadeIT_SDCard_Disk_Start>:

// /////////////////////////////////////////////////////////////////////////////
FRESULT ArcadeIT_SDCard_Disk_Start (void)
{
 80032d0:	b570      	push	{r4, r5, r6, lr}
 80032d2:	f5ad 5d90 	sub.w	sp, sp, #4608	; 0x1200
 80032d6:	b082      	sub	sp, #8
  char lString[ARCADEIT_STRING_LENGTH_MAX];
  FATFS *lFileSystemReferenceTemp;

  lActive = FR_NOT_READY;

  lResult = f_mount(&gFileSystemSD, ArcadeIT_Utility_Get_String_ID(DEV_SD, (char*)gDriveName), 1);
 80032d8:	f248 3128 	movw	r1, #33576	; 0x8328
 80032dc:	f6c0 0100 	movt	r1, #2048	; 0x800
 80032e0:	2001      	movs	r0, #1
 80032e2:	f7fe f817 	bl	8001314 <ArcadeIT_Utility_Get_String_ID>
 80032e6:	2201      	movs	r2, #1
 80032e8:	4601      	mov	r1, r0
 80032ea:	f640 4020 	movw	r0, #3104	; 0xc20
 80032ee:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80032f2:	f001 f93d 	bl	8004570 <f_mount>
  switch (lResult)
 80032f6:	4606      	mov	r6, r0
 80032f8:	2800      	cmp	r0, #0
 80032fa:	d055      	beq.n	80033a8 <ArcadeIT_SDCard_Disk_Start+0xd8>
 80032fc:	280d      	cmp	r0, #13
 80032fe:	f040 8097 	bne.w	8003430 <ArcadeIT_SDCard_Disk_Start+0x160>
  {
    case FR_NO_FILESYSTEM:
      sprintf(lString, "No file system on SD-Card");
 8003302:	ac01      	add	r4, sp, #4
 8003304:	f248 2590 	movw	r5, #33424	; 0x8290
 8003308:	f6c0 0500 	movt	r5, #2048	; 0x800
 800330c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800330e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003310:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003314:	c403      	stmia	r4!, {r0, r1}
 8003316:	8022      	strh	r2, [r4, #0]
      // Shows a message to serial port as debug
      if (gDevices & ARCADEIT_DEVICE_SERIAL)
 8003318:	f240 2308 	movw	r3, #520	; 0x208
 800331c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003326:	d137      	bne.n	8003398 <ArcadeIT_SDCard_Disk_Start+0xc8>
      {
        ArcadeIT_Serial_Port_String_Send(lString);

      } // End if.

      lResult = f_mkfs(ArcadeIT_Utility_Get_String_ID(DEV_SD, (char*)gDriveName), NULL, lBuffer, sizeof(lBuffer));
 8003328:	f248 3128 	movw	r1, #33576	; 0x8328
 800332c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003330:	2001      	movs	r0, #1
 8003332:	f7fd ffef 	bl	8001314 <ArcadeIT_Utility_Get_String_ID>
 8003336:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800333a:	aa82      	add	r2, sp, #520	; 0x208
 800333c:	2100      	movs	r1, #0
 800333e:	f001 fa63 	bl	8004808 <f_mkfs>
      sprintf(lString, "Preparing SD-Card Disk Drive: %s", ArcadeIT_Utility_Get_String_ID(lResult, (char*)gErrorMessages));
 8003342:	f248 313c 	movw	r1, #33596	; 0x833c
 8003346:	f6c0 0100 	movt	r1, #2048	; 0x800
 800334a:	f7fd ffe3 	bl	8001314 <ArcadeIT_Utility_Get_String_ID>
 800334e:	4602      	mov	r2, r0
 8003350:	f248 21ac 	movw	r1, #33452	; 0x82ac
 8003354:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003358:	a801      	add	r0, sp, #4
 800335a:	f002 fb99 	bl	8005a90 <siprintf>
      // Shows a message to serial port as debug
      if (gDevices & ARCADEIT_DEVICE_SERIAL)
 800335e:	f240 2308 	movw	r3, #520	; 0x208
 8003362:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800336c:	d118      	bne.n	80033a0 <ArcadeIT_SDCard_Disk_Start+0xd0>
      {
        ArcadeIT_Serial_Port_String_Send(lString);

      } // End if.

      f_chdrive(ArcadeIT_Utility_Get_String_ID(DEV_SD, (char*)gDriveName));
 800336e:	f248 3128 	movw	r1, #33576	; 0x8328
 8003372:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003376:	2001      	movs	r0, #1
 8003378:	f7fd ffcc 	bl	8001314 <ArcadeIT_Utility_Get_String_ID>
 800337c:	f001 f924 	bl	80045c8 <f_chdrive>
      f_setlabel(ARCADEIT_TEXT_SDCARD_NAME);
 8003380:	f248 20d0 	movw	r0, #33488	; 0x82d0
 8003384:	f6c0 0000 	movt	r0, #2048	; 0x800
 8003388:	f001 f99e 	bl	80046c8 <f_setlabel>
  lActive = FR_NOT_READY;
 800338c:	2603      	movs	r6, #3

  } // End switch.

  return lActive;

} // End ArcadeIT_SDCard_Disk_Start.
 800338e:	4630      	mov	r0, r6
 8003390:	f50d 5d90 	add.w	sp, sp, #4608	; 0x1200
 8003394:	b002      	add	sp, #8
 8003396:	bd70      	pop	{r4, r5, r6, pc}
        ArcadeIT_Serial_Port_String_Send(lString);
 8003398:	a801      	add	r0, sp, #4
 800339a:	f7ff f97b 	bl	8002694 <ArcadeIT_Serial_Port_String_Send>
 800339e:	e7c3      	b.n	8003328 <ArcadeIT_SDCard_Disk_Start+0x58>
        ArcadeIT_Serial_Port_String_Send(lString);
 80033a0:	a801      	add	r0, sp, #4
 80033a2:	f7ff f977 	bl	8002694 <ArcadeIT_Serial_Port_String_Send>
 80033a6:	e7e2      	b.n	800336e <ArcadeIT_SDCard_Disk_Start+0x9e>
      sprintf(lString, "SD-Card Disk device: [%s] ",ArcadeIT_Utility_Get_String_ID(DEV_SD, (char*)gDriveName));
 80033a8:	f248 3128 	movw	r1, #33576	; 0x8328
 80033ac:	f6c0 0100 	movt	r1, #2048	; 0x800
 80033b0:	2001      	movs	r0, #1
 80033b2:	f7fd ffaf 	bl	8001314 <ArcadeIT_Utility_Get_String_ID>
 80033b6:	4602      	mov	r2, r0
 80033b8:	f248 21e0 	movw	r1, #33504	; 0x82e0
 80033bc:	f6c0 0100 	movt	r1, #2048	; 0x800
 80033c0:	a801      	add	r0, sp, #4
 80033c2:	f002 fb65 	bl	8005a90 <siprintf>
      if (gDevices & ARCADEIT_DEVICE_SERIAL)
 80033c6:	f240 2308 	movw	r3, #520	; 0x208
 80033ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80033d4:	d128      	bne.n	8003428 <ArcadeIT_SDCard_Disk_Start+0x158>
      lResult = f_getfree(ArcadeIT_Utility_Get_String_ID(DEV_SD, (char*)gDriveName), &lFreeCluster, &lFileSystemReferenceTemp);
 80033d6:	f248 3128 	movw	r1, #33576	; 0x8328
 80033da:	f6c0 0100 	movt	r1, #2048	; 0x800
 80033de:	2001      	movs	r0, #1
 80033e0:	f7fd ff98 	bl	8001314 <ArcadeIT_Utility_Get_String_ID>
 80033e4:	466a      	mov	r2, sp
 80033e6:	a981      	add	r1, sp, #516	; 0x204
 80033e8:	f001 f903 	bl	80045f2 <f_getfree>
             (lFreeCluster * ((lFileSystemReferenceTemp->csize * SECTOR_SIZE) / 1024)),
 80033ec:	9b00      	ldr	r3, [sp, #0]
 80033ee:	895a      	ldrh	r2, [r3, #10]
 80033f0:	0252      	lsls	r2, r2, #9
 80033f2:	1292      	asrs	r2, r2, #10
             ((lFileSystemReferenceTemp->n_fatent - 2) * ((lFileSystemReferenceTemp->csize * SECTOR_SIZE) / 1024))
 80033f4:	69db      	ldr	r3, [r3, #28]
 80033f6:	3b02      	subs	r3, #2
      sprintf(lString,
 80033f8:	9981      	ldr	r1, [sp, #516]	; 0x204
 80033fa:	fb03 f302 	mul.w	r3, r3, r2
 80033fe:	fb01 f202 	mul.w	r2, r1, r2
 8003402:	f248 2160 	movw	r1, #33376	; 0x8260
 8003406:	f6c0 0100 	movt	r1, #2048	; 0x800
 800340a:	a801      	add	r0, sp, #4
 800340c:	f002 fb40 	bl	8005a90 <siprintf>
      if (gDevices & ARCADEIT_DEVICE_SERIAL)
 8003410:	f240 2308 	movw	r3, #520	; 0x208
 8003414:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800341e:	d0b6      	beq.n	800338e <ArcadeIT_SDCard_Disk_Start+0xbe>
        ArcadeIT_Serial_Port_String_Send(lString);
 8003420:	a801      	add	r0, sp, #4
 8003422:	f7ff f937 	bl	8002694 <ArcadeIT_Serial_Port_String_Send>
 8003426:	e7b2      	b.n	800338e <ArcadeIT_SDCard_Disk_Start+0xbe>
        ArcadeIT_Serial_Port_String_Send(lString);
 8003428:	a801      	add	r0, sp, #4
 800342a:	f7ff f933 	bl	8002694 <ArcadeIT_Serial_Port_String_Send>
 800342e:	e7d2      	b.n	80033d6 <ArcadeIT_SDCard_Disk_Start+0x106>
      sprintf(lString, "SD-Card not present or hardware error.\n\r");
 8003430:	ac01      	add	r4, sp, #4
 8003432:	f248 25fc 	movw	r5, #33532	; 0x82fc
 8003436:	f6c0 0500 	movt	r5, #2048	; 0x800
 800343a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800343c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800343e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003440:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003442:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003446:	c403      	stmia	r4!, {r0, r1}
 8003448:	7022      	strb	r2, [r4, #0]
      if (gDevices & ARCADEIT_DEVICE_SERIAL)
 800344a:	f240 2308 	movw	r3, #520	; 0x208
 800344e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003458:	d099      	beq.n	800338e <ArcadeIT_SDCard_Disk_Start+0xbe>
        ArcadeIT_Serial_Port_String_Send(lString);
 800345a:	a801      	add	r0, sp, #4
 800345c:	f7ff f91a 	bl	8002694 <ArcadeIT_Serial_Port_String_Send>
 8003460:	e795      	b.n	800338e <ArcadeIT_SDCard_Disk_Start+0xbe>

08003462 <get_fattime>:

// /////////////////////////////////////////////////////////////////////////////
// Shared functions.
// /////////////////////////////////////////////////////////////////////////////
DWORD get_fattime (void)
{
 8003462:	b500      	push	{lr}
 8003464:	b083      	sub	sp, #12
  rtc_time_t lTempTime = ArcadeIT_RTC_TimeDate_Get();
 8003466:	4668      	mov	r0, sp
 8003468:	f7fe fed2 	bl	8002210 <ArcadeIT_RTC_TimeDate_Get>

  return  (  (uint32_t)(2000 + lTempTime.year - 1980) << 25)
 800346c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8003470:	f103 0014 	add.w	r0, r3, #20
          | ((uint32_t)lTempTime.month << 21)
 8003474:	f89d 3000 	ldrb.w	r3, [sp]
 8003478:	055b      	lsls	r3, r3, #21
 800347a:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
          | ((uint32_t)lTempTime.mday << 16)
 800347e:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8003482:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
          | ((uint32_t)lTempTime.hour << 11)
 8003486:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800348a:	ea43 23c0 	orr.w	r3, r3, r0, lsl #11
          | ((uint32_t)lTempTime.min << 5)
 800348e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8003492:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
          | ((uint32_t)lTempTime.sec >> 1
 8003496:	f89d 0005 	ldrb.w	r0, [sp, #5]
          );

} // end get_fattime
 800349a:	ea43 0050 	orr.w	r0, r3, r0, lsr #1
 800349e:	b003      	add	sp, #12
 80034a0:	f85d fb04 	ldr.w	pc, [sp], #4

080034a4 <ArcadeIT_Scheduler_Task_Init>:
  PARMS:        See above.
  RETURNS:      Nothing.
  */

  uint8_t lTask = 0;
  for (lTask = 0; lTask < ARCADEIT_SCHEDULER_MAX_TASKS; lTask++)
 80034a4:	2300      	movs	r3, #0
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	d815      	bhi.n	80034d6 <ArcadeIT_Scheduler_Task_Init+0x32>
{
 80034aa:	b410      	push	{r4}
  {
    gArcadeITTasks[lTask].current_cycle = 0;
 80034ac:	f640 645c 	movw	r4, #3676	; 0xe5c
 80034b0:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80034b4:	202c      	movs	r0, #44	; 0x2c
 80034b6:	fb00 f003 	mul.w	r0, r0, r3
 80034ba:	1821      	adds	r1, r4, r0
 80034bc:	2200      	movs	r2, #0
 80034be:	604a      	str	r2, [r1, #4]
    gArcadeITTasks[lTask].cycles = 0;
 80034c0:	5022      	str	r2, [r4, r0]
    gArcadeITTasks[lTask].time_period = 0;
 80034c2:	608a      	str	r2, [r1, #8]
    gArcadeITTasks[lTask].time_current = 0;
 80034c4:	60ca      	str	r2, [r1, #12]
    gArcadeITTasks[lTask].function = NULL;
 80034c6:	610a      	str	r2, [r1, #16]
  for (lTask = 0; lTask < ARCADEIT_SCHEDULER_MAX_TASKS; lTask++)
 80034c8:	3301      	adds	r3, #1
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b04      	cmp	r3, #4
 80034ce:	d9ed      	bls.n	80034ac <ArcadeIT_Scheduler_Task_Init+0x8>
  {
    //ArcadeIT_Serial_Port_String_Send(TEXT_SCHEDULER_INITED);

  } // End if.

} // End ArcadeIT_Scheduler_Task_Init.
 80034d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	4770      	bx	lr

080034d8 <ArcadeIT_Scheduler_Task_Set>:
  void *pFunctionPtr,        // The pointer to the function to execute.
  void *pParameters,         // The pointer to the parameters used by the function.
  uint32_t pCycles,          // The number of time that this task has to be executed. 0 = infinite.
  uint32_t pTimePeriod       // The time period in ms to elapse before the next execution.
)
{
 80034d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034da:	9f05      	ldr	r7, [sp, #20]
  DESCRIPTION:  Setup a scheduled task.
  PARMS:        See above.
  RETURNS:      Nothing.
  */

  if (pParameters != NULL)
 80034dc:	b33a      	cbz	r2, 800352e <ArcadeIT_Scheduler_Task_Set+0x56>
 80034de:	4616      	mov	r6, r2
  {
    gArcadeITTasks[id].num_parameters = ((uint32_t*)pParameters)[PAR_1];
 80034e0:	6814      	ldr	r4, [r2, #0]
 80034e2:	4684      	mov	ip, r0
 80034e4:	f640 655c 	movw	r5, #3676	; 0xe5c
 80034e8:	f2c2 0500 	movt	r5, #8192	; 0x2000
 80034ec:	222c      	movs	r2, #44	; 0x2c
 80034ee:	fb02 5200 	mla	r2, r2, r0, r5
 80034f2:	7514      	strb	r4, [r2, #20]

    // Copy parameters.
    uint8_t lPars = 0;
    for (lPars = 0; lPars < gArcadeITTasks[id].num_parameters+1; lPars++)
 80034f4:	2400      	movs	r4, #0
 80034f6:	e00f      	b.n	8003518 <ArcadeIT_Scheduler_Task_Set+0x40>
    {
      gArcadeITTasks[id].parameters[lPars] = ((uint32_t*)pParameters)[lPars];
 80034f8:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 80034fc:	f640 6e5c 	movw	lr, #3676	; 0xe5c
 8003500:	f2c2 0e00 	movt	lr, #8192	; 0x2000
 8003504:	eb0c 028c 	add.w	r2, ip, ip, lsl #2
 8003508:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800350c:	4422      	add	r2, r4
 800350e:	3206      	adds	r2, #6
 8003510:	f84e 5022 	str.w	r5, [lr, r2, lsl #2]
    for (lPars = 0; lPars < gArcadeITTasks[id].num_parameters+1; lPars++)
 8003514:	3401      	adds	r4, #1
 8003516:	b2e4      	uxtb	r4, r4
 8003518:	f640 655c 	movw	r5, #3676	; 0xe5c
 800351c:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8003520:	222c      	movs	r2, #44	; 0x2c
 8003522:	fb02 520c 	mla	r2, r2, ip, r5
 8003526:	7d12      	ldrb	r2, [r2, #20]
 8003528:	3201      	adds	r2, #1
 800352a:	4294      	cmp	r4, r2
 800352c:	dbe4      	blt.n	80034f8 <ArcadeIT_Scheduler_Task_Set+0x20>

    } // End for.

  } // End if.

  gArcadeITTasks[id].current_cycle = 0;
 800352e:	f640 645c 	movw	r4, #3676	; 0xe5c
 8003532:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8003536:	222c      	movs	r2, #44	; 0x2c
 8003538:	fb02 f000 	mul.w	r0, r2, r0
 800353c:	1822      	adds	r2, r4, r0
 800353e:	2500      	movs	r5, #0
 8003540:	6055      	str	r5, [r2, #4]
  gArcadeITTasks[id].cycles = pCycles;
 8003542:	5023      	str	r3, [r4, r0]
  gArcadeITTasks[id].time_period = pTimePeriod;
 8003544:	6097      	str	r7, [r2, #8]
  gArcadeITTasks[id].time_current = gArcadeITTasks[id].time_period;
 8003546:	60d7      	str	r7, [r2, #12]
  gArcadeITTasks[id].function = pFunctionPtr;
 8003548:	6111      	str	r1, [r2, #16]
  gArcadeITTasks[id].execute = FALSE;
 800354a:	f882 5028 	strb.w	r5, [r2, #40]	; 0x28

} // End ArcadeIT_Scheduler_Task_Set.
 800354e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003550 <ArcadeIT_Scheduler_Task_Unset>:
  DESCRIPTION:  Reset a scheduled task.
  PARMS:        See above.
  RETURNS:      Nothing.
  */

  gArcadeITTasks[id].current_cycle = 0;
 8003550:	f640 615c 	movw	r1, #3676	; 0xe5c
 8003554:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8003558:	232c      	movs	r3, #44	; 0x2c
 800355a:	fb03 f000 	mul.w	r0, r3, r0
 800355e:	180a      	adds	r2, r1, r0
 8003560:	2300      	movs	r3, #0
 8003562:	6053      	str	r3, [r2, #4]
  gArcadeITTasks[id].cycles = 0;
 8003564:	500b      	str	r3, [r1, r0]
  gArcadeITTasks[id].time_period = 0;
 8003566:	6093      	str	r3, [r2, #8]
  gArcadeITTasks[id].time_current = 0;
 8003568:	60d3      	str	r3, [r2, #12]
  gArcadeITTasks[id].function = NULL;
 800356a:	6113      	str	r3, [r2, #16]
  gArcadeITTasks[id].execute = FALSE;
 800356c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28

} // End ArcadeIT_Scheduler_Task_Unset.
 8003570:	4770      	bx	lr

08003572 <ArcadeIT_Scheduler_Update>:

// /////////////////////////////////////////////////////////////////////////////
void ArcadeIT_Scheduler_Update(void)
{
 8003572:	b538      	push	{r3, r4, r5, lr}
  PARMS:        See above.
  RETURNS:      Nothing.
  */

  uint8_t lTask = 0;
  for (lTask = 0; lTask < ARCADEIT_SCHEDULER_MAX_TASKS; lTask++)
 8003574:	2400      	movs	r4, #0
 8003576:	e00a      	b.n	800358e <ArcadeIT_Scheduler_Update+0x1c>

            } // End if.
          }
          else
          {
            gArcadeITTasks[lTask].time_current = gArcadeITTasks[lTask].time_period;
 8003578:	f640 635c 	movw	r3, #3676	; 0xe5c
 800357c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003580:	222c      	movs	r2, #44	; 0x2c
 8003582:	fb02 3104 	mla	r1, r2, r4, r3
 8003586:	688b      	ldr	r3, [r1, #8]
 8003588:	60cb      	str	r3, [r1, #12]
  for (lTask = 0; lTask < ARCADEIT_SCHEDULER_MAX_TASKS; lTask++)
 800358a:	3401      	adds	r4, #1
 800358c:	b2e4      	uxtb	r4, r4
 800358e:	2c04      	cmp	r4, #4
 8003590:	d83f      	bhi.n	8003612 <ArcadeIT_Scheduler_Update+0xa0>
    if (gArcadeITTasks[lTask].function != NULL)
 8003592:	4621      	mov	r1, r4
 8003594:	f640 625c 	movw	r2, #3676	; 0xe5c
 8003598:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800359c:	232c      	movs	r3, #44	; 0x2c
 800359e:	fb03 2304 	mla	r3, r3, r4, r2
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d0f0      	beq.n	800358a <ArcadeIT_Scheduler_Update+0x18>
      if (gArcadeITTasks[lTask].execute == FALSE)
 80035a8:	f640 625c 	movw	r2, #3676	; 0xe5c
 80035ac:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80035b0:	232c      	movs	r3, #44	; 0x2c
 80035b2:	fb03 2304 	mla	r3, r3, r4, r2
 80035b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1e5      	bne.n	800358a <ArcadeIT_Scheduler_Update+0x18>
        gArcadeITTasks[lTask].time_current--;
 80035be:	4613      	mov	r3, r2
 80035c0:	222c      	movs	r2, #44	; 0x2c
 80035c2:	fb02 3204 	mla	r2, r2, r4, r3
 80035c6:	68d3      	ldr	r3, [r2, #12]
 80035c8:	3b01      	subs	r3, #1
 80035ca:	60d3      	str	r3, [r2, #12]
        if (gArcadeITTasks[lTask].time_current == 0)
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1dc      	bne.n	800358a <ArcadeIT_Scheduler_Update+0x18>
          gArcadeITTasks[lTask].execute = TRUE;
 80035d0:	f640 625c 	movw	r2, #3676	; 0xe5c
 80035d4:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80035d8:	232c      	movs	r3, #44	; 0x2c
 80035da:	fb03 f304 	mul.w	r3, r3, r4
 80035de:	18d0      	adds	r0, r2, r3
 80035e0:	2501      	movs	r5, #1
 80035e2:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28
          if (gArcadeITTasks[lTask].cycles)
 80035e6:	58d3      	ldr	r3, [r2, r3]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d0c5      	beq.n	8003578 <ArcadeIT_Scheduler_Update+0x6>
            gArcadeITTasks[lTask].time_current = gArcadeITTasks[lTask].time_period;
 80035ec:	f640 625c 	movw	r2, #3676	; 0xe5c
 80035f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80035f4:	232c      	movs	r3, #44	; 0x2c
 80035f6:	fb03 f101 	mul.w	r1, r3, r1
 80035fa:	6883      	ldr	r3, [r0, #8]
 80035fc:	60c3      	str	r3, [r0, #12]
            gArcadeITTasks[lTask].current_cycle++;
 80035fe:	6843      	ldr	r3, [r0, #4]
 8003600:	442b      	add	r3, r5
 8003602:	6043      	str	r3, [r0, #4]
            if (gArcadeITTasks[lTask].current_cycle == gArcadeITTasks[lTask].cycles)
 8003604:	5852      	ldr	r2, [r2, r1]
 8003606:	4293      	cmp	r3, r2
 8003608:	d1bf      	bne.n	800358a <ArcadeIT_Scheduler_Update+0x18>
              ArcadeIT_Scheduler_Task_Unset(lTask);
 800360a:	4620      	mov	r0, r4
 800360c:	f7ff ffa0 	bl	8003550 <ArcadeIT_Scheduler_Task_Unset>
 8003610:	e7bb      	b.n	800358a <ArcadeIT_Scheduler_Update+0x18>

    } // End if.

  } // End for.

} // End ArcadeIT_Scheduler_Update.
 8003612:	bd38      	pop	{r3, r4, r5, pc}

08003614 <ArcadeIT_Scheduler_Run>:

// /////////////////////////////////////////////////////////////////////////////
void ArcadeIT_Scheduler_Run(void)
{
 8003614:	b538      	push	{r3, r4, r5, lr}
  PARMS:        See above.
  RETURNS:      Nothing.
  */

  uint8_t lTask = 0;
  for (lTask = 0; lTask < ARCADEIT_SCHEDULER_MAX_TASKS; lTask++)
 8003616:	2400      	movs	r4, #0
 8003618:	e001      	b.n	800361e <ArcadeIT_Scheduler_Run+0xa>
 800361a:	3401      	adds	r4, #1
 800361c:	b2e4      	uxtb	r4, r4
 800361e:	2c04      	cmp	r4, #4
 8003620:	d817      	bhi.n	8003652 <ArcadeIT_Scheduler_Run+0x3e>
  {
    if (gArcadeITTasks[lTask].execute)
 8003622:	f640 625c 	movw	r2, #3676	; 0xe5c
 8003626:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800362a:	232c      	movs	r3, #44	; 0x2c
 800362c:	fb03 2304 	mla	r3, r3, r4, r2
 8003630:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003634:	2b00      	cmp	r3, #0
 8003636:	d0f0      	beq.n	800361a <ArcadeIT_Scheduler_Run+0x6>
    {
        // Here we call the function set for this task.
        gArcadeITTasks[lTask].function(gArcadeITTasks[lTask].parameters);
 8003638:	4610      	mov	r0, r2
 800363a:	232c      	movs	r3, #44	; 0x2c
 800363c:	fb03 f304 	mul.w	r3, r3, r4
 8003640:	18d5      	adds	r5, r2, r3
 8003642:	692a      	ldr	r2, [r5, #16]
 8003644:	3318      	adds	r3, #24
 8003646:	4418      	add	r0, r3
 8003648:	4790      	blx	r2

        // Unmark the function.
        gArcadeITTasks[lTask].execute = FALSE;
 800364a:	2300      	movs	r3, #0
 800364c:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
 8003650:	e7e3      	b.n	800361a <ArcadeIT_Scheduler_Run+0x6>

    } // End if.

  } // End for.

} // End ArcadeIT_Scheduler_Run.
 8003652:	bd38      	pop	{r3, r4, r5, pc}

08003654 <RAM_disk_status>:
#include <System/Disk/ArcadeIT_SD_Card.h>
#include <System/Disk/ArcadeIT_RAMDisk.h>

// Prototypes for unused functions
DSTATUS RAM_disk_status()
{
 8003654:	b508      	push	{r3, lr}
  return ArcadeIT_RAMDisk_Status();
 8003656:	f7ff fa1d 	bl	8002a94 <ArcadeIT_RAMDisk_Status>
}
 800365a:	bd08      	pop	{r3, pc}

0800365c <SD_disk_status>:
DSTATUS MMC_disk_status();
DSTATUS USB_disk_status();
DSTATUS SD_disk_status()
{
 800365c:	b508      	push	{r3, lr}
  return ArcadeIT_SDCard_Disk_Status();
 800365e:	f7ff fc84 	bl	8002f6a <ArcadeIT_SDCard_Disk_Status>
}
 8003662:	bd08      	pop	{r3, pc}

08003664 <RAM_disk_initialize>:

DSTATUS RAM_disk_initialize()
{
 8003664:	b508      	push	{r3, lr}
  return ArcadeIT_RAMDisk_Initialize();
 8003666:	f7ff f9f6 	bl	8002a56 <ArcadeIT_RAMDisk_Initialize>
}
 800366a:	bd08      	pop	{r3, pc}

0800366c <SD_disk_initialize>:

DSTATUS MMC_disk_initialize();
DSTATUS USB_disk_initialize();
DSTATUS SD_disk_initialize()
{
 800366c:	b508      	push	{r3, lr}
  return ArcadeIT_SDCard_Disk_Initialize();
 800366e:	f7ff fbb7 	bl	8002de0 <ArcadeIT_SDCard_Disk_Initialize>
}
 8003672:	bd08      	pop	{r3, pc}

08003674 <RAM_disk_read>:

DSTATUS RAM_disk_read(BYTE *buff, DWORD sector, UINT count)
{
 8003674:	b508      	push	{r3, lr}
  return ArcadeIT_RAMDisk_Read(buff, sector, count);
 8003676:	f7ff fa13 	bl	8002aa0 <ArcadeIT_RAMDisk_Read>
}
 800367a:	bd08      	pop	{r3, pc}

0800367c <SD_disk_read>:
DSTATUS MMC_disk_read(BYTE *buff, DWORD sector, UINT count);
DSTATUS USB_disk_read(BYTE *buff, DWORD sector, UINT count);
DSTATUS SD_disk_read(BYTE *buff, DWORD sector, UINT count)
{
 800367c:	b508      	push	{r3, lr}
  return ArcadeIT_SDCard_Disk_Read(buff, sector, count);
 800367e:	f7ff fc7a 	bl	8002f76 <ArcadeIT_SDCard_Disk_Read>
}
 8003682:	bd08      	pop	{r3, pc}

08003684 <RAM_disk_write>:

DSTATUS RAM_disk_write(const BYTE *buff, DWORD sector, UINT count)
{
 8003684:	b508      	push	{r3, lr}
  return ArcadeIT_RAMDisk_Write(buff, sector, count);
 8003686:	f7ff fa1c 	bl	8002ac2 <ArcadeIT_RAMDisk_Write>
}
 800368a:	bd08      	pop	{r3, pc}

0800368c <SD_disk_write>:
DSTATUS MMC_disk_write(const BYTE *buff, DWORD sector, UINT count);
DSTATUS USB_disk_write(const BYTE *buff, DWORD sector, UINT count);
DSTATUS SD_disk_write(const BYTE *buff, DWORD sector, UINT count)
{
 800368c:	b508      	push	{r3, lr}
  return ArcadeIT_SDCard_Disk_Write((BYTE*)buff, sector, count);
 800368e:	f7ff fcb4 	bl	8002ffa <ArcadeIT_SDCard_Disk_Write>
}
 8003692:	bd08      	pop	{r3, pc}

08003694 <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8003694:	b508      	push	{r3, lr}
  DSTATUS result = 0;

	switch (pdrv) {
 8003696:	2803      	cmp	r0, #3
 8003698:	d80b      	bhi.n	80036b2 <disk_status+0x1e>
 800369a:	e8df f000 	tbb	[pc, r0]
 800369e:	0704      	.short	0x0704
 80036a0:	0202      	.short	0x0202
	case DEV_MMC :
		//result = MMC_disk_status();

		// translate the reslut code here

		return result;
 80036a2:	2000      	movs	r0, #0
		// translate the reslut code here

		return result;
	}
	return STA_NOINIT;
}
 80036a4:	bd08      	pop	{r3, pc}
		result = RAM_disk_status();
 80036a6:	f7ff ffd5 	bl	8003654 <RAM_disk_status>
		return result;
 80036aa:	e7fb      	b.n	80036a4 <disk_status+0x10>
		result = SD_disk_status();
 80036ac:	f7ff ffd6 	bl	800365c <SD_disk_status>
		return result;
 80036b0:	e7f8      	b.n	80036a4 <disk_status+0x10>
	return STA_NOINIT;
 80036b2:	2001      	movs	r0, #1
 80036b4:	e7f6      	b.n	80036a4 <disk_status+0x10>

080036b6 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80036b6:	b508      	push	{r3, lr}
  DSTATUS result = 0;

	switch (pdrv) {
 80036b8:	2803      	cmp	r0, #3
 80036ba:	d80b      	bhi.n	80036d4 <disk_initialize+0x1e>
 80036bc:	e8df f000 	tbb	[pc, r0]
 80036c0:	02020704 	.word	0x02020704
	case DEV_MMC :
		//result = MMC_disk_initialize();

		// translate the result code here

		return result;
 80036c4:	2000      	movs	r0, #0
		// translate the result code here

		return result;
	}
	return STA_NOINIT;
}
 80036c6:	bd08      	pop	{r3, pc}
		result = RAM_disk_initialize();
 80036c8:	f7ff ffcc 	bl	8003664 <RAM_disk_initialize>
		return result;
 80036cc:	e7fb      	b.n	80036c6 <disk_initialize+0x10>
	    result = SD_disk_initialize();
 80036ce:	f7ff ffcd 	bl	800366c <SD_disk_initialize>
	    return result;
 80036d2:	e7f8      	b.n	80036c6 <disk_initialize+0x10>
	return STA_NOINIT;
 80036d4:	2001      	movs	r0, #1
 80036d6:	e7f6      	b.n	80036c6 <disk_initialize+0x10>

080036d8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	LBA_t sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80036d8:	b510      	push	{r4, lr}
 80036da:	460c      	mov	r4, r1
 80036dc:	4611      	mov	r1, r2
  DSTATUS result = 0;

	switch (pdrv) {
 80036de:	2803      	cmp	r0, #3
 80036e0:	d80f      	bhi.n	8003702 <disk_read+0x2a>
 80036e2:	e8df f000 	tbb	[pc, r0]
 80036e6:	0904      	.short	0x0904
 80036e8:	0202      	.short	0x0202

		//result = MMC_disk_read(buff, sector, count);

		// translate the reslut code here

		return result;
 80036ea:	2000      	movs	r0, #0

		return result;
	}

	return RES_PARERR;
}
 80036ec:	bd10      	pop	{r4, pc}
		result = RAM_disk_read(buff, sector, count);
 80036ee:	461a      	mov	r2, r3
 80036f0:	4620      	mov	r0, r4
 80036f2:	f7ff ffbf 	bl	8003674 <RAM_disk_read>
		return result;
 80036f6:	e7f9      	b.n	80036ec <disk_read+0x14>
    result = SD_disk_read(buff, sector, count);
 80036f8:	461a      	mov	r2, r3
 80036fa:	4620      	mov	r0, r4
 80036fc:	f7ff ffbe 	bl	800367c <SD_disk_read>
    return result;
 8003700:	e7f4      	b.n	80036ec <disk_read+0x14>
	return RES_PARERR;
 8003702:	2004      	movs	r0, #4
 8003704:	e7f2      	b.n	80036ec <disk_read+0x14>

08003706 <disk_write>:
	BYTE pdrv,			/* Physical drive number to identify the drive */
	const BYTE *buff,	    /* Data to be written */
	LBA_t sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
 8003706:	b510      	push	{r4, lr}
 8003708:	460c      	mov	r4, r1
 800370a:	4611      	mov	r1, r2
  DSTATUS result = 0;

	switch (pdrv) {
 800370c:	2803      	cmp	r0, #3
 800370e:	d80f      	bhi.n	8003730 <disk_write+0x2a>
 8003710:	e8df f000 	tbb	[pc, r0]
 8003714:	02020904 	.word	0x02020904

		//result = MMC_disk_write(buff, sector, count);

		// translate the reslut code here

		return result;
 8003718:	2000      	movs	r0, #0

		return result;
	}

	return RES_PARERR;
}
 800371a:	bd10      	pop	{r4, pc}
		result = RAM_disk_write(buff, sector, count);
 800371c:	461a      	mov	r2, r3
 800371e:	4620      	mov	r0, r4
 8003720:	f7ff ffb0 	bl	8003684 <RAM_disk_write>
		return result;
 8003724:	e7f9      	b.n	800371a <disk_write+0x14>
    result = SD_disk_write(buff, sector, count);
 8003726:	461a      	mov	r2, r3
 8003728:	4620      	mov	r0, r4
 800372a:	f7ff ffaf 	bl	800368c <SD_disk_write>
    return result;
 800372e:	e7f4      	b.n	800371a <disk_write+0x14>
	return RES_PARERR;
 8003730:	2004      	movs	r0, #4
 8003732:	e7f2      	b.n	800371a <disk_write+0x14>

08003734 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003734:	b508      	push	{r3, lr}
 8003736:	460b      	mov	r3, r1
  DSTATUS result = 0;

	switch (pdrv) {
 8003738:	2803      	cmp	r0, #3
 800373a:	d80f      	bhi.n	800375c <disk_ioctl+0x28>
 800373c:	e8df f000 	tbb	[pc, r0]
 8003740:	02020904 	.word	0x02020904

	case DEV_MMC :

		// Process of the command for the MMC/SD card

		return result;
 8003744:	2000      	movs	r0, #0

		return result;
	}

	return RES_PARERR;
}
 8003746:	bd08      	pop	{r3, pc}
    result = ArcadeIT_RAMDisk_Ioctl(cmd, buff);
 8003748:	4611      	mov	r1, r2
 800374a:	4618      	mov	r0, r3
 800374c:	f7ff f9cc 	bl	8002ae8 <ArcadeIT_RAMDisk_Ioctl>
		return result;
 8003750:	e7f9      	b.n	8003746 <disk_ioctl+0x12>
	  result = ArcadeIT_SDCard_Disk_Ioctl(cmd, buff);
 8003752:	4611      	mov	r1, r2
 8003754:	4618      	mov	r0, r3
 8003756:	f7ff fca3 	bl	80030a0 <ArcadeIT_SDCard_Disk_Ioctl>
		return result;
 800375a:	e7f4      	b.n	8003746 <disk_ioctl+0x12>
	return RES_PARERR;
 800375c:	2004      	movs	r0, #4
 800375e:	e7f2      	b.n	8003746 <disk_ioctl+0x12>

08003760 <ld_word>:
 8003760:	7842      	ldrb	r2, [r0, #1]
 8003762:	7800      	ldrb	r0, [r0, #0]
 8003764:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8003768:	4770      	bx	lr

0800376a <ld_dword>:
 800376a:	78c2      	ldrb	r2, [r0, #3]
 800376c:	7883      	ldrb	r3, [r0, #2]
 800376e:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8003772:	7843      	ldrb	r3, [r0, #1]
 8003774:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003778:	7800      	ldrb	r0, [r0, #0]
 800377a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800377e:	4770      	bx	lr

08003780 <st_word>:
 8003780:	7001      	strb	r1, [r0, #0]
 8003782:	0a09      	lsrs	r1, r1, #8
 8003784:	7041      	strb	r1, [r0, #1]
 8003786:	4770      	bx	lr

08003788 <st_dword>:
 8003788:	7001      	strb	r1, [r0, #0]
 800378a:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800378e:	7043      	strb	r3, [r0, #1]
 8003790:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8003794:	7083      	strb	r3, [r0, #2]
 8003796:	0e09      	lsrs	r1, r1, #24
 8003798:	70c1      	strb	r1, [r0, #3]
 800379a:	4770      	bx	lr

0800379c <mem_cpy>:
 800379c:	4613      	mov	r3, r2
 800379e:	b12a      	cbz	r2, 80037ac <mem_cpy+0x10>
 80037a0:	780a      	ldrb	r2, [r1, #0]
 80037a2:	7002      	strb	r2, [r0, #0]
 80037a4:	3001      	adds	r0, #1
 80037a6:	3101      	adds	r1, #1
 80037a8:	3b01      	subs	r3, #1
 80037aa:	d1f9      	bne.n	80037a0 <mem_cpy+0x4>
 80037ac:	4770      	bx	lr

080037ae <mem_set>:
 80037ae:	7001      	strb	r1, [r0, #0]
 80037b0:	3001      	adds	r0, #1
 80037b2:	3a01      	subs	r2, #1
 80037b4:	d1fb      	bne.n	80037ae <mem_set>
 80037b6:	4770      	bx	lr

080037b8 <mem_cmp>:
 80037b8:	b430      	push	{r4, r5}
 80037ba:	1c45      	adds	r5, r0, #1
 80037bc:	7803      	ldrb	r3, [r0, #0]
 80037be:	7808      	ldrb	r0, [r1, #0]
 80037c0:	1a1b      	subs	r3, r3, r0
 80037c2:	3a01      	subs	r2, #1
 80037c4:	d004      	beq.n	80037d0 <mem_cmp+0x18>
 80037c6:	1c4c      	adds	r4, r1, #1
 80037c8:	4628      	mov	r0, r5
 80037ca:	4621      	mov	r1, r4
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d0f4      	beq.n	80037ba <mem_cmp+0x2>
 80037d0:	4618      	mov	r0, r3
 80037d2:	bc30      	pop	{r4, r5}
 80037d4:	4770      	bx	lr

080037d6 <chk_chr>:
 80037d6:	e000      	b.n	80037da <chk_chr+0x4>
 80037d8:	3001      	adds	r0, #1
 80037da:	7803      	ldrb	r3, [r0, #0]
 80037dc:	b10b      	cbz	r3, 80037e2 <chk_chr+0xc>
 80037de:	428b      	cmp	r3, r1
 80037e0:	d1fa      	bne.n	80037d8 <chk_chr+0x2>
 80037e2:	4618      	mov	r0, r3
 80037e4:	4770      	bx	lr

080037e6 <dbc_1st>:
 80037e6:	2880      	cmp	r0, #128	; 0x80
 80037e8:	d907      	bls.n	80037fa <dbc_1st+0x14>
 80037ea:	289f      	cmp	r0, #159	; 0x9f
 80037ec:	d907      	bls.n	80037fe <dbc_1st+0x18>
 80037ee:	28df      	cmp	r0, #223	; 0xdf
 80037f0:	d907      	bls.n	8003802 <dbc_1st+0x1c>
 80037f2:	28fc      	cmp	r0, #252	; 0xfc
 80037f4:	d907      	bls.n	8003806 <dbc_1st+0x20>
 80037f6:	2000      	movs	r0, #0
 80037f8:	4770      	bx	lr
 80037fa:	2000      	movs	r0, #0
 80037fc:	4770      	bx	lr
 80037fe:	2001      	movs	r0, #1
 8003800:	4770      	bx	lr
 8003802:	2000      	movs	r0, #0
 8003804:	4770      	bx	lr
 8003806:	2001      	movs	r0, #1
 8003808:	4770      	bx	lr

0800380a <dbc_2nd>:
 800380a:	283f      	cmp	r0, #63	; 0x3f
 800380c:	d90b      	bls.n	8003826 <dbc_2nd+0x1c>
 800380e:	287e      	cmp	r0, #126	; 0x7e
 8003810:	d90b      	bls.n	800382a <dbc_2nd+0x20>
 8003812:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003816:	d102      	bne.n	800381e <dbc_2nd+0x14>
 8003818:	b148      	cbz	r0, 800382e <dbc_2nd+0x24>
 800381a:	2000      	movs	r0, #0
 800381c:	4770      	bx	lr
 800381e:	28fc      	cmp	r0, #252	; 0xfc
 8003820:	d8fa      	bhi.n	8003818 <dbc_2nd+0xe>
 8003822:	2001      	movs	r0, #1
 8003824:	4770      	bx	lr
 8003826:	2000      	movs	r0, #0
 8003828:	4770      	bx	lr
 800382a:	2001      	movs	r0, #1
 800382c:	4770      	bx	lr
 800382e:	2001      	movs	r0, #1
 8003830:	4770      	bx	lr

08003832 <clst2sect>:
 8003832:	3902      	subs	r1, #2
 8003834:	69c3      	ldr	r3, [r0, #28]
 8003836:	3b02      	subs	r3, #2
 8003838:	428b      	cmp	r3, r1
 800383a:	d904      	bls.n	8003846 <clst2sect+0x14>
 800383c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800383e:	8940      	ldrh	r0, [r0, #10]
 8003840:	fb01 3000 	mla	r0, r1, r0, r3
 8003844:	4770      	bx	lr
 8003846:	2000      	movs	r0, #0
 8003848:	4770      	bx	lr

0800384a <pick_lfn>:
 800384a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800384e:	4607      	mov	r7, r0
 8003850:	460e      	mov	r6, r1
 8003852:	f101 001a 	add.w	r0, r1, #26
 8003856:	f7ff ff83 	bl	8003760 <ld_word>
 800385a:	bb90      	cbnz	r0, 80038c2 <pick_lfn+0x78>
 800385c:	7835      	ldrb	r5, [r6, #0]
 800385e:	f025 0540 	bic.w	r5, r5, #64	; 0x40
 8003862:	3d01      	subs	r5, #1
 8003864:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8003868:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 800386c:	f04f 0801 	mov.w	r8, #1
 8003870:	2400      	movs	r4, #0
 8003872:	e004      	b.n	800387e <pick_lfn+0x34>
 8003874:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003878:	4298      	cmp	r0, r3
 800387a:	d127      	bne.n	80038cc <pick_lfn+0x82>
 800387c:	3401      	adds	r4, #1
 800387e:	2c0c      	cmp	r4, #12
 8003880:	d811      	bhi.n	80038a6 <pick_lfn+0x5c>
 8003882:	f248 6398 	movw	r3, #34456	; 0x8698
 8003886:	f6c0 0300 	movt	r3, #2048	; 0x800
 800388a:	5d18      	ldrb	r0, [r3, r4]
 800388c:	4430      	add	r0, r6
 800388e:	f7ff ff67 	bl	8003760 <ld_word>
 8003892:	f1b8 0f00 	cmp.w	r8, #0
 8003896:	d0ed      	beq.n	8003874 <pick_lfn+0x2a>
 8003898:	2dff      	cmp	r5, #255	; 0xff
 800389a:	d815      	bhi.n	80038c8 <pick_lfn+0x7e>
 800389c:	f827 0015 	strh.w	r0, [r7, r5, lsl #1]
 80038a0:	4680      	mov	r8, r0
 80038a2:	3501      	adds	r5, #1
 80038a4:	e7ea      	b.n	800387c <pick_lfn+0x32>
 80038a6:	7833      	ldrb	r3, [r6, #0]
 80038a8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80038ac:	d010      	beq.n	80038d0 <pick_lfn+0x86>
 80038ae:	f1b8 0f00 	cmp.w	r8, #0
 80038b2:	d00f      	beq.n	80038d4 <pick_lfn+0x8a>
 80038b4:	2dff      	cmp	r5, #255	; 0xff
 80038b6:	d80f      	bhi.n	80038d8 <pick_lfn+0x8e>
 80038b8:	2300      	movs	r3, #0
 80038ba:	f827 3015 	strh.w	r3, [r7, r5, lsl #1]
 80038be:	2001      	movs	r0, #1
 80038c0:	e000      	b.n	80038c4 <pick_lfn+0x7a>
 80038c2:	2000      	movs	r0, #0
 80038c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038c8:	2000      	movs	r0, #0
 80038ca:	e7fb      	b.n	80038c4 <pick_lfn+0x7a>
 80038cc:	2000      	movs	r0, #0
 80038ce:	e7f9      	b.n	80038c4 <pick_lfn+0x7a>
 80038d0:	2001      	movs	r0, #1
 80038d2:	e7f7      	b.n	80038c4 <pick_lfn+0x7a>
 80038d4:	2001      	movs	r0, #1
 80038d6:	e7f5      	b.n	80038c4 <pick_lfn+0x7a>
 80038d8:	2000      	movs	r0, #0
 80038da:	e7f3      	b.n	80038c4 <pick_lfn+0x7a>

080038dc <sum_sfn>:
 80038dc:	4601      	mov	r1, r0
 80038de:	220b      	movs	r2, #11
 80038e0:	2000      	movs	r0, #0
 80038e2:	01c3      	lsls	r3, r0, #7
 80038e4:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 80038e8:	7808      	ldrb	r0, [r1, #0]
 80038ea:	fa50 f383 	uxtab	r3, r0, r3
 80038ee:	b2d8      	uxtb	r0, r3
 80038f0:	3101      	adds	r1, #1
 80038f2:	3a01      	subs	r2, #1
 80038f4:	d1f5      	bne.n	80038e2 <sum_sfn+0x6>
 80038f6:	4770      	bx	lr

080038f8 <get_ldnumber>:
 80038f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038fa:	6807      	ldr	r7, [r0, #0]
 80038fc:	2f00      	cmp	r7, #0
 80038fe:	d051      	beq.n	80039a4 <get_ldnumber+0xac>
 8003900:	463a      	mov	r2, r7
 8003902:	1c54      	adds	r4, r2, #1
 8003904:	7813      	ldrb	r3, [r2, #0]
 8003906:	2b1f      	cmp	r3, #31
 8003908:	d902      	bls.n	8003910 <get_ldnumber+0x18>
 800390a:	4622      	mov	r2, r4
 800390c:	2b3a      	cmp	r3, #58	; 0x3a
 800390e:	d1f8      	bne.n	8003902 <get_ldnumber+0xa>
 8003910:	2b3a      	cmp	r3, #58	; 0x3a
 8003912:	d007      	beq.n	8003924 <get_ldnumber+0x2c>
 8003914:	f240 2324 	movw	r3, #548	; 0x224
 8003918:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800391c:	f893 e000 	ldrb.w	lr, [r3]
 8003920:	4670      	mov	r0, lr
 8003922:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003924:	f897 e000 	ldrb.w	lr, [r7]
 8003928:	f1ae 0330 	sub.w	r3, lr, #48	; 0x30
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b09      	cmp	r3, #9
 8003930:	d808      	bhi.n	8003944 <get_ldnumber+0x4c>
 8003932:	1cbb      	adds	r3, r7, #2
 8003934:	42a3      	cmp	r3, r4
 8003936:	d002      	beq.n	800393e <get_ldnumber+0x46>
 8003938:	f04f 0e00 	mov.w	lr, #0
 800393c:	e004      	b.n	8003948 <get_ldnumber+0x50>
 800393e:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8003942:	e02a      	b.n	800399a <get_ldnumber+0xa2>
 8003944:	f04f 0e00 	mov.w	lr, #0
 8003948:	f248 63a8 	movw	r3, #34472	; 0x86a8
 800394c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8003950:	f853 502e 	ldr.w	r5, [r3, lr, lsl #2]
 8003954:	4639      	mov	r1, r7
 8003956:	e004      	b.n	8003962 <get_ldnumber+0x6a>
 8003958:	b1bb      	cbz	r3, 800398a <get_ldnumber+0x92>
 800395a:	4631      	mov	r1, r6
 800395c:	4665      	mov	r5, ip
 800395e:	429a      	cmp	r2, r3
 8003960:	d113      	bne.n	800398a <get_ldnumber+0x92>
 8003962:	f105 0c01 	add.w	ip, r5, #1
 8003966:	782b      	ldrb	r3, [r5, #0]
 8003968:	1c4e      	adds	r6, r1, #1
 800396a:	780a      	ldrb	r2, [r1, #0]
 800396c:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8003970:	b2c9      	uxtb	r1, r1
 8003972:	2919      	cmp	r1, #25
 8003974:	d801      	bhi.n	800397a <get_ldnumber+0x82>
 8003976:	3b20      	subs	r3, #32
 8003978:	b2db      	uxtb	r3, r3
 800397a:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
 800397e:	b2c9      	uxtb	r1, r1
 8003980:	2919      	cmp	r1, #25
 8003982:	d8e9      	bhi.n	8003958 <get_ldnumber+0x60>
 8003984:	3a20      	subs	r2, #32
 8003986:	b2d2      	uxtb	r2, r2
 8003988:	e7e6      	b.n	8003958 <get_ldnumber+0x60>
 800398a:	b90b      	cbnz	r3, 8003990 <get_ldnumber+0x98>
 800398c:	42b4      	cmp	r4, r6
 800398e:	d004      	beq.n	800399a <get_ldnumber+0xa2>
 8003990:	f10e 0e01 	add.w	lr, lr, #1
 8003994:	f1be 0f01 	cmp.w	lr, #1
 8003998:	ddd6      	ble.n	8003948 <get_ldnumber+0x50>
 800399a:	f1be 0f01 	cmp.w	lr, #1
 800399e:	dc04      	bgt.n	80039aa <get_ldnumber+0xb2>
 80039a0:	6004      	str	r4, [r0, #0]
 80039a2:	e7bd      	b.n	8003920 <get_ldnumber+0x28>
 80039a4:	f04f 3eff 	mov.w	lr, #4294967295
 80039a8:	e7ba      	b.n	8003920 <get_ldnumber+0x28>
 80039aa:	f04f 3eff 	mov.w	lr, #4294967295
 80039ae:	e7b7      	b.n	8003920 <get_ldnumber+0x28>

080039b0 <sync_window>:
 80039b0:	b538      	push	{r3, r4, r5, lr}
 80039b2:	78c3      	ldrb	r3, [r0, #3]
 80039b4:	b90b      	cbnz	r3, 80039ba <sync_window+0xa>
 80039b6:	2000      	movs	r0, #0
 80039b8:	bd38      	pop	{r3, r4, r5, pc}
 80039ba:	4604      	mov	r4, r0
 80039bc:	f100 0538 	add.w	r5, r0, #56	; 0x38
 80039c0:	2301      	movs	r3, #1
 80039c2:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80039c4:	4629      	mov	r1, r5
 80039c6:	7840      	ldrb	r0, [r0, #1]
 80039c8:	f7ff fe9d 	bl	8003706 <disk_write>
 80039cc:	b9a0      	cbnz	r0, 80039f8 <sync_window+0x48>
 80039ce:	2300      	movs	r3, #0
 80039d0:	70e3      	strb	r3, [r4, #3]
 80039d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80039d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80039d6:	1acb      	subs	r3, r1, r3
 80039d8:	6a22      	ldr	r2, [r4, #32]
 80039da:	4293      	cmp	r3, r2
 80039dc:	d20e      	bcs.n	80039fc <sync_window+0x4c>
 80039de:	78a3      	ldrb	r3, [r4, #2]
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d001      	beq.n	80039e8 <sync_window+0x38>
 80039e4:	2000      	movs	r0, #0
 80039e6:	e7e7      	b.n	80039b8 <sync_window+0x8>
 80039e8:	2301      	movs	r3, #1
 80039ea:	440a      	add	r2, r1
 80039ec:	4629      	mov	r1, r5
 80039ee:	7860      	ldrb	r0, [r4, #1]
 80039f0:	f7ff fe89 	bl	8003706 <disk_write>
 80039f4:	2000      	movs	r0, #0
 80039f6:	e7df      	b.n	80039b8 <sync_window+0x8>
 80039f8:	2001      	movs	r0, #1
 80039fa:	e7dd      	b.n	80039b8 <sync_window+0x8>
 80039fc:	2000      	movs	r0, #0
 80039fe:	e7db      	b.n	80039b8 <sync_window+0x8>

08003a00 <move_window>:
 8003a00:	b570      	push	{r4, r5, r6, lr}
 8003a02:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003a04:	428b      	cmp	r3, r1
 8003a06:	d012      	beq.n	8003a2e <move_window+0x2e>
 8003a08:	4604      	mov	r4, r0
 8003a0a:	460d      	mov	r5, r1
 8003a0c:	f7ff ffd0 	bl	80039b0 <sync_window>
 8003a10:	4606      	mov	r6, r0
 8003a12:	b968      	cbnz	r0, 8003a30 <move_window+0x30>
 8003a14:	2301      	movs	r3, #1
 8003a16:	462a      	mov	r2, r5
 8003a18:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8003a1c:	7860      	ldrb	r0, [r4, #1]
 8003a1e:	f7ff fe5b 	bl	80036d8 <disk_read>
 8003a22:	b110      	cbz	r0, 8003a2a <move_window+0x2a>
 8003a24:	2601      	movs	r6, #1
 8003a26:	f04f 35ff 	mov.w	r5, #4294967295
 8003a2a:	6365      	str	r5, [r4, #52]	; 0x34
 8003a2c:	e000      	b.n	8003a30 <move_window+0x30>
 8003a2e:	2600      	movs	r6, #0
 8003a30:	4630      	mov	r0, r6
 8003a32:	bd70      	pop	{r4, r5, r6, pc}

08003a34 <check_fs>:
 8003a34:	b510      	push	{r4, lr}
 8003a36:	4604      	mov	r4, r0
 8003a38:	2300      	movs	r3, #0
 8003a3a:	70c3      	strb	r3, [r0, #3]
 8003a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a40:	6343      	str	r3, [r0, #52]	; 0x34
 8003a42:	f7ff ffdd 	bl	8003a00 <move_window>
 8003a46:	bb28      	cbnz	r0, 8003a94 <check_fs+0x60>
 8003a48:	f204 2036 	addw	r0, r4, #566	; 0x236
 8003a4c:	f7ff fe88 	bl	8003760 <ld_word>
 8003a50:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8003a54:	4298      	cmp	r0, r3
 8003a56:	d11f      	bne.n	8003a98 <check_fs+0x64>
 8003a58:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8003a5c:	2be9      	cmp	r3, #233	; 0xe9
 8003a5e:	d003      	beq.n	8003a68 <check_fs+0x34>
 8003a60:	2beb      	cmp	r3, #235	; 0xeb
 8003a62:	d001      	beq.n	8003a68 <check_fs+0x34>
 8003a64:	2be8      	cmp	r3, #232	; 0xe8
 8003a66:	d119      	bne.n	8003a9c <check_fs+0x68>
 8003a68:	2203      	movs	r2, #3
 8003a6a:	f248 61c4 	movw	r1, #34500	; 0x86c4
 8003a6e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003a72:	f104 006e 	add.w	r0, r4, #110	; 0x6e
 8003a76:	f7ff fe9f 	bl	80037b8 <mem_cmp>
 8003a7a:	b188      	cbz	r0, 8003aa0 <check_fs+0x6c>
 8003a7c:	2205      	movs	r2, #5
 8003a7e:	f248 61c8 	movw	r1, #34504	; 0x86c8
 8003a82:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003a86:	f104 008a 	add.w	r0, r4, #138	; 0x8a
 8003a8a:	f7ff fe95 	bl	80037b8 <mem_cmp>
 8003a8e:	b120      	cbz	r0, 8003a9a <check_fs+0x66>
 8003a90:	2002      	movs	r0, #2
 8003a92:	e002      	b.n	8003a9a <check_fs+0x66>
 8003a94:	2004      	movs	r0, #4
 8003a96:	e000      	b.n	8003a9a <check_fs+0x66>
 8003a98:	2003      	movs	r0, #3
 8003a9a:	bd10      	pop	{r4, pc}
 8003a9c:	2002      	movs	r0, #2
 8003a9e:	e7fc      	b.n	8003a9a <check_fs+0x66>
 8003aa0:	2000      	movs	r0, #0
 8003aa2:	e7fa      	b.n	8003a9a <check_fs+0x66>

08003aa4 <find_volume>:
 8003aa4:	b570      	push	{r4, r5, r6, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	4606      	mov	r6, r0
 8003aaa:	460d      	mov	r5, r1
 8003aac:	2100      	movs	r1, #0
 8003aae:	f7ff ffc1 	bl	8003a34 <check_fs>
 8003ab2:	2802      	cmp	r0, #2
 8003ab4:	d016      	beq.n	8003ae4 <find_volume+0x40>
 8003ab6:	d82b      	bhi.n	8003b10 <find_volume+0x6c>
 8003ab8:	b355      	cbz	r5, 8003b10 <find_volume+0x6c>
 8003aba:	2400      	movs	r4, #0
 8003abc:	e00d      	b.n	8003ada <find_volume+0x36>
 8003abe:	f106 0038 	add.w	r0, r6, #56	; 0x38
 8003ac2:	0123      	lsls	r3, r4, #4
 8003ac4:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 8003ac8:	4418      	add	r0, r3
 8003aca:	f7ff fe4e 	bl	800376a <ld_dword>
 8003ace:	ab04      	add	r3, sp, #16
 8003ad0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003ad4:	f843 0c10 	str.w	r0, [r3, #-16]
 8003ad8:	3401      	adds	r4, #1
 8003ada:	2c03      	cmp	r4, #3
 8003adc:	d9ef      	bls.n	8003abe <find_volume+0x1a>
 8003ade:	b11d      	cbz	r5, 8003ae8 <find_volume+0x44>
 8003ae0:	1e6c      	subs	r4, r5, #1
 8003ae2:	e00c      	b.n	8003afe <find_volume+0x5a>
 8003ae4:	2400      	movs	r4, #0
 8003ae6:	e7f8      	b.n	8003ada <find_volume+0x36>
 8003ae8:	462c      	mov	r4, r5
 8003aea:	e008      	b.n	8003afe <find_volume+0x5a>
 8003aec:	4630      	mov	r0, r6
 8003aee:	f7ff ffa1 	bl	8003a34 <check_fs>
 8003af2:	b96d      	cbnz	r5, 8003b10 <find_volume+0x6c>
 8003af4:	2801      	cmp	r0, #1
 8003af6:	d90b      	bls.n	8003b10 <find_volume+0x6c>
 8003af8:	3401      	adds	r4, #1
 8003afa:	2c03      	cmp	r4, #3
 8003afc:	d808      	bhi.n	8003b10 <find_volume+0x6c>
 8003afe:	ab04      	add	r3, sp, #16
 8003b00:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003b04:	f853 1c10 	ldr.w	r1, [r3, #-16]
 8003b08:	2900      	cmp	r1, #0
 8003b0a:	d1ef      	bne.n	8003aec <find_volume+0x48>
 8003b0c:	2003      	movs	r0, #3
 8003b0e:	e7f0      	b.n	8003af2 <find_volume+0x4e>
 8003b10:	b004      	add	sp, #16
 8003b12:	bd70      	pop	{r4, r5, r6, pc}

08003b14 <mount_volume>:
 8003b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b18:	460f      	mov	r7, r1
 8003b1a:	4616      	mov	r6, r2
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	600b      	str	r3, [r1, #0]
 8003b20:	f7ff feea 	bl	80038f8 <get_ldnumber>
 8003b24:	1e05      	subs	r5, r0, #0
 8003b26:	f2c0 812a 	blt.w	8003d7e <mount_volume+0x26a>
 8003b2a:	f240 2328 	movw	r3, #552	; 0x228
 8003b2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003b32:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
 8003b36:	2c00      	cmp	r4, #0
 8003b38:	f000 8124 	beq.w	8003d84 <mount_volume+0x270>
 8003b3c:	603c      	str	r4, [r7, #0]
 8003b3e:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 8003b42:	7823      	ldrb	r3, [r4, #0]
 8003b44:	b173      	cbz	r3, 8003b64 <mount_volume+0x50>
 8003b46:	7860      	ldrb	r0, [r4, #1]
 8003b48:	f7ff fda4 	bl	8003694 <disk_status>
 8003b4c:	f010 0f01 	tst.w	r0, #1
 8003b50:	d108      	bne.n	8003b64 <mount_volume+0x50>
 8003b52:	2e00      	cmp	r6, #0
 8003b54:	f000 8118 	beq.w	8003d88 <mount_volume+0x274>
 8003b58:	f010 0f04 	tst.w	r0, #4
 8003b5c:	f040 8116 	bne.w	8003d8c <mount_volume+0x278>
 8003b60:	2000      	movs	r0, #0
 8003b62:	e10d      	b.n	8003d80 <mount_volume+0x26c>
 8003b64:	2300      	movs	r3, #0
 8003b66:	7023      	strb	r3, [r4, #0]
 8003b68:	b2e8      	uxtb	r0, r5
 8003b6a:	7060      	strb	r0, [r4, #1]
 8003b6c:	f7ff fda3 	bl	80036b6 <disk_initialize>
 8003b70:	f010 0f01 	tst.w	r0, #1
 8003b74:	f040 810c 	bne.w	8003d90 <mount_volume+0x27c>
 8003b78:	b11e      	cbz	r6, 8003b82 <mount_volume+0x6e>
 8003b7a:	f010 0f04 	tst.w	r0, #4
 8003b7e:	f040 8109 	bne.w	8003d94 <mount_volume+0x280>
 8003b82:	2100      	movs	r1, #0
 8003b84:	4620      	mov	r0, r4
 8003b86:	f7ff ff8d 	bl	8003aa4 <find_volume>
 8003b8a:	2804      	cmp	r0, #4
 8003b8c:	f000 8104 	beq.w	8003d98 <mount_volume+0x284>
 8003b90:	2801      	cmp	r0, #1
 8003b92:	f200 8103 	bhi.w	8003d9c <mount_volume+0x288>
 8003b96:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8003b98:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8003b9c:	f7ff fde0 	bl	8003760 <ld_word>
 8003ba0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003ba4:	f040 80fc 	bne.w	8003da0 <mount_volume+0x28c>
 8003ba8:	f104 004e 	add.w	r0, r4, #78	; 0x4e
 8003bac:	f7ff fdd8 	bl	8003760 <ld_word>
 8003bb0:	4606      	mov	r6, r0
 8003bb2:	b920      	cbnz	r0, 8003bbe <mount_volume+0xaa>
 8003bb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003bb8:	f7ff fdd7 	bl	800376a <ld_dword>
 8003bbc:	4606      	mov	r6, r0
 8003bbe:	6226      	str	r6, [r4, #32]
 8003bc0:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 8003bc4:	70a2      	strb	r2, [r4, #2]
 8003bc6:	1e53      	subs	r3, r2, #1
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	f200 80ea 	bhi.w	8003da4 <mount_volume+0x290>
 8003bd0:	fb06 f502 	mul.w	r5, r6, r2
 8003bd4:	f894 8045 	ldrb.w	r8, [r4, #69]	; 0x45
 8003bd8:	f8a4 800a 	strh.w	r8, [r4, #10]
 8003bdc:	f1b8 0f00 	cmp.w	r8, #0
 8003be0:	f000 80e2 	beq.w	8003da8 <mount_volume+0x294>
 8003be4:	f108 33ff 	add.w	r3, r8, #4294967295
 8003be8:	ea18 0f03 	tst.w	r8, r3
 8003bec:	f040 80de 	bne.w	8003dac <mount_volume+0x298>
 8003bf0:	f104 0049 	add.w	r0, r4, #73	; 0x49
 8003bf4:	f7ff fdb4 	bl	8003760 <ld_word>
 8003bf8:	4682      	mov	sl, r0
 8003bfa:	8120      	strh	r0, [r4, #8]
 8003bfc:	f010 0f0f 	tst.w	r0, #15
 8003c00:	f040 80d6 	bne.w	8003db0 <mount_volume+0x29c>
 8003c04:	f104 004b 	add.w	r0, r4, #75	; 0x4b
 8003c08:	f7ff fdaa 	bl	8003760 <ld_word>
 8003c0c:	4681      	mov	r9, r0
 8003c0e:	b920      	cbnz	r0, 8003c1a <mount_volume+0x106>
 8003c10:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003c14:	f7ff fda9 	bl	800376a <ld_dword>
 8003c18:	4681      	mov	r9, r0
 8003c1a:	f104 0046 	add.w	r0, r4, #70	; 0x46
 8003c1e:	f7ff fd9f 	bl	8003760 <ld_word>
 8003c22:	4601      	mov	r1, r0
 8003c24:	2800      	cmp	r0, #0
 8003c26:	f000 80c5 	beq.w	8003db4 <mount_volume+0x2a0>
 8003c2a:	1942      	adds	r2, r0, r5
 8003c2c:	eb02 121a 	add.w	r2, r2, sl, lsr #4
 8003c30:	4591      	cmp	r9, r2
 8003c32:	f0c0 80c1 	bcc.w	8003db8 <mount_volume+0x2a4>
 8003c36:	eba9 0302 	sub.w	r3, r9, r2
 8003c3a:	fbb3 f3f8 	udiv	r3, r3, r8
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f000 80bc 	beq.w	8003dbc <mount_volume+0x2a8>
 8003c44:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 8003c48:	f6c0 70ff 	movt	r0, #4095	; 0xfff
 8003c4c:	4283      	cmp	r3, r0
 8003c4e:	d910      	bls.n	8003c72 <mount_volume+0x15e>
 8003c50:	f04f 0900 	mov.w	r9, #0
 8003c54:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 8003c58:	4283      	cmp	r3, r0
 8003c5a:	d801      	bhi.n	8003c60 <mount_volume+0x14c>
 8003c5c:	f04f 0902 	mov.w	r9, #2
 8003c60:	f640 70f5 	movw	r0, #4085	; 0xff5
 8003c64:	4283      	cmp	r3, r0
 8003c66:	d907      	bls.n	8003c78 <mount_volume+0x164>
 8003c68:	f1b9 0f00 	cmp.w	r9, #0
 8003c6c:	d106      	bne.n	8003c7c <mount_volume+0x168>
 8003c6e:	200d      	movs	r0, #13
 8003c70:	e086      	b.n	8003d80 <mount_volume+0x26c>
 8003c72:	f04f 0903 	mov.w	r9, #3
 8003c76:	e7ed      	b.n	8003c54 <mount_volume+0x140>
 8003c78:	f04f 0901 	mov.w	r9, #1
 8003c7c:	f103 0802 	add.w	r8, r3, #2
 8003c80:	f8c4 801c 	str.w	r8, [r4, #28]
 8003c84:	6267      	str	r7, [r4, #36]	; 0x24
 8003c86:	19cb      	adds	r3, r1, r7
 8003c88:	62a3      	str	r3, [r4, #40]	; 0x28
 8003c8a:	443a      	add	r2, r7
 8003c8c:	6322      	str	r2, [r4, #48]	; 0x30
 8003c8e:	f1b9 0f03 	cmp.w	r9, #3
 8003c92:	d030      	beq.n	8003cf6 <mount_volume+0x1e2>
 8003c94:	f1ba 0f00 	cmp.w	sl, #0
 8003c98:	f000 8096 	beq.w	8003dc8 <mount_volume+0x2b4>
 8003c9c:	442b      	add	r3, r5
 8003c9e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003ca0:	f1b9 0f02 	cmp.w	r9, #2
 8003ca4:	d038      	beq.n	8003d18 <mount_volume+0x204>
 8003ca6:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 8003caa:	f008 0301 	and.w	r3, r8, #1
 8003cae:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8003cb2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003cb6:	ebb6 2f53 	cmp.w	r6, r3, lsr #9
 8003cba:	f0c0 8087 	bcc.w	8003dcc <mount_volume+0x2b8>
 8003cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8003cc2:	6163      	str	r3, [r4, #20]
 8003cc4:	6123      	str	r3, [r4, #16]
 8003cc6:	2380      	movs	r3, #128	; 0x80
 8003cc8:	7123      	strb	r3, [r4, #4]
 8003cca:	f1b9 0f03 	cmp.w	r9, #3
 8003cce:	d026      	beq.n	8003d1e <mount_volume+0x20a>
 8003cd0:	f884 9000 	strb.w	r9, [r4]
 8003cd4:	f240 2230 	movw	r2, #560	; 0x230
 8003cd8:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003cdc:	8813      	ldrh	r3, [r2, #0]
 8003cde:	3301      	adds	r3, #1
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	8013      	strh	r3, [r2, #0]
 8003ce4:	80e3      	strh	r3, [r4, #6]
 8003ce6:	f240 2334 	movw	r3, #564	; 0x234
 8003cea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003cee:	60e3      	str	r3, [r4, #12]
 8003cf0:	2000      	movs	r0, #0
 8003cf2:	61a0      	str	r0, [r4, #24]
 8003cf4:	e044      	b.n	8003d80 <mount_volume+0x26c>
 8003cf6:	f104 0062 	add.w	r0, r4, #98	; 0x62
 8003cfa:	f7ff fd31 	bl	8003760 <ld_word>
 8003cfe:	2800      	cmp	r0, #0
 8003d00:	d15e      	bne.n	8003dc0 <mount_volume+0x2ac>
 8003d02:	f1ba 0f00 	cmp.w	sl, #0
 8003d06:	d15d      	bne.n	8003dc4 <mount_volume+0x2b0>
 8003d08:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8003d0c:	f7ff fd2d 	bl	800376a <ld_dword>
 8003d10:	62e0      	str	r0, [r4, #44]	; 0x2c
 8003d12:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8003d16:	e7cc      	b.n	8003cb2 <mount_volume+0x19e>
 8003d18:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8003d1c:	e7c9      	b.n	8003cb2 <mount_volume+0x19e>
 8003d1e:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003d22:	f7ff fd1d 	bl	8003760 <ld_word>
 8003d26:	2801      	cmp	r0, #1
 8003d28:	d1d2      	bne.n	8003cd0 <mount_volume+0x1bc>
 8003d2a:	1c79      	adds	r1, r7, #1
 8003d2c:	4620      	mov	r0, r4
 8003d2e:	f7ff fe67 	bl	8003a00 <move_window>
 8003d32:	2800      	cmp	r0, #0
 8003d34:	d1cc      	bne.n	8003cd0 <mount_volume+0x1bc>
 8003d36:	2300      	movs	r3, #0
 8003d38:	7123      	strb	r3, [r4, #4]
 8003d3a:	f204 2036 	addw	r0, r4, #566	; 0x236
 8003d3e:	f7ff fd0f 	bl	8003760 <ld_word>
 8003d42:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8003d46:	4298      	cmp	r0, r3
 8003d48:	d1c2      	bne.n	8003cd0 <mount_volume+0x1bc>
 8003d4a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8003d4e:	f7ff fd0c 	bl	800376a <ld_dword>
 8003d52:	f245 2352 	movw	r3, #21074	; 0x5252
 8003d56:	f2c4 1361 	movt	r3, #16737	; 0x4161
 8003d5a:	4298      	cmp	r0, r3
 8003d5c:	d1b8      	bne.n	8003cd0 <mount_volume+0x1bc>
 8003d5e:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8003d62:	f7ff fd02 	bl	800376a <ld_dword>
 8003d66:	f247 2372 	movw	r3, #29298	; 0x7272
 8003d6a:	f2c6 1341 	movt	r3, #24897	; 0x6141
 8003d6e:	4298      	cmp	r0, r3
 8003d70:	d1ae      	bne.n	8003cd0 <mount_volume+0x1bc>
 8003d72:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8003d76:	f7ff fcf8 	bl	800376a <ld_dword>
 8003d7a:	6160      	str	r0, [r4, #20]
 8003d7c:	e7a8      	b.n	8003cd0 <mount_volume+0x1bc>
 8003d7e:	200b      	movs	r0, #11
 8003d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d84:	200c      	movs	r0, #12
 8003d86:	e7fb      	b.n	8003d80 <mount_volume+0x26c>
 8003d88:	2000      	movs	r0, #0
 8003d8a:	e7f9      	b.n	8003d80 <mount_volume+0x26c>
 8003d8c:	200a      	movs	r0, #10
 8003d8e:	e7f7      	b.n	8003d80 <mount_volume+0x26c>
 8003d90:	2003      	movs	r0, #3
 8003d92:	e7f5      	b.n	8003d80 <mount_volume+0x26c>
 8003d94:	200a      	movs	r0, #10
 8003d96:	e7f3      	b.n	8003d80 <mount_volume+0x26c>
 8003d98:	2001      	movs	r0, #1
 8003d9a:	e7f1      	b.n	8003d80 <mount_volume+0x26c>
 8003d9c:	200d      	movs	r0, #13
 8003d9e:	e7ef      	b.n	8003d80 <mount_volume+0x26c>
 8003da0:	200d      	movs	r0, #13
 8003da2:	e7ed      	b.n	8003d80 <mount_volume+0x26c>
 8003da4:	200d      	movs	r0, #13
 8003da6:	e7eb      	b.n	8003d80 <mount_volume+0x26c>
 8003da8:	200d      	movs	r0, #13
 8003daa:	e7e9      	b.n	8003d80 <mount_volume+0x26c>
 8003dac:	200d      	movs	r0, #13
 8003dae:	e7e7      	b.n	8003d80 <mount_volume+0x26c>
 8003db0:	200d      	movs	r0, #13
 8003db2:	e7e5      	b.n	8003d80 <mount_volume+0x26c>
 8003db4:	200d      	movs	r0, #13
 8003db6:	e7e3      	b.n	8003d80 <mount_volume+0x26c>
 8003db8:	200d      	movs	r0, #13
 8003dba:	e7e1      	b.n	8003d80 <mount_volume+0x26c>
 8003dbc:	200d      	movs	r0, #13
 8003dbe:	e7df      	b.n	8003d80 <mount_volume+0x26c>
 8003dc0:	200d      	movs	r0, #13
 8003dc2:	e7dd      	b.n	8003d80 <mount_volume+0x26c>
 8003dc4:	200d      	movs	r0, #13
 8003dc6:	e7db      	b.n	8003d80 <mount_volume+0x26c>
 8003dc8:	200d      	movs	r0, #13
 8003dca:	e7d9      	b.n	8003d80 <mount_volume+0x26c>
 8003dcc:	200d      	movs	r0, #13
 8003dce:	e7d7      	b.n	8003d80 <mount_volume+0x26c>

08003dd0 <put_fat>:
 8003dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dd4:	2901      	cmp	r1, #1
 8003dd6:	d97a      	bls.n	8003ece <put_fat+0xfe>
 8003dd8:	69c3      	ldr	r3, [r0, #28]
 8003dda:	428b      	cmp	r3, r1
 8003ddc:	d979      	bls.n	8003ed2 <put_fat+0x102>
 8003dde:	4617      	mov	r7, r2
 8003de0:	460c      	mov	r4, r1
 8003de2:	4606      	mov	r6, r0
 8003de4:	7803      	ldrb	r3, [r0, #0]
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d043      	beq.n	8003e72 <put_fat+0xa2>
 8003dea:	2b03      	cmp	r3, #3
 8003dec:	d054      	beq.n	8003e98 <put_fat+0xc8>
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d001      	beq.n	8003df6 <put_fat+0x26>
 8003df2:	2502      	movs	r5, #2
 8003df4:	e06e      	b.n	8003ed4 <put_fat+0x104>
 8003df6:	eb01 0851 	add.w	r8, r1, r1, lsr #1
 8003dfa:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8003dfc:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8003e00:	f7ff fdfe 	bl	8003a00 <move_window>
 8003e04:	4605      	mov	r5, r0
 8003e06:	2800      	cmp	r0, #0
 8003e08:	d164      	bne.n	8003ed4 <put_fat+0x104>
 8003e0a:	f106 0a38 	add.w	sl, r6, #56	; 0x38
 8003e0e:	f108 0901 	add.w	r9, r8, #1
 8003e12:	f3c8 0808 	ubfx	r8, r8, #0, #9
 8003e16:	f014 0401 	ands.w	r4, r4, #1
 8003e1a:	d01f      	beq.n	8003e5c <put_fat+0x8c>
 8003e1c:	f91a 3008 	ldrsb.w	r3, [sl, r8]
 8003e20:	f003 030f 	and.w	r3, r3, #15
 8003e24:	013a      	lsls	r2, r7, #4
 8003e26:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	f80a 3008 	strb.w	r3, [sl, r8]
 8003e32:	2301      	movs	r3, #1
 8003e34:	70f3      	strb	r3, [r6, #3]
 8003e36:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8003e38:	eb01 2159 	add.w	r1, r1, r9, lsr #9
 8003e3c:	4630      	mov	r0, r6
 8003e3e:	f7ff fddf 	bl	8003a00 <move_window>
 8003e42:	4605      	mov	r5, r0
 8003e44:	2800      	cmp	r0, #0
 8003e46:	d145      	bne.n	8003ed4 <put_fat+0x104>
 8003e48:	f3c9 0908 	ubfx	r9, r9, #0, #9
 8003e4c:	b144      	cbz	r4, 8003e60 <put_fat+0x90>
 8003e4e:	f3c7 1207 	ubfx	r2, r7, #4, #8
 8003e52:	f80a 2009 	strb.w	r2, [sl, r9]
 8003e56:	2301      	movs	r3, #1
 8003e58:	70f3      	strb	r3, [r6, #3]
 8003e5a:	e03b      	b.n	8003ed4 <put_fat+0x104>
 8003e5c:	b2fb      	uxtb	r3, r7
 8003e5e:	e7e6      	b.n	8003e2e <put_fat+0x5e>
 8003e60:	f91a 2009 	ldrsb.w	r2, [sl, r9]
 8003e64:	f022 020f 	bic.w	r2, r2, #15
 8003e68:	f3c7 2703 	ubfx	r7, r7, #8, #4
 8003e6c:	433a      	orrs	r2, r7
 8003e6e:	b2d2      	uxtb	r2, r2
 8003e70:	e7ef      	b.n	8003e52 <put_fat+0x82>
 8003e72:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8003e74:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8003e78:	f7ff fdc2 	bl	8003a00 <move_window>
 8003e7c:	4605      	mov	r5, r0
 8003e7e:	bb48      	cbnz	r0, 8003ed4 <put_fat+0x104>
 8003e80:	f106 0038 	add.w	r0, r6, #56	; 0x38
 8003e84:	0064      	lsls	r4, r4, #1
 8003e86:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8003e8a:	b2b9      	uxth	r1, r7
 8003e8c:	4420      	add	r0, r4
 8003e8e:	f7ff fc77 	bl	8003780 <st_word>
 8003e92:	2301      	movs	r3, #1
 8003e94:	70f3      	strb	r3, [r6, #3]
 8003e96:	e01d      	b.n	8003ed4 <put_fat+0x104>
 8003e98:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8003e9a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8003e9e:	f7ff fdaf 	bl	8003a00 <move_window>
 8003ea2:	4605      	mov	r5, r0
 8003ea4:	b9b0      	cbnz	r0, 8003ed4 <put_fat+0x104>
 8003ea6:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 8003eaa:	f106 0338 	add.w	r3, r6, #56	; 0x38
 8003eae:	00a1      	lsls	r1, r4, #2
 8003eb0:	f401 71fe 	and.w	r1, r1, #508	; 0x1fc
 8003eb4:	185c      	adds	r4, r3, r1
 8003eb6:	4620      	mov	r0, r4
 8003eb8:	f7ff fc57 	bl	800376a <ld_dword>
 8003ebc:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
 8003ec0:	4339      	orrs	r1, r7
 8003ec2:	4620      	mov	r0, r4
 8003ec4:	f7ff fc60 	bl	8003788 <st_dword>
 8003ec8:	2301      	movs	r3, #1
 8003eca:	70f3      	strb	r3, [r6, #3]
 8003ecc:	e002      	b.n	8003ed4 <put_fat+0x104>
 8003ece:	2502      	movs	r5, #2
 8003ed0:	e000      	b.n	8003ed4 <put_fat+0x104>
 8003ed2:	2502      	movs	r5, #2
 8003ed4:	4628      	mov	r0, r5
 8003ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003eda <get_fat>:
 8003eda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003edc:	6806      	ldr	r6, [r0, #0]
 8003ede:	2901      	cmp	r1, #1
 8003ee0:	d953      	bls.n	8003f8a <get_fat+0xb0>
 8003ee2:	69f3      	ldr	r3, [r6, #28]
 8003ee4:	428b      	cmp	r3, r1
 8003ee6:	d952      	bls.n	8003f8e <get_fat+0xb4>
 8003ee8:	460c      	mov	r4, r1
 8003eea:	7833      	ldrb	r3, [r6, #0]
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d02b      	beq.n	8003f48 <get_fat+0x6e>
 8003ef0:	2b03      	cmp	r3, #3
 8003ef2:	d039      	beq.n	8003f68 <get_fat+0x8e>
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d001      	beq.n	8003efc <get_fat+0x22>
 8003ef8:	2001      	movs	r0, #1
 8003efa:	e047      	b.n	8003f8c <get_fat+0xb2>
 8003efc:	eb01 0551 	add.w	r5, r1, r1, lsr #1
 8003f00:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8003f02:	eb01 2155 	add.w	r1, r1, r5, lsr #9
 8003f06:	4630      	mov	r0, r6
 8003f08:	f7ff fd7a 	bl	8003a00 <move_window>
 8003f0c:	2800      	cmp	r0, #0
 8003f0e:	d140      	bne.n	8003f92 <get_fat+0xb8>
 8003f10:	1c6f      	adds	r7, r5, #1
 8003f12:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8003f16:	4435      	add	r5, r6
 8003f18:	f895 5038 	ldrb.w	r5, [r5, #56]	; 0x38
 8003f1c:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8003f1e:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8003f22:	4630      	mov	r0, r6
 8003f24:	f7ff fd6c 	bl	8003a00 <move_window>
 8003f28:	bbb0      	cbnz	r0, 8003f98 <get_fat+0xbe>
 8003f2a:	f3c7 0308 	ubfx	r3, r7, #0, #9
 8003f2e:	4433      	add	r3, r6
 8003f30:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 8003f34:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
 8003f38:	f014 0f01 	tst.w	r4, #1
 8003f3c:	d001      	beq.n	8003f42 <get_fat+0x68>
 8003f3e:	0900      	lsrs	r0, r0, #4
 8003f40:	e024      	b.n	8003f8c <get_fat+0xb2>
 8003f42:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8003f46:	e021      	b.n	8003f8c <get_fat+0xb2>
 8003f48:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8003f4a:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8003f4e:	4630      	mov	r0, r6
 8003f50:	f7ff fd56 	bl	8003a00 <move_window>
 8003f54:	bb18      	cbnz	r0, 8003f9e <get_fat+0xc4>
 8003f56:	f106 0038 	add.w	r0, r6, #56	; 0x38
 8003f5a:	0061      	lsls	r1, r4, #1
 8003f5c:	f401 71ff 	and.w	r1, r1, #510	; 0x1fe
 8003f60:	4408      	add	r0, r1
 8003f62:	f7ff fbfd 	bl	8003760 <ld_word>
 8003f66:	e011      	b.n	8003f8c <get_fat+0xb2>
 8003f68:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8003f6a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8003f6e:	4630      	mov	r0, r6
 8003f70:	f7ff fd46 	bl	8003a00 <move_window>
 8003f74:	b9b0      	cbnz	r0, 8003fa4 <get_fat+0xca>
 8003f76:	3638      	adds	r6, #56	; 0x38
 8003f78:	00a1      	lsls	r1, r4, #2
 8003f7a:	f401 70fe 	and.w	r0, r1, #508	; 0x1fc
 8003f7e:	4430      	add	r0, r6
 8003f80:	f7ff fbf3 	bl	800376a <ld_dword>
 8003f84:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 8003f88:	e000      	b.n	8003f8c <get_fat+0xb2>
 8003f8a:	2001      	movs	r0, #1
 8003f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f8e:	2001      	movs	r0, #1
 8003f90:	e7fc      	b.n	8003f8c <get_fat+0xb2>
 8003f92:	f04f 30ff 	mov.w	r0, #4294967295
 8003f96:	e7f9      	b.n	8003f8c <get_fat+0xb2>
 8003f98:	f04f 30ff 	mov.w	r0, #4294967295
 8003f9c:	e7f6      	b.n	8003f8c <get_fat+0xb2>
 8003f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8003fa2:	e7f3      	b.n	8003f8c <get_fat+0xb2>
 8003fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fa8:	e7f0      	b.n	8003f8c <get_fat+0xb2>

08003faa <dir_sdi>:
 8003faa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fae:	6807      	ldr	r7, [r0, #0]
 8003fb0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8003fb4:	d23b      	bcs.n	800402e <dir_sdi+0x84>
 8003fb6:	4606      	mov	r6, r0
 8003fb8:	460d      	mov	r5, r1
 8003fba:	f011 0f1f 	tst.w	r1, #31
 8003fbe:	d139      	bne.n	8004034 <dir_sdi+0x8a>
 8003fc0:	6131      	str	r1, [r6, #16]
 8003fc2:	6884      	ldr	r4, [r0, #8]
 8003fc4:	b91c      	cbnz	r4, 8003fce <dir_sdi+0x24>
 8003fc6:	783b      	ldrb	r3, [r7, #0]
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d900      	bls.n	8003fce <dir_sdi+0x24>
 8003fcc:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8003fce:	b994      	cbnz	r4, 8003ff6 <dir_sdi+0x4c>
 8003fd0:	893b      	ldrh	r3, [r7, #8]
 8003fd2:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 8003fd6:	d92f      	bls.n	8004038 <dir_sdi+0x8e>
 8003fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fda:	61b3      	str	r3, [r6, #24]
 8003fdc:	6174      	str	r4, [r6, #20]
 8003fde:	69b3      	ldr	r3, [r6, #24]
 8003fe0:	b393      	cbz	r3, 8004048 <dir_sdi+0x9e>
 8003fe2:	eb03 2355 	add.w	r3, r3, r5, lsr #9
 8003fe6:	61b3      	str	r3, [r6, #24]
 8003fe8:	3738      	adds	r7, #56	; 0x38
 8003fea:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8003fee:	443d      	add	r5, r7
 8003ff0:	61f5      	str	r5, [r6, #28]
 8003ff2:	2000      	movs	r0, #0
 8003ff4:	e01c      	b.n	8004030 <dir_sdi+0x86>
 8003ff6:	f8b7 800a 	ldrh.w	r8, [r7, #10]
 8003ffa:	ea4f 2848 	mov.w	r8, r8, lsl #9
 8003ffe:	4545      	cmp	r5, r8
 8004000:	d30f      	bcc.n	8004022 <dir_sdi+0x78>
 8004002:	4621      	mov	r1, r4
 8004004:	4630      	mov	r0, r6
 8004006:	f7ff ff68 	bl	8003eda <get_fat>
 800400a:	4604      	mov	r4, r0
 800400c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004010:	d014      	beq.n	800403c <dir_sdi+0x92>
 8004012:	2801      	cmp	r0, #1
 8004014:	d914      	bls.n	8004040 <dir_sdi+0x96>
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	4283      	cmp	r3, r0
 800401a:	d913      	bls.n	8004044 <dir_sdi+0x9a>
 800401c:	eba5 0508 	sub.w	r5, r5, r8
 8004020:	e7ed      	b.n	8003ffe <dir_sdi+0x54>
 8004022:	4621      	mov	r1, r4
 8004024:	4638      	mov	r0, r7
 8004026:	f7ff fc04 	bl	8003832 <clst2sect>
 800402a:	61b0      	str	r0, [r6, #24]
 800402c:	e7d6      	b.n	8003fdc <dir_sdi+0x32>
 800402e:	2002      	movs	r0, #2
 8004030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004034:	2002      	movs	r0, #2
 8004036:	e7fb      	b.n	8004030 <dir_sdi+0x86>
 8004038:	2002      	movs	r0, #2
 800403a:	e7f9      	b.n	8004030 <dir_sdi+0x86>
 800403c:	2001      	movs	r0, #1
 800403e:	e7f7      	b.n	8004030 <dir_sdi+0x86>
 8004040:	2002      	movs	r0, #2
 8004042:	e7f5      	b.n	8004030 <dir_sdi+0x86>
 8004044:	2002      	movs	r0, #2
 8004046:	e7f3      	b.n	8004030 <dir_sdi+0x86>
 8004048:	2002      	movs	r0, #2
 800404a:	e7f1      	b.n	8004030 <dir_sdi+0x86>

0800404c <create_chain>:
 800404c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004050:	4607      	mov	r7, r0
 8004052:	6806      	ldr	r6, [r0, #0]
 8004054:	4688      	mov	r8, r1
 8004056:	b931      	cbnz	r1, 8004066 <create_chain+0x1a>
 8004058:	6935      	ldr	r5, [r6, #16]
 800405a:	b18d      	cbz	r5, 8004080 <create_chain+0x34>
 800405c:	69f3      	ldr	r3, [r6, #28]
 800405e:	42ab      	cmp	r3, r5
 8004060:	d80f      	bhi.n	8004082 <create_chain+0x36>
 8004062:	2501      	movs	r5, #1
 8004064:	e00d      	b.n	8004082 <create_chain+0x36>
 8004066:	f7ff ff38 	bl	8003eda <get_fat>
 800406a:	4603      	mov	r3, r0
 800406c:	2801      	cmp	r0, #1
 800406e:	d967      	bls.n	8004140 <create_chain+0xf4>
 8004070:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004074:	d065      	beq.n	8004142 <create_chain+0xf6>
 8004076:	69f2      	ldr	r2, [r6, #28]
 8004078:	4282      	cmp	r2, r0
 800407a:	d862      	bhi.n	8004142 <create_chain+0xf6>
 800407c:	4645      	mov	r5, r8
 800407e:	e000      	b.n	8004082 <create_chain+0x36>
 8004080:	2501      	movs	r5, #1
 8004082:	6973      	ldr	r3, [r6, #20]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d05c      	beq.n	8004142 <create_chain+0xf6>
 8004088:	4545      	cmp	r5, r8
 800408a:	d001      	beq.n	8004090 <create_chain+0x44>
 800408c:	462c      	mov	r4, r5
 800408e:	e041      	b.n	8004114 <create_chain+0xc8>
 8004090:	1c6c      	adds	r4, r5, #1
 8004092:	69f3      	ldr	r3, [r6, #28]
 8004094:	42a3      	cmp	r3, r4
 8004096:	d800      	bhi.n	800409a <create_chain+0x4e>
 8004098:	2402      	movs	r4, #2
 800409a:	4621      	mov	r1, r4
 800409c:	4638      	mov	r0, r7
 800409e:	f7ff ff1c 	bl	8003eda <get_fat>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2801      	cmp	r0, #1
 80040a6:	d04c      	beq.n	8004142 <create_chain+0xf6>
 80040a8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80040ac:	d049      	beq.n	8004142 <create_chain+0xf6>
 80040ae:	b138      	cbz	r0, 80040c0 <create_chain+0x74>
 80040b0:	6933      	ldr	r3, [r6, #16]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d9ea      	bls.n	800408c <create_chain+0x40>
 80040b6:	69f2      	ldr	r2, [r6, #28]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d9e7      	bls.n	800408c <create_chain+0x40>
 80040bc:	461d      	mov	r5, r3
 80040be:	e7e5      	b.n	800408c <create_chain+0x40>
 80040c0:	2c00      	cmp	r4, #0
 80040c2:	d0e3      	beq.n	800408c <create_chain+0x40>
 80040c4:	f04f 32ff 	mov.w	r2, #4294967295
 80040c8:	4621      	mov	r1, r4
 80040ca:	4630      	mov	r0, r6
 80040cc:	f7ff fe80 	bl	8003dd0 <put_fat>
 80040d0:	4603      	mov	r3, r0
 80040d2:	b910      	cbnz	r0, 80040da <create_chain+0x8e>
 80040d4:	f1b8 0f00 	cmp.w	r8, #0
 80040d8:	d124      	bne.n	8004124 <create_chain+0xd8>
 80040da:	bb53      	cbnz	r3, 8004132 <create_chain+0xe6>
 80040dc:	6134      	str	r4, [r6, #16]
 80040de:	6972      	ldr	r2, [r6, #20]
 80040e0:	69f3      	ldr	r3, [r6, #28]
 80040e2:	3b02      	subs	r3, #2
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d801      	bhi.n	80040ec <create_chain+0xa0>
 80040e8:	3a01      	subs	r2, #1
 80040ea:	6172      	str	r2, [r6, #20]
 80040ec:	7933      	ldrb	r3, [r6, #4]
 80040ee:	f043 0301 	orr.w	r3, r3, #1
 80040f2:	7133      	strb	r3, [r6, #4]
 80040f4:	4623      	mov	r3, r4
 80040f6:	e024      	b.n	8004142 <create_chain+0xf6>
 80040f8:	4621      	mov	r1, r4
 80040fa:	4638      	mov	r0, r7
 80040fc:	f7ff feed 	bl	8003eda <get_fat>
 8004100:	4603      	mov	r3, r0
 8004102:	2800      	cmp	r0, #0
 8004104:	d0de      	beq.n	80040c4 <create_chain+0x78>
 8004106:	2801      	cmp	r0, #1
 8004108:	d01b      	beq.n	8004142 <create_chain+0xf6>
 800410a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800410e:	d018      	beq.n	8004142 <create_chain+0xf6>
 8004110:	42ac      	cmp	r4, r5
 8004112:	d01b      	beq.n	800414c <create_chain+0x100>
 8004114:	3401      	adds	r4, #1
 8004116:	69f3      	ldr	r3, [r6, #28]
 8004118:	42a3      	cmp	r3, r4
 800411a:	d8ed      	bhi.n	80040f8 <create_chain+0xac>
 800411c:	2d01      	cmp	r5, #1
 800411e:	d913      	bls.n	8004148 <create_chain+0xfc>
 8004120:	2402      	movs	r4, #2
 8004122:	e7e9      	b.n	80040f8 <create_chain+0xac>
 8004124:	4622      	mov	r2, r4
 8004126:	4641      	mov	r1, r8
 8004128:	4630      	mov	r0, r6
 800412a:	f7ff fe51 	bl	8003dd0 <put_fat>
 800412e:	4603      	mov	r3, r0
 8004130:	e7d3      	b.n	80040da <create_chain+0x8e>
 8004132:	2b01      	cmp	r3, #1
 8004134:	d001      	beq.n	800413a <create_chain+0xee>
 8004136:	2301      	movs	r3, #1
 8004138:	e003      	b.n	8004142 <create_chain+0xf6>
 800413a:	f04f 33ff 	mov.w	r3, #4294967295
 800413e:	e000      	b.n	8004142 <create_chain+0xf6>
 8004140:	2301      	movs	r3, #1
 8004142:	4618      	mov	r0, r3
 8004144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004148:	2300      	movs	r3, #0
 800414a:	e7fa      	b.n	8004142 <create_chain+0xf6>
 800414c:	2300      	movs	r3, #0
 800414e:	e7f8      	b.n	8004142 <create_chain+0xf6>

08004150 <dir_clear>:
 8004150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004152:	4605      	mov	r5, r0
 8004154:	460c      	mov	r4, r1
 8004156:	f7ff fc2b 	bl	80039b0 <sync_window>
 800415a:	b108      	cbz	r0, 8004160 <dir_clear+0x10>
 800415c:	2001      	movs	r0, #1
 800415e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004160:	4621      	mov	r1, r4
 8004162:	4628      	mov	r0, r5
 8004164:	f7ff fb65 	bl	8003832 <clst2sect>
 8004168:	4607      	mov	r7, r0
 800416a:	6368      	str	r0, [r5, #52]	; 0x34
 800416c:	f105 0638 	add.w	r6, r5, #56	; 0x38
 8004170:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004174:	2100      	movs	r1, #0
 8004176:	4630      	mov	r0, r6
 8004178:	f7ff fb19 	bl	80037ae <mem_set>
 800417c:	2400      	movs	r4, #0
 800417e:	e000      	b.n	8004182 <dir_clear+0x32>
 8004180:	3401      	adds	r4, #1
 8004182:	896b      	ldrh	r3, [r5, #10]
 8004184:	42a3      	cmp	r3, r4
 8004186:	d907      	bls.n	8004198 <dir_clear+0x48>
 8004188:	2301      	movs	r3, #1
 800418a:	19e2      	adds	r2, r4, r7
 800418c:	4631      	mov	r1, r6
 800418e:	7868      	ldrb	r0, [r5, #1]
 8004190:	f7ff fab9 	bl	8003706 <disk_write>
 8004194:	2800      	cmp	r0, #0
 8004196:	d0f3      	beq.n	8004180 <dir_clear+0x30>
 8004198:	8968      	ldrh	r0, [r5, #10]
 800419a:	1b00      	subs	r0, r0, r4
 800419c:	bf18      	it	ne
 800419e:	2001      	movne	r0, #1
 80041a0:	e7dd      	b.n	800415e <dir_clear+0xe>

080041a2 <dir_next>:
 80041a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041a6:	6806      	ldr	r6, [r0, #0]
 80041a8:	6905      	ldr	r5, [r0, #16]
 80041aa:	3520      	adds	r5, #32
 80041ac:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 80041b0:	d301      	bcc.n	80041b6 <dir_next+0x14>
 80041b2:	2300      	movs	r3, #0
 80041b4:	6183      	str	r3, [r0, #24]
 80041b6:	6983      	ldr	r3, [r0, #24]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d047      	beq.n	800424c <dir_next+0xaa>
 80041bc:	4688      	mov	r8, r1
 80041be:	4604      	mov	r4, r0
 80041c0:	f3c5 0708 	ubfx	r7, r5, #0, #9
 80041c4:	b93f      	cbnz	r7, 80041d6 <dir_next+0x34>
 80041c6:	3301      	adds	r3, #1
 80041c8:	6183      	str	r3, [r0, #24]
 80041ca:	6941      	ldr	r1, [r0, #20]
 80041cc:	b979      	cbnz	r1, 80041ee <dir_next+0x4c>
 80041ce:	8933      	ldrh	r3, [r6, #8]
 80041d0:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 80041d4:	d907      	bls.n	80041e6 <dir_next+0x44>
 80041d6:	6125      	str	r5, [r4, #16]
 80041d8:	f106 0338 	add.w	r3, r6, #56	; 0x38
 80041dc:	443b      	add	r3, r7
 80041de:	61e3      	str	r3, [r4, #28]
 80041e0:	2000      	movs	r0, #0
 80041e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041e6:	2300      	movs	r3, #0
 80041e8:	6183      	str	r3, [r0, #24]
 80041ea:	2004      	movs	r0, #4
 80041ec:	e7f9      	b.n	80041e2 <dir_next+0x40>
 80041ee:	8973      	ldrh	r3, [r6, #10]
 80041f0:	3b01      	subs	r3, #1
 80041f2:	ea13 2355 	ands.w	r3, r3, r5, lsr #9
 80041f6:	d1ee      	bne.n	80041d6 <dir_next+0x34>
 80041f8:	f7ff fe6f 	bl	8003eda <get_fat>
 80041fc:	4681      	mov	r9, r0
 80041fe:	2801      	cmp	r0, #1
 8004200:	d926      	bls.n	8004250 <dir_next+0xae>
 8004202:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004206:	d025      	beq.n	8004254 <dir_next+0xb2>
 8004208:	69f3      	ldr	r3, [r6, #28]
 800420a:	4283      	cmp	r3, r0
 800420c:	d812      	bhi.n	8004234 <dir_next+0x92>
 800420e:	f1b8 0f00 	cmp.w	r8, #0
 8004212:	d017      	beq.n	8004244 <dir_next+0xa2>
 8004214:	6961      	ldr	r1, [r4, #20]
 8004216:	4620      	mov	r0, r4
 8004218:	f7ff ff18 	bl	800404c <create_chain>
 800421c:	4681      	mov	r9, r0
 800421e:	b1d8      	cbz	r0, 8004258 <dir_next+0xb6>
 8004220:	2801      	cmp	r0, #1
 8004222:	d01b      	beq.n	800425c <dir_next+0xba>
 8004224:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004228:	d01a      	beq.n	8004260 <dir_next+0xbe>
 800422a:	4601      	mov	r1, r0
 800422c:	4630      	mov	r0, r6
 800422e:	f7ff ff8f 	bl	8004150 <dir_clear>
 8004232:	b9b8      	cbnz	r0, 8004264 <dir_next+0xc2>
 8004234:	f8c4 9014 	str.w	r9, [r4, #20]
 8004238:	4649      	mov	r1, r9
 800423a:	4630      	mov	r0, r6
 800423c:	f7ff faf9 	bl	8003832 <clst2sect>
 8004240:	61a0      	str	r0, [r4, #24]
 8004242:	e7c8      	b.n	80041d6 <dir_next+0x34>
 8004244:	2300      	movs	r3, #0
 8004246:	61a3      	str	r3, [r4, #24]
 8004248:	2004      	movs	r0, #4
 800424a:	e7ca      	b.n	80041e2 <dir_next+0x40>
 800424c:	2004      	movs	r0, #4
 800424e:	e7c8      	b.n	80041e2 <dir_next+0x40>
 8004250:	2002      	movs	r0, #2
 8004252:	e7c6      	b.n	80041e2 <dir_next+0x40>
 8004254:	2001      	movs	r0, #1
 8004256:	e7c4      	b.n	80041e2 <dir_next+0x40>
 8004258:	2007      	movs	r0, #7
 800425a:	e7c2      	b.n	80041e2 <dir_next+0x40>
 800425c:	2002      	movs	r0, #2
 800425e:	e7c0      	b.n	80041e2 <dir_next+0x40>
 8004260:	2001      	movs	r0, #1
 8004262:	e7be      	b.n	80041e2 <dir_next+0x40>
 8004264:	2001      	movs	r0, #1
 8004266:	e7bc      	b.n	80041e2 <dir_next+0x40>

08004268 <dir_alloc>:
 8004268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800426a:	4604      	mov	r4, r0
 800426c:	460f      	mov	r7, r1
 800426e:	6806      	ldr	r6, [r0, #0]
 8004270:	2100      	movs	r1, #0
 8004272:	f7ff fe9a 	bl	8003faa <dir_sdi>
 8004276:	4603      	mov	r3, r0
 8004278:	b9c0      	cbnz	r0, 80042ac <dir_alloc+0x44>
 800427a:	2500      	movs	r5, #0
 800427c:	e008      	b.n	8004290 <dir_alloc+0x28>
 800427e:	3501      	adds	r5, #1
 8004280:	42bd      	cmp	r5, r7
 8004282:	d013      	beq.n	80042ac <dir_alloc+0x44>
 8004284:	2101      	movs	r1, #1
 8004286:	4620      	mov	r0, r4
 8004288:	f7ff ff8b 	bl	80041a2 <dir_next>
 800428c:	4603      	mov	r3, r0
 800428e:	b968      	cbnz	r0, 80042ac <dir_alloc+0x44>
 8004290:	69a1      	ldr	r1, [r4, #24]
 8004292:	4630      	mov	r0, r6
 8004294:	f7ff fbb4 	bl	8003a00 <move_window>
 8004298:	4603      	mov	r3, r0
 800429a:	b938      	cbnz	r0, 80042ac <dir_alloc+0x44>
 800429c:	69e2      	ldr	r2, [r4, #28]
 800429e:	7812      	ldrb	r2, [r2, #0]
 80042a0:	2ae5      	cmp	r2, #229	; 0xe5
 80042a2:	d0ec      	beq.n	800427e <dir_alloc+0x16>
 80042a4:	2a00      	cmp	r2, #0
 80042a6:	d0ea      	beq.n	800427e <dir_alloc+0x16>
 80042a8:	2500      	movs	r5, #0
 80042aa:	e7eb      	b.n	8004284 <dir_alloc+0x1c>
 80042ac:	2b04      	cmp	r3, #4
 80042ae:	d001      	beq.n	80042b4 <dir_alloc+0x4c>
 80042b0:	4618      	mov	r0, r3
 80042b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042b4:	2307      	movs	r3, #7
 80042b6:	e7fb      	b.n	80042b0 <dir_alloc+0x48>

080042b8 <dir_read>:
 80042b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042bc:	4604      	mov	r4, r0
 80042be:	4688      	mov	r8, r1
 80042c0:	6807      	ldr	r7, [r0, #0]
 80042c2:	f04f 09ff 	mov.w	r9, #255	; 0xff
 80042c6:	464e      	mov	r6, r9
 80042c8:	2504      	movs	r5, #4
 80042ca:	e02e      	b.n	800432a <dir_read+0x72>
 80042cc:	2b0f      	cmp	r3, #15
 80042ce:	d119      	bne.n	8004304 <dir_read+0x4c>
 80042d0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80042d4:	d006      	beq.n	80042e4 <dir_read+0x2c>
 80042d6:	f891 900d 	ldrb.w	r9, [r1, #13]
 80042da:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
 80042de:	6923      	ldr	r3, [r4, #16]
 80042e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80042e2:	4616      	mov	r6, r2
 80042e4:	42b2      	cmp	r2, r6
 80042e6:	d001      	beq.n	80042ec <dir_read+0x34>
 80042e8:	26ff      	movs	r6, #255	; 0xff
 80042ea:	e018      	b.n	800431e <dir_read+0x66>
 80042ec:	7b4b      	ldrb	r3, [r1, #13]
 80042ee:	454b      	cmp	r3, r9
 80042f0:	d001      	beq.n	80042f6 <dir_read+0x3e>
 80042f2:	26ff      	movs	r6, #255	; 0xff
 80042f4:	e013      	b.n	800431e <dir_read+0x66>
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f7ff faa7 	bl	800384a <pick_lfn>
 80042fc:	b388      	cbz	r0, 8004362 <dir_read+0xaa>
 80042fe:	3e01      	subs	r6, #1
 8004300:	b2f6      	uxtb	r6, r6
 8004302:	e00c      	b.n	800431e <dir_read+0x66>
 8004304:	b926      	cbnz	r6, 8004310 <dir_read+0x58>
 8004306:	4608      	mov	r0, r1
 8004308:	f7ff fae8 	bl	80038dc <sum_sfn>
 800430c:	4548      	cmp	r0, r9
 800430e:	d02b      	beq.n	8004368 <dir_read+0xb0>
 8004310:	f04f 33ff 	mov.w	r3, #4294967295
 8004314:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004316:	e027      	b.n	8004368 <dir_read+0xb0>
 8004318:	26ff      	movs	r6, #255	; 0xff
 800431a:	e000      	b.n	800431e <dir_read+0x66>
 800431c:	26ff      	movs	r6, #255	; 0xff
 800431e:	2100      	movs	r1, #0
 8004320:	4620      	mov	r0, r4
 8004322:	f7ff ff3e 	bl	80041a2 <dir_next>
 8004326:	4605      	mov	r5, r0
 8004328:	b9f0      	cbnz	r0, 8004368 <dir_read+0xb0>
 800432a:	69a1      	ldr	r1, [r4, #24]
 800432c:	b1e1      	cbz	r1, 8004368 <dir_read+0xb0>
 800432e:	4638      	mov	r0, r7
 8004330:	f7ff fb66 	bl	8003a00 <move_window>
 8004334:	4605      	mov	r5, r0
 8004336:	b9b8      	cbnz	r0, 8004368 <dir_read+0xb0>
 8004338:	69e1      	ldr	r1, [r4, #28]
 800433a:	780a      	ldrb	r2, [r1, #0]
 800433c:	b19a      	cbz	r2, 8004366 <dir_read+0xae>
 800433e:	7acb      	ldrb	r3, [r1, #11]
 8004340:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004344:	71a3      	strb	r3, [r4, #6]
 8004346:	2ae5      	cmp	r2, #229	; 0xe5
 8004348:	d0e6      	beq.n	8004318 <dir_read+0x60>
 800434a:	2a2e      	cmp	r2, #46	; 0x2e
 800434c:	d0e6      	beq.n	800431c <dir_read+0x64>
 800434e:	f023 0020 	bic.w	r0, r3, #32
 8004352:	2808      	cmp	r0, #8
 8004354:	bf14      	ite	ne
 8004356:	2000      	movne	r0, #0
 8004358:	2001      	moveq	r0, #1
 800435a:	4540      	cmp	r0, r8
 800435c:	d0b6      	beq.n	80042cc <dir_read+0x14>
 800435e:	26ff      	movs	r6, #255	; 0xff
 8004360:	e7dd      	b.n	800431e <dir_read+0x66>
 8004362:	26ff      	movs	r6, #255	; 0xff
 8004364:	e7db      	b.n	800431e <dir_read+0x66>
 8004366:	2504      	movs	r5, #4
 8004368:	b10d      	cbz	r5, 800436e <dir_read+0xb6>
 800436a:	2300      	movs	r3, #0
 800436c:	61a3      	str	r3, [r4, #24]
 800436e:	4628      	mov	r0, r5
 8004370:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004374 <tchar2uni>:
 8004374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004376:	4606      	mov	r6, r0
 8004378:	6805      	ldr	r5, [r0, #0]
 800437a:	1c6f      	adds	r7, r5, #1
 800437c:	7828      	ldrb	r0, [r5, #0]
 800437e:	b284      	uxth	r4, r0
 8004380:	f7ff fa31 	bl	80037e6 <dbc_1st>
 8004384:	b140      	cbz	r0, 8004398 <tchar2uni+0x24>
 8004386:	1caf      	adds	r7, r5, #2
 8004388:	786d      	ldrb	r5, [r5, #1]
 800438a:	4628      	mov	r0, r5
 800438c:	f7ff fa3d 	bl	800380a <dbc_2nd>
 8004390:	b188      	cbz	r0, 80043b6 <tchar2uni+0x42>
 8004392:	eb05 2404 	add.w	r4, r5, r4, lsl #8
 8004396:	b2a4      	uxth	r4, r4
 8004398:	b914      	cbnz	r4, 80043a0 <tchar2uni+0x2c>
 800439a:	4620      	mov	r0, r4
 800439c:	6037      	str	r7, [r6, #0]
 800439e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043a0:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 80043a4:	4620      	mov	r0, r4
 80043a6:	f000 fd8a 	bl	8004ebe <ff_oem2uni>
 80043aa:	4604      	mov	r4, r0
 80043ac:	2800      	cmp	r0, #0
 80043ae:	d1f4      	bne.n	800439a <tchar2uni+0x26>
 80043b0:	f04f 30ff 	mov.w	r0, #4294967295
 80043b4:	e7f3      	b.n	800439e <tchar2uni+0x2a>
 80043b6:	f04f 30ff 	mov.w	r0, #4294967295
 80043ba:	e7f0      	b.n	800439e <tchar2uni+0x2a>

080043bc <sync_fs>:
 80043bc:	b570      	push	{r4, r5, r6, lr}
 80043be:	4604      	mov	r4, r0
 80043c0:	f7ff faf6 	bl	80039b0 <sync_window>
 80043c4:	4605      	mov	r5, r0
 80043c6:	b948      	cbnz	r0, 80043dc <sync_fs+0x20>
 80043c8:	7823      	ldrb	r3, [r4, #0]
 80043ca:	2b03      	cmp	r3, #3
 80043cc:	d008      	beq.n	80043e0 <sync_fs+0x24>
 80043ce:	2200      	movs	r2, #0
 80043d0:	4611      	mov	r1, r2
 80043d2:	7860      	ldrb	r0, [r4, #1]
 80043d4:	f7ff f9ae 	bl	8003734 <disk_ioctl>
 80043d8:	b100      	cbz	r0, 80043dc <sync_fs+0x20>
 80043da:	2501      	movs	r5, #1
 80043dc:	4628      	mov	r0, r5
 80043de:	bd70      	pop	{r4, r5, r6, pc}
 80043e0:	7923      	ldrb	r3, [r4, #4]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d1f3      	bne.n	80043ce <sync_fs+0x12>
 80043e6:	f104 0638 	add.w	r6, r4, #56	; 0x38
 80043ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043ee:	2100      	movs	r1, #0
 80043f0:	4630      	mov	r0, r6
 80043f2:	f7ff f9dc 	bl	80037ae <mem_set>
 80043f6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80043fa:	f204 2036 	addw	r0, r4, #566	; 0x236
 80043fe:	f7ff f9bf 	bl	8003780 <st_word>
 8004402:	f245 2152 	movw	r1, #21074	; 0x5252
 8004406:	f2c4 1161 	movt	r1, #16737	; 0x4161
 800440a:	4630      	mov	r0, r6
 800440c:	f7ff f9bc 	bl	8003788 <st_dword>
 8004410:	f247 2172 	movw	r1, #29298	; 0x7272
 8004414:	f2c6 1141 	movt	r1, #24897	; 0x6141
 8004418:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 800441c:	f7ff f9b4 	bl	8003788 <st_dword>
 8004420:	6961      	ldr	r1, [r4, #20]
 8004422:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8004426:	f7ff f9af 	bl	8003788 <st_dword>
 800442a:	6921      	ldr	r1, [r4, #16]
 800442c:	f504 7009 	add.w	r0, r4, #548	; 0x224
 8004430:	f7ff f9aa 	bl	8003788 <st_dword>
 8004434:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004436:	3201      	adds	r2, #1
 8004438:	6362      	str	r2, [r4, #52]	; 0x34
 800443a:	2301      	movs	r3, #1
 800443c:	4631      	mov	r1, r6
 800443e:	7860      	ldrb	r0, [r4, #1]
 8004440:	f7ff f961 	bl	8003706 <disk_write>
 8004444:	2300      	movs	r3, #0
 8004446:	7123      	strb	r3, [r4, #4]
 8004448:	e7c1      	b.n	80043ce <sync_fs+0x12>

0800444a <create_partition>:
 800444a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800444e:	b085      	sub	sp, #20
 8004450:	9000      	str	r0, [sp, #0]
 8004452:	9101      	str	r1, [sp, #4]
 8004454:	4693      	mov	fp, r2
 8004456:	4699      	mov	r9, r3
 8004458:	aa03      	add	r2, sp, #12
 800445a:	2101      	movs	r1, #1
 800445c:	f7ff f96a 	bl	8003734 <disk_ioctl>
 8004460:	2800      	cmp	r0, #0
 8004462:	f040 8081 	bne.w	8004568 <create_partition+0x11e>
 8004466:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800446a:	2408      	movs	r4, #8
 800446c:	b12c      	cbz	r4, 800447a <create_partition+0x30>
 800446e:	fbb8 f2f4 	udiv	r2, r8, r4
 8004472:	f64f 433e 	movw	r3, #64574	; 0xfc3e
 8004476:	429a      	cmp	r2, r3
 8004478:	d824      	bhi.n	80044c4 <create_partition+0x7a>
 800447a:	b904      	cbnz	r4, 800447e <create_partition+0x34>
 800447c:	24ff      	movs	r4, #255	; 0xff
 800447e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004482:	2100      	movs	r1, #0
 8004484:	4648      	mov	r0, r9
 8004486:	f7ff f992 	bl	80037ae <mem_set>
 800448a:	f509 76df 	add.w	r6, r9, #446	; 0x1be
 800448e:	253f      	movs	r5, #63	; 0x3f
 8004490:	f04f 0a00 	mov.w	sl, #0
 8004494:	f1ba 0f03 	cmp.w	sl, #3
 8004498:	d802      	bhi.n	80044a0 <create_partition+0x56>
 800449a:	b10d      	cbz	r5, 80044a0 <create_partition+0x56>
 800449c:	4545      	cmp	r5, r8
 800449e:	d314      	bcc.n	80044ca <create_partition+0x80>
 80044a0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80044a4:	f509 70ff 	add.w	r0, r9, #510	; 0x1fe
 80044a8:	f7ff f96a 	bl	8003780 <st_word>
 80044ac:	2301      	movs	r3, #1
 80044ae:	2200      	movs	r2, #0
 80044b0:	4649      	mov	r1, r9
 80044b2:	9800      	ldr	r0, [sp, #0]
 80044b4:	f7ff f927 	bl	8003706 <disk_write>
 80044b8:	2800      	cmp	r0, #0
 80044ba:	d057      	beq.n	800456c <create_partition+0x122>
 80044bc:	2001      	movs	r0, #1
 80044be:	b005      	add	sp, #20
 80044c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044c4:	0064      	lsls	r4, r4, #1
 80044c6:	b2e4      	uxtb	r4, r4
 80044c8:	e7d0      	b.n	800446c <create_partition+0x22>
 80044ca:	9b01      	ldr	r3, [sp, #4]
 80044cc:	f853 702a 	ldr.w	r7, [r3, sl, lsl #2]
 80044d0:	2f64      	cmp	r7, #100	; 0x64
 80044d2:	d805      	bhi.n	80044e0 <create_partition+0x96>
 80044d4:	d046      	beq.n	8004564 <create_partition+0x11a>
 80044d6:	2364      	movs	r3, #100	; 0x64
 80044d8:	fbb8 f3f3 	udiv	r3, r8, r3
 80044dc:	fb03 f707 	mul.w	r7, r3, r7
 80044e0:	19eb      	adds	r3, r5, r7
 80044e2:	4543      	cmp	r3, r8
 80044e4:	d801      	bhi.n	80044ea <create_partition+0xa0>
 80044e6:	42ab      	cmp	r3, r5
 80044e8:	d201      	bcs.n	80044ee <create_partition+0xa4>
 80044ea:	eba8 0705 	sub.w	r7, r8, r5
 80044ee:	2f00      	cmp	r7, #0
 80044f0:	d0d6      	beq.n	80044a0 <create_partition+0x56>
 80044f2:	4629      	mov	r1, r5
 80044f4:	f106 0008 	add.w	r0, r6, #8
 80044f8:	f7ff f946 	bl	8003788 <st_dword>
 80044fc:	4639      	mov	r1, r7
 80044fe:	f106 000c 	add.w	r0, r6, #12
 8004502:	f7ff f941 	bl	8003788 <st_dword>
 8004506:	f886 b004 	strb.w	fp, [r6, #4]
 800450a:	223f      	movs	r2, #63	; 0x3f
 800450c:	fbb5 f3f2 	udiv	r3, r5, r2
 8004510:	fbb3 f1f4 	udiv	r1, r3, r4
 8004514:	fb04 3011 	mls	r0, r4, r1, r3
 8004518:	ebc3 1383 	rsb	r3, r3, r3, lsl #6
 800451c:	1aeb      	subs	r3, r5, r3
 800451e:	b2db      	uxtb	r3, r3
 8004520:	3301      	adds	r3, #1
 8004522:	b2db      	uxtb	r3, r3
 8004524:	7070      	strb	r0, [r6, #1]
 8004526:	0888      	lsrs	r0, r1, #2
 8004528:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 800452c:	4303      	orrs	r3, r0
 800452e:	70b3      	strb	r3, [r6, #2]
 8004530:	70f1      	strb	r1, [r6, #3]
 8004532:	443d      	add	r5, r7
 8004534:	1e6b      	subs	r3, r5, #1
 8004536:	fbb3 f2f2 	udiv	r2, r3, r2
 800453a:	fbb2 f1f4 	udiv	r1, r2, r4
 800453e:	fb04 2011 	mls	r0, r4, r1, r2
 8004542:	ebc2 1282 	rsb	r2, r2, r2, lsl #6
 8004546:	1a9b      	subs	r3, r3, r2
 8004548:	b2db      	uxtb	r3, r3
 800454a:	3301      	adds	r3, #1
 800454c:	b2db      	uxtb	r3, r3
 800454e:	7170      	strb	r0, [r6, #5]
 8004550:	088a      	lsrs	r2, r1, #2
 8004552:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8004556:	4313      	orrs	r3, r2
 8004558:	71b3      	strb	r3, [r6, #6]
 800455a:	71f1      	strb	r1, [r6, #7]
 800455c:	3610      	adds	r6, #16
 800455e:	f10a 0a01 	add.w	sl, sl, #1
 8004562:	e797      	b.n	8004494 <create_partition+0x4a>
 8004564:	4647      	mov	r7, r8
 8004566:	e7bb      	b.n	80044e0 <create_partition+0x96>
 8004568:	2001      	movs	r0, #1
 800456a:	e7a8      	b.n	80044be <create_partition+0x74>
 800456c:	2000      	movs	r0, #0
 800456e:	e7a6      	b.n	80044be <create_partition+0x74>

08004570 <f_mount>:
 8004570:	b510      	push	{r4, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	9001      	str	r0, [sp, #4]
 8004576:	9100      	str	r1, [sp, #0]
 8004578:	4614      	mov	r4, r2
 800457a:	a804      	add	r0, sp, #16
 800457c:	f840 1d04 	str.w	r1, [r0, #-4]!
 8004580:	f7ff f9ba 	bl	80038f8 <get_ldnumber>
 8004584:	2800      	cmp	r0, #0
 8004586:	db1d      	blt.n	80045c4 <f_mount+0x54>
 8004588:	f240 2328 	movw	r3, #552	; 0x228
 800458c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004590:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8004594:	b10b      	cbz	r3, 800459a <f_mount+0x2a>
 8004596:	2200      	movs	r2, #0
 8004598:	701a      	strb	r2, [r3, #0]
 800459a:	9b01      	ldr	r3, [sp, #4]
 800459c:	b10b      	cbz	r3, 80045a2 <f_mount+0x32>
 800459e:	2200      	movs	r2, #0
 80045a0:	701a      	strb	r2, [r3, #0]
 80045a2:	f240 2328 	movw	r3, #552	; 0x228
 80045a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80045aa:	9a01      	ldr	r2, [sp, #4]
 80045ac:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 80045b0:	b914      	cbnz	r4, 80045b8 <f_mount+0x48>
 80045b2:	2000      	movs	r0, #0
 80045b4:	b004      	add	sp, #16
 80045b6:	bd10      	pop	{r4, pc}
 80045b8:	2200      	movs	r2, #0
 80045ba:	a901      	add	r1, sp, #4
 80045bc:	4668      	mov	r0, sp
 80045be:	f7ff faa9 	bl	8003b14 <mount_volume>
 80045c2:	e7f7      	b.n	80045b4 <f_mount+0x44>
 80045c4:	200b      	movs	r0, #11
 80045c6:	e7f5      	b.n	80045b4 <f_mount+0x44>

080045c8 <f_chdrive>:
 80045c8:	b500      	push	{lr}
 80045ca:	b083      	sub	sp, #12
 80045cc:	ab02      	add	r3, sp, #8
 80045ce:	f843 0d04 	str.w	r0, [r3, #-4]!
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7ff f990 	bl	80038f8 <get_ldnumber>
 80045d8:	2800      	cmp	r0, #0
 80045da:	db08      	blt.n	80045ee <f_chdrive+0x26>
 80045dc:	f240 2324 	movw	r3, #548	; 0x224
 80045e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80045e4:	7018      	strb	r0, [r3, #0]
 80045e6:	2000      	movs	r0, #0
 80045e8:	b003      	add	sp, #12
 80045ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80045ee:	200b      	movs	r0, #11
 80045f0:	e7fa      	b.n	80045e8 <f_chdrive+0x20>

080045f2 <f_getfree>:
 80045f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045f6:	b088      	sub	sp, #32
 80045f8:	9001      	str	r0, [sp, #4]
 80045fa:	4689      	mov	r9, r1
 80045fc:	4614      	mov	r4, r2
 80045fe:	2200      	movs	r2, #0
 8004600:	a907      	add	r1, sp, #28
 8004602:	a801      	add	r0, sp, #4
 8004604:	f7ff fa86 	bl	8003b14 <mount_volume>
 8004608:	4607      	mov	r7, r0
 800460a:	2800      	cmp	r0, #0
 800460c:	d156      	bne.n	80046bc <f_getfree+0xca>
 800460e:	9b07      	ldr	r3, [sp, #28]
 8004610:	6023      	str	r3, [r4, #0]
 8004612:	695a      	ldr	r2, [r3, #20]
 8004614:	69dd      	ldr	r5, [r3, #28]
 8004616:	1ea9      	subs	r1, r5, #2
 8004618:	428a      	cmp	r2, r1
 800461a:	d907      	bls.n	800462c <f_getfree+0x3a>
 800461c:	781a      	ldrb	r2, [r3, #0]
 800461e:	2a01      	cmp	r2, #1
 8004620:	d007      	beq.n	8004632 <f_getfree+0x40>
 8004622:	f8d3 8028 	ldr.w	r8, [r3, #40]	; 0x28
 8004626:	2400      	movs	r4, #0
 8004628:	4626      	mov	r6, r4
 800462a:	e02f      	b.n	800468c <f_getfree+0x9a>
 800462c:	f8c9 2000 	str.w	r2, [r9]
 8004630:	e044      	b.n	80046bc <f_getfree+0xca>
 8004632:	9303      	str	r3, [sp, #12]
 8004634:	2402      	movs	r4, #2
 8004636:	2600      	movs	r6, #0
 8004638:	e004      	b.n	8004644 <f_getfree+0x52>
 800463a:	3401      	adds	r4, #1
 800463c:	9b07      	ldr	r3, [sp, #28]
 800463e:	69db      	ldr	r3, [r3, #28]
 8004640:	42a3      	cmp	r3, r4
 8004642:	d933      	bls.n	80046ac <f_getfree+0xba>
 8004644:	4621      	mov	r1, r4
 8004646:	a803      	add	r0, sp, #12
 8004648:	f7ff fc47 	bl	8003eda <get_fat>
 800464c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004650:	d02b      	beq.n	80046aa <f_getfree+0xb8>
 8004652:	2801      	cmp	r0, #1
 8004654:	d036      	beq.n	80046c4 <f_getfree+0xd2>
 8004656:	2800      	cmp	r0, #0
 8004658:	d1ef      	bne.n	800463a <f_getfree+0x48>
 800465a:	3601      	adds	r6, #1
 800465c:	e7ed      	b.n	800463a <f_getfree+0x48>
 800465e:	f108 0a01 	add.w	sl, r8, #1
 8004662:	4641      	mov	r1, r8
 8004664:	9807      	ldr	r0, [sp, #28]
 8004666:	f7ff f9cb 	bl	8003a00 <move_window>
 800466a:	4607      	mov	r7, r0
 800466c:	b9f0      	cbnz	r0, 80046ac <f_getfree+0xba>
 800466e:	46d0      	mov	r8, sl
 8004670:	e00e      	b.n	8004690 <f_getfree+0x9e>
 8004672:	3038      	adds	r0, #56	; 0x38
 8004674:	4420      	add	r0, r4
 8004676:	f7ff f873 	bl	8003760 <ld_word>
 800467a:	b900      	cbnz	r0, 800467e <f_getfree+0x8c>
 800467c:	3601      	adds	r6, #1
 800467e:	3402      	adds	r4, #2
 8004680:	e000      	b.n	8004684 <f_getfree+0x92>
 8004682:	3404      	adds	r4, #4
 8004684:	f3c4 0408 	ubfx	r4, r4, #0, #9
 8004688:	3d01      	subs	r5, #1
 800468a:	d00f      	beq.n	80046ac <f_getfree+0xba>
 800468c:	2c00      	cmp	r4, #0
 800468e:	d0e6      	beq.n	800465e <f_getfree+0x6c>
 8004690:	9807      	ldr	r0, [sp, #28]
 8004692:	7803      	ldrb	r3, [r0, #0]
 8004694:	2b02      	cmp	r3, #2
 8004696:	d0ec      	beq.n	8004672 <f_getfree+0x80>
 8004698:	3038      	adds	r0, #56	; 0x38
 800469a:	4420      	add	r0, r4
 800469c:	f7ff f865 	bl	800376a <ld_dword>
 80046a0:	f030 4370 	bics.w	r3, r0, #4026531840	; 0xf0000000
 80046a4:	d1ed      	bne.n	8004682 <f_getfree+0x90>
 80046a6:	3601      	adds	r6, #1
 80046a8:	e7eb      	b.n	8004682 <f_getfree+0x90>
 80046aa:	2701      	movs	r7, #1
 80046ac:	f8c9 6000 	str.w	r6, [r9]
 80046b0:	9b07      	ldr	r3, [sp, #28]
 80046b2:	615e      	str	r6, [r3, #20]
 80046b4:	791a      	ldrb	r2, [r3, #4]
 80046b6:	f042 0201 	orr.w	r2, r2, #1
 80046ba:	711a      	strb	r2, [r3, #4]
 80046bc:	4638      	mov	r0, r7
 80046be:	b008      	add	sp, #32
 80046c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046c4:	2702      	movs	r7, #2
 80046c6:	e7f1      	b.n	80046ac <f_getfree+0xba>

080046c8 <f_setlabel>:
 80046c8:	b530      	push	{r4, r5, lr}
 80046ca:	b097      	sub	sp, #92	; 0x5c
 80046cc:	9001      	str	r0, [sp, #4]
 80046ce:	2202      	movs	r2, #2
 80046d0:	a908      	add	r1, sp, #32
 80046d2:	a801      	add	r0, sp, #4
 80046d4:	f7ff fa1e 	bl	8003b14 <mount_volume>
 80046d8:	4605      	mov	r5, r0
 80046da:	b110      	cbz	r0, 80046e2 <f_setlabel+0x1a>
 80046dc:	4628      	mov	r0, r5
 80046de:	b017      	add	sp, #92	; 0x5c
 80046e0:	bd30      	pop	{r4, r5, pc}
 80046e2:	220b      	movs	r2, #11
 80046e4:	2120      	movs	r1, #32
 80046e6:	a802      	add	r0, sp, #8
 80046e8:	f7ff f861 	bl	80037ae <mem_set>
 80046ec:	2400      	movs	r4, #0
 80046ee:	e006      	b.n	80046fe <f_setlabel+0x36>
 80046f0:	230b      	movs	r3, #11
 80046f2:	e023      	b.n	800473c <f_setlabel+0x74>
 80046f4:	ab16      	add	r3, sp, #88	; 0x58
 80046f6:	4423      	add	r3, r4
 80046f8:	f803 5c50 	strb.w	r5, [r3, #-80]
 80046fc:	3401      	adds	r4, #1
 80046fe:	9b01      	ldr	r3, [sp, #4]
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	2b1f      	cmp	r3, #31
 8004704:	d926      	bls.n	8004754 <f_setlabel+0x8c>
 8004706:	a801      	add	r0, sp, #4
 8004708:	f7ff fe34 	bl	8004374 <tchar2uni>
 800470c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8004710:	d272      	bcs.n	80047f8 <f_setlabel+0x130>
 8004712:	f000 fc00 	bl	8004f16 <ff_wtoupper>
 8004716:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 800471a:	f000 fb9d 	bl	8004e58 <ff_uni2oem>
 800471e:	4605      	mov	r5, r0
 8004720:	2800      	cmp	r0, #0
 8004722:	d06b      	beq.n	80047fc <f_setlabel+0x134>
 8004724:	4601      	mov	r1, r0
 8004726:	f248 60b0 	movw	r0, #34480	; 0x86b0
 800472a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800472e:	f7ff f852 	bl	80037d6 <chk_chr>
 8004732:	2800      	cmp	r0, #0
 8004734:	d164      	bne.n	8004800 <f_setlabel+0x138>
 8004736:	2dff      	cmp	r5, #255	; 0xff
 8004738:	d9da      	bls.n	80046f0 <f_setlabel+0x28>
 800473a:	230a      	movs	r3, #10
 800473c:	42a3      	cmp	r3, r4
 800473e:	d961      	bls.n	8004804 <f_setlabel+0x13c>
 8004740:	2dff      	cmp	r5, #255	; 0xff
 8004742:	d9d7      	bls.n	80046f4 <f_setlabel+0x2c>
 8004744:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8004748:	aa16      	add	r2, sp, #88	; 0x58
 800474a:	4422      	add	r2, r4
 800474c:	f802 3c50 	strb.w	r3, [r2, #-80]
 8004750:	3401      	adds	r4, #1
 8004752:	e7cf      	b.n	80046f4 <f_setlabel+0x2c>
 8004754:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8004758:	2be5      	cmp	r3, #229	; 0xe5
 800475a:	d102      	bne.n	8004762 <f_setlabel+0x9a>
 800475c:	2506      	movs	r5, #6
 800475e:	e7bd      	b.n	80046dc <f_setlabel+0x14>
 8004760:	461c      	mov	r4, r3
 8004762:	b134      	cbz	r4, 8004772 <f_setlabel+0xaa>
 8004764:	1e63      	subs	r3, r4, #1
 8004766:	aa16      	add	r2, sp, #88	; 0x58
 8004768:	441a      	add	r2, r3
 800476a:	f812 2c50 	ldrb.w	r2, [r2, #-80]
 800476e:	2a20      	cmp	r2, #32
 8004770:	d0f6      	beq.n	8004760 <f_setlabel+0x98>
 8004772:	9b08      	ldr	r3, [sp, #32]
 8004774:	9309      	str	r3, [sp, #36]	; 0x24
 8004776:	2100      	movs	r1, #0
 8004778:	910b      	str	r1, [sp, #44]	; 0x2c
 800477a:	a809      	add	r0, sp, #36	; 0x24
 800477c:	f7ff fc15 	bl	8003faa <dir_sdi>
 8004780:	4605      	mov	r5, r0
 8004782:	2800      	cmp	r0, #0
 8004784:	d1aa      	bne.n	80046dc <f_setlabel+0x14>
 8004786:	2101      	movs	r1, #1
 8004788:	a809      	add	r0, sp, #36	; 0x24
 800478a:	f7ff fd95 	bl	80042b8 <dir_read>
 800478e:	b988      	cbnz	r0, 80047b4 <f_setlabel+0xec>
 8004790:	b954      	cbnz	r4, 80047a8 <f_setlabel+0xe0>
 8004792:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004794:	22e5      	movs	r2, #229	; 0xe5
 8004796:	701a      	strb	r2, [r3, #0]
 8004798:	9b08      	ldr	r3, [sp, #32]
 800479a:	2201      	movs	r2, #1
 800479c:	70da      	strb	r2, [r3, #3]
 800479e:	9808      	ldr	r0, [sp, #32]
 80047a0:	f7ff fe0c 	bl	80043bc <sync_fs>
 80047a4:	4605      	mov	r5, r0
 80047a6:	e799      	b.n	80046dc <f_setlabel+0x14>
 80047a8:	220b      	movs	r2, #11
 80047aa:	a902      	add	r1, sp, #8
 80047ac:	9810      	ldr	r0, [sp, #64]	; 0x40
 80047ae:	f7fe fff5 	bl	800379c <mem_cpy>
 80047b2:	e7f1      	b.n	8004798 <f_setlabel+0xd0>
 80047b4:	2804      	cmp	r0, #4
 80047b6:	d001      	beq.n	80047bc <f_setlabel+0xf4>
 80047b8:	4605      	mov	r5, r0
 80047ba:	e78f      	b.n	80046dc <f_setlabel+0x14>
 80047bc:	2c00      	cmp	r4, #0
 80047be:	d08d      	beq.n	80046dc <f_setlabel+0x14>
 80047c0:	2101      	movs	r1, #1
 80047c2:	a809      	add	r0, sp, #36	; 0x24
 80047c4:	f7ff fd50 	bl	8004268 <dir_alloc>
 80047c8:	4605      	mov	r5, r0
 80047ca:	2800      	cmp	r0, #0
 80047cc:	d186      	bne.n	80046dc <f_setlabel+0x14>
 80047ce:	2220      	movs	r2, #32
 80047d0:	2100      	movs	r1, #0
 80047d2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80047d4:	f7fe ffeb 	bl	80037ae <mem_set>
 80047d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80047da:	2208      	movs	r2, #8
 80047dc:	72da      	strb	r2, [r3, #11]
 80047de:	220b      	movs	r2, #11
 80047e0:	a902      	add	r1, sp, #8
 80047e2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80047e4:	f7fe ffda 	bl	800379c <mem_cpy>
 80047e8:	9b08      	ldr	r3, [sp, #32]
 80047ea:	2201      	movs	r2, #1
 80047ec:	70da      	strb	r2, [r3, #3]
 80047ee:	9808      	ldr	r0, [sp, #32]
 80047f0:	f7ff fde4 	bl	80043bc <sync_fs>
 80047f4:	4605      	mov	r5, r0
 80047f6:	e771      	b.n	80046dc <f_setlabel+0x14>
 80047f8:	2506      	movs	r5, #6
 80047fa:	e76f      	b.n	80046dc <f_setlabel+0x14>
 80047fc:	2506      	movs	r5, #6
 80047fe:	e76d      	b.n	80046dc <f_setlabel+0x14>
 8004800:	2506      	movs	r5, #6
 8004802:	e76b      	b.n	80046dc <f_setlabel+0x14>
 8004804:	2506      	movs	r5, #6
 8004806:	e769      	b.n	80046dc <f_setlabel+0x14>

08004808 <f_mkfs>:
 8004808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800480c:	b08f      	sub	sp, #60	; 0x3c
 800480e:	ac0e      	add	r4, sp, #56	; 0x38
 8004810:	f844 0d14 	str.w	r0, [r4, #-20]!
 8004814:	460d      	mov	r5, r1
 8004816:	9200      	str	r2, [sp, #0]
 8004818:	461e      	mov	r6, r3
 800481a:	4620      	mov	r0, r4
 800481c:	f7ff f86c 	bl	80038f8 <get_ldnumber>
 8004820:	2800      	cmp	r0, #0
 8004822:	f2c0 82f4 	blt.w	8004e0e <f_mkfs+0x606>
 8004826:	f240 2328 	movw	r3, #552	; 0x228
 800482a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800482e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8004832:	b10b      	cbz	r3, 8004838 <f_mkfs+0x30>
 8004834:	2200      	movs	r2, #0
 8004836:	701a      	strb	r2, [r3, #0]
 8004838:	b2c4      	uxtb	r4, r0
 800483a:	b35d      	cbz	r5, 8004894 <f_mkfs+0x8c>
 800483c:	4620      	mov	r0, r4
 800483e:	f7fe ff3a 	bl	80036b6 <disk_initialize>
 8004842:	f010 0f01 	tst.w	r0, #1
 8004846:	f040 82e4 	bne.w	8004e12 <f_mkfs+0x60a>
 800484a:	f010 0f04 	tst.w	r0, #4
 800484e:	f040 82e5 	bne.w	8004e1c <f_mkfs+0x614>
 8004852:	686b      	ldr	r3, [r5, #4]
 8004854:	930d      	str	r3, [sp, #52]	; 0x34
 8004856:	b313      	cbz	r3, 800489e <f_mkfs+0x96>
 8004858:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800485a:	1e53      	subs	r3, r2, #1
 800485c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004860:	d201      	bcs.n	8004866 <f_mkfs+0x5e>
 8004862:	421a      	tst	r2, r3
 8004864:	d001      	beq.n	800486a <f_mkfs+0x62>
 8004866:	2301      	movs	r3, #1
 8004868:	930d      	str	r3, [sp, #52]	; 0x34
 800486a:	f895 a000 	ldrb.w	sl, [r5]
 800486e:	786f      	ldrb	r7, [r5, #1]
 8004870:	1e7b      	subs	r3, r7, #1
 8004872:	b2db      	uxtb	r3, r3
 8004874:	2b01      	cmp	r3, #1
 8004876:	d900      	bls.n	800487a <f_mkfs+0x72>
 8004878:	2701      	movs	r7, #1
 800487a:	f8d5 9008 	ldr.w	r9, [r5, #8]
 800487e:	f109 33ff 	add.w	r3, r9, #4294967295
 8004882:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004886:	d214      	bcs.n	80048b2 <f_mkfs+0xaa>
 8004888:	f019 0f0f 	tst.w	r9, #15
 800488c:	d013      	beq.n	80048b6 <f_mkfs+0xae>
 800488e:	f44f 7900 	mov.w	r9, #512	; 0x200
 8004892:	e010      	b.n	80048b6 <f_mkfs+0xae>
 8004894:	f248 65f0 	movw	r5, #34544	; 0x86f0
 8004898:	f6c0 0500 	movt	r5, #2048	; 0x800
 800489c:	e7ce      	b.n	800483c <f_mkfs+0x34>
 800489e:	aa0d      	add	r2, sp, #52	; 0x34
 80048a0:	2103      	movs	r1, #3
 80048a2:	4620      	mov	r0, r4
 80048a4:	f7fe ff46 	bl	8003734 <disk_ioctl>
 80048a8:	2800      	cmp	r0, #0
 80048aa:	d0d5      	beq.n	8004858 <f_mkfs+0x50>
 80048ac:	2301      	movs	r3, #1
 80048ae:	930d      	str	r3, [sp, #52]	; 0x34
 80048b0:	e7d2      	b.n	8004858 <f_mkfs+0x50>
 80048b2:	f44f 7900 	mov.w	r9, #512	; 0x200
 80048b6:	68ed      	ldr	r5, [r5, #12]
 80048b8:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
 80048bc:	d804      	bhi.n	80048c8 <f_mkfs+0xc0>
 80048be:	1e6b      	subs	r3, r5, #1
 80048c0:	421d      	tst	r5, r3
 80048c2:	d002      	beq.n	80048ca <f_mkfs+0xc2>
 80048c4:	2500      	movs	r5, #0
 80048c6:	e000      	b.n	80048ca <f_mkfs+0xc2>
 80048c8:	2500      	movs	r5, #0
 80048ca:	0a6d      	lsrs	r5, r5, #9
 80048cc:	0a73      	lsrs	r3, r6, #9
 80048ce:	9301      	str	r3, [sp, #4]
 80048d0:	f000 82a6 	beq.w	8004e20 <f_mkfs+0x618>
 80048d4:	9b00      	ldr	r3, [sp, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f000 82a4 	beq.w	8004e24 <f_mkfs+0x61c>
 80048dc:	aa0e      	add	r2, sp, #56	; 0x38
 80048de:	2300      	movs	r3, #0
 80048e0:	f842 3d08 	str.w	r3, [r2, #-8]!
 80048e4:	2101      	movs	r1, #1
 80048e6:	4620      	mov	r0, r4
 80048e8:	f7fe ff24 	bl	8003734 <disk_ioctl>
 80048ec:	2800      	cmp	r0, #0
 80048ee:	f040 829b 	bne.w	8004e28 <f_mkfs+0x620>
 80048f2:	f01a 0308 	ands.w	r3, sl, #8
 80048f6:	9303      	str	r3, [sp, #12]
 80048f8:	d107      	bne.n	800490a <f_mkfs+0x102>
 80048fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80048fc:	2b3f      	cmp	r3, #63	; 0x3f
 80048fe:	d97d      	bls.n	80049fc <f_mkfs+0x1f4>
 8004900:	3b3f      	subs	r3, #63	; 0x3f
 8004902:	930c      	str	r3, [sp, #48]	; 0x30
 8004904:	233f      	movs	r3, #63	; 0x3f
 8004906:	9302      	str	r3, [sp, #8]
 8004908:	e001      	b.n	800490e <f_mkfs+0x106>
 800490a:	2300      	movs	r3, #0
 800490c:	9302      	str	r3, [sp, #8]
 800490e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004910:	287f      	cmp	r0, #127	; 0x7f
 8004912:	f240 828b 	bls.w	8004e2c <f_mkfs+0x624>
 8004916:	2d80      	cmp	r5, #128	; 0x80
 8004918:	d900      	bls.n	800491c <f_mkfs+0x114>
 800491a:	2580      	movs	r5, #128	; 0x80
 800491c:	f01a 0c02 	ands.w	ip, sl, #2
 8004920:	d002      	beq.n	8004928 <f_mkfs+0x120>
 8004922:	f01a 0f01 	tst.w	sl, #1
 8004926:	d06c      	beq.n	8004a02 <f_mkfs+0x1fa>
 8004928:	f01a 0f01 	tst.w	sl, #1
 800492c:	f000 8280 	beq.w	8004e30 <f_mkfs+0x628>
 8004930:	f04f 0802 	mov.w	r8, #2
 8004934:	9404      	str	r4, [sp, #16]
 8004936:	9605      	str	r6, [sp, #20]
 8004938:	f1b8 0f03 	cmp.w	r8, #3
 800493c:	d06a      	beq.n	8004a14 <f_mkfs+0x20c>
 800493e:	2d00      	cmp	r5, #0
 8004940:	f000 8094 	beq.w	8004a6c <f_mkfs+0x264>
 8004944:	46aa      	mov	sl, r5
 8004946:	fbb0 f3fa 	udiv	r3, r0, sl
 800494a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800494e:	4293      	cmp	r3, r2
 8004950:	f240 80a0 	bls.w	8004a94 <f_mkfs+0x28c>
 8004954:	f103 0b02 	add.w	fp, r3, #2
 8004958:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 800495c:	f20b 1bff 	addw	fp, fp, #511	; 0x1ff
 8004960:	ea4f 2b5b 	mov.w	fp, fp, lsr #9
 8004964:	f3c9 1616 	ubfx	r6, r9, #4, #23
 8004968:	2101      	movs	r1, #1
 800496a:	9b02      	ldr	r3, [sp, #8]
 800496c:	185c      	adds	r4, r3, r1
 800496e:	fb07 420b 	mla	r2, r7, fp, r4
 8004972:	4432      	add	r2, r6
 8004974:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 8004978:	eb0e 0302 	add.w	r3, lr, r2
 800497c:	3b01      	subs	r3, #1
 800497e:	f1ce 0e00 	rsb	lr, lr, #0
 8004982:	ea03 030e 	and.w	r3, r3, lr
 8004986:	1a9b      	subs	r3, r3, r2
 8004988:	f1b8 0f03 	cmp.w	r8, #3
 800498c:	f000 808d 	beq.w	8004aaa <f_mkfs+0x2a2>
 8004990:	fbb3 fef7 	udiv	lr, r3, r7
 8004994:	fb07 3e1e 	mls	lr, r7, lr, r3
 8004998:	f1be 0f00 	cmp.w	lr, #0
 800499c:	d002      	beq.n	80049a4 <f_mkfs+0x19c>
 800499e:	3b01      	subs	r3, #1
 80049a0:	3101      	adds	r1, #1
 80049a2:	3401      	adds	r4, #1
 80049a4:	fbb3 f3f7 	udiv	r3, r3, r7
 80049a8:	449b      	add	fp, r3
 80049aa:	eb02 120a 	add.w	r2, r2, sl, lsl #4
 80049ae:	9b02      	ldr	r3, [sp, #8]
 80049b0:	1ad2      	subs	r2, r2, r3
 80049b2:	4290      	cmp	r0, r2
 80049b4:	f0c0 8240 	bcc.w	8004e38 <f_mkfs+0x630>
 80049b8:	1a43      	subs	r3, r0, r1
 80049ba:	fb07 331b 	mls	r3, r7, fp, r3
 80049be:	1b9b      	subs	r3, r3, r6
 80049c0:	fbb3 f3fa 	udiv	r3, r3, sl
 80049c4:	f1b8 0f03 	cmp.w	r8, #3
 80049c8:	d072      	beq.n	8004ab0 <f_mkfs+0x2a8>
 80049ca:	f1b8 0f02 	cmp.w	r8, #2
 80049ce:	f040 808a 	bne.w	8004ae6 <f_mkfs+0x2de>
 80049d2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d977      	bls.n	8004aca <f_mkfs+0x2c2>
 80049da:	b91d      	cbnz	r5, 80049e4 <f_mkfs+0x1dc>
 80049dc:	ea4f 034a 	mov.w	r3, sl, lsl #1
 80049e0:	2b40      	cmp	r3, #64	; 0x40
 80049e2:	d913      	bls.n	8004a0c <f_mkfs+0x204>
 80049e4:	f1bc 0f00 	cmp.w	ip, #0
 80049e8:	d112      	bne.n	8004a10 <f_mkfs+0x208>
 80049ea:	2d00      	cmp	r5, #0
 80049ec:	f040 8228 	bne.w	8004e40 <f_mkfs+0x638>
 80049f0:	ea4f 054a 	mov.w	r5, sl, lsl #1
 80049f4:	2d80      	cmp	r5, #128	; 0x80
 80049f6:	d99f      	bls.n	8004938 <f_mkfs+0x130>
 80049f8:	230e      	movs	r3, #14
 80049fa:	e20b      	b.n	8004e14 <f_mkfs+0x60c>
 80049fc:	2300      	movs	r3, #0
 80049fe:	9302      	str	r3, [sp, #8]
 8004a00:	e785      	b.n	800490e <f_mkfs+0x106>
 8004a02:	f04f 0803 	mov.w	r8, #3
 8004a06:	9404      	str	r4, [sp, #16]
 8004a08:	9605      	str	r6, [sp, #20]
 8004a0a:	e795      	b.n	8004938 <f_mkfs+0x130>
 8004a0c:	461d      	mov	r5, r3
 8004a0e:	e793      	b.n	8004938 <f_mkfs+0x130>
 8004a10:	f04f 0803 	mov.w	r8, #3
 8004a14:	b1bd      	cbz	r5, 8004a46 <f_mkfs+0x23e>
 8004a16:	46aa      	mov	sl, r5
 8004a18:	fbb0 f3fa 	udiv	r3, r0, sl
 8004a1c:	f103 0b02 	add.w	fp, r3, #2
 8004a20:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8004a24:	f20b 1bff 	addw	fp, fp, #511	; 0x1ff
 8004a28:	ea4f 2b5b 	mov.w	fp, fp, lsr #9
 8004a2c:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8004a30:	3bf6      	subs	r3, #246	; 0xf6
 8004a32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a36:	f6c0 72fe 	movt	r2, #4094	; 0xffe
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	f200 81fa 	bhi.w	8004e34 <f_mkfs+0x62c>
 8004a40:	2600      	movs	r6, #0
 8004a42:	2120      	movs	r1, #32
 8004a44:	e791      	b.n	800496a <f_mkfs+0x162>
 8004a46:	0c41      	lsrs	r1, r0, #17
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f04f 0a01 	mov.w	sl, #1
 8004a4e:	e002      	b.n	8004a56 <f_mkfs+0x24e>
 8004a50:	3201      	adds	r2, #1
 8004a52:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8004a56:	f248 63e0 	movw	r3, #34528	; 0x86e0
 8004a5a:	f6c0 0300 	movt	r3, #2048	; 0x800
 8004a5e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d0d8      	beq.n	8004a18 <f_mkfs+0x210>
 8004a66:	428b      	cmp	r3, r1
 8004a68:	d9f2      	bls.n	8004a50 <f_mkfs+0x248>
 8004a6a:	e7d5      	b.n	8004a18 <f_mkfs+0x210>
 8004a6c:	0b01      	lsrs	r1, r0, #12
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f04f 0a01 	mov.w	sl, #1
 8004a74:	e002      	b.n	8004a7c <f_mkfs+0x274>
 8004a76:	3201      	adds	r2, #1
 8004a78:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8004a7c:	f248 63d0 	movw	r3, #34512	; 0x86d0
 8004a80:	f6c0 0300 	movt	r3, #2048	; 0x800
 8004a84:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f43f af5c 	beq.w	8004946 <f_mkfs+0x13e>
 8004a8e:	428b      	cmp	r3, r1
 8004a90:	d9f1      	bls.n	8004a76 <f_mkfs+0x26e>
 8004a92:	e758      	b.n	8004946 <f_mkfs+0x13e>
 8004a94:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 8004a98:	f10b 0b01 	add.w	fp, fp, #1
 8004a9c:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 8004aa0:	f10b 0b03 	add.w	fp, fp, #3
 8004aa4:	f04f 0801 	mov.w	r8, #1
 8004aa8:	e758      	b.n	800495c <f_mkfs+0x154>
 8004aaa:	4419      	add	r1, r3
 8004aac:	441c      	add	r4, r3
 8004aae:	e77c      	b.n	80049aa <f_mkfs+0x1a2>
 8004ab0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d888      	bhi.n	80049ca <f_mkfs+0x1c2>
 8004ab8:	2d00      	cmp	r5, #0
 8004aba:	f040 81bf 	bne.w	8004e3c <f_mkfs+0x634>
 8004abe:	ea5f 055a 	movs.w	r5, sl, lsr #1
 8004ac2:	f47f af39 	bne.w	8004938 <f_mkfs+0x130>
 8004ac6:	230e      	movs	r3, #14
 8004ac8:	e1a4      	b.n	8004e14 <f_mkfs+0x60c>
 8004aca:	f640 72f5 	movw	r2, #4085	; 0xff5
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d809      	bhi.n	8004ae6 <f_mkfs+0x2de>
 8004ad2:	2d00      	cmp	r5, #0
 8004ad4:	f040 81b6 	bne.w	8004e44 <f_mkfs+0x63c>
 8004ad8:	ea4f 054a 	mov.w	r5, sl, lsl #1
 8004adc:	2d80      	cmp	r5, #128	; 0x80
 8004ade:	f67f af2b 	bls.w	8004938 <f_mkfs+0x130>
 8004ae2:	230e      	movs	r3, #14
 8004ae4:	e196      	b.n	8004e14 <f_mkfs+0x60c>
 8004ae6:	9406      	str	r4, [sp, #24]
 8004ae8:	9107      	str	r1, [sp, #28]
 8004aea:	9608      	str	r6, [sp, #32]
 8004aec:	9c04      	ldr	r4, [sp, #16]
 8004aee:	461a      	mov	r2, r3
 8004af0:	9304      	str	r3, [sp, #16]
 8004af2:	9e05      	ldr	r6, [sp, #20]
 8004af4:	f1b8 0f01 	cmp.w	r8, #1
 8004af8:	d104      	bne.n	8004b04 <f_mkfs+0x2fc>
 8004afa:	f640 73f5 	movw	r3, #4085	; 0xff5
 8004afe:	429a      	cmp	r2, r3
 8004b00:	f200 81a2 	bhi.w	8004e48 <f_mkfs+0x640>
 8004b04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b08:	2100      	movs	r1, #0
 8004b0a:	9d00      	ldr	r5, [sp, #0]
 8004b0c:	4628      	mov	r0, r5
 8004b0e:	f7fe fe4e 	bl	80037ae <mem_set>
 8004b12:	220b      	movs	r2, #11
 8004b14:	f248 7100 	movw	r1, #34560	; 0x8700
 8004b18:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004b1c:	4628      	mov	r0, r5
 8004b1e:	f7fe fe3d 	bl	800379c <mem_cpy>
 8004b22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004b26:	f105 000b 	add.w	r0, r5, #11
 8004b2a:	f7fe fe29 	bl	8003780 <st_word>
 8004b2e:	f885 a00d 	strb.w	sl, [r5, #13]
 8004b32:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8004b36:	f105 000e 	add.w	r0, r5, #14
 8004b3a:	f7fe fe21 	bl	8003780 <st_word>
 8004b3e:	742f      	strb	r7, [r5, #16]
 8004b40:	f105 0011 	add.w	r0, r5, #17
 8004b44:	f1b8 0f03 	cmp.w	r8, #3
 8004b48:	f000 8091 	beq.w	8004c6e <f_mkfs+0x466>
 8004b4c:	fa1f f189 	uxth.w	r1, r9
 8004b50:	f7fe fe16 	bl	8003780 <st_word>
 8004b54:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004b56:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8004b5a:	f080 808a 	bcs.w	8004c72 <f_mkfs+0x46a>
 8004b5e:	b289      	uxth	r1, r1
 8004b60:	9b00      	ldr	r3, [sp, #0]
 8004b62:	f103 0013 	add.w	r0, r3, #19
 8004b66:	f7fe fe0b 	bl	8003780 <st_word>
 8004b6a:	23f8      	movs	r3, #248	; 0xf8
 8004b6c:	9d00      	ldr	r5, [sp, #0]
 8004b6e:	756b      	strb	r3, [r5, #21]
 8004b70:	213f      	movs	r1, #63	; 0x3f
 8004b72:	f105 0018 	add.w	r0, r5, #24
 8004b76:	f7fe fe03 	bl	8003780 <st_word>
 8004b7a:	21ff      	movs	r1, #255	; 0xff
 8004b7c:	f105 001a 	add.w	r0, r5, #26
 8004b80:	f7fe fdfe 	bl	8003780 <st_word>
 8004b84:	9902      	ldr	r1, [sp, #8]
 8004b86:	f105 001c 	add.w	r0, r5, #28
 8004b8a:	f7fe fdfd 	bl	8003788 <st_dword>
 8004b8e:	f1b8 0f03 	cmp.w	r8, #3
 8004b92:	d074      	beq.n	8004c7e <f_mkfs+0x476>
 8004b94:	f7fe fc65 	bl	8003462 <get_fattime>
 8004b98:	4601      	mov	r1, r0
 8004b9a:	9d00      	ldr	r5, [sp, #0]
 8004b9c:	f105 0027 	add.w	r0, r5, #39	; 0x27
 8004ba0:	f7fe fdf2 	bl	8003788 <st_dword>
 8004ba4:	fa1f f18b 	uxth.w	r1, fp
 8004ba8:	f105 0016 	add.w	r0, r5, #22
 8004bac:	f7fe fde8 	bl	8003780 <st_word>
 8004bb0:	2380      	movs	r3, #128	; 0x80
 8004bb2:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8004bb6:	2329      	movs	r3, #41	; 0x29
 8004bb8:	4628      	mov	r0, r5
 8004bba:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
 8004bbe:	2213      	movs	r2, #19
 8004bc0:	f248 7120 	movw	r1, #34592	; 0x8720
 8004bc4:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004bc8:	302b      	adds	r0, #43	; 0x2b
 8004bca:	f7fe fde7 	bl	800379c <mem_cpy>
 8004bce:	9b00      	ldr	r3, [sp, #0]
 8004bd0:	f503 75ff 	add.w	r5, r3, #510	; 0x1fe
 8004bd4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004bd8:	4628      	mov	r0, r5
 8004bda:	f7fe fdd1 	bl	8003780 <st_word>
 8004bde:	2301      	movs	r3, #1
 8004be0:	9a02      	ldr	r2, [sp, #8]
 8004be2:	9900      	ldr	r1, [sp, #0]
 8004be4:	4620      	mov	r0, r4
 8004be6:	f7fe fd8e 	bl	8003706 <disk_write>
 8004bea:	2800      	cmp	r0, #0
 8004bec:	f040 812e 	bne.w	8004e4c <f_mkfs+0x644>
 8004bf0:	f1b8 0f03 	cmp.w	r8, #3
 8004bf4:	d06f      	beq.n	8004cd6 <f_mkfs+0x4ce>
 8004bf6:	f426 72ff 	bic.w	r2, r6, #510	; 0x1fe
 8004bfa:	f022 0201 	bic.w	r2, r2, #1
 8004bfe:	2100      	movs	r1, #0
 8004c00:	9800      	ldr	r0, [sp, #0]
 8004c02:	f7fe fdd4 	bl	80037ae <mem_set>
 8004c06:	f04f 0900 	mov.w	r9, #0
 8004c0a:	f8cd b008 	str.w	fp, [sp, #8]
 8004c0e:	f8cd a010 	str.w	sl, [sp, #16]
 8004c12:	f8dd a018 	ldr.w	sl, [sp, #24]
 8004c16:	f8dd b004 	ldr.w	fp, [sp, #4]
 8004c1a:	45b9      	cmp	r9, r7
 8004c1c:	f080 80b4 	bcs.w	8004d88 <f_mkfs+0x580>
 8004c20:	f1b8 0f03 	cmp.w	r8, #3
 8004c24:	f000 8099 	beq.w	8004d5a <f_mkfs+0x552>
 8004c28:	f1b8 0f01 	cmp.w	r8, #1
 8004c2c:	f000 80a7 	beq.w	8004d7e <f_mkfs+0x576>
 8004c30:	f06f 0107 	mvn.w	r1, #7
 8004c34:	9800      	ldr	r0, [sp, #0]
 8004c36:	f7fe fda7 	bl	8003788 <st_dword>
 8004c3a:	9e02      	ldr	r6, [sp, #8]
 8004c3c:	4635      	mov	r5, r6
 8004c3e:	455e      	cmp	r6, fp
 8004c40:	bf28      	it	cs
 8004c42:	465d      	movcs	r5, fp
 8004c44:	462b      	mov	r3, r5
 8004c46:	4652      	mov	r2, sl
 8004c48:	9900      	ldr	r1, [sp, #0]
 8004c4a:	4620      	mov	r0, r4
 8004c4c:	f7fe fd5b 	bl	8003706 <disk_write>
 8004c50:	2800      	cmp	r0, #0
 8004c52:	f040 80fd 	bne.w	8004e50 <f_mkfs+0x648>
 8004c56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c5a:	2100      	movs	r1, #0
 8004c5c:	9800      	ldr	r0, [sp, #0]
 8004c5e:	f7fe fda6 	bl	80037ae <mem_set>
 8004c62:	44aa      	add	sl, r5
 8004c64:	1b76      	subs	r6, r6, r5
 8004c66:	d1e9      	bne.n	8004c3c <f_mkfs+0x434>
 8004c68:	f109 0901 	add.w	r9, r9, #1
 8004c6c:	e7d5      	b.n	8004c1a <f_mkfs+0x412>
 8004c6e:	2100      	movs	r1, #0
 8004c70:	e76e      	b.n	8004b50 <f_mkfs+0x348>
 8004c72:	9b00      	ldr	r3, [sp, #0]
 8004c74:	f103 0020 	add.w	r0, r3, #32
 8004c78:	f7fe fd86 	bl	8003788 <st_dword>
 8004c7c:	e775      	b.n	8004b6a <f_mkfs+0x362>
 8004c7e:	f7fe fbf0 	bl	8003462 <get_fattime>
 8004c82:	4601      	mov	r1, r0
 8004c84:	9d00      	ldr	r5, [sp, #0]
 8004c86:	f105 0043 	add.w	r0, r5, #67	; 0x43
 8004c8a:	f7fe fd7d 	bl	8003788 <st_dword>
 8004c8e:	4659      	mov	r1, fp
 8004c90:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8004c94:	f7fe fd78 	bl	8003788 <st_dword>
 8004c98:	2102      	movs	r1, #2
 8004c9a:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 8004c9e:	f7fe fd73 	bl	8003788 <st_dword>
 8004ca2:	2101      	movs	r1, #1
 8004ca4:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8004ca8:	f7fe fd6a 	bl	8003780 <st_word>
 8004cac:	2106      	movs	r1, #6
 8004cae:	f105 0032 	add.w	r0, r5, #50	; 0x32
 8004cb2:	f7fe fd65 	bl	8003780 <st_word>
 8004cb6:	2380      	movs	r3, #128	; 0x80
 8004cb8:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 8004cbc:	2329      	movs	r3, #41	; 0x29
 8004cbe:	4628      	mov	r0, r5
 8004cc0:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
 8004cc4:	2213      	movs	r2, #19
 8004cc6:	f248 710c 	movw	r1, #34572	; 0x870c
 8004cca:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004cce:	3047      	adds	r0, #71	; 0x47
 8004cd0:	f7fe fd64 	bl	800379c <mem_cpy>
 8004cd4:	e77b      	b.n	8004bce <f_mkfs+0x3c6>
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	9a02      	ldr	r2, [sp, #8]
 8004cda:	3206      	adds	r2, #6
 8004cdc:	f8dd 9000 	ldr.w	r9, [sp]
 8004ce0:	4649      	mov	r1, r9
 8004ce2:	4620      	mov	r0, r4
 8004ce4:	f7fe fd0f 	bl	8003706 <disk_write>
 8004ce8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cec:	2100      	movs	r1, #0
 8004cee:	4648      	mov	r0, r9
 8004cf0:	f7fe fd5d 	bl	80037ae <mem_set>
 8004cf4:	f245 2152 	movw	r1, #21074	; 0x5252
 8004cf8:	f2c4 1161 	movt	r1, #16737	; 0x4161
 8004cfc:	4648      	mov	r0, r9
 8004cfe:	f7fe fd43 	bl	8003788 <st_dword>
 8004d02:	f247 2172 	movw	r1, #29298	; 0x7272
 8004d06:	f2c6 1141 	movt	r1, #24897	; 0x6141
 8004d0a:	f8cd 9000 	str.w	r9, [sp]
 8004d0e:	f509 70f2 	add.w	r0, r9, #484	; 0x1e4
 8004d12:	f7fe fd39 	bl	8003788 <st_dword>
 8004d16:	9904      	ldr	r1, [sp, #16]
 8004d18:	3901      	subs	r1, #1
 8004d1a:	9b00      	ldr	r3, [sp, #0]
 8004d1c:	f503 70f4 	add.w	r0, r3, #488	; 0x1e8
 8004d20:	f7fe fd32 	bl	8003788 <st_dword>
 8004d24:	2102      	movs	r1, #2
 8004d26:	9b00      	ldr	r3, [sp, #0]
 8004d28:	f503 70f6 	add.w	r0, r3, #492	; 0x1ec
 8004d2c:	f7fe fd2c 	bl	8003788 <st_dword>
 8004d30:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004d34:	4628      	mov	r0, r5
 8004d36:	f7fe fd23 	bl	8003780 <st_word>
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	9d02      	ldr	r5, [sp, #8]
 8004d3e:	1dea      	adds	r2, r5, #7
 8004d40:	f8dd 9000 	ldr.w	r9, [sp]
 8004d44:	4649      	mov	r1, r9
 8004d46:	4620      	mov	r0, r4
 8004d48:	f7fe fcdd 	bl	8003706 <disk_write>
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	18ea      	adds	r2, r5, r3
 8004d50:	4649      	mov	r1, r9
 8004d52:	4620      	mov	r0, r4
 8004d54:	f7fe fcd7 	bl	8003706 <disk_write>
 8004d58:	e74d      	b.n	8004bf6 <f_mkfs+0x3ee>
 8004d5a:	f06f 0107 	mvn.w	r1, #7
 8004d5e:	9d00      	ldr	r5, [sp, #0]
 8004d60:	4628      	mov	r0, r5
 8004d62:	f7fe fd11 	bl	8003788 <st_dword>
 8004d66:	f04f 31ff 	mov.w	r1, #4294967295
 8004d6a:	1d28      	adds	r0, r5, #4
 8004d6c:	f7fe fd0c 	bl	8003788 <st_dword>
 8004d70:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8004d74:	f105 0008 	add.w	r0, r5, #8
 8004d78:	f7fe fd06 	bl	8003788 <st_dword>
 8004d7c:	e75d      	b.n	8004c3a <f_mkfs+0x432>
 8004d7e:	f64f 71f8 	movw	r1, #65528	; 0xfff8
 8004d82:	f2c0 01ff 	movt	r1, #255	; 0xff
 8004d86:	e755      	b.n	8004c34 <f_mkfs+0x42c>
 8004d88:	f8cd a018 	str.w	sl, [sp, #24]
 8004d8c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8004d90:	f1b8 0f03 	cmp.w	r8, #3
 8004d94:	d030      	beq.n	8004df8 <f_mkfs+0x5f0>
 8004d96:	9f06      	ldr	r7, [sp, #24]
 8004d98:	9e08      	ldr	r6, [sp, #32]
 8004d9a:	9b01      	ldr	r3, [sp, #4]
 8004d9c:	42b3      	cmp	r3, r6
 8004d9e:	bf28      	it	cs
 8004da0:	4633      	movcs	r3, r6
 8004da2:	461d      	mov	r5, r3
 8004da4:	463a      	mov	r2, r7
 8004da6:	9900      	ldr	r1, [sp, #0]
 8004da8:	4620      	mov	r0, r4
 8004daa:	f7fe fcac 	bl	8003706 <disk_write>
 8004dae:	2800      	cmp	r0, #0
 8004db0:	d150      	bne.n	8004e54 <f_mkfs+0x64c>
 8004db2:	442f      	add	r7, r5
 8004db4:	1b76      	subs	r6, r6, r5
 8004db6:	d1f0      	bne.n	8004d9a <f_mkfs+0x592>
 8004db8:	f1b8 0f03 	cmp.w	r8, #3
 8004dbc:	d01f      	beq.n	8004dfe <f_mkfs+0x5f6>
 8004dbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dc4:	d21d      	bcs.n	8004e02 <f_mkfs+0x5fa>
 8004dc6:	f1b8 0f02 	cmp.w	r8, #2
 8004dca:	d11c      	bne.n	8004e06 <f_mkfs+0x5fe>
 8004dcc:	2204      	movs	r2, #4
 8004dce:	9b03      	ldr	r3, [sp, #12]
 8004dd0:	b953      	cbnz	r3, 8004de8 <f_mkfs+0x5e0>
 8004dd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004dd4:	930a      	str	r3, [sp, #40]	; 0x28
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	930b      	str	r3, [sp, #44]	; 0x2c
 8004dda:	9b00      	ldr	r3, [sp, #0]
 8004ddc:	a90a      	add	r1, sp, #40	; 0x28
 8004dde:	4620      	mov	r0, r4
 8004de0:	f7ff fb33 	bl	800444a <create_partition>
 8004de4:	4603      	mov	r3, r0
 8004de6:	b9a8      	cbnz	r0, 8004e14 <f_mkfs+0x60c>
 8004de8:	2200      	movs	r2, #0
 8004dea:	4611      	mov	r1, r2
 8004dec:	4620      	mov	r0, r4
 8004dee:	f7fe fca1 	bl	8003734 <disk_ioctl>
 8004df2:	b950      	cbnz	r0, 8004e0a <f_mkfs+0x602>
 8004df4:	2300      	movs	r3, #0
 8004df6:	e00d      	b.n	8004e14 <f_mkfs+0x60c>
 8004df8:	4656      	mov	r6, sl
 8004dfa:	9f06      	ldr	r7, [sp, #24]
 8004dfc:	e7cd      	b.n	8004d9a <f_mkfs+0x592>
 8004dfe:	220c      	movs	r2, #12
 8004e00:	e7e5      	b.n	8004dce <f_mkfs+0x5c6>
 8004e02:	2206      	movs	r2, #6
 8004e04:	e7e3      	b.n	8004dce <f_mkfs+0x5c6>
 8004e06:	2201      	movs	r2, #1
 8004e08:	e7e1      	b.n	8004dce <f_mkfs+0x5c6>
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e002      	b.n	8004e14 <f_mkfs+0x60c>
 8004e0e:	230b      	movs	r3, #11
 8004e10:	e000      	b.n	8004e14 <f_mkfs+0x60c>
 8004e12:	2303      	movs	r3, #3
 8004e14:	4618      	mov	r0, r3
 8004e16:	b00f      	add	sp, #60	; 0x3c
 8004e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e1c:	230a      	movs	r3, #10
 8004e1e:	e7f9      	b.n	8004e14 <f_mkfs+0x60c>
 8004e20:	2311      	movs	r3, #17
 8004e22:	e7f7      	b.n	8004e14 <f_mkfs+0x60c>
 8004e24:	2311      	movs	r3, #17
 8004e26:	e7f5      	b.n	8004e14 <f_mkfs+0x60c>
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e7f3      	b.n	8004e14 <f_mkfs+0x60c>
 8004e2c:	230e      	movs	r3, #14
 8004e2e:	e7f1      	b.n	8004e14 <f_mkfs+0x60c>
 8004e30:	2313      	movs	r3, #19
 8004e32:	e7ef      	b.n	8004e14 <f_mkfs+0x60c>
 8004e34:	230e      	movs	r3, #14
 8004e36:	e7ed      	b.n	8004e14 <f_mkfs+0x60c>
 8004e38:	230e      	movs	r3, #14
 8004e3a:	e7eb      	b.n	8004e14 <f_mkfs+0x60c>
 8004e3c:	230e      	movs	r3, #14
 8004e3e:	e7e9      	b.n	8004e14 <f_mkfs+0x60c>
 8004e40:	230e      	movs	r3, #14
 8004e42:	e7e7      	b.n	8004e14 <f_mkfs+0x60c>
 8004e44:	230e      	movs	r3, #14
 8004e46:	e7e5      	b.n	8004e14 <f_mkfs+0x60c>
 8004e48:	230e      	movs	r3, #14
 8004e4a:	e7e3      	b.n	8004e14 <f_mkfs+0x60c>
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e7e1      	b.n	8004e14 <f_mkfs+0x60c>
 8004e50:	2301      	movs	r3, #1
 8004e52:	e7df      	b.n	8004e14 <f_mkfs+0x60c>
 8004e54:	2301      	movs	r3, #1
 8004e56:	e7dd      	b.n	8004e14 <f_mkfs+0x60c>

08004e58 <ff_uni2oem>:
 8004e58:	287f      	cmp	r0, #127	; 0x7f
 8004e5a:	d907      	bls.n	8004e6c <ff_uni2oem+0x14>
 8004e5c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8004e60:	d229      	bcs.n	8004eb6 <ff_uni2oem+0x5e>
 8004e62:	f5b1 7f69 	cmp.w	r1, #932	; 0x3a4
 8004e66:	d003      	beq.n	8004e70 <ff_uni2oem+0x18>
 8004e68:	2000      	movs	r0, #0
 8004e6a:	4770      	bx	lr
 8004e6c:	b280      	uxth	r0, r0
 8004e6e:	4770      	bx	lr
 8004e70:	b430      	push	{r4, r5}
 8004e72:	b280      	uxth	r0, r0
 8004e74:	f641 45dd 	movw	r5, #7389	; 0x1cdd
 8004e78:	2400      	movs	r4, #0
 8004e7a:	2110      	movs	r1, #16
 8004e7c:	4623      	mov	r3, r4
 8004e7e:	e001      	b.n	8004e84 <ff_uni2oem+0x2c>
 8004e80:	461d      	mov	r5, r3
 8004e82:	3901      	subs	r1, #1
 8004e84:	b169      	cbz	r1, 8004ea2 <ff_uni2oem+0x4a>
 8004e86:	1b2b      	subs	r3, r5, r4
 8004e88:	eb04 0353 	add.w	r3, r4, r3, lsr #1
 8004e8c:	f64f 5264 	movw	r2, #64868	; 0xfd64
 8004e90:	f6c0 0200 	movt	r2, #2048	; 0x800
 8004e94:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8004e98:	4282      	cmp	r2, r0
 8004e9a:	d002      	beq.n	8004ea2 <ff_uni2oem+0x4a>
 8004e9c:	d2f0      	bcs.n	8004e80 <ff_uni2oem+0x28>
 8004e9e:	461c      	mov	r4, r3
 8004ea0:	e7ef      	b.n	8004e82 <ff_uni2oem+0x2a>
 8004ea2:	b151      	cbz	r1, 8004eba <ff_uni2oem+0x62>
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	3302      	adds	r3, #2
 8004ea8:	f64f 5264 	movw	r2, #64868	; 0xfd64
 8004eac:	f6c0 0200 	movt	r2, #2048	; 0x800
 8004eb0:	5a98      	ldrh	r0, [r3, r2]
 8004eb2:	bc30      	pop	{r4, r5}
 8004eb4:	4770      	bx	lr
 8004eb6:	2000      	movs	r0, #0
 8004eb8:	4770      	bx	lr
 8004eba:	2000      	movs	r0, #0
 8004ebc:	e7f9      	b.n	8004eb2 <ff_uni2oem+0x5a>

08004ebe <ff_oem2uni>:
 8004ebe:	287f      	cmp	r0, #127	; 0x7f
 8004ec0:	d928      	bls.n	8004f14 <ff_oem2uni+0x56>
 8004ec2:	f5b1 7f69 	cmp.w	r1, #932	; 0x3a4
 8004ec6:	d012      	beq.n	8004eee <ff_oem2uni+0x30>
 8004ec8:	2000      	movs	r0, #0
 8004eca:	4770      	bx	lr
 8004ecc:	461d      	mov	r5, r3
 8004ece:	3901      	subs	r1, #1
 8004ed0:	b1a1      	cbz	r1, 8004efc <ff_oem2uni+0x3e>
 8004ed2:	1b2b      	subs	r3, r5, r4
 8004ed4:	eb04 0353 	add.w	r3, r4, r3, lsr #1
 8004ed8:	f648 12ec 	movw	r2, #35308	; 0x89ec
 8004edc:	f6c0 0200 	movt	r2, #2048	; 0x800
 8004ee0:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8004ee4:	4282      	cmp	r2, r0
 8004ee6:	d009      	beq.n	8004efc <ff_oem2uni+0x3e>
 8004ee8:	d2f0      	bcs.n	8004ecc <ff_oem2uni+0xe>
 8004eea:	461c      	mov	r4, r3
 8004eec:	e7ef      	b.n	8004ece <ff_oem2uni+0x10>
 8004eee:	b430      	push	{r4, r5}
 8004ef0:	f641 45dd 	movw	r5, #7389	; 0x1cdd
 8004ef4:	2400      	movs	r4, #0
 8004ef6:	2110      	movs	r1, #16
 8004ef8:	4623      	mov	r3, r4
 8004efa:	e7e9      	b.n	8004ed0 <ff_oem2uni+0x12>
 8004efc:	b141      	cbz	r1, 8004f10 <ff_oem2uni+0x52>
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	3302      	adds	r3, #2
 8004f02:	f648 12ec 	movw	r2, #35308	; 0x89ec
 8004f06:	f6c0 0200 	movt	r2, #2048	; 0x800
 8004f0a:	5a98      	ldrh	r0, [r3, r2]
 8004f0c:	bc30      	pop	{r4, r5}
 8004f0e:	4770      	bx	lr
 8004f10:	2000      	movs	r0, #0
 8004f12:	e7fb      	b.n	8004f0c <ff_oem2uni+0x4e>
 8004f14:	4770      	bx	lr

08004f16 <ff_wtoupper>:
 8004f16:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8004f1a:	d24b      	bcs.n	8004fb4 <ff_wtoupper+0x9e>
 8004f1c:	b4f0      	push	{r4, r5, r6, r7}
 8004f1e:	b287      	uxth	r7, r0
 8004f20:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 8004f24:	d204      	bcs.n	8004f30 <ff_wtoupper+0x1a>
 8004f26:	f248 733c 	movw	r3, #34620	; 0x873c
 8004f2a:	f6c0 0300 	movt	r3, #2048	; 0x800
 8004f2e:	e005      	b.n	8004f3c <ff_wtoupper+0x26>
 8004f30:	f648 1330 	movw	r3, #35120	; 0x8930
 8004f34:	f6c0 0300 	movt	r3, #2048	; 0x800
 8004f38:	e000      	b.n	8004f3c <ff_wtoupper+0x26>
 8004f3a:	4633      	mov	r3, r6
 8004f3c:	881a      	ldrh	r2, [r3, #0]
 8004f3e:	b1d2      	cbz	r2, 8004f76 <ff_wtoupper+0x60>
 8004f40:	4297      	cmp	r7, r2
 8004f42:	d318      	bcc.n	8004f76 <ff_wtoupper+0x60>
 8004f44:	1d1e      	adds	r6, r3, #4
 8004f46:	885b      	ldrh	r3, [r3, #2]
 8004f48:	0a19      	lsrs	r1, r3, #8
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	b284      	uxth	r4, r0
 8004f4e:	189d      	adds	r5, r3, r2
 8004f50:	42ac      	cmp	r4, r5
 8004f52:	db04      	blt.n	8004f5e <ff_wtoupper+0x48>
 8004f54:	2900      	cmp	r1, #0
 8004f56:	d1f0      	bne.n	8004f3a <ff_wtoupper+0x24>
 8004f58:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8004f5c:	e7ee      	b.n	8004f3c <ff_wtoupper+0x26>
 8004f5e:	2908      	cmp	r1, #8
 8004f60:	d809      	bhi.n	8004f76 <ff_wtoupper+0x60>
 8004f62:	e8df f001 	tbb	[pc, r1]
 8004f66:	0b05      	.short	0x0b05
 8004f68:	1a171411 	.word	0x1a171411
 8004f6c:	201d      	.short	0x201d
 8004f6e:	23          	.byte	0x23
 8004f6f:	00          	.byte	0x00
 8004f70:	1aa4      	subs	r4, r4, r2
 8004f72:	f836 7014 	ldrh.w	r7, [r6, r4, lsl #1]
 8004f76:	4638      	mov	r0, r7
 8004f78:	bcf0      	pop	{r4, r5, r6, r7}
 8004f7a:	4770      	bx	lr
 8004f7c:	1aba      	subs	r2, r7, r2
 8004f7e:	f002 0301 	and.w	r3, r2, #1
 8004f82:	1aff      	subs	r7, r7, r3
 8004f84:	b2bf      	uxth	r7, r7
 8004f86:	e7f6      	b.n	8004f76 <ff_wtoupper+0x60>
 8004f88:	3f10      	subs	r7, #16
 8004f8a:	b2bf      	uxth	r7, r7
 8004f8c:	e7f3      	b.n	8004f76 <ff_wtoupper+0x60>
 8004f8e:	3f20      	subs	r7, #32
 8004f90:	b2bf      	uxth	r7, r7
 8004f92:	e7f0      	b.n	8004f76 <ff_wtoupper+0x60>
 8004f94:	3f30      	subs	r7, #48	; 0x30
 8004f96:	b2bf      	uxth	r7, r7
 8004f98:	e7ed      	b.n	8004f76 <ff_wtoupper+0x60>
 8004f9a:	3f1a      	subs	r7, #26
 8004f9c:	b2bf      	uxth	r7, r7
 8004f9e:	e7ea      	b.n	8004f76 <ff_wtoupper+0x60>
 8004fa0:	3708      	adds	r7, #8
 8004fa2:	b2bf      	uxth	r7, r7
 8004fa4:	e7e7      	b.n	8004f76 <ff_wtoupper+0x60>
 8004fa6:	3f50      	subs	r7, #80	; 0x50
 8004fa8:	b2bf      	uxth	r7, r7
 8004faa:	e7e4      	b.n	8004f76 <ff_wtoupper+0x60>
 8004fac:	f5a7 57e3 	sub.w	r7, r7, #7264	; 0x1c60
 8004fb0:	b2bf      	uxth	r7, r7
 8004fb2:	e7e0      	b.n	8004f76 <ff_wtoupper+0x60>
 8004fb4:	4770      	bx	lr
	...

08004fb8 <__errno>:
 8004fb8:	4b01      	ldr	r3, [pc, #4]	; (8004fc0 <__errno+0x8>)
 8004fba:	6818      	ldr	r0, [r3, #0]
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	20000014 	.word	0x20000014

08004fc4 <__libc_init_array>:
 8004fc4:	b570      	push	{r4, r5, r6, lr}
 8004fc6:	4e0d      	ldr	r6, [pc, #52]	; (8004ffc <__libc_init_array+0x38>)
 8004fc8:	4c0d      	ldr	r4, [pc, #52]	; (8005000 <__libc_init_array+0x3c>)
 8004fca:	1ba4      	subs	r4, r4, r6
 8004fcc:	10a4      	asrs	r4, r4, #2
 8004fce:	2500      	movs	r5, #0
 8004fd0:	42a5      	cmp	r5, r4
 8004fd2:	d109      	bne.n	8004fe8 <__libc_init_array+0x24>
 8004fd4:	4e0b      	ldr	r6, [pc, #44]	; (8005004 <__libc_init_array+0x40>)
 8004fd6:	4c0c      	ldr	r4, [pc, #48]	; (8005008 <__libc_init_array+0x44>)
 8004fd8:	f002 f862 	bl	80070a0 <_init>
 8004fdc:	1ba4      	subs	r4, r4, r6
 8004fde:	10a4      	asrs	r4, r4, #2
 8004fe0:	2500      	movs	r5, #0
 8004fe2:	42a5      	cmp	r5, r4
 8004fe4:	d105      	bne.n	8004ff2 <__libc_init_array+0x2e>
 8004fe6:	bd70      	pop	{r4, r5, r6, pc}
 8004fe8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004fec:	4798      	blx	r3
 8004fee:	3501      	adds	r5, #1
 8004ff0:	e7ee      	b.n	8004fd0 <__libc_init_array+0xc>
 8004ff2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ff6:	4798      	blx	r3
 8004ff8:	3501      	adds	r5, #1
 8004ffa:	e7f2      	b.n	8004fe2 <__libc_init_array+0x1e>
 8004ffc:	08017338 	.word	0x08017338
 8005000:	08017338 	.word	0x08017338
 8005004:	08017338 	.word	0x08017338
 8005008:	0801733c 	.word	0x0801733c

0800500c <malloc>:
 800500c:	4b02      	ldr	r3, [pc, #8]	; (8005018 <malloc+0xc>)
 800500e:	4601      	mov	r1, r0
 8005010:	6818      	ldr	r0, [r3, #0]
 8005012:	f000 b877 	b.w	8005104 <_malloc_r>
 8005016:	bf00      	nop
 8005018:	20000014 	.word	0x20000014

0800501c <__ascii_mbtowc>:
 800501c:	b082      	sub	sp, #8
 800501e:	b901      	cbnz	r1, 8005022 <__ascii_mbtowc+0x6>
 8005020:	a901      	add	r1, sp, #4
 8005022:	b142      	cbz	r2, 8005036 <__ascii_mbtowc+0x1a>
 8005024:	b14b      	cbz	r3, 800503a <__ascii_mbtowc+0x1e>
 8005026:	7813      	ldrb	r3, [r2, #0]
 8005028:	600b      	str	r3, [r1, #0]
 800502a:	7812      	ldrb	r2, [r2, #0]
 800502c:	1c10      	adds	r0, r2, #0
 800502e:	bf18      	it	ne
 8005030:	2001      	movne	r0, #1
 8005032:	b002      	add	sp, #8
 8005034:	4770      	bx	lr
 8005036:	4610      	mov	r0, r2
 8005038:	e7fb      	b.n	8005032 <__ascii_mbtowc+0x16>
 800503a:	f06f 0001 	mvn.w	r0, #1
 800503e:	e7f8      	b.n	8005032 <__ascii_mbtowc+0x16>

08005040 <memcpy>:
 8005040:	b510      	push	{r4, lr}
 8005042:	1e43      	subs	r3, r0, #1
 8005044:	440a      	add	r2, r1
 8005046:	4291      	cmp	r1, r2
 8005048:	d100      	bne.n	800504c <memcpy+0xc>
 800504a:	bd10      	pop	{r4, pc}
 800504c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005050:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005054:	e7f7      	b.n	8005046 <memcpy+0x6>

08005056 <memset>:
 8005056:	4402      	add	r2, r0
 8005058:	4603      	mov	r3, r0
 800505a:	4293      	cmp	r3, r2
 800505c:	d100      	bne.n	8005060 <memset+0xa>
 800505e:	4770      	bx	lr
 8005060:	f803 1b01 	strb.w	r1, [r3], #1
 8005064:	e7f9      	b.n	800505a <memset+0x4>
	...

08005068 <_free_r>:
 8005068:	b538      	push	{r3, r4, r5, lr}
 800506a:	4605      	mov	r5, r0
 800506c:	2900      	cmp	r1, #0
 800506e:	d045      	beq.n	80050fc <_free_r+0x94>
 8005070:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005074:	1f0c      	subs	r4, r1, #4
 8005076:	2b00      	cmp	r3, #0
 8005078:	bfb8      	it	lt
 800507a:	18e4      	addlt	r4, r4, r3
 800507c:	f001 fb8a 	bl	8006794 <__malloc_lock>
 8005080:	4a1f      	ldr	r2, [pc, #124]	; (8005100 <_free_r+0x98>)
 8005082:	6813      	ldr	r3, [r2, #0]
 8005084:	4610      	mov	r0, r2
 8005086:	b933      	cbnz	r3, 8005096 <_free_r+0x2e>
 8005088:	6063      	str	r3, [r4, #4]
 800508a:	6014      	str	r4, [r2, #0]
 800508c:	4628      	mov	r0, r5
 800508e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005092:	f001 bb80 	b.w	8006796 <__malloc_unlock>
 8005096:	42a3      	cmp	r3, r4
 8005098:	d90c      	bls.n	80050b4 <_free_r+0x4c>
 800509a:	6821      	ldr	r1, [r4, #0]
 800509c:	1862      	adds	r2, r4, r1
 800509e:	4293      	cmp	r3, r2
 80050a0:	bf04      	itt	eq
 80050a2:	681a      	ldreq	r2, [r3, #0]
 80050a4:	685b      	ldreq	r3, [r3, #4]
 80050a6:	6063      	str	r3, [r4, #4]
 80050a8:	bf04      	itt	eq
 80050aa:	1852      	addeq	r2, r2, r1
 80050ac:	6022      	streq	r2, [r4, #0]
 80050ae:	6004      	str	r4, [r0, #0]
 80050b0:	e7ec      	b.n	800508c <_free_r+0x24>
 80050b2:	4613      	mov	r3, r2
 80050b4:	685a      	ldr	r2, [r3, #4]
 80050b6:	b10a      	cbz	r2, 80050bc <_free_r+0x54>
 80050b8:	42a2      	cmp	r2, r4
 80050ba:	d9fa      	bls.n	80050b2 <_free_r+0x4a>
 80050bc:	6819      	ldr	r1, [r3, #0]
 80050be:	1858      	adds	r0, r3, r1
 80050c0:	42a0      	cmp	r0, r4
 80050c2:	d10b      	bne.n	80050dc <_free_r+0x74>
 80050c4:	6820      	ldr	r0, [r4, #0]
 80050c6:	4401      	add	r1, r0
 80050c8:	1858      	adds	r0, r3, r1
 80050ca:	4282      	cmp	r2, r0
 80050cc:	6019      	str	r1, [r3, #0]
 80050ce:	d1dd      	bne.n	800508c <_free_r+0x24>
 80050d0:	6810      	ldr	r0, [r2, #0]
 80050d2:	6852      	ldr	r2, [r2, #4]
 80050d4:	605a      	str	r2, [r3, #4]
 80050d6:	4401      	add	r1, r0
 80050d8:	6019      	str	r1, [r3, #0]
 80050da:	e7d7      	b.n	800508c <_free_r+0x24>
 80050dc:	d902      	bls.n	80050e4 <_free_r+0x7c>
 80050de:	230c      	movs	r3, #12
 80050e0:	602b      	str	r3, [r5, #0]
 80050e2:	e7d3      	b.n	800508c <_free_r+0x24>
 80050e4:	6820      	ldr	r0, [r4, #0]
 80050e6:	1821      	adds	r1, r4, r0
 80050e8:	428a      	cmp	r2, r1
 80050ea:	bf04      	itt	eq
 80050ec:	6811      	ldreq	r1, [r2, #0]
 80050ee:	6852      	ldreq	r2, [r2, #4]
 80050f0:	6062      	str	r2, [r4, #4]
 80050f2:	bf04      	itt	eq
 80050f4:	1809      	addeq	r1, r1, r0
 80050f6:	6021      	streq	r1, [r4, #0]
 80050f8:	605c      	str	r4, [r3, #4]
 80050fa:	e7c7      	b.n	800508c <_free_r+0x24>
 80050fc:	bd38      	pop	{r3, r4, r5, pc}
 80050fe:	bf00      	nop
 8005100:	20000434 	.word	0x20000434

08005104 <_malloc_r>:
 8005104:	b570      	push	{r4, r5, r6, lr}
 8005106:	1ccd      	adds	r5, r1, #3
 8005108:	f025 0503 	bic.w	r5, r5, #3
 800510c:	3508      	adds	r5, #8
 800510e:	2d0c      	cmp	r5, #12
 8005110:	bf38      	it	cc
 8005112:	250c      	movcc	r5, #12
 8005114:	2d00      	cmp	r5, #0
 8005116:	4606      	mov	r6, r0
 8005118:	db01      	blt.n	800511e <_malloc_r+0x1a>
 800511a:	42a9      	cmp	r1, r5
 800511c:	d903      	bls.n	8005126 <_malloc_r+0x22>
 800511e:	230c      	movs	r3, #12
 8005120:	6033      	str	r3, [r6, #0]
 8005122:	2000      	movs	r0, #0
 8005124:	bd70      	pop	{r4, r5, r6, pc}
 8005126:	f001 fb35 	bl	8006794 <__malloc_lock>
 800512a:	4a21      	ldr	r2, [pc, #132]	; (80051b0 <_malloc_r+0xac>)
 800512c:	6814      	ldr	r4, [r2, #0]
 800512e:	4621      	mov	r1, r4
 8005130:	b991      	cbnz	r1, 8005158 <_malloc_r+0x54>
 8005132:	4c20      	ldr	r4, [pc, #128]	; (80051b4 <_malloc_r+0xb0>)
 8005134:	6823      	ldr	r3, [r4, #0]
 8005136:	b91b      	cbnz	r3, 8005140 <_malloc_r+0x3c>
 8005138:	4630      	mov	r0, r6
 800513a:	f000 fc99 	bl	8005a70 <_sbrk_r>
 800513e:	6020      	str	r0, [r4, #0]
 8005140:	4629      	mov	r1, r5
 8005142:	4630      	mov	r0, r6
 8005144:	f000 fc94 	bl	8005a70 <_sbrk_r>
 8005148:	1c43      	adds	r3, r0, #1
 800514a:	d124      	bne.n	8005196 <_malloc_r+0x92>
 800514c:	230c      	movs	r3, #12
 800514e:	6033      	str	r3, [r6, #0]
 8005150:	4630      	mov	r0, r6
 8005152:	f001 fb20 	bl	8006796 <__malloc_unlock>
 8005156:	e7e4      	b.n	8005122 <_malloc_r+0x1e>
 8005158:	680b      	ldr	r3, [r1, #0]
 800515a:	1b5b      	subs	r3, r3, r5
 800515c:	d418      	bmi.n	8005190 <_malloc_r+0x8c>
 800515e:	2b0b      	cmp	r3, #11
 8005160:	d90f      	bls.n	8005182 <_malloc_r+0x7e>
 8005162:	600b      	str	r3, [r1, #0]
 8005164:	50cd      	str	r5, [r1, r3]
 8005166:	18cc      	adds	r4, r1, r3
 8005168:	4630      	mov	r0, r6
 800516a:	f001 fb14 	bl	8006796 <__malloc_unlock>
 800516e:	f104 000b 	add.w	r0, r4, #11
 8005172:	1d23      	adds	r3, r4, #4
 8005174:	f020 0007 	bic.w	r0, r0, #7
 8005178:	1ac3      	subs	r3, r0, r3
 800517a:	d0d3      	beq.n	8005124 <_malloc_r+0x20>
 800517c:	425a      	negs	r2, r3
 800517e:	50e2      	str	r2, [r4, r3]
 8005180:	e7d0      	b.n	8005124 <_malloc_r+0x20>
 8005182:	428c      	cmp	r4, r1
 8005184:	684b      	ldr	r3, [r1, #4]
 8005186:	bf16      	itet	ne
 8005188:	6063      	strne	r3, [r4, #4]
 800518a:	6013      	streq	r3, [r2, #0]
 800518c:	460c      	movne	r4, r1
 800518e:	e7eb      	b.n	8005168 <_malloc_r+0x64>
 8005190:	460c      	mov	r4, r1
 8005192:	6849      	ldr	r1, [r1, #4]
 8005194:	e7cc      	b.n	8005130 <_malloc_r+0x2c>
 8005196:	1cc4      	adds	r4, r0, #3
 8005198:	f024 0403 	bic.w	r4, r4, #3
 800519c:	42a0      	cmp	r0, r4
 800519e:	d005      	beq.n	80051ac <_malloc_r+0xa8>
 80051a0:	1a21      	subs	r1, r4, r0
 80051a2:	4630      	mov	r0, r6
 80051a4:	f000 fc64 	bl	8005a70 <_sbrk_r>
 80051a8:	3001      	adds	r0, #1
 80051aa:	d0cf      	beq.n	800514c <_malloc_r+0x48>
 80051ac:	6025      	str	r5, [r4, #0]
 80051ae:	e7db      	b.n	8005168 <_malloc_r+0x64>
 80051b0:	20000434 	.word	0x20000434
 80051b4:	20000438 	.word	0x20000438

080051b8 <__cvt>:
 80051b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051bc:	ec55 4b10 	vmov	r4, r5, d0
 80051c0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80051c2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80051c6:	2d00      	cmp	r5, #0
 80051c8:	460e      	mov	r6, r1
 80051ca:	4691      	mov	r9, r2
 80051cc:	4619      	mov	r1, r3
 80051ce:	bfb8      	it	lt
 80051d0:	4622      	movlt	r2, r4
 80051d2:	462b      	mov	r3, r5
 80051d4:	f027 0720 	bic.w	r7, r7, #32
 80051d8:	bfbb      	ittet	lt
 80051da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80051de:	461d      	movlt	r5, r3
 80051e0:	2300      	movge	r3, #0
 80051e2:	232d      	movlt	r3, #45	; 0x2d
 80051e4:	bfb8      	it	lt
 80051e6:	4614      	movlt	r4, r2
 80051e8:	2f46      	cmp	r7, #70	; 0x46
 80051ea:	700b      	strb	r3, [r1, #0]
 80051ec:	d004      	beq.n	80051f8 <__cvt+0x40>
 80051ee:	2f45      	cmp	r7, #69	; 0x45
 80051f0:	d100      	bne.n	80051f4 <__cvt+0x3c>
 80051f2:	3601      	adds	r6, #1
 80051f4:	2102      	movs	r1, #2
 80051f6:	e000      	b.n	80051fa <__cvt+0x42>
 80051f8:	2103      	movs	r1, #3
 80051fa:	ab03      	add	r3, sp, #12
 80051fc:	9301      	str	r3, [sp, #4]
 80051fe:	ab02      	add	r3, sp, #8
 8005200:	9300      	str	r3, [sp, #0]
 8005202:	4632      	mov	r2, r6
 8005204:	4653      	mov	r3, sl
 8005206:	ec45 4b10 	vmov	d0, r4, r5
 800520a:	f000 fcfd 	bl	8005c08 <_dtoa_r>
 800520e:	2f47      	cmp	r7, #71	; 0x47
 8005210:	4680      	mov	r8, r0
 8005212:	d102      	bne.n	800521a <__cvt+0x62>
 8005214:	f019 0f01 	tst.w	r9, #1
 8005218:	d026      	beq.n	8005268 <__cvt+0xb0>
 800521a:	2f46      	cmp	r7, #70	; 0x46
 800521c:	eb08 0906 	add.w	r9, r8, r6
 8005220:	d111      	bne.n	8005246 <__cvt+0x8e>
 8005222:	f898 3000 	ldrb.w	r3, [r8]
 8005226:	2b30      	cmp	r3, #48	; 0x30
 8005228:	d10a      	bne.n	8005240 <__cvt+0x88>
 800522a:	2200      	movs	r2, #0
 800522c:	2300      	movs	r3, #0
 800522e:	4620      	mov	r0, r4
 8005230:	4629      	mov	r1, r5
 8005232:	f7fb fc61 	bl	8000af8 <__aeabi_dcmpeq>
 8005236:	b918      	cbnz	r0, 8005240 <__cvt+0x88>
 8005238:	f1c6 0601 	rsb	r6, r6, #1
 800523c:	f8ca 6000 	str.w	r6, [sl]
 8005240:	f8da 3000 	ldr.w	r3, [sl]
 8005244:	4499      	add	r9, r3
 8005246:	2200      	movs	r2, #0
 8005248:	2300      	movs	r3, #0
 800524a:	4620      	mov	r0, r4
 800524c:	4629      	mov	r1, r5
 800524e:	f7fb fc53 	bl	8000af8 <__aeabi_dcmpeq>
 8005252:	b938      	cbnz	r0, 8005264 <__cvt+0xac>
 8005254:	2230      	movs	r2, #48	; 0x30
 8005256:	9b03      	ldr	r3, [sp, #12]
 8005258:	454b      	cmp	r3, r9
 800525a:	d205      	bcs.n	8005268 <__cvt+0xb0>
 800525c:	1c59      	adds	r1, r3, #1
 800525e:	9103      	str	r1, [sp, #12]
 8005260:	701a      	strb	r2, [r3, #0]
 8005262:	e7f8      	b.n	8005256 <__cvt+0x9e>
 8005264:	f8cd 900c 	str.w	r9, [sp, #12]
 8005268:	9b03      	ldr	r3, [sp, #12]
 800526a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800526c:	eba3 0308 	sub.w	r3, r3, r8
 8005270:	4640      	mov	r0, r8
 8005272:	6013      	str	r3, [r2, #0]
 8005274:	b004      	add	sp, #16
 8005276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800527a <__exponent>:
 800527a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800527c:	2900      	cmp	r1, #0
 800527e:	4604      	mov	r4, r0
 8005280:	bfba      	itte	lt
 8005282:	4249      	neglt	r1, r1
 8005284:	232d      	movlt	r3, #45	; 0x2d
 8005286:	232b      	movge	r3, #43	; 0x2b
 8005288:	2909      	cmp	r1, #9
 800528a:	f804 2b02 	strb.w	r2, [r4], #2
 800528e:	7043      	strb	r3, [r0, #1]
 8005290:	dd20      	ble.n	80052d4 <__exponent+0x5a>
 8005292:	f10d 0307 	add.w	r3, sp, #7
 8005296:	461f      	mov	r7, r3
 8005298:	260a      	movs	r6, #10
 800529a:	fb91 f5f6 	sdiv	r5, r1, r6
 800529e:	fb06 1115 	mls	r1, r6, r5, r1
 80052a2:	3130      	adds	r1, #48	; 0x30
 80052a4:	2d09      	cmp	r5, #9
 80052a6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80052aa:	f103 32ff 	add.w	r2, r3, #4294967295
 80052ae:	4629      	mov	r1, r5
 80052b0:	dc09      	bgt.n	80052c6 <__exponent+0x4c>
 80052b2:	3130      	adds	r1, #48	; 0x30
 80052b4:	3b02      	subs	r3, #2
 80052b6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80052ba:	42bb      	cmp	r3, r7
 80052bc:	4622      	mov	r2, r4
 80052be:	d304      	bcc.n	80052ca <__exponent+0x50>
 80052c0:	1a10      	subs	r0, r2, r0
 80052c2:	b003      	add	sp, #12
 80052c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052c6:	4613      	mov	r3, r2
 80052c8:	e7e7      	b.n	800529a <__exponent+0x20>
 80052ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052ce:	f804 2b01 	strb.w	r2, [r4], #1
 80052d2:	e7f2      	b.n	80052ba <__exponent+0x40>
 80052d4:	2330      	movs	r3, #48	; 0x30
 80052d6:	4419      	add	r1, r3
 80052d8:	7083      	strb	r3, [r0, #2]
 80052da:	1d02      	adds	r2, r0, #4
 80052dc:	70c1      	strb	r1, [r0, #3]
 80052de:	e7ef      	b.n	80052c0 <__exponent+0x46>

080052e0 <_printf_float>:
 80052e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052e4:	b08d      	sub	sp, #52	; 0x34
 80052e6:	460c      	mov	r4, r1
 80052e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80052ec:	4616      	mov	r6, r2
 80052ee:	461f      	mov	r7, r3
 80052f0:	4605      	mov	r5, r0
 80052f2:	f001 fa41 	bl	8006778 <_localeconv_r>
 80052f6:	6803      	ldr	r3, [r0, #0]
 80052f8:	9304      	str	r3, [sp, #16]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7fa ff80 	bl	8000200 <strlen>
 8005300:	2300      	movs	r3, #0
 8005302:	930a      	str	r3, [sp, #40]	; 0x28
 8005304:	f8d8 3000 	ldr.w	r3, [r8]
 8005308:	9005      	str	r0, [sp, #20]
 800530a:	3307      	adds	r3, #7
 800530c:	f023 0307 	bic.w	r3, r3, #7
 8005310:	f103 0208 	add.w	r2, r3, #8
 8005314:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005318:	f8d4 b000 	ldr.w	fp, [r4]
 800531c:	f8c8 2000 	str.w	r2, [r8]
 8005320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005324:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005328:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800532c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005330:	9307      	str	r3, [sp, #28]
 8005332:	f8cd 8018 	str.w	r8, [sp, #24]
 8005336:	f04f 32ff 	mov.w	r2, #4294967295
 800533a:	4ba7      	ldr	r3, [pc, #668]	; (80055d8 <_printf_float+0x2f8>)
 800533c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005340:	f7fb fc0c 	bl	8000b5c <__aeabi_dcmpun>
 8005344:	bb70      	cbnz	r0, 80053a4 <_printf_float+0xc4>
 8005346:	f04f 32ff 	mov.w	r2, #4294967295
 800534a:	4ba3      	ldr	r3, [pc, #652]	; (80055d8 <_printf_float+0x2f8>)
 800534c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005350:	f7fb fbe6 	bl	8000b20 <__aeabi_dcmple>
 8005354:	bb30      	cbnz	r0, 80053a4 <_printf_float+0xc4>
 8005356:	2200      	movs	r2, #0
 8005358:	2300      	movs	r3, #0
 800535a:	4640      	mov	r0, r8
 800535c:	4649      	mov	r1, r9
 800535e:	f7fb fbd5 	bl	8000b0c <__aeabi_dcmplt>
 8005362:	b110      	cbz	r0, 800536a <_printf_float+0x8a>
 8005364:	232d      	movs	r3, #45	; 0x2d
 8005366:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800536a:	4a9c      	ldr	r2, [pc, #624]	; (80055dc <_printf_float+0x2fc>)
 800536c:	4b9c      	ldr	r3, [pc, #624]	; (80055e0 <_printf_float+0x300>)
 800536e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005372:	bf8c      	ite	hi
 8005374:	4690      	movhi	r8, r2
 8005376:	4698      	movls	r8, r3
 8005378:	2303      	movs	r3, #3
 800537a:	f02b 0204 	bic.w	r2, fp, #4
 800537e:	6123      	str	r3, [r4, #16]
 8005380:	6022      	str	r2, [r4, #0]
 8005382:	f04f 0900 	mov.w	r9, #0
 8005386:	9700      	str	r7, [sp, #0]
 8005388:	4633      	mov	r3, r6
 800538a:	aa0b      	add	r2, sp, #44	; 0x2c
 800538c:	4621      	mov	r1, r4
 800538e:	4628      	mov	r0, r5
 8005390:	f000 f9e6 	bl	8005760 <_printf_common>
 8005394:	3001      	adds	r0, #1
 8005396:	f040 808d 	bne.w	80054b4 <_printf_float+0x1d4>
 800539a:	f04f 30ff 	mov.w	r0, #4294967295
 800539e:	b00d      	add	sp, #52	; 0x34
 80053a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053a4:	4642      	mov	r2, r8
 80053a6:	464b      	mov	r3, r9
 80053a8:	4640      	mov	r0, r8
 80053aa:	4649      	mov	r1, r9
 80053ac:	f7fb fbd6 	bl	8000b5c <__aeabi_dcmpun>
 80053b0:	b110      	cbz	r0, 80053b8 <_printf_float+0xd8>
 80053b2:	4a8c      	ldr	r2, [pc, #560]	; (80055e4 <_printf_float+0x304>)
 80053b4:	4b8c      	ldr	r3, [pc, #560]	; (80055e8 <_printf_float+0x308>)
 80053b6:	e7da      	b.n	800536e <_printf_float+0x8e>
 80053b8:	6861      	ldr	r1, [r4, #4]
 80053ba:	1c4b      	adds	r3, r1, #1
 80053bc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80053c0:	a80a      	add	r0, sp, #40	; 0x28
 80053c2:	d13e      	bne.n	8005442 <_printf_float+0x162>
 80053c4:	2306      	movs	r3, #6
 80053c6:	6063      	str	r3, [r4, #4]
 80053c8:	2300      	movs	r3, #0
 80053ca:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80053ce:	ab09      	add	r3, sp, #36	; 0x24
 80053d0:	9300      	str	r3, [sp, #0]
 80053d2:	ec49 8b10 	vmov	d0, r8, r9
 80053d6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80053da:	6022      	str	r2, [r4, #0]
 80053dc:	f8cd a004 	str.w	sl, [sp, #4]
 80053e0:	6861      	ldr	r1, [r4, #4]
 80053e2:	4628      	mov	r0, r5
 80053e4:	f7ff fee8 	bl	80051b8 <__cvt>
 80053e8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80053ec:	2b47      	cmp	r3, #71	; 0x47
 80053ee:	4680      	mov	r8, r0
 80053f0:	d109      	bne.n	8005406 <_printf_float+0x126>
 80053f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053f4:	1cd8      	adds	r0, r3, #3
 80053f6:	db02      	blt.n	80053fe <_printf_float+0x11e>
 80053f8:	6862      	ldr	r2, [r4, #4]
 80053fa:	4293      	cmp	r3, r2
 80053fc:	dd47      	ble.n	800548e <_printf_float+0x1ae>
 80053fe:	f1aa 0a02 	sub.w	sl, sl, #2
 8005402:	fa5f fa8a 	uxtb.w	sl, sl
 8005406:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800540a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800540c:	d824      	bhi.n	8005458 <_printf_float+0x178>
 800540e:	3901      	subs	r1, #1
 8005410:	4652      	mov	r2, sl
 8005412:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005416:	9109      	str	r1, [sp, #36]	; 0x24
 8005418:	f7ff ff2f 	bl	800527a <__exponent>
 800541c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800541e:	1813      	adds	r3, r2, r0
 8005420:	2a01      	cmp	r2, #1
 8005422:	4681      	mov	r9, r0
 8005424:	6123      	str	r3, [r4, #16]
 8005426:	dc02      	bgt.n	800542e <_printf_float+0x14e>
 8005428:	6822      	ldr	r2, [r4, #0]
 800542a:	07d1      	lsls	r1, r2, #31
 800542c:	d501      	bpl.n	8005432 <_printf_float+0x152>
 800542e:	3301      	adds	r3, #1
 8005430:	6123      	str	r3, [r4, #16]
 8005432:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005436:	2b00      	cmp	r3, #0
 8005438:	d0a5      	beq.n	8005386 <_printf_float+0xa6>
 800543a:	232d      	movs	r3, #45	; 0x2d
 800543c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005440:	e7a1      	b.n	8005386 <_printf_float+0xa6>
 8005442:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8005446:	f000 8177 	beq.w	8005738 <_printf_float+0x458>
 800544a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800544e:	d1bb      	bne.n	80053c8 <_printf_float+0xe8>
 8005450:	2900      	cmp	r1, #0
 8005452:	d1b9      	bne.n	80053c8 <_printf_float+0xe8>
 8005454:	2301      	movs	r3, #1
 8005456:	e7b6      	b.n	80053c6 <_printf_float+0xe6>
 8005458:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800545c:	d119      	bne.n	8005492 <_printf_float+0x1b2>
 800545e:	2900      	cmp	r1, #0
 8005460:	6863      	ldr	r3, [r4, #4]
 8005462:	dd0c      	ble.n	800547e <_printf_float+0x19e>
 8005464:	6121      	str	r1, [r4, #16]
 8005466:	b913      	cbnz	r3, 800546e <_printf_float+0x18e>
 8005468:	6822      	ldr	r2, [r4, #0]
 800546a:	07d2      	lsls	r2, r2, #31
 800546c:	d502      	bpl.n	8005474 <_printf_float+0x194>
 800546e:	3301      	adds	r3, #1
 8005470:	440b      	add	r3, r1
 8005472:	6123      	str	r3, [r4, #16]
 8005474:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005476:	65a3      	str	r3, [r4, #88]	; 0x58
 8005478:	f04f 0900 	mov.w	r9, #0
 800547c:	e7d9      	b.n	8005432 <_printf_float+0x152>
 800547e:	b913      	cbnz	r3, 8005486 <_printf_float+0x1a6>
 8005480:	6822      	ldr	r2, [r4, #0]
 8005482:	07d0      	lsls	r0, r2, #31
 8005484:	d501      	bpl.n	800548a <_printf_float+0x1aa>
 8005486:	3302      	adds	r3, #2
 8005488:	e7f3      	b.n	8005472 <_printf_float+0x192>
 800548a:	2301      	movs	r3, #1
 800548c:	e7f1      	b.n	8005472 <_printf_float+0x192>
 800548e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8005492:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005496:	4293      	cmp	r3, r2
 8005498:	db05      	blt.n	80054a6 <_printf_float+0x1c6>
 800549a:	6822      	ldr	r2, [r4, #0]
 800549c:	6123      	str	r3, [r4, #16]
 800549e:	07d1      	lsls	r1, r2, #31
 80054a0:	d5e8      	bpl.n	8005474 <_printf_float+0x194>
 80054a2:	3301      	adds	r3, #1
 80054a4:	e7e5      	b.n	8005472 <_printf_float+0x192>
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	bfd4      	ite	le
 80054aa:	f1c3 0302 	rsble	r3, r3, #2
 80054ae:	2301      	movgt	r3, #1
 80054b0:	4413      	add	r3, r2
 80054b2:	e7de      	b.n	8005472 <_printf_float+0x192>
 80054b4:	6823      	ldr	r3, [r4, #0]
 80054b6:	055a      	lsls	r2, r3, #21
 80054b8:	d407      	bmi.n	80054ca <_printf_float+0x1ea>
 80054ba:	6923      	ldr	r3, [r4, #16]
 80054bc:	4642      	mov	r2, r8
 80054be:	4631      	mov	r1, r6
 80054c0:	4628      	mov	r0, r5
 80054c2:	47b8      	blx	r7
 80054c4:	3001      	adds	r0, #1
 80054c6:	d12b      	bne.n	8005520 <_printf_float+0x240>
 80054c8:	e767      	b.n	800539a <_printf_float+0xba>
 80054ca:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80054ce:	f240 80dc 	bls.w	800568a <_printf_float+0x3aa>
 80054d2:	2200      	movs	r2, #0
 80054d4:	2300      	movs	r3, #0
 80054d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80054da:	f7fb fb0d 	bl	8000af8 <__aeabi_dcmpeq>
 80054de:	2800      	cmp	r0, #0
 80054e0:	d033      	beq.n	800554a <_printf_float+0x26a>
 80054e2:	2301      	movs	r3, #1
 80054e4:	4a41      	ldr	r2, [pc, #260]	; (80055ec <_printf_float+0x30c>)
 80054e6:	4631      	mov	r1, r6
 80054e8:	4628      	mov	r0, r5
 80054ea:	47b8      	blx	r7
 80054ec:	3001      	adds	r0, #1
 80054ee:	f43f af54 	beq.w	800539a <_printf_float+0xba>
 80054f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054f6:	429a      	cmp	r2, r3
 80054f8:	db02      	blt.n	8005500 <_printf_float+0x220>
 80054fa:	6823      	ldr	r3, [r4, #0]
 80054fc:	07d8      	lsls	r0, r3, #31
 80054fe:	d50f      	bpl.n	8005520 <_printf_float+0x240>
 8005500:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005504:	4631      	mov	r1, r6
 8005506:	4628      	mov	r0, r5
 8005508:	47b8      	blx	r7
 800550a:	3001      	adds	r0, #1
 800550c:	f43f af45 	beq.w	800539a <_printf_float+0xba>
 8005510:	f04f 0800 	mov.w	r8, #0
 8005514:	f104 091a 	add.w	r9, r4, #26
 8005518:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800551a:	3b01      	subs	r3, #1
 800551c:	4543      	cmp	r3, r8
 800551e:	dc09      	bgt.n	8005534 <_printf_float+0x254>
 8005520:	6823      	ldr	r3, [r4, #0]
 8005522:	079b      	lsls	r3, r3, #30
 8005524:	f100 8103 	bmi.w	800572e <_printf_float+0x44e>
 8005528:	68e0      	ldr	r0, [r4, #12]
 800552a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800552c:	4298      	cmp	r0, r3
 800552e:	bfb8      	it	lt
 8005530:	4618      	movlt	r0, r3
 8005532:	e734      	b.n	800539e <_printf_float+0xbe>
 8005534:	2301      	movs	r3, #1
 8005536:	464a      	mov	r2, r9
 8005538:	4631      	mov	r1, r6
 800553a:	4628      	mov	r0, r5
 800553c:	47b8      	blx	r7
 800553e:	3001      	adds	r0, #1
 8005540:	f43f af2b 	beq.w	800539a <_printf_float+0xba>
 8005544:	f108 0801 	add.w	r8, r8, #1
 8005548:	e7e6      	b.n	8005518 <_printf_float+0x238>
 800554a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800554c:	2b00      	cmp	r3, #0
 800554e:	dc2b      	bgt.n	80055a8 <_printf_float+0x2c8>
 8005550:	2301      	movs	r3, #1
 8005552:	4a26      	ldr	r2, [pc, #152]	; (80055ec <_printf_float+0x30c>)
 8005554:	4631      	mov	r1, r6
 8005556:	4628      	mov	r0, r5
 8005558:	47b8      	blx	r7
 800555a:	3001      	adds	r0, #1
 800555c:	f43f af1d 	beq.w	800539a <_printf_float+0xba>
 8005560:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005562:	b923      	cbnz	r3, 800556e <_printf_float+0x28e>
 8005564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005566:	b913      	cbnz	r3, 800556e <_printf_float+0x28e>
 8005568:	6823      	ldr	r3, [r4, #0]
 800556a:	07d9      	lsls	r1, r3, #31
 800556c:	d5d8      	bpl.n	8005520 <_printf_float+0x240>
 800556e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005572:	4631      	mov	r1, r6
 8005574:	4628      	mov	r0, r5
 8005576:	47b8      	blx	r7
 8005578:	3001      	adds	r0, #1
 800557a:	f43f af0e 	beq.w	800539a <_printf_float+0xba>
 800557e:	f04f 0900 	mov.w	r9, #0
 8005582:	f104 0a1a 	add.w	sl, r4, #26
 8005586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005588:	425b      	negs	r3, r3
 800558a:	454b      	cmp	r3, r9
 800558c:	dc01      	bgt.n	8005592 <_printf_float+0x2b2>
 800558e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005590:	e794      	b.n	80054bc <_printf_float+0x1dc>
 8005592:	2301      	movs	r3, #1
 8005594:	4652      	mov	r2, sl
 8005596:	4631      	mov	r1, r6
 8005598:	4628      	mov	r0, r5
 800559a:	47b8      	blx	r7
 800559c:	3001      	adds	r0, #1
 800559e:	f43f aefc 	beq.w	800539a <_printf_float+0xba>
 80055a2:	f109 0901 	add.w	r9, r9, #1
 80055a6:	e7ee      	b.n	8005586 <_printf_float+0x2a6>
 80055a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055ac:	429a      	cmp	r2, r3
 80055ae:	bfa8      	it	ge
 80055b0:	461a      	movge	r2, r3
 80055b2:	2a00      	cmp	r2, #0
 80055b4:	4691      	mov	r9, r2
 80055b6:	dd07      	ble.n	80055c8 <_printf_float+0x2e8>
 80055b8:	4613      	mov	r3, r2
 80055ba:	4631      	mov	r1, r6
 80055bc:	4642      	mov	r2, r8
 80055be:	4628      	mov	r0, r5
 80055c0:	47b8      	blx	r7
 80055c2:	3001      	adds	r0, #1
 80055c4:	f43f aee9 	beq.w	800539a <_printf_float+0xba>
 80055c8:	f104 031a 	add.w	r3, r4, #26
 80055cc:	f04f 0b00 	mov.w	fp, #0
 80055d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80055d4:	9306      	str	r3, [sp, #24]
 80055d6:	e015      	b.n	8005604 <_printf_float+0x324>
 80055d8:	7fefffff 	.word	0x7fefffff
 80055dc:	080170ea 	.word	0x080170ea
 80055e0:	080170e6 	.word	0x080170e6
 80055e4:	080170f2 	.word	0x080170f2
 80055e8:	080170ee 	.word	0x080170ee
 80055ec:	080170f6 	.word	0x080170f6
 80055f0:	2301      	movs	r3, #1
 80055f2:	9a06      	ldr	r2, [sp, #24]
 80055f4:	4631      	mov	r1, r6
 80055f6:	4628      	mov	r0, r5
 80055f8:	47b8      	blx	r7
 80055fa:	3001      	adds	r0, #1
 80055fc:	f43f aecd 	beq.w	800539a <_printf_float+0xba>
 8005600:	f10b 0b01 	add.w	fp, fp, #1
 8005604:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005608:	ebaa 0309 	sub.w	r3, sl, r9
 800560c:	455b      	cmp	r3, fp
 800560e:	dcef      	bgt.n	80055f0 <_printf_float+0x310>
 8005610:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005614:	429a      	cmp	r2, r3
 8005616:	44d0      	add	r8, sl
 8005618:	db15      	blt.n	8005646 <_printf_float+0x366>
 800561a:	6823      	ldr	r3, [r4, #0]
 800561c:	07da      	lsls	r2, r3, #31
 800561e:	d412      	bmi.n	8005646 <_printf_float+0x366>
 8005620:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005622:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005624:	eba3 020a 	sub.w	r2, r3, sl
 8005628:	eba3 0a01 	sub.w	sl, r3, r1
 800562c:	4592      	cmp	sl, r2
 800562e:	bfa8      	it	ge
 8005630:	4692      	movge	sl, r2
 8005632:	f1ba 0f00 	cmp.w	sl, #0
 8005636:	dc0e      	bgt.n	8005656 <_printf_float+0x376>
 8005638:	f04f 0800 	mov.w	r8, #0
 800563c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005640:	f104 091a 	add.w	r9, r4, #26
 8005644:	e019      	b.n	800567a <_printf_float+0x39a>
 8005646:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800564a:	4631      	mov	r1, r6
 800564c:	4628      	mov	r0, r5
 800564e:	47b8      	blx	r7
 8005650:	3001      	adds	r0, #1
 8005652:	d1e5      	bne.n	8005620 <_printf_float+0x340>
 8005654:	e6a1      	b.n	800539a <_printf_float+0xba>
 8005656:	4653      	mov	r3, sl
 8005658:	4642      	mov	r2, r8
 800565a:	4631      	mov	r1, r6
 800565c:	4628      	mov	r0, r5
 800565e:	47b8      	blx	r7
 8005660:	3001      	adds	r0, #1
 8005662:	d1e9      	bne.n	8005638 <_printf_float+0x358>
 8005664:	e699      	b.n	800539a <_printf_float+0xba>
 8005666:	2301      	movs	r3, #1
 8005668:	464a      	mov	r2, r9
 800566a:	4631      	mov	r1, r6
 800566c:	4628      	mov	r0, r5
 800566e:	47b8      	blx	r7
 8005670:	3001      	adds	r0, #1
 8005672:	f43f ae92 	beq.w	800539a <_printf_float+0xba>
 8005676:	f108 0801 	add.w	r8, r8, #1
 800567a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800567e:	1a9b      	subs	r3, r3, r2
 8005680:	eba3 030a 	sub.w	r3, r3, sl
 8005684:	4543      	cmp	r3, r8
 8005686:	dcee      	bgt.n	8005666 <_printf_float+0x386>
 8005688:	e74a      	b.n	8005520 <_printf_float+0x240>
 800568a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800568c:	2a01      	cmp	r2, #1
 800568e:	dc01      	bgt.n	8005694 <_printf_float+0x3b4>
 8005690:	07db      	lsls	r3, r3, #31
 8005692:	d53a      	bpl.n	800570a <_printf_float+0x42a>
 8005694:	2301      	movs	r3, #1
 8005696:	4642      	mov	r2, r8
 8005698:	4631      	mov	r1, r6
 800569a:	4628      	mov	r0, r5
 800569c:	47b8      	blx	r7
 800569e:	3001      	adds	r0, #1
 80056a0:	f43f ae7b 	beq.w	800539a <_printf_float+0xba>
 80056a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056a8:	4631      	mov	r1, r6
 80056aa:	4628      	mov	r0, r5
 80056ac:	47b8      	blx	r7
 80056ae:	3001      	adds	r0, #1
 80056b0:	f108 0801 	add.w	r8, r8, #1
 80056b4:	f43f ae71 	beq.w	800539a <_printf_float+0xba>
 80056b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056ba:	2200      	movs	r2, #0
 80056bc:	f103 3aff 	add.w	sl, r3, #4294967295
 80056c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80056c4:	2300      	movs	r3, #0
 80056c6:	f7fb fa17 	bl	8000af8 <__aeabi_dcmpeq>
 80056ca:	b9c8      	cbnz	r0, 8005700 <_printf_float+0x420>
 80056cc:	4653      	mov	r3, sl
 80056ce:	4642      	mov	r2, r8
 80056d0:	4631      	mov	r1, r6
 80056d2:	4628      	mov	r0, r5
 80056d4:	47b8      	blx	r7
 80056d6:	3001      	adds	r0, #1
 80056d8:	d10e      	bne.n	80056f8 <_printf_float+0x418>
 80056da:	e65e      	b.n	800539a <_printf_float+0xba>
 80056dc:	2301      	movs	r3, #1
 80056de:	4652      	mov	r2, sl
 80056e0:	4631      	mov	r1, r6
 80056e2:	4628      	mov	r0, r5
 80056e4:	47b8      	blx	r7
 80056e6:	3001      	adds	r0, #1
 80056e8:	f43f ae57 	beq.w	800539a <_printf_float+0xba>
 80056ec:	f108 0801 	add.w	r8, r8, #1
 80056f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056f2:	3b01      	subs	r3, #1
 80056f4:	4543      	cmp	r3, r8
 80056f6:	dcf1      	bgt.n	80056dc <_printf_float+0x3fc>
 80056f8:	464b      	mov	r3, r9
 80056fa:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80056fe:	e6de      	b.n	80054be <_printf_float+0x1de>
 8005700:	f04f 0800 	mov.w	r8, #0
 8005704:	f104 0a1a 	add.w	sl, r4, #26
 8005708:	e7f2      	b.n	80056f0 <_printf_float+0x410>
 800570a:	2301      	movs	r3, #1
 800570c:	e7df      	b.n	80056ce <_printf_float+0x3ee>
 800570e:	2301      	movs	r3, #1
 8005710:	464a      	mov	r2, r9
 8005712:	4631      	mov	r1, r6
 8005714:	4628      	mov	r0, r5
 8005716:	47b8      	blx	r7
 8005718:	3001      	adds	r0, #1
 800571a:	f43f ae3e 	beq.w	800539a <_printf_float+0xba>
 800571e:	f108 0801 	add.w	r8, r8, #1
 8005722:	68e3      	ldr	r3, [r4, #12]
 8005724:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005726:	1a9b      	subs	r3, r3, r2
 8005728:	4543      	cmp	r3, r8
 800572a:	dcf0      	bgt.n	800570e <_printf_float+0x42e>
 800572c:	e6fc      	b.n	8005528 <_printf_float+0x248>
 800572e:	f04f 0800 	mov.w	r8, #0
 8005732:	f104 0919 	add.w	r9, r4, #25
 8005736:	e7f4      	b.n	8005722 <_printf_float+0x442>
 8005738:	2900      	cmp	r1, #0
 800573a:	f43f ae8b 	beq.w	8005454 <_printf_float+0x174>
 800573e:	2300      	movs	r3, #0
 8005740:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005744:	ab09      	add	r3, sp, #36	; 0x24
 8005746:	9300      	str	r3, [sp, #0]
 8005748:	ec49 8b10 	vmov	d0, r8, r9
 800574c:	6022      	str	r2, [r4, #0]
 800574e:	f8cd a004 	str.w	sl, [sp, #4]
 8005752:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005756:	4628      	mov	r0, r5
 8005758:	f7ff fd2e 	bl	80051b8 <__cvt>
 800575c:	4680      	mov	r8, r0
 800575e:	e648      	b.n	80053f2 <_printf_float+0x112>

08005760 <_printf_common>:
 8005760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005764:	4691      	mov	r9, r2
 8005766:	461f      	mov	r7, r3
 8005768:	688a      	ldr	r2, [r1, #8]
 800576a:	690b      	ldr	r3, [r1, #16]
 800576c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005770:	4293      	cmp	r3, r2
 8005772:	bfb8      	it	lt
 8005774:	4613      	movlt	r3, r2
 8005776:	f8c9 3000 	str.w	r3, [r9]
 800577a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800577e:	4606      	mov	r6, r0
 8005780:	460c      	mov	r4, r1
 8005782:	b112      	cbz	r2, 800578a <_printf_common+0x2a>
 8005784:	3301      	adds	r3, #1
 8005786:	f8c9 3000 	str.w	r3, [r9]
 800578a:	6823      	ldr	r3, [r4, #0]
 800578c:	0699      	lsls	r1, r3, #26
 800578e:	bf42      	ittt	mi
 8005790:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005794:	3302      	addmi	r3, #2
 8005796:	f8c9 3000 	strmi.w	r3, [r9]
 800579a:	6825      	ldr	r5, [r4, #0]
 800579c:	f015 0506 	ands.w	r5, r5, #6
 80057a0:	d107      	bne.n	80057b2 <_printf_common+0x52>
 80057a2:	f104 0a19 	add.w	sl, r4, #25
 80057a6:	68e3      	ldr	r3, [r4, #12]
 80057a8:	f8d9 2000 	ldr.w	r2, [r9]
 80057ac:	1a9b      	subs	r3, r3, r2
 80057ae:	42ab      	cmp	r3, r5
 80057b0:	dc28      	bgt.n	8005804 <_printf_common+0xa4>
 80057b2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80057b6:	6822      	ldr	r2, [r4, #0]
 80057b8:	3300      	adds	r3, #0
 80057ba:	bf18      	it	ne
 80057bc:	2301      	movne	r3, #1
 80057be:	0692      	lsls	r2, r2, #26
 80057c0:	d42d      	bmi.n	800581e <_printf_common+0xbe>
 80057c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057c6:	4639      	mov	r1, r7
 80057c8:	4630      	mov	r0, r6
 80057ca:	47c0      	blx	r8
 80057cc:	3001      	adds	r0, #1
 80057ce:	d020      	beq.n	8005812 <_printf_common+0xb2>
 80057d0:	6823      	ldr	r3, [r4, #0]
 80057d2:	68e5      	ldr	r5, [r4, #12]
 80057d4:	f8d9 2000 	ldr.w	r2, [r9]
 80057d8:	f003 0306 	and.w	r3, r3, #6
 80057dc:	2b04      	cmp	r3, #4
 80057de:	bf08      	it	eq
 80057e0:	1aad      	subeq	r5, r5, r2
 80057e2:	68a3      	ldr	r3, [r4, #8]
 80057e4:	6922      	ldr	r2, [r4, #16]
 80057e6:	bf0c      	ite	eq
 80057e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057ec:	2500      	movne	r5, #0
 80057ee:	4293      	cmp	r3, r2
 80057f0:	bfc4      	itt	gt
 80057f2:	1a9b      	subgt	r3, r3, r2
 80057f4:	18ed      	addgt	r5, r5, r3
 80057f6:	f04f 0900 	mov.w	r9, #0
 80057fa:	341a      	adds	r4, #26
 80057fc:	454d      	cmp	r5, r9
 80057fe:	d11a      	bne.n	8005836 <_printf_common+0xd6>
 8005800:	2000      	movs	r0, #0
 8005802:	e008      	b.n	8005816 <_printf_common+0xb6>
 8005804:	2301      	movs	r3, #1
 8005806:	4652      	mov	r2, sl
 8005808:	4639      	mov	r1, r7
 800580a:	4630      	mov	r0, r6
 800580c:	47c0      	blx	r8
 800580e:	3001      	adds	r0, #1
 8005810:	d103      	bne.n	800581a <_printf_common+0xba>
 8005812:	f04f 30ff 	mov.w	r0, #4294967295
 8005816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800581a:	3501      	adds	r5, #1
 800581c:	e7c3      	b.n	80057a6 <_printf_common+0x46>
 800581e:	18e1      	adds	r1, r4, r3
 8005820:	1c5a      	adds	r2, r3, #1
 8005822:	2030      	movs	r0, #48	; 0x30
 8005824:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005828:	4422      	add	r2, r4
 800582a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800582e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005832:	3302      	adds	r3, #2
 8005834:	e7c5      	b.n	80057c2 <_printf_common+0x62>
 8005836:	2301      	movs	r3, #1
 8005838:	4622      	mov	r2, r4
 800583a:	4639      	mov	r1, r7
 800583c:	4630      	mov	r0, r6
 800583e:	47c0      	blx	r8
 8005840:	3001      	adds	r0, #1
 8005842:	d0e6      	beq.n	8005812 <_printf_common+0xb2>
 8005844:	f109 0901 	add.w	r9, r9, #1
 8005848:	e7d8      	b.n	80057fc <_printf_common+0x9c>
	...

0800584c <_printf_i>:
 800584c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005850:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005854:	460c      	mov	r4, r1
 8005856:	7e09      	ldrb	r1, [r1, #24]
 8005858:	b085      	sub	sp, #20
 800585a:	296e      	cmp	r1, #110	; 0x6e
 800585c:	4617      	mov	r7, r2
 800585e:	4606      	mov	r6, r0
 8005860:	4698      	mov	r8, r3
 8005862:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005864:	f000 80b3 	beq.w	80059ce <_printf_i+0x182>
 8005868:	d822      	bhi.n	80058b0 <_printf_i+0x64>
 800586a:	2963      	cmp	r1, #99	; 0x63
 800586c:	d036      	beq.n	80058dc <_printf_i+0x90>
 800586e:	d80a      	bhi.n	8005886 <_printf_i+0x3a>
 8005870:	2900      	cmp	r1, #0
 8005872:	f000 80b9 	beq.w	80059e8 <_printf_i+0x19c>
 8005876:	2958      	cmp	r1, #88	; 0x58
 8005878:	f000 8083 	beq.w	8005982 <_printf_i+0x136>
 800587c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005880:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005884:	e032      	b.n	80058ec <_printf_i+0xa0>
 8005886:	2964      	cmp	r1, #100	; 0x64
 8005888:	d001      	beq.n	800588e <_printf_i+0x42>
 800588a:	2969      	cmp	r1, #105	; 0x69
 800588c:	d1f6      	bne.n	800587c <_printf_i+0x30>
 800588e:	6820      	ldr	r0, [r4, #0]
 8005890:	6813      	ldr	r3, [r2, #0]
 8005892:	0605      	lsls	r5, r0, #24
 8005894:	f103 0104 	add.w	r1, r3, #4
 8005898:	d52a      	bpl.n	80058f0 <_printf_i+0xa4>
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	6011      	str	r1, [r2, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	da03      	bge.n	80058aa <_printf_i+0x5e>
 80058a2:	222d      	movs	r2, #45	; 0x2d
 80058a4:	425b      	negs	r3, r3
 80058a6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80058aa:	486f      	ldr	r0, [pc, #444]	; (8005a68 <_printf_i+0x21c>)
 80058ac:	220a      	movs	r2, #10
 80058ae:	e039      	b.n	8005924 <_printf_i+0xd8>
 80058b0:	2973      	cmp	r1, #115	; 0x73
 80058b2:	f000 809d 	beq.w	80059f0 <_printf_i+0x1a4>
 80058b6:	d808      	bhi.n	80058ca <_printf_i+0x7e>
 80058b8:	296f      	cmp	r1, #111	; 0x6f
 80058ba:	d020      	beq.n	80058fe <_printf_i+0xb2>
 80058bc:	2970      	cmp	r1, #112	; 0x70
 80058be:	d1dd      	bne.n	800587c <_printf_i+0x30>
 80058c0:	6823      	ldr	r3, [r4, #0]
 80058c2:	f043 0320 	orr.w	r3, r3, #32
 80058c6:	6023      	str	r3, [r4, #0]
 80058c8:	e003      	b.n	80058d2 <_printf_i+0x86>
 80058ca:	2975      	cmp	r1, #117	; 0x75
 80058cc:	d017      	beq.n	80058fe <_printf_i+0xb2>
 80058ce:	2978      	cmp	r1, #120	; 0x78
 80058d0:	d1d4      	bne.n	800587c <_printf_i+0x30>
 80058d2:	2378      	movs	r3, #120	; 0x78
 80058d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80058d8:	4864      	ldr	r0, [pc, #400]	; (8005a6c <_printf_i+0x220>)
 80058da:	e055      	b.n	8005988 <_printf_i+0x13c>
 80058dc:	6813      	ldr	r3, [r2, #0]
 80058de:	1d19      	adds	r1, r3, #4
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	6011      	str	r1, [r2, #0]
 80058e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058ec:	2301      	movs	r3, #1
 80058ee:	e08c      	b.n	8005a0a <_printf_i+0x1be>
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	6011      	str	r1, [r2, #0]
 80058f4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80058f8:	bf18      	it	ne
 80058fa:	b21b      	sxthne	r3, r3
 80058fc:	e7cf      	b.n	800589e <_printf_i+0x52>
 80058fe:	6813      	ldr	r3, [r2, #0]
 8005900:	6825      	ldr	r5, [r4, #0]
 8005902:	1d18      	adds	r0, r3, #4
 8005904:	6010      	str	r0, [r2, #0]
 8005906:	0628      	lsls	r0, r5, #24
 8005908:	d501      	bpl.n	800590e <_printf_i+0xc2>
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	e002      	b.n	8005914 <_printf_i+0xc8>
 800590e:	0668      	lsls	r0, r5, #25
 8005910:	d5fb      	bpl.n	800590a <_printf_i+0xbe>
 8005912:	881b      	ldrh	r3, [r3, #0]
 8005914:	4854      	ldr	r0, [pc, #336]	; (8005a68 <_printf_i+0x21c>)
 8005916:	296f      	cmp	r1, #111	; 0x6f
 8005918:	bf14      	ite	ne
 800591a:	220a      	movne	r2, #10
 800591c:	2208      	moveq	r2, #8
 800591e:	2100      	movs	r1, #0
 8005920:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005924:	6865      	ldr	r5, [r4, #4]
 8005926:	60a5      	str	r5, [r4, #8]
 8005928:	2d00      	cmp	r5, #0
 800592a:	f2c0 8095 	blt.w	8005a58 <_printf_i+0x20c>
 800592e:	6821      	ldr	r1, [r4, #0]
 8005930:	f021 0104 	bic.w	r1, r1, #4
 8005934:	6021      	str	r1, [r4, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d13d      	bne.n	80059b6 <_printf_i+0x16a>
 800593a:	2d00      	cmp	r5, #0
 800593c:	f040 808e 	bne.w	8005a5c <_printf_i+0x210>
 8005940:	4665      	mov	r5, ip
 8005942:	2a08      	cmp	r2, #8
 8005944:	d10b      	bne.n	800595e <_printf_i+0x112>
 8005946:	6823      	ldr	r3, [r4, #0]
 8005948:	07db      	lsls	r3, r3, #31
 800594a:	d508      	bpl.n	800595e <_printf_i+0x112>
 800594c:	6923      	ldr	r3, [r4, #16]
 800594e:	6862      	ldr	r2, [r4, #4]
 8005950:	429a      	cmp	r2, r3
 8005952:	bfde      	ittt	le
 8005954:	2330      	movle	r3, #48	; 0x30
 8005956:	f805 3c01 	strble.w	r3, [r5, #-1]
 800595a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800595e:	ebac 0305 	sub.w	r3, ip, r5
 8005962:	6123      	str	r3, [r4, #16]
 8005964:	f8cd 8000 	str.w	r8, [sp]
 8005968:	463b      	mov	r3, r7
 800596a:	aa03      	add	r2, sp, #12
 800596c:	4621      	mov	r1, r4
 800596e:	4630      	mov	r0, r6
 8005970:	f7ff fef6 	bl	8005760 <_printf_common>
 8005974:	3001      	adds	r0, #1
 8005976:	d14d      	bne.n	8005a14 <_printf_i+0x1c8>
 8005978:	f04f 30ff 	mov.w	r0, #4294967295
 800597c:	b005      	add	sp, #20
 800597e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005982:	4839      	ldr	r0, [pc, #228]	; (8005a68 <_printf_i+0x21c>)
 8005984:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005988:	6813      	ldr	r3, [r2, #0]
 800598a:	6821      	ldr	r1, [r4, #0]
 800598c:	1d1d      	adds	r5, r3, #4
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	6015      	str	r5, [r2, #0]
 8005992:	060a      	lsls	r2, r1, #24
 8005994:	d50b      	bpl.n	80059ae <_printf_i+0x162>
 8005996:	07ca      	lsls	r2, r1, #31
 8005998:	bf44      	itt	mi
 800599a:	f041 0120 	orrmi.w	r1, r1, #32
 800599e:	6021      	strmi	r1, [r4, #0]
 80059a0:	b91b      	cbnz	r3, 80059aa <_printf_i+0x15e>
 80059a2:	6822      	ldr	r2, [r4, #0]
 80059a4:	f022 0220 	bic.w	r2, r2, #32
 80059a8:	6022      	str	r2, [r4, #0]
 80059aa:	2210      	movs	r2, #16
 80059ac:	e7b7      	b.n	800591e <_printf_i+0xd2>
 80059ae:	064d      	lsls	r5, r1, #25
 80059b0:	bf48      	it	mi
 80059b2:	b29b      	uxthmi	r3, r3
 80059b4:	e7ef      	b.n	8005996 <_printf_i+0x14a>
 80059b6:	4665      	mov	r5, ip
 80059b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80059bc:	fb02 3311 	mls	r3, r2, r1, r3
 80059c0:	5cc3      	ldrb	r3, [r0, r3]
 80059c2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80059c6:	460b      	mov	r3, r1
 80059c8:	2900      	cmp	r1, #0
 80059ca:	d1f5      	bne.n	80059b8 <_printf_i+0x16c>
 80059cc:	e7b9      	b.n	8005942 <_printf_i+0xf6>
 80059ce:	6813      	ldr	r3, [r2, #0]
 80059d0:	6825      	ldr	r5, [r4, #0]
 80059d2:	6961      	ldr	r1, [r4, #20]
 80059d4:	1d18      	adds	r0, r3, #4
 80059d6:	6010      	str	r0, [r2, #0]
 80059d8:	0628      	lsls	r0, r5, #24
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	d501      	bpl.n	80059e2 <_printf_i+0x196>
 80059de:	6019      	str	r1, [r3, #0]
 80059e0:	e002      	b.n	80059e8 <_printf_i+0x19c>
 80059e2:	066a      	lsls	r2, r5, #25
 80059e4:	d5fb      	bpl.n	80059de <_printf_i+0x192>
 80059e6:	8019      	strh	r1, [r3, #0]
 80059e8:	2300      	movs	r3, #0
 80059ea:	6123      	str	r3, [r4, #16]
 80059ec:	4665      	mov	r5, ip
 80059ee:	e7b9      	b.n	8005964 <_printf_i+0x118>
 80059f0:	6813      	ldr	r3, [r2, #0]
 80059f2:	1d19      	adds	r1, r3, #4
 80059f4:	6011      	str	r1, [r2, #0]
 80059f6:	681d      	ldr	r5, [r3, #0]
 80059f8:	6862      	ldr	r2, [r4, #4]
 80059fa:	2100      	movs	r1, #0
 80059fc:	4628      	mov	r0, r5
 80059fe:	f7fa fc07 	bl	8000210 <memchr>
 8005a02:	b108      	cbz	r0, 8005a08 <_printf_i+0x1bc>
 8005a04:	1b40      	subs	r0, r0, r5
 8005a06:	6060      	str	r0, [r4, #4]
 8005a08:	6863      	ldr	r3, [r4, #4]
 8005a0a:	6123      	str	r3, [r4, #16]
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a12:	e7a7      	b.n	8005964 <_printf_i+0x118>
 8005a14:	6923      	ldr	r3, [r4, #16]
 8005a16:	462a      	mov	r2, r5
 8005a18:	4639      	mov	r1, r7
 8005a1a:	4630      	mov	r0, r6
 8005a1c:	47c0      	blx	r8
 8005a1e:	3001      	adds	r0, #1
 8005a20:	d0aa      	beq.n	8005978 <_printf_i+0x12c>
 8005a22:	6823      	ldr	r3, [r4, #0]
 8005a24:	079b      	lsls	r3, r3, #30
 8005a26:	d413      	bmi.n	8005a50 <_printf_i+0x204>
 8005a28:	68e0      	ldr	r0, [r4, #12]
 8005a2a:	9b03      	ldr	r3, [sp, #12]
 8005a2c:	4298      	cmp	r0, r3
 8005a2e:	bfb8      	it	lt
 8005a30:	4618      	movlt	r0, r3
 8005a32:	e7a3      	b.n	800597c <_printf_i+0x130>
 8005a34:	2301      	movs	r3, #1
 8005a36:	464a      	mov	r2, r9
 8005a38:	4639      	mov	r1, r7
 8005a3a:	4630      	mov	r0, r6
 8005a3c:	47c0      	blx	r8
 8005a3e:	3001      	adds	r0, #1
 8005a40:	d09a      	beq.n	8005978 <_printf_i+0x12c>
 8005a42:	3501      	adds	r5, #1
 8005a44:	68e3      	ldr	r3, [r4, #12]
 8005a46:	9a03      	ldr	r2, [sp, #12]
 8005a48:	1a9b      	subs	r3, r3, r2
 8005a4a:	42ab      	cmp	r3, r5
 8005a4c:	dcf2      	bgt.n	8005a34 <_printf_i+0x1e8>
 8005a4e:	e7eb      	b.n	8005a28 <_printf_i+0x1dc>
 8005a50:	2500      	movs	r5, #0
 8005a52:	f104 0919 	add.w	r9, r4, #25
 8005a56:	e7f5      	b.n	8005a44 <_printf_i+0x1f8>
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1ac      	bne.n	80059b6 <_printf_i+0x16a>
 8005a5c:	7803      	ldrb	r3, [r0, #0]
 8005a5e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a62:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a66:	e76c      	b.n	8005942 <_printf_i+0xf6>
 8005a68:	080170f8 	.word	0x080170f8
 8005a6c:	08017109 	.word	0x08017109

08005a70 <_sbrk_r>:
 8005a70:	b538      	push	{r3, r4, r5, lr}
 8005a72:	4c06      	ldr	r4, [pc, #24]	; (8005a8c <_sbrk_r+0x1c>)
 8005a74:	2300      	movs	r3, #0
 8005a76:	4605      	mov	r5, r0
 8005a78:	4608      	mov	r0, r1
 8005a7a:	6023      	str	r3, [r4, #0]
 8005a7c:	f7fb f8b9 	bl	8000bf2 <_sbrk>
 8005a80:	1c43      	adds	r3, r0, #1
 8005a82:	d102      	bne.n	8005a8a <_sbrk_r+0x1a>
 8005a84:	6823      	ldr	r3, [r4, #0]
 8005a86:	b103      	cbz	r3, 8005a8a <_sbrk_r+0x1a>
 8005a88:	602b      	str	r3, [r5, #0]
 8005a8a:	bd38      	pop	{r3, r4, r5, pc}
 8005a8c:	20000f38 	.word	0x20000f38

08005a90 <siprintf>:
 8005a90:	b40e      	push	{r1, r2, r3}
 8005a92:	b500      	push	{lr}
 8005a94:	b09c      	sub	sp, #112	; 0x70
 8005a96:	ab1d      	add	r3, sp, #116	; 0x74
 8005a98:	9002      	str	r0, [sp, #8]
 8005a9a:	9006      	str	r0, [sp, #24]
 8005a9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005aa0:	4809      	ldr	r0, [pc, #36]	; (8005ac8 <siprintf+0x38>)
 8005aa2:	9107      	str	r1, [sp, #28]
 8005aa4:	9104      	str	r1, [sp, #16]
 8005aa6:	4909      	ldr	r1, [pc, #36]	; (8005acc <siprintf+0x3c>)
 8005aa8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005aac:	9105      	str	r1, [sp, #20]
 8005aae:	6800      	ldr	r0, [r0, #0]
 8005ab0:	9301      	str	r3, [sp, #4]
 8005ab2:	a902      	add	r1, sp, #8
 8005ab4:	f001 f9b4 	bl	8006e20 <_svfiprintf_r>
 8005ab8:	9b02      	ldr	r3, [sp, #8]
 8005aba:	2200      	movs	r2, #0
 8005abc:	701a      	strb	r2, [r3, #0]
 8005abe:	b01c      	add	sp, #112	; 0x70
 8005ac0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ac4:	b003      	add	sp, #12
 8005ac6:	4770      	bx	lr
 8005ac8:	20000014 	.word	0x20000014
 8005acc:	ffff0208 	.word	0xffff0208

08005ad0 <__ascii_wctomb>:
 8005ad0:	b149      	cbz	r1, 8005ae6 <__ascii_wctomb+0x16>
 8005ad2:	2aff      	cmp	r2, #255	; 0xff
 8005ad4:	bf85      	ittet	hi
 8005ad6:	238a      	movhi	r3, #138	; 0x8a
 8005ad8:	6003      	strhi	r3, [r0, #0]
 8005ada:	700a      	strbls	r2, [r1, #0]
 8005adc:	f04f 30ff 	movhi.w	r0, #4294967295
 8005ae0:	bf98      	it	ls
 8005ae2:	2001      	movls	r0, #1
 8005ae4:	4770      	bx	lr
 8005ae6:	4608      	mov	r0, r1
 8005ae8:	4770      	bx	lr

08005aea <quorem>:
 8005aea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aee:	6903      	ldr	r3, [r0, #16]
 8005af0:	690c      	ldr	r4, [r1, #16]
 8005af2:	42a3      	cmp	r3, r4
 8005af4:	4680      	mov	r8, r0
 8005af6:	f2c0 8082 	blt.w	8005bfe <quorem+0x114>
 8005afa:	3c01      	subs	r4, #1
 8005afc:	f101 0714 	add.w	r7, r1, #20
 8005b00:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005b04:	f100 0614 	add.w	r6, r0, #20
 8005b08:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005b0c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005b10:	eb06 030c 	add.w	r3, r6, ip
 8005b14:	3501      	adds	r5, #1
 8005b16:	eb07 090c 	add.w	r9, r7, ip
 8005b1a:	9301      	str	r3, [sp, #4]
 8005b1c:	fbb0 f5f5 	udiv	r5, r0, r5
 8005b20:	b395      	cbz	r5, 8005b88 <quorem+0x9e>
 8005b22:	f04f 0a00 	mov.w	sl, #0
 8005b26:	4638      	mov	r0, r7
 8005b28:	46b6      	mov	lr, r6
 8005b2a:	46d3      	mov	fp, sl
 8005b2c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005b30:	b293      	uxth	r3, r2
 8005b32:	fb05 a303 	mla	r3, r5, r3, sl
 8005b36:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	ebab 0303 	sub.w	r3, fp, r3
 8005b40:	0c12      	lsrs	r2, r2, #16
 8005b42:	f8de b000 	ldr.w	fp, [lr]
 8005b46:	fb05 a202 	mla	r2, r5, r2, sl
 8005b4a:	fa13 f38b 	uxtah	r3, r3, fp
 8005b4e:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005b52:	fa1f fb82 	uxth.w	fp, r2
 8005b56:	f8de 2000 	ldr.w	r2, [lr]
 8005b5a:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005b5e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b68:	4581      	cmp	r9, r0
 8005b6a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005b6e:	f84e 3b04 	str.w	r3, [lr], #4
 8005b72:	d2db      	bcs.n	8005b2c <quorem+0x42>
 8005b74:	f856 300c 	ldr.w	r3, [r6, ip]
 8005b78:	b933      	cbnz	r3, 8005b88 <quorem+0x9e>
 8005b7a:	9b01      	ldr	r3, [sp, #4]
 8005b7c:	3b04      	subs	r3, #4
 8005b7e:	429e      	cmp	r6, r3
 8005b80:	461a      	mov	r2, r3
 8005b82:	d330      	bcc.n	8005be6 <quorem+0xfc>
 8005b84:	f8c8 4010 	str.w	r4, [r8, #16]
 8005b88:	4640      	mov	r0, r8
 8005b8a:	f001 f81b 	bl	8006bc4 <__mcmp>
 8005b8e:	2800      	cmp	r0, #0
 8005b90:	db25      	blt.n	8005bde <quorem+0xf4>
 8005b92:	3501      	adds	r5, #1
 8005b94:	4630      	mov	r0, r6
 8005b96:	f04f 0c00 	mov.w	ip, #0
 8005b9a:	f857 2b04 	ldr.w	r2, [r7], #4
 8005b9e:	f8d0 e000 	ldr.w	lr, [r0]
 8005ba2:	b293      	uxth	r3, r2
 8005ba4:	ebac 0303 	sub.w	r3, ip, r3
 8005ba8:	0c12      	lsrs	r2, r2, #16
 8005baa:	fa13 f38e 	uxtah	r3, r3, lr
 8005bae:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005bb2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005bbc:	45b9      	cmp	r9, r7
 8005bbe:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005bc2:	f840 3b04 	str.w	r3, [r0], #4
 8005bc6:	d2e8      	bcs.n	8005b9a <quorem+0xb0>
 8005bc8:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005bcc:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005bd0:	b92a      	cbnz	r2, 8005bde <quorem+0xf4>
 8005bd2:	3b04      	subs	r3, #4
 8005bd4:	429e      	cmp	r6, r3
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	d30b      	bcc.n	8005bf2 <quorem+0x108>
 8005bda:	f8c8 4010 	str.w	r4, [r8, #16]
 8005bde:	4628      	mov	r0, r5
 8005be0:	b003      	add	sp, #12
 8005be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005be6:	6812      	ldr	r2, [r2, #0]
 8005be8:	3b04      	subs	r3, #4
 8005bea:	2a00      	cmp	r2, #0
 8005bec:	d1ca      	bne.n	8005b84 <quorem+0x9a>
 8005bee:	3c01      	subs	r4, #1
 8005bf0:	e7c5      	b.n	8005b7e <quorem+0x94>
 8005bf2:	6812      	ldr	r2, [r2, #0]
 8005bf4:	3b04      	subs	r3, #4
 8005bf6:	2a00      	cmp	r2, #0
 8005bf8:	d1ef      	bne.n	8005bda <quorem+0xf0>
 8005bfa:	3c01      	subs	r4, #1
 8005bfc:	e7ea      	b.n	8005bd4 <quorem+0xea>
 8005bfe:	2000      	movs	r0, #0
 8005c00:	e7ee      	b.n	8005be0 <quorem+0xf6>
 8005c02:	0000      	movs	r0, r0
 8005c04:	0000      	movs	r0, r0
	...

08005c08 <_dtoa_r>:
 8005c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c0c:	ec57 6b10 	vmov	r6, r7, d0
 8005c10:	b097      	sub	sp, #92	; 0x5c
 8005c12:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005c14:	9106      	str	r1, [sp, #24]
 8005c16:	4604      	mov	r4, r0
 8005c18:	920b      	str	r2, [sp, #44]	; 0x2c
 8005c1a:	9312      	str	r3, [sp, #72]	; 0x48
 8005c1c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005c20:	e9cd 6700 	strd	r6, r7, [sp]
 8005c24:	b93d      	cbnz	r5, 8005c36 <_dtoa_r+0x2e>
 8005c26:	2010      	movs	r0, #16
 8005c28:	f7ff f9f0 	bl	800500c <malloc>
 8005c2c:	6260      	str	r0, [r4, #36]	; 0x24
 8005c2e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005c32:	6005      	str	r5, [r0, #0]
 8005c34:	60c5      	str	r5, [r0, #12]
 8005c36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c38:	6819      	ldr	r1, [r3, #0]
 8005c3a:	b151      	cbz	r1, 8005c52 <_dtoa_r+0x4a>
 8005c3c:	685a      	ldr	r2, [r3, #4]
 8005c3e:	604a      	str	r2, [r1, #4]
 8005c40:	2301      	movs	r3, #1
 8005c42:	4093      	lsls	r3, r2
 8005c44:	608b      	str	r3, [r1, #8]
 8005c46:	4620      	mov	r0, r4
 8005c48:	f000 fdda 	bl	8006800 <_Bfree>
 8005c4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c4e:	2200      	movs	r2, #0
 8005c50:	601a      	str	r2, [r3, #0]
 8005c52:	1e3b      	subs	r3, r7, #0
 8005c54:	bfbb      	ittet	lt
 8005c56:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005c5a:	9301      	strlt	r3, [sp, #4]
 8005c5c:	2300      	movge	r3, #0
 8005c5e:	2201      	movlt	r2, #1
 8005c60:	bfac      	ite	ge
 8005c62:	f8c8 3000 	strge.w	r3, [r8]
 8005c66:	f8c8 2000 	strlt.w	r2, [r8]
 8005c6a:	4baf      	ldr	r3, [pc, #700]	; (8005f28 <_dtoa_r+0x320>)
 8005c6c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005c70:	ea33 0308 	bics.w	r3, r3, r8
 8005c74:	d114      	bne.n	8005ca0 <_dtoa_r+0x98>
 8005c76:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005c78:	f242 730f 	movw	r3, #9999	; 0x270f
 8005c7c:	6013      	str	r3, [r2, #0]
 8005c7e:	9b00      	ldr	r3, [sp, #0]
 8005c80:	b923      	cbnz	r3, 8005c8c <_dtoa_r+0x84>
 8005c82:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005c86:	2800      	cmp	r0, #0
 8005c88:	f000 8542 	beq.w	8006710 <_dtoa_r+0xb08>
 8005c8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c8e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8005f3c <_dtoa_r+0x334>
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	f000 8544 	beq.w	8006720 <_dtoa_r+0xb18>
 8005c98:	f10b 0303 	add.w	r3, fp, #3
 8005c9c:	f000 bd3e 	b.w	800671c <_dtoa_r+0xb14>
 8005ca0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	4630      	mov	r0, r6
 8005caa:	4639      	mov	r1, r7
 8005cac:	f7fa ff24 	bl	8000af8 <__aeabi_dcmpeq>
 8005cb0:	4681      	mov	r9, r0
 8005cb2:	b168      	cbz	r0, 8005cd0 <_dtoa_r+0xc8>
 8005cb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	6013      	str	r3, [r2, #0]
 8005cba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	f000 8524 	beq.w	800670a <_dtoa_r+0xb02>
 8005cc2:	4b9a      	ldr	r3, [pc, #616]	; (8005f2c <_dtoa_r+0x324>)
 8005cc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005cc6:	f103 3bff 	add.w	fp, r3, #4294967295
 8005cca:	6013      	str	r3, [r2, #0]
 8005ccc:	f000 bd28 	b.w	8006720 <_dtoa_r+0xb18>
 8005cd0:	aa14      	add	r2, sp, #80	; 0x50
 8005cd2:	a915      	add	r1, sp, #84	; 0x54
 8005cd4:	ec47 6b10 	vmov	d0, r6, r7
 8005cd8:	4620      	mov	r0, r4
 8005cda:	f000 ffea 	bl	8006cb2 <__d2b>
 8005cde:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005ce2:	9004      	str	r0, [sp, #16]
 8005ce4:	2d00      	cmp	r5, #0
 8005ce6:	d07c      	beq.n	8005de2 <_dtoa_r+0x1da>
 8005ce8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005cec:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005cf0:	46b2      	mov	sl, r6
 8005cf2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8005cf6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005cfa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8005cfe:	2200      	movs	r2, #0
 8005d00:	4b8b      	ldr	r3, [pc, #556]	; (8005f30 <_dtoa_r+0x328>)
 8005d02:	4650      	mov	r0, sl
 8005d04:	4659      	mov	r1, fp
 8005d06:	f7fa fad7 	bl	80002b8 <__aeabi_dsub>
 8005d0a:	a381      	add	r3, pc, #516	; (adr r3, 8005f10 <_dtoa_r+0x308>)
 8005d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d10:	f7fa fc8a 	bl	8000628 <__aeabi_dmul>
 8005d14:	a380      	add	r3, pc, #512	; (adr r3, 8005f18 <_dtoa_r+0x310>)
 8005d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1a:	f7fa facf 	bl	80002bc <__adddf3>
 8005d1e:	4606      	mov	r6, r0
 8005d20:	4628      	mov	r0, r5
 8005d22:	460f      	mov	r7, r1
 8005d24:	f7fa fc16 	bl	8000554 <__aeabi_i2d>
 8005d28:	a37d      	add	r3, pc, #500	; (adr r3, 8005f20 <_dtoa_r+0x318>)
 8005d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2e:	f7fa fc7b 	bl	8000628 <__aeabi_dmul>
 8005d32:	4602      	mov	r2, r0
 8005d34:	460b      	mov	r3, r1
 8005d36:	4630      	mov	r0, r6
 8005d38:	4639      	mov	r1, r7
 8005d3a:	f7fa fabf 	bl	80002bc <__adddf3>
 8005d3e:	4606      	mov	r6, r0
 8005d40:	460f      	mov	r7, r1
 8005d42:	f7fa ff21 	bl	8000b88 <__aeabi_d2iz>
 8005d46:	2200      	movs	r2, #0
 8005d48:	4682      	mov	sl, r0
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	4630      	mov	r0, r6
 8005d4e:	4639      	mov	r1, r7
 8005d50:	f7fa fedc 	bl	8000b0c <__aeabi_dcmplt>
 8005d54:	b148      	cbz	r0, 8005d6a <_dtoa_r+0x162>
 8005d56:	4650      	mov	r0, sl
 8005d58:	f7fa fbfc 	bl	8000554 <__aeabi_i2d>
 8005d5c:	4632      	mov	r2, r6
 8005d5e:	463b      	mov	r3, r7
 8005d60:	f7fa feca 	bl	8000af8 <__aeabi_dcmpeq>
 8005d64:	b908      	cbnz	r0, 8005d6a <_dtoa_r+0x162>
 8005d66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d6a:	f1ba 0f16 	cmp.w	sl, #22
 8005d6e:	d859      	bhi.n	8005e24 <_dtoa_r+0x21c>
 8005d70:	4970      	ldr	r1, [pc, #448]	; (8005f34 <_dtoa_r+0x32c>)
 8005d72:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005d76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d7e:	f7fa fee3 	bl	8000b48 <__aeabi_dcmpgt>
 8005d82:	2800      	cmp	r0, #0
 8005d84:	d050      	beq.n	8005e28 <_dtoa_r+0x220>
 8005d86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005d90:	1b5d      	subs	r5, r3, r5
 8005d92:	f1b5 0801 	subs.w	r8, r5, #1
 8005d96:	bf49      	itett	mi
 8005d98:	f1c5 0301 	rsbmi	r3, r5, #1
 8005d9c:	2300      	movpl	r3, #0
 8005d9e:	9305      	strmi	r3, [sp, #20]
 8005da0:	f04f 0800 	movmi.w	r8, #0
 8005da4:	bf58      	it	pl
 8005da6:	9305      	strpl	r3, [sp, #20]
 8005da8:	f1ba 0f00 	cmp.w	sl, #0
 8005dac:	db3e      	blt.n	8005e2c <_dtoa_r+0x224>
 8005dae:	2300      	movs	r3, #0
 8005db0:	44d0      	add	r8, sl
 8005db2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005db6:	9307      	str	r3, [sp, #28]
 8005db8:	9b06      	ldr	r3, [sp, #24]
 8005dba:	2b09      	cmp	r3, #9
 8005dbc:	f200 8090 	bhi.w	8005ee0 <_dtoa_r+0x2d8>
 8005dc0:	2b05      	cmp	r3, #5
 8005dc2:	bfc4      	itt	gt
 8005dc4:	3b04      	subgt	r3, #4
 8005dc6:	9306      	strgt	r3, [sp, #24]
 8005dc8:	9b06      	ldr	r3, [sp, #24]
 8005dca:	f1a3 0302 	sub.w	r3, r3, #2
 8005dce:	bfcc      	ite	gt
 8005dd0:	2500      	movgt	r5, #0
 8005dd2:	2501      	movle	r5, #1
 8005dd4:	2b03      	cmp	r3, #3
 8005dd6:	f200 808f 	bhi.w	8005ef8 <_dtoa_r+0x2f0>
 8005dda:	e8df f003 	tbb	[pc, r3]
 8005dde:	7f7d      	.short	0x7f7d
 8005de0:	7131      	.short	0x7131
 8005de2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8005de6:	441d      	add	r5, r3
 8005de8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005dec:	2820      	cmp	r0, #32
 8005dee:	dd13      	ble.n	8005e18 <_dtoa_r+0x210>
 8005df0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005df4:	9b00      	ldr	r3, [sp, #0]
 8005df6:	fa08 f800 	lsl.w	r8, r8, r0
 8005dfa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005dfe:	fa23 f000 	lsr.w	r0, r3, r0
 8005e02:	ea48 0000 	orr.w	r0, r8, r0
 8005e06:	f7fa fb95 	bl	8000534 <__aeabi_ui2d>
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	4682      	mov	sl, r0
 8005e0e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8005e12:	3d01      	subs	r5, #1
 8005e14:	9313      	str	r3, [sp, #76]	; 0x4c
 8005e16:	e772      	b.n	8005cfe <_dtoa_r+0xf6>
 8005e18:	9b00      	ldr	r3, [sp, #0]
 8005e1a:	f1c0 0020 	rsb	r0, r0, #32
 8005e1e:	fa03 f000 	lsl.w	r0, r3, r0
 8005e22:	e7f0      	b.n	8005e06 <_dtoa_r+0x1fe>
 8005e24:	2301      	movs	r3, #1
 8005e26:	e7b1      	b.n	8005d8c <_dtoa_r+0x184>
 8005e28:	900f      	str	r0, [sp, #60]	; 0x3c
 8005e2a:	e7b0      	b.n	8005d8e <_dtoa_r+0x186>
 8005e2c:	9b05      	ldr	r3, [sp, #20]
 8005e2e:	eba3 030a 	sub.w	r3, r3, sl
 8005e32:	9305      	str	r3, [sp, #20]
 8005e34:	f1ca 0300 	rsb	r3, sl, #0
 8005e38:	9307      	str	r3, [sp, #28]
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	930e      	str	r3, [sp, #56]	; 0x38
 8005e3e:	e7bb      	b.n	8005db8 <_dtoa_r+0x1b0>
 8005e40:	2301      	movs	r3, #1
 8005e42:	930a      	str	r3, [sp, #40]	; 0x28
 8005e44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	dd59      	ble.n	8005efe <_dtoa_r+0x2f6>
 8005e4a:	9302      	str	r3, [sp, #8]
 8005e4c:	4699      	mov	r9, r3
 8005e4e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005e50:	2200      	movs	r2, #0
 8005e52:	6072      	str	r2, [r6, #4]
 8005e54:	2204      	movs	r2, #4
 8005e56:	f102 0014 	add.w	r0, r2, #20
 8005e5a:	4298      	cmp	r0, r3
 8005e5c:	6871      	ldr	r1, [r6, #4]
 8005e5e:	d953      	bls.n	8005f08 <_dtoa_r+0x300>
 8005e60:	4620      	mov	r0, r4
 8005e62:	f000 fc99 	bl	8006798 <_Balloc>
 8005e66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e68:	6030      	str	r0, [r6, #0]
 8005e6a:	f1b9 0f0e 	cmp.w	r9, #14
 8005e6e:	f8d3 b000 	ldr.w	fp, [r3]
 8005e72:	f200 80e6 	bhi.w	8006042 <_dtoa_r+0x43a>
 8005e76:	2d00      	cmp	r5, #0
 8005e78:	f000 80e3 	beq.w	8006042 <_dtoa_r+0x43a>
 8005e7c:	ed9d 7b00 	vldr	d7, [sp]
 8005e80:	f1ba 0f00 	cmp.w	sl, #0
 8005e84:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005e88:	dd74      	ble.n	8005f74 <_dtoa_r+0x36c>
 8005e8a:	4a2a      	ldr	r2, [pc, #168]	; (8005f34 <_dtoa_r+0x32c>)
 8005e8c:	f00a 030f 	and.w	r3, sl, #15
 8005e90:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005e94:	ed93 7b00 	vldr	d7, [r3]
 8005e98:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005e9c:	06f0      	lsls	r0, r6, #27
 8005e9e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005ea2:	d565      	bpl.n	8005f70 <_dtoa_r+0x368>
 8005ea4:	4b24      	ldr	r3, [pc, #144]	; (8005f38 <_dtoa_r+0x330>)
 8005ea6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005eaa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005eae:	f7fa fce5 	bl	800087c <__aeabi_ddiv>
 8005eb2:	e9cd 0100 	strd	r0, r1, [sp]
 8005eb6:	f006 060f 	and.w	r6, r6, #15
 8005eba:	2503      	movs	r5, #3
 8005ebc:	4f1e      	ldr	r7, [pc, #120]	; (8005f38 <_dtoa_r+0x330>)
 8005ebe:	e04c      	b.n	8005f5a <_dtoa_r+0x352>
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	930a      	str	r3, [sp, #40]	; 0x28
 8005ec4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ec6:	4453      	add	r3, sl
 8005ec8:	f103 0901 	add.w	r9, r3, #1
 8005ecc:	9302      	str	r3, [sp, #8]
 8005ece:	464b      	mov	r3, r9
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	bfb8      	it	lt
 8005ed4:	2301      	movlt	r3, #1
 8005ed6:	e7ba      	b.n	8005e4e <_dtoa_r+0x246>
 8005ed8:	2300      	movs	r3, #0
 8005eda:	e7b2      	b.n	8005e42 <_dtoa_r+0x23a>
 8005edc:	2300      	movs	r3, #0
 8005ede:	e7f0      	b.n	8005ec2 <_dtoa_r+0x2ba>
 8005ee0:	2501      	movs	r5, #1
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	9306      	str	r3, [sp, #24]
 8005ee6:	950a      	str	r5, [sp, #40]	; 0x28
 8005ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8005eec:	9302      	str	r3, [sp, #8]
 8005eee:	4699      	mov	r9, r3
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	2312      	movs	r3, #18
 8005ef4:	920b      	str	r2, [sp, #44]	; 0x2c
 8005ef6:	e7aa      	b.n	8005e4e <_dtoa_r+0x246>
 8005ef8:	2301      	movs	r3, #1
 8005efa:	930a      	str	r3, [sp, #40]	; 0x28
 8005efc:	e7f4      	b.n	8005ee8 <_dtoa_r+0x2e0>
 8005efe:	2301      	movs	r3, #1
 8005f00:	9302      	str	r3, [sp, #8]
 8005f02:	4699      	mov	r9, r3
 8005f04:	461a      	mov	r2, r3
 8005f06:	e7f5      	b.n	8005ef4 <_dtoa_r+0x2ec>
 8005f08:	3101      	adds	r1, #1
 8005f0a:	6071      	str	r1, [r6, #4]
 8005f0c:	0052      	lsls	r2, r2, #1
 8005f0e:	e7a2      	b.n	8005e56 <_dtoa_r+0x24e>
 8005f10:	636f4361 	.word	0x636f4361
 8005f14:	3fd287a7 	.word	0x3fd287a7
 8005f18:	8b60c8b3 	.word	0x8b60c8b3
 8005f1c:	3fc68a28 	.word	0x3fc68a28
 8005f20:	509f79fb 	.word	0x509f79fb
 8005f24:	3fd34413 	.word	0x3fd34413
 8005f28:	7ff00000 	.word	0x7ff00000
 8005f2c:	080170f7 	.word	0x080170f7
 8005f30:	3ff80000 	.word	0x3ff80000
 8005f34:	08017250 	.word	0x08017250
 8005f38:	08017228 	.word	0x08017228
 8005f3c:	08017224 	.word	0x08017224
 8005f40:	07f1      	lsls	r1, r6, #31
 8005f42:	d508      	bpl.n	8005f56 <_dtoa_r+0x34e>
 8005f44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005f48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f4c:	f7fa fb6c 	bl	8000628 <__aeabi_dmul>
 8005f50:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005f54:	3501      	adds	r5, #1
 8005f56:	1076      	asrs	r6, r6, #1
 8005f58:	3708      	adds	r7, #8
 8005f5a:	2e00      	cmp	r6, #0
 8005f5c:	d1f0      	bne.n	8005f40 <_dtoa_r+0x338>
 8005f5e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005f62:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f66:	f7fa fc89 	bl	800087c <__aeabi_ddiv>
 8005f6a:	e9cd 0100 	strd	r0, r1, [sp]
 8005f6e:	e01a      	b.n	8005fa6 <_dtoa_r+0x39e>
 8005f70:	2502      	movs	r5, #2
 8005f72:	e7a3      	b.n	8005ebc <_dtoa_r+0x2b4>
 8005f74:	f000 80a0 	beq.w	80060b8 <_dtoa_r+0x4b0>
 8005f78:	f1ca 0600 	rsb	r6, sl, #0
 8005f7c:	4b9f      	ldr	r3, [pc, #636]	; (80061fc <_dtoa_r+0x5f4>)
 8005f7e:	4fa0      	ldr	r7, [pc, #640]	; (8006200 <_dtoa_r+0x5f8>)
 8005f80:	f006 020f 	and.w	r2, r6, #15
 8005f84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005f90:	f7fa fb4a 	bl	8000628 <__aeabi_dmul>
 8005f94:	e9cd 0100 	strd	r0, r1, [sp]
 8005f98:	1136      	asrs	r6, r6, #4
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	2502      	movs	r5, #2
 8005f9e:	2e00      	cmp	r6, #0
 8005fa0:	d17f      	bne.n	80060a2 <_dtoa_r+0x49a>
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1e1      	bne.n	8005f6a <_dtoa_r+0x362>
 8005fa6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f000 8087 	beq.w	80060bc <_dtoa_r+0x4b4>
 8005fae:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	4b93      	ldr	r3, [pc, #588]	; (8006204 <_dtoa_r+0x5fc>)
 8005fb6:	4630      	mov	r0, r6
 8005fb8:	4639      	mov	r1, r7
 8005fba:	f7fa fda7 	bl	8000b0c <__aeabi_dcmplt>
 8005fbe:	2800      	cmp	r0, #0
 8005fc0:	d07c      	beq.n	80060bc <_dtoa_r+0x4b4>
 8005fc2:	f1b9 0f00 	cmp.w	r9, #0
 8005fc6:	d079      	beq.n	80060bc <_dtoa_r+0x4b4>
 8005fc8:	9b02      	ldr	r3, [sp, #8]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	dd35      	ble.n	800603a <_dtoa_r+0x432>
 8005fce:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005fd2:	9308      	str	r3, [sp, #32]
 8005fd4:	4639      	mov	r1, r7
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	4b8b      	ldr	r3, [pc, #556]	; (8006208 <_dtoa_r+0x600>)
 8005fda:	4630      	mov	r0, r6
 8005fdc:	f7fa fb24 	bl	8000628 <__aeabi_dmul>
 8005fe0:	e9cd 0100 	strd	r0, r1, [sp]
 8005fe4:	9f02      	ldr	r7, [sp, #8]
 8005fe6:	3501      	adds	r5, #1
 8005fe8:	4628      	mov	r0, r5
 8005fea:	f7fa fab3 	bl	8000554 <__aeabi_i2d>
 8005fee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ff2:	f7fa fb19 	bl	8000628 <__aeabi_dmul>
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	4b84      	ldr	r3, [pc, #528]	; (800620c <_dtoa_r+0x604>)
 8005ffa:	f7fa f95f 	bl	80002bc <__adddf3>
 8005ffe:	4605      	mov	r5, r0
 8006000:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006004:	2f00      	cmp	r7, #0
 8006006:	d15d      	bne.n	80060c4 <_dtoa_r+0x4bc>
 8006008:	2200      	movs	r2, #0
 800600a:	4b81      	ldr	r3, [pc, #516]	; (8006210 <_dtoa_r+0x608>)
 800600c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006010:	f7fa f952 	bl	80002b8 <__aeabi_dsub>
 8006014:	462a      	mov	r2, r5
 8006016:	4633      	mov	r3, r6
 8006018:	e9cd 0100 	strd	r0, r1, [sp]
 800601c:	f7fa fd94 	bl	8000b48 <__aeabi_dcmpgt>
 8006020:	2800      	cmp	r0, #0
 8006022:	f040 8288 	bne.w	8006536 <_dtoa_r+0x92e>
 8006026:	462a      	mov	r2, r5
 8006028:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800602c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006030:	f7fa fd6c 	bl	8000b0c <__aeabi_dcmplt>
 8006034:	2800      	cmp	r0, #0
 8006036:	f040 827c 	bne.w	8006532 <_dtoa_r+0x92a>
 800603a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800603e:	e9cd 2300 	strd	r2, r3, [sp]
 8006042:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006044:	2b00      	cmp	r3, #0
 8006046:	f2c0 8150 	blt.w	80062ea <_dtoa_r+0x6e2>
 800604a:	f1ba 0f0e 	cmp.w	sl, #14
 800604e:	f300 814c 	bgt.w	80062ea <_dtoa_r+0x6e2>
 8006052:	4b6a      	ldr	r3, [pc, #424]	; (80061fc <_dtoa_r+0x5f4>)
 8006054:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006058:	ed93 7b00 	vldr	d7, [r3]
 800605c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800605e:	2b00      	cmp	r3, #0
 8006060:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006064:	f280 80d8 	bge.w	8006218 <_dtoa_r+0x610>
 8006068:	f1b9 0f00 	cmp.w	r9, #0
 800606c:	f300 80d4 	bgt.w	8006218 <_dtoa_r+0x610>
 8006070:	f040 825e 	bne.w	8006530 <_dtoa_r+0x928>
 8006074:	2200      	movs	r2, #0
 8006076:	4b66      	ldr	r3, [pc, #408]	; (8006210 <_dtoa_r+0x608>)
 8006078:	ec51 0b17 	vmov	r0, r1, d7
 800607c:	f7fa fad4 	bl	8000628 <__aeabi_dmul>
 8006080:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006084:	f7fa fd56 	bl	8000b34 <__aeabi_dcmpge>
 8006088:	464f      	mov	r7, r9
 800608a:	464e      	mov	r6, r9
 800608c:	2800      	cmp	r0, #0
 800608e:	f040 8234 	bne.w	80064fa <_dtoa_r+0x8f2>
 8006092:	2331      	movs	r3, #49	; 0x31
 8006094:	f10b 0501 	add.w	r5, fp, #1
 8006098:	f88b 3000 	strb.w	r3, [fp]
 800609c:	f10a 0a01 	add.w	sl, sl, #1
 80060a0:	e22f      	b.n	8006502 <_dtoa_r+0x8fa>
 80060a2:	07f2      	lsls	r2, r6, #31
 80060a4:	d505      	bpl.n	80060b2 <_dtoa_r+0x4aa>
 80060a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060aa:	f7fa fabd 	bl	8000628 <__aeabi_dmul>
 80060ae:	3501      	adds	r5, #1
 80060b0:	2301      	movs	r3, #1
 80060b2:	1076      	asrs	r6, r6, #1
 80060b4:	3708      	adds	r7, #8
 80060b6:	e772      	b.n	8005f9e <_dtoa_r+0x396>
 80060b8:	2502      	movs	r5, #2
 80060ba:	e774      	b.n	8005fa6 <_dtoa_r+0x39e>
 80060bc:	f8cd a020 	str.w	sl, [sp, #32]
 80060c0:	464f      	mov	r7, r9
 80060c2:	e791      	b.n	8005fe8 <_dtoa_r+0x3e0>
 80060c4:	4b4d      	ldr	r3, [pc, #308]	; (80061fc <_dtoa_r+0x5f4>)
 80060c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80060ca:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80060ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d047      	beq.n	8006164 <_dtoa_r+0x55c>
 80060d4:	4602      	mov	r2, r0
 80060d6:	460b      	mov	r3, r1
 80060d8:	2000      	movs	r0, #0
 80060da:	494e      	ldr	r1, [pc, #312]	; (8006214 <_dtoa_r+0x60c>)
 80060dc:	f7fa fbce 	bl	800087c <__aeabi_ddiv>
 80060e0:	462a      	mov	r2, r5
 80060e2:	4633      	mov	r3, r6
 80060e4:	f7fa f8e8 	bl	80002b8 <__aeabi_dsub>
 80060e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80060ec:	465d      	mov	r5, fp
 80060ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80060f2:	f7fa fd49 	bl	8000b88 <__aeabi_d2iz>
 80060f6:	4606      	mov	r6, r0
 80060f8:	f7fa fa2c 	bl	8000554 <__aeabi_i2d>
 80060fc:	4602      	mov	r2, r0
 80060fe:	460b      	mov	r3, r1
 8006100:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006104:	f7fa f8d8 	bl	80002b8 <__aeabi_dsub>
 8006108:	3630      	adds	r6, #48	; 0x30
 800610a:	f805 6b01 	strb.w	r6, [r5], #1
 800610e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006112:	e9cd 0100 	strd	r0, r1, [sp]
 8006116:	f7fa fcf9 	bl	8000b0c <__aeabi_dcmplt>
 800611a:	2800      	cmp	r0, #0
 800611c:	d163      	bne.n	80061e6 <_dtoa_r+0x5de>
 800611e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006122:	2000      	movs	r0, #0
 8006124:	4937      	ldr	r1, [pc, #220]	; (8006204 <_dtoa_r+0x5fc>)
 8006126:	f7fa f8c7 	bl	80002b8 <__aeabi_dsub>
 800612a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800612e:	f7fa fced 	bl	8000b0c <__aeabi_dcmplt>
 8006132:	2800      	cmp	r0, #0
 8006134:	f040 80b7 	bne.w	80062a6 <_dtoa_r+0x69e>
 8006138:	eba5 030b 	sub.w	r3, r5, fp
 800613c:	429f      	cmp	r7, r3
 800613e:	f77f af7c 	ble.w	800603a <_dtoa_r+0x432>
 8006142:	2200      	movs	r2, #0
 8006144:	4b30      	ldr	r3, [pc, #192]	; (8006208 <_dtoa_r+0x600>)
 8006146:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800614a:	f7fa fa6d 	bl	8000628 <__aeabi_dmul>
 800614e:	2200      	movs	r2, #0
 8006150:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006154:	4b2c      	ldr	r3, [pc, #176]	; (8006208 <_dtoa_r+0x600>)
 8006156:	e9dd 0100 	ldrd	r0, r1, [sp]
 800615a:	f7fa fa65 	bl	8000628 <__aeabi_dmul>
 800615e:	e9cd 0100 	strd	r0, r1, [sp]
 8006162:	e7c4      	b.n	80060ee <_dtoa_r+0x4e6>
 8006164:	462a      	mov	r2, r5
 8006166:	4633      	mov	r3, r6
 8006168:	f7fa fa5e 	bl	8000628 <__aeabi_dmul>
 800616c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006170:	eb0b 0507 	add.w	r5, fp, r7
 8006174:	465e      	mov	r6, fp
 8006176:	e9dd 0100 	ldrd	r0, r1, [sp]
 800617a:	f7fa fd05 	bl	8000b88 <__aeabi_d2iz>
 800617e:	4607      	mov	r7, r0
 8006180:	f7fa f9e8 	bl	8000554 <__aeabi_i2d>
 8006184:	3730      	adds	r7, #48	; 0x30
 8006186:	4602      	mov	r2, r0
 8006188:	460b      	mov	r3, r1
 800618a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800618e:	f7fa f893 	bl	80002b8 <__aeabi_dsub>
 8006192:	f806 7b01 	strb.w	r7, [r6], #1
 8006196:	42ae      	cmp	r6, r5
 8006198:	e9cd 0100 	strd	r0, r1, [sp]
 800619c:	f04f 0200 	mov.w	r2, #0
 80061a0:	d126      	bne.n	80061f0 <_dtoa_r+0x5e8>
 80061a2:	4b1c      	ldr	r3, [pc, #112]	; (8006214 <_dtoa_r+0x60c>)
 80061a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80061a8:	f7fa f888 	bl	80002bc <__adddf3>
 80061ac:	4602      	mov	r2, r0
 80061ae:	460b      	mov	r3, r1
 80061b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80061b4:	f7fa fcc8 	bl	8000b48 <__aeabi_dcmpgt>
 80061b8:	2800      	cmp	r0, #0
 80061ba:	d174      	bne.n	80062a6 <_dtoa_r+0x69e>
 80061bc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80061c0:	2000      	movs	r0, #0
 80061c2:	4914      	ldr	r1, [pc, #80]	; (8006214 <_dtoa_r+0x60c>)
 80061c4:	f7fa f878 	bl	80002b8 <__aeabi_dsub>
 80061c8:	4602      	mov	r2, r0
 80061ca:	460b      	mov	r3, r1
 80061cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80061d0:	f7fa fc9c 	bl	8000b0c <__aeabi_dcmplt>
 80061d4:	2800      	cmp	r0, #0
 80061d6:	f43f af30 	beq.w	800603a <_dtoa_r+0x432>
 80061da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80061de:	2b30      	cmp	r3, #48	; 0x30
 80061e0:	f105 32ff 	add.w	r2, r5, #4294967295
 80061e4:	d002      	beq.n	80061ec <_dtoa_r+0x5e4>
 80061e6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80061ea:	e04a      	b.n	8006282 <_dtoa_r+0x67a>
 80061ec:	4615      	mov	r5, r2
 80061ee:	e7f4      	b.n	80061da <_dtoa_r+0x5d2>
 80061f0:	4b05      	ldr	r3, [pc, #20]	; (8006208 <_dtoa_r+0x600>)
 80061f2:	f7fa fa19 	bl	8000628 <__aeabi_dmul>
 80061f6:	e9cd 0100 	strd	r0, r1, [sp]
 80061fa:	e7bc      	b.n	8006176 <_dtoa_r+0x56e>
 80061fc:	08017250 	.word	0x08017250
 8006200:	08017228 	.word	0x08017228
 8006204:	3ff00000 	.word	0x3ff00000
 8006208:	40240000 	.word	0x40240000
 800620c:	401c0000 	.word	0x401c0000
 8006210:	40140000 	.word	0x40140000
 8006214:	3fe00000 	.word	0x3fe00000
 8006218:	e9dd 6700 	ldrd	r6, r7, [sp]
 800621c:	465d      	mov	r5, fp
 800621e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006222:	4630      	mov	r0, r6
 8006224:	4639      	mov	r1, r7
 8006226:	f7fa fb29 	bl	800087c <__aeabi_ddiv>
 800622a:	f7fa fcad 	bl	8000b88 <__aeabi_d2iz>
 800622e:	4680      	mov	r8, r0
 8006230:	f7fa f990 	bl	8000554 <__aeabi_i2d>
 8006234:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006238:	f7fa f9f6 	bl	8000628 <__aeabi_dmul>
 800623c:	4602      	mov	r2, r0
 800623e:	460b      	mov	r3, r1
 8006240:	4630      	mov	r0, r6
 8006242:	4639      	mov	r1, r7
 8006244:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006248:	f7fa f836 	bl	80002b8 <__aeabi_dsub>
 800624c:	f805 6b01 	strb.w	r6, [r5], #1
 8006250:	eba5 060b 	sub.w	r6, r5, fp
 8006254:	45b1      	cmp	r9, r6
 8006256:	4602      	mov	r2, r0
 8006258:	460b      	mov	r3, r1
 800625a:	d139      	bne.n	80062d0 <_dtoa_r+0x6c8>
 800625c:	f7fa f82e 	bl	80002bc <__adddf3>
 8006260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006264:	4606      	mov	r6, r0
 8006266:	460f      	mov	r7, r1
 8006268:	f7fa fc6e 	bl	8000b48 <__aeabi_dcmpgt>
 800626c:	b9c8      	cbnz	r0, 80062a2 <_dtoa_r+0x69a>
 800626e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006272:	4630      	mov	r0, r6
 8006274:	4639      	mov	r1, r7
 8006276:	f7fa fc3f 	bl	8000af8 <__aeabi_dcmpeq>
 800627a:	b110      	cbz	r0, 8006282 <_dtoa_r+0x67a>
 800627c:	f018 0f01 	tst.w	r8, #1
 8006280:	d10f      	bne.n	80062a2 <_dtoa_r+0x69a>
 8006282:	9904      	ldr	r1, [sp, #16]
 8006284:	4620      	mov	r0, r4
 8006286:	f000 fabb 	bl	8006800 <_Bfree>
 800628a:	2300      	movs	r3, #0
 800628c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800628e:	702b      	strb	r3, [r5, #0]
 8006290:	f10a 0301 	add.w	r3, sl, #1
 8006294:	6013      	str	r3, [r2, #0]
 8006296:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006298:	2b00      	cmp	r3, #0
 800629a:	f000 8241 	beq.w	8006720 <_dtoa_r+0xb18>
 800629e:	601d      	str	r5, [r3, #0]
 80062a0:	e23e      	b.n	8006720 <_dtoa_r+0xb18>
 80062a2:	f8cd a020 	str.w	sl, [sp, #32]
 80062a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80062aa:	2a39      	cmp	r2, #57	; 0x39
 80062ac:	f105 33ff 	add.w	r3, r5, #4294967295
 80062b0:	d108      	bne.n	80062c4 <_dtoa_r+0x6bc>
 80062b2:	459b      	cmp	fp, r3
 80062b4:	d10a      	bne.n	80062cc <_dtoa_r+0x6c4>
 80062b6:	9b08      	ldr	r3, [sp, #32]
 80062b8:	3301      	adds	r3, #1
 80062ba:	9308      	str	r3, [sp, #32]
 80062bc:	2330      	movs	r3, #48	; 0x30
 80062be:	f88b 3000 	strb.w	r3, [fp]
 80062c2:	465b      	mov	r3, fp
 80062c4:	781a      	ldrb	r2, [r3, #0]
 80062c6:	3201      	adds	r2, #1
 80062c8:	701a      	strb	r2, [r3, #0]
 80062ca:	e78c      	b.n	80061e6 <_dtoa_r+0x5de>
 80062cc:	461d      	mov	r5, r3
 80062ce:	e7ea      	b.n	80062a6 <_dtoa_r+0x69e>
 80062d0:	2200      	movs	r2, #0
 80062d2:	4b9b      	ldr	r3, [pc, #620]	; (8006540 <_dtoa_r+0x938>)
 80062d4:	f7fa f9a8 	bl	8000628 <__aeabi_dmul>
 80062d8:	2200      	movs	r2, #0
 80062da:	2300      	movs	r3, #0
 80062dc:	4606      	mov	r6, r0
 80062de:	460f      	mov	r7, r1
 80062e0:	f7fa fc0a 	bl	8000af8 <__aeabi_dcmpeq>
 80062e4:	2800      	cmp	r0, #0
 80062e6:	d09a      	beq.n	800621e <_dtoa_r+0x616>
 80062e8:	e7cb      	b.n	8006282 <_dtoa_r+0x67a>
 80062ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062ec:	2a00      	cmp	r2, #0
 80062ee:	f000 808b 	beq.w	8006408 <_dtoa_r+0x800>
 80062f2:	9a06      	ldr	r2, [sp, #24]
 80062f4:	2a01      	cmp	r2, #1
 80062f6:	dc6e      	bgt.n	80063d6 <_dtoa_r+0x7ce>
 80062f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80062fa:	2a00      	cmp	r2, #0
 80062fc:	d067      	beq.n	80063ce <_dtoa_r+0x7c6>
 80062fe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006302:	9f07      	ldr	r7, [sp, #28]
 8006304:	9d05      	ldr	r5, [sp, #20]
 8006306:	9a05      	ldr	r2, [sp, #20]
 8006308:	2101      	movs	r1, #1
 800630a:	441a      	add	r2, r3
 800630c:	4620      	mov	r0, r4
 800630e:	9205      	str	r2, [sp, #20]
 8006310:	4498      	add	r8, r3
 8006312:	f000 fb15 	bl	8006940 <__i2b>
 8006316:	4606      	mov	r6, r0
 8006318:	2d00      	cmp	r5, #0
 800631a:	dd0c      	ble.n	8006336 <_dtoa_r+0x72e>
 800631c:	f1b8 0f00 	cmp.w	r8, #0
 8006320:	dd09      	ble.n	8006336 <_dtoa_r+0x72e>
 8006322:	4545      	cmp	r5, r8
 8006324:	9a05      	ldr	r2, [sp, #20]
 8006326:	462b      	mov	r3, r5
 8006328:	bfa8      	it	ge
 800632a:	4643      	movge	r3, r8
 800632c:	1ad2      	subs	r2, r2, r3
 800632e:	9205      	str	r2, [sp, #20]
 8006330:	1aed      	subs	r5, r5, r3
 8006332:	eba8 0803 	sub.w	r8, r8, r3
 8006336:	9b07      	ldr	r3, [sp, #28]
 8006338:	b1eb      	cbz	r3, 8006376 <_dtoa_r+0x76e>
 800633a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800633c:	2b00      	cmp	r3, #0
 800633e:	d067      	beq.n	8006410 <_dtoa_r+0x808>
 8006340:	b18f      	cbz	r7, 8006366 <_dtoa_r+0x75e>
 8006342:	4631      	mov	r1, r6
 8006344:	463a      	mov	r2, r7
 8006346:	4620      	mov	r0, r4
 8006348:	f000 fb9a 	bl	8006a80 <__pow5mult>
 800634c:	9a04      	ldr	r2, [sp, #16]
 800634e:	4601      	mov	r1, r0
 8006350:	4606      	mov	r6, r0
 8006352:	4620      	mov	r0, r4
 8006354:	f000 fafd 	bl	8006952 <__multiply>
 8006358:	9904      	ldr	r1, [sp, #16]
 800635a:	9008      	str	r0, [sp, #32]
 800635c:	4620      	mov	r0, r4
 800635e:	f000 fa4f 	bl	8006800 <_Bfree>
 8006362:	9b08      	ldr	r3, [sp, #32]
 8006364:	9304      	str	r3, [sp, #16]
 8006366:	9b07      	ldr	r3, [sp, #28]
 8006368:	1bda      	subs	r2, r3, r7
 800636a:	d004      	beq.n	8006376 <_dtoa_r+0x76e>
 800636c:	9904      	ldr	r1, [sp, #16]
 800636e:	4620      	mov	r0, r4
 8006370:	f000 fb86 	bl	8006a80 <__pow5mult>
 8006374:	9004      	str	r0, [sp, #16]
 8006376:	2101      	movs	r1, #1
 8006378:	4620      	mov	r0, r4
 800637a:	f000 fae1 	bl	8006940 <__i2b>
 800637e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006380:	4607      	mov	r7, r0
 8006382:	2b00      	cmp	r3, #0
 8006384:	f000 81d0 	beq.w	8006728 <_dtoa_r+0xb20>
 8006388:	461a      	mov	r2, r3
 800638a:	4601      	mov	r1, r0
 800638c:	4620      	mov	r0, r4
 800638e:	f000 fb77 	bl	8006a80 <__pow5mult>
 8006392:	9b06      	ldr	r3, [sp, #24]
 8006394:	2b01      	cmp	r3, #1
 8006396:	4607      	mov	r7, r0
 8006398:	dc40      	bgt.n	800641c <_dtoa_r+0x814>
 800639a:	9b00      	ldr	r3, [sp, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d139      	bne.n	8006414 <_dtoa_r+0x80c>
 80063a0:	9b01      	ldr	r3, [sp, #4]
 80063a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d136      	bne.n	8006418 <_dtoa_r+0x810>
 80063aa:	9b01      	ldr	r3, [sp, #4]
 80063ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063b0:	0d1b      	lsrs	r3, r3, #20
 80063b2:	051b      	lsls	r3, r3, #20
 80063b4:	b12b      	cbz	r3, 80063c2 <_dtoa_r+0x7ba>
 80063b6:	9b05      	ldr	r3, [sp, #20]
 80063b8:	3301      	adds	r3, #1
 80063ba:	9305      	str	r3, [sp, #20]
 80063bc:	f108 0801 	add.w	r8, r8, #1
 80063c0:	2301      	movs	r3, #1
 80063c2:	9307      	str	r3, [sp, #28]
 80063c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d12a      	bne.n	8006420 <_dtoa_r+0x818>
 80063ca:	2001      	movs	r0, #1
 80063cc:	e030      	b.n	8006430 <_dtoa_r+0x828>
 80063ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80063d0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80063d4:	e795      	b.n	8006302 <_dtoa_r+0x6fa>
 80063d6:	9b07      	ldr	r3, [sp, #28]
 80063d8:	f109 37ff 	add.w	r7, r9, #4294967295
 80063dc:	42bb      	cmp	r3, r7
 80063de:	bfbf      	itttt	lt
 80063e0:	9b07      	ldrlt	r3, [sp, #28]
 80063e2:	9707      	strlt	r7, [sp, #28]
 80063e4:	1afa      	sublt	r2, r7, r3
 80063e6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80063e8:	bfbb      	ittet	lt
 80063ea:	189b      	addlt	r3, r3, r2
 80063ec:	930e      	strlt	r3, [sp, #56]	; 0x38
 80063ee:	1bdf      	subge	r7, r3, r7
 80063f0:	2700      	movlt	r7, #0
 80063f2:	f1b9 0f00 	cmp.w	r9, #0
 80063f6:	bfb5      	itete	lt
 80063f8:	9b05      	ldrlt	r3, [sp, #20]
 80063fa:	9d05      	ldrge	r5, [sp, #20]
 80063fc:	eba3 0509 	sublt.w	r5, r3, r9
 8006400:	464b      	movge	r3, r9
 8006402:	bfb8      	it	lt
 8006404:	2300      	movlt	r3, #0
 8006406:	e77e      	b.n	8006306 <_dtoa_r+0x6fe>
 8006408:	9f07      	ldr	r7, [sp, #28]
 800640a:	9d05      	ldr	r5, [sp, #20]
 800640c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800640e:	e783      	b.n	8006318 <_dtoa_r+0x710>
 8006410:	9a07      	ldr	r2, [sp, #28]
 8006412:	e7ab      	b.n	800636c <_dtoa_r+0x764>
 8006414:	2300      	movs	r3, #0
 8006416:	e7d4      	b.n	80063c2 <_dtoa_r+0x7ba>
 8006418:	9b00      	ldr	r3, [sp, #0]
 800641a:	e7d2      	b.n	80063c2 <_dtoa_r+0x7ba>
 800641c:	2300      	movs	r3, #0
 800641e:	9307      	str	r3, [sp, #28]
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8006426:	6918      	ldr	r0, [r3, #16]
 8006428:	f000 fa3c 	bl	80068a4 <__hi0bits>
 800642c:	f1c0 0020 	rsb	r0, r0, #32
 8006430:	4440      	add	r0, r8
 8006432:	f010 001f 	ands.w	r0, r0, #31
 8006436:	d047      	beq.n	80064c8 <_dtoa_r+0x8c0>
 8006438:	f1c0 0320 	rsb	r3, r0, #32
 800643c:	2b04      	cmp	r3, #4
 800643e:	dd3b      	ble.n	80064b8 <_dtoa_r+0x8b0>
 8006440:	9b05      	ldr	r3, [sp, #20]
 8006442:	f1c0 001c 	rsb	r0, r0, #28
 8006446:	4403      	add	r3, r0
 8006448:	9305      	str	r3, [sp, #20]
 800644a:	4405      	add	r5, r0
 800644c:	4480      	add	r8, r0
 800644e:	9b05      	ldr	r3, [sp, #20]
 8006450:	2b00      	cmp	r3, #0
 8006452:	dd05      	ble.n	8006460 <_dtoa_r+0x858>
 8006454:	461a      	mov	r2, r3
 8006456:	9904      	ldr	r1, [sp, #16]
 8006458:	4620      	mov	r0, r4
 800645a:	f000 fb5f 	bl	8006b1c <__lshift>
 800645e:	9004      	str	r0, [sp, #16]
 8006460:	f1b8 0f00 	cmp.w	r8, #0
 8006464:	dd05      	ble.n	8006472 <_dtoa_r+0x86a>
 8006466:	4639      	mov	r1, r7
 8006468:	4642      	mov	r2, r8
 800646a:	4620      	mov	r0, r4
 800646c:	f000 fb56 	bl	8006b1c <__lshift>
 8006470:	4607      	mov	r7, r0
 8006472:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006474:	b353      	cbz	r3, 80064cc <_dtoa_r+0x8c4>
 8006476:	4639      	mov	r1, r7
 8006478:	9804      	ldr	r0, [sp, #16]
 800647a:	f000 fba3 	bl	8006bc4 <__mcmp>
 800647e:	2800      	cmp	r0, #0
 8006480:	da24      	bge.n	80064cc <_dtoa_r+0x8c4>
 8006482:	2300      	movs	r3, #0
 8006484:	220a      	movs	r2, #10
 8006486:	9904      	ldr	r1, [sp, #16]
 8006488:	4620      	mov	r0, r4
 800648a:	f000 f9d0 	bl	800682e <__multadd>
 800648e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006490:	9004      	str	r0, [sp, #16]
 8006492:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006496:	2b00      	cmp	r3, #0
 8006498:	f000 814d 	beq.w	8006736 <_dtoa_r+0xb2e>
 800649c:	2300      	movs	r3, #0
 800649e:	4631      	mov	r1, r6
 80064a0:	220a      	movs	r2, #10
 80064a2:	4620      	mov	r0, r4
 80064a4:	f000 f9c3 	bl	800682e <__multadd>
 80064a8:	9b02      	ldr	r3, [sp, #8]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	4606      	mov	r6, r0
 80064ae:	dc4f      	bgt.n	8006550 <_dtoa_r+0x948>
 80064b0:	9b06      	ldr	r3, [sp, #24]
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	dd4c      	ble.n	8006550 <_dtoa_r+0x948>
 80064b6:	e011      	b.n	80064dc <_dtoa_r+0x8d4>
 80064b8:	d0c9      	beq.n	800644e <_dtoa_r+0x846>
 80064ba:	9a05      	ldr	r2, [sp, #20]
 80064bc:	331c      	adds	r3, #28
 80064be:	441a      	add	r2, r3
 80064c0:	9205      	str	r2, [sp, #20]
 80064c2:	441d      	add	r5, r3
 80064c4:	4498      	add	r8, r3
 80064c6:	e7c2      	b.n	800644e <_dtoa_r+0x846>
 80064c8:	4603      	mov	r3, r0
 80064ca:	e7f6      	b.n	80064ba <_dtoa_r+0x8b2>
 80064cc:	f1b9 0f00 	cmp.w	r9, #0
 80064d0:	dc38      	bgt.n	8006544 <_dtoa_r+0x93c>
 80064d2:	9b06      	ldr	r3, [sp, #24]
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	dd35      	ble.n	8006544 <_dtoa_r+0x93c>
 80064d8:	f8cd 9008 	str.w	r9, [sp, #8]
 80064dc:	9b02      	ldr	r3, [sp, #8]
 80064de:	b963      	cbnz	r3, 80064fa <_dtoa_r+0x8f2>
 80064e0:	4639      	mov	r1, r7
 80064e2:	2205      	movs	r2, #5
 80064e4:	4620      	mov	r0, r4
 80064e6:	f000 f9a2 	bl	800682e <__multadd>
 80064ea:	4601      	mov	r1, r0
 80064ec:	4607      	mov	r7, r0
 80064ee:	9804      	ldr	r0, [sp, #16]
 80064f0:	f000 fb68 	bl	8006bc4 <__mcmp>
 80064f4:	2800      	cmp	r0, #0
 80064f6:	f73f adcc 	bgt.w	8006092 <_dtoa_r+0x48a>
 80064fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064fc:	465d      	mov	r5, fp
 80064fe:	ea6f 0a03 	mvn.w	sl, r3
 8006502:	f04f 0900 	mov.w	r9, #0
 8006506:	4639      	mov	r1, r7
 8006508:	4620      	mov	r0, r4
 800650a:	f000 f979 	bl	8006800 <_Bfree>
 800650e:	2e00      	cmp	r6, #0
 8006510:	f43f aeb7 	beq.w	8006282 <_dtoa_r+0x67a>
 8006514:	f1b9 0f00 	cmp.w	r9, #0
 8006518:	d005      	beq.n	8006526 <_dtoa_r+0x91e>
 800651a:	45b1      	cmp	r9, r6
 800651c:	d003      	beq.n	8006526 <_dtoa_r+0x91e>
 800651e:	4649      	mov	r1, r9
 8006520:	4620      	mov	r0, r4
 8006522:	f000 f96d 	bl	8006800 <_Bfree>
 8006526:	4631      	mov	r1, r6
 8006528:	4620      	mov	r0, r4
 800652a:	f000 f969 	bl	8006800 <_Bfree>
 800652e:	e6a8      	b.n	8006282 <_dtoa_r+0x67a>
 8006530:	2700      	movs	r7, #0
 8006532:	463e      	mov	r6, r7
 8006534:	e7e1      	b.n	80064fa <_dtoa_r+0x8f2>
 8006536:	f8dd a020 	ldr.w	sl, [sp, #32]
 800653a:	463e      	mov	r6, r7
 800653c:	e5a9      	b.n	8006092 <_dtoa_r+0x48a>
 800653e:	bf00      	nop
 8006540:	40240000 	.word	0x40240000
 8006544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006546:	f8cd 9008 	str.w	r9, [sp, #8]
 800654a:	2b00      	cmp	r3, #0
 800654c:	f000 80fa 	beq.w	8006744 <_dtoa_r+0xb3c>
 8006550:	2d00      	cmp	r5, #0
 8006552:	dd05      	ble.n	8006560 <_dtoa_r+0x958>
 8006554:	4631      	mov	r1, r6
 8006556:	462a      	mov	r2, r5
 8006558:	4620      	mov	r0, r4
 800655a:	f000 fadf 	bl	8006b1c <__lshift>
 800655e:	4606      	mov	r6, r0
 8006560:	9b07      	ldr	r3, [sp, #28]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d04c      	beq.n	8006600 <_dtoa_r+0x9f8>
 8006566:	6871      	ldr	r1, [r6, #4]
 8006568:	4620      	mov	r0, r4
 800656a:	f000 f915 	bl	8006798 <_Balloc>
 800656e:	6932      	ldr	r2, [r6, #16]
 8006570:	3202      	adds	r2, #2
 8006572:	4605      	mov	r5, r0
 8006574:	0092      	lsls	r2, r2, #2
 8006576:	f106 010c 	add.w	r1, r6, #12
 800657a:	300c      	adds	r0, #12
 800657c:	f7fe fd60 	bl	8005040 <memcpy>
 8006580:	2201      	movs	r2, #1
 8006582:	4629      	mov	r1, r5
 8006584:	4620      	mov	r0, r4
 8006586:	f000 fac9 	bl	8006b1c <__lshift>
 800658a:	9b00      	ldr	r3, [sp, #0]
 800658c:	f8cd b014 	str.w	fp, [sp, #20]
 8006590:	f003 0301 	and.w	r3, r3, #1
 8006594:	46b1      	mov	r9, r6
 8006596:	9307      	str	r3, [sp, #28]
 8006598:	4606      	mov	r6, r0
 800659a:	4639      	mov	r1, r7
 800659c:	9804      	ldr	r0, [sp, #16]
 800659e:	f7ff faa4 	bl	8005aea <quorem>
 80065a2:	4649      	mov	r1, r9
 80065a4:	4605      	mov	r5, r0
 80065a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80065aa:	9804      	ldr	r0, [sp, #16]
 80065ac:	f000 fb0a 	bl	8006bc4 <__mcmp>
 80065b0:	4632      	mov	r2, r6
 80065b2:	9000      	str	r0, [sp, #0]
 80065b4:	4639      	mov	r1, r7
 80065b6:	4620      	mov	r0, r4
 80065b8:	f000 fb1e 	bl	8006bf8 <__mdiff>
 80065bc:	68c3      	ldr	r3, [r0, #12]
 80065be:	4602      	mov	r2, r0
 80065c0:	bb03      	cbnz	r3, 8006604 <_dtoa_r+0x9fc>
 80065c2:	4601      	mov	r1, r0
 80065c4:	9008      	str	r0, [sp, #32]
 80065c6:	9804      	ldr	r0, [sp, #16]
 80065c8:	f000 fafc 	bl	8006bc4 <__mcmp>
 80065cc:	9a08      	ldr	r2, [sp, #32]
 80065ce:	4603      	mov	r3, r0
 80065d0:	4611      	mov	r1, r2
 80065d2:	4620      	mov	r0, r4
 80065d4:	9308      	str	r3, [sp, #32]
 80065d6:	f000 f913 	bl	8006800 <_Bfree>
 80065da:	9b08      	ldr	r3, [sp, #32]
 80065dc:	b9a3      	cbnz	r3, 8006608 <_dtoa_r+0xa00>
 80065de:	9a06      	ldr	r2, [sp, #24]
 80065e0:	b992      	cbnz	r2, 8006608 <_dtoa_r+0xa00>
 80065e2:	9a07      	ldr	r2, [sp, #28]
 80065e4:	b982      	cbnz	r2, 8006608 <_dtoa_r+0xa00>
 80065e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80065ea:	d029      	beq.n	8006640 <_dtoa_r+0xa38>
 80065ec:	9b00      	ldr	r3, [sp, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	dd01      	ble.n	80065f6 <_dtoa_r+0x9ee>
 80065f2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80065f6:	9b05      	ldr	r3, [sp, #20]
 80065f8:	1c5d      	adds	r5, r3, #1
 80065fa:	f883 8000 	strb.w	r8, [r3]
 80065fe:	e782      	b.n	8006506 <_dtoa_r+0x8fe>
 8006600:	4630      	mov	r0, r6
 8006602:	e7c2      	b.n	800658a <_dtoa_r+0x982>
 8006604:	2301      	movs	r3, #1
 8006606:	e7e3      	b.n	80065d0 <_dtoa_r+0x9c8>
 8006608:	9a00      	ldr	r2, [sp, #0]
 800660a:	2a00      	cmp	r2, #0
 800660c:	db04      	blt.n	8006618 <_dtoa_r+0xa10>
 800660e:	d125      	bne.n	800665c <_dtoa_r+0xa54>
 8006610:	9a06      	ldr	r2, [sp, #24]
 8006612:	bb1a      	cbnz	r2, 800665c <_dtoa_r+0xa54>
 8006614:	9a07      	ldr	r2, [sp, #28]
 8006616:	bb0a      	cbnz	r2, 800665c <_dtoa_r+0xa54>
 8006618:	2b00      	cmp	r3, #0
 800661a:	ddec      	ble.n	80065f6 <_dtoa_r+0x9ee>
 800661c:	2201      	movs	r2, #1
 800661e:	9904      	ldr	r1, [sp, #16]
 8006620:	4620      	mov	r0, r4
 8006622:	f000 fa7b 	bl	8006b1c <__lshift>
 8006626:	4639      	mov	r1, r7
 8006628:	9004      	str	r0, [sp, #16]
 800662a:	f000 facb 	bl	8006bc4 <__mcmp>
 800662e:	2800      	cmp	r0, #0
 8006630:	dc03      	bgt.n	800663a <_dtoa_r+0xa32>
 8006632:	d1e0      	bne.n	80065f6 <_dtoa_r+0x9ee>
 8006634:	f018 0f01 	tst.w	r8, #1
 8006638:	d0dd      	beq.n	80065f6 <_dtoa_r+0x9ee>
 800663a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800663e:	d1d8      	bne.n	80065f2 <_dtoa_r+0x9ea>
 8006640:	9b05      	ldr	r3, [sp, #20]
 8006642:	9a05      	ldr	r2, [sp, #20]
 8006644:	1c5d      	adds	r5, r3, #1
 8006646:	2339      	movs	r3, #57	; 0x39
 8006648:	7013      	strb	r3, [r2, #0]
 800664a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800664e:	2b39      	cmp	r3, #57	; 0x39
 8006650:	f105 32ff 	add.w	r2, r5, #4294967295
 8006654:	d04f      	beq.n	80066f6 <_dtoa_r+0xaee>
 8006656:	3301      	adds	r3, #1
 8006658:	7013      	strb	r3, [r2, #0]
 800665a:	e754      	b.n	8006506 <_dtoa_r+0x8fe>
 800665c:	9a05      	ldr	r2, [sp, #20]
 800665e:	2b00      	cmp	r3, #0
 8006660:	f102 0501 	add.w	r5, r2, #1
 8006664:	dd06      	ble.n	8006674 <_dtoa_r+0xa6c>
 8006666:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800666a:	d0e9      	beq.n	8006640 <_dtoa_r+0xa38>
 800666c:	f108 0801 	add.w	r8, r8, #1
 8006670:	9b05      	ldr	r3, [sp, #20]
 8006672:	e7c2      	b.n	80065fa <_dtoa_r+0x9f2>
 8006674:	9a02      	ldr	r2, [sp, #8]
 8006676:	f805 8c01 	strb.w	r8, [r5, #-1]
 800667a:	eba5 030b 	sub.w	r3, r5, fp
 800667e:	4293      	cmp	r3, r2
 8006680:	d021      	beq.n	80066c6 <_dtoa_r+0xabe>
 8006682:	2300      	movs	r3, #0
 8006684:	220a      	movs	r2, #10
 8006686:	9904      	ldr	r1, [sp, #16]
 8006688:	4620      	mov	r0, r4
 800668a:	f000 f8d0 	bl	800682e <__multadd>
 800668e:	45b1      	cmp	r9, r6
 8006690:	9004      	str	r0, [sp, #16]
 8006692:	f04f 0300 	mov.w	r3, #0
 8006696:	f04f 020a 	mov.w	r2, #10
 800669a:	4649      	mov	r1, r9
 800669c:	4620      	mov	r0, r4
 800669e:	d105      	bne.n	80066ac <_dtoa_r+0xaa4>
 80066a0:	f000 f8c5 	bl	800682e <__multadd>
 80066a4:	4681      	mov	r9, r0
 80066a6:	4606      	mov	r6, r0
 80066a8:	9505      	str	r5, [sp, #20]
 80066aa:	e776      	b.n	800659a <_dtoa_r+0x992>
 80066ac:	f000 f8bf 	bl	800682e <__multadd>
 80066b0:	4631      	mov	r1, r6
 80066b2:	4681      	mov	r9, r0
 80066b4:	2300      	movs	r3, #0
 80066b6:	220a      	movs	r2, #10
 80066b8:	4620      	mov	r0, r4
 80066ba:	f000 f8b8 	bl	800682e <__multadd>
 80066be:	4606      	mov	r6, r0
 80066c0:	e7f2      	b.n	80066a8 <_dtoa_r+0xaa0>
 80066c2:	f04f 0900 	mov.w	r9, #0
 80066c6:	2201      	movs	r2, #1
 80066c8:	9904      	ldr	r1, [sp, #16]
 80066ca:	4620      	mov	r0, r4
 80066cc:	f000 fa26 	bl	8006b1c <__lshift>
 80066d0:	4639      	mov	r1, r7
 80066d2:	9004      	str	r0, [sp, #16]
 80066d4:	f000 fa76 	bl	8006bc4 <__mcmp>
 80066d8:	2800      	cmp	r0, #0
 80066da:	dcb6      	bgt.n	800664a <_dtoa_r+0xa42>
 80066dc:	d102      	bne.n	80066e4 <_dtoa_r+0xadc>
 80066de:	f018 0f01 	tst.w	r8, #1
 80066e2:	d1b2      	bne.n	800664a <_dtoa_r+0xa42>
 80066e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80066e8:	2b30      	cmp	r3, #48	; 0x30
 80066ea:	f105 32ff 	add.w	r2, r5, #4294967295
 80066ee:	f47f af0a 	bne.w	8006506 <_dtoa_r+0x8fe>
 80066f2:	4615      	mov	r5, r2
 80066f4:	e7f6      	b.n	80066e4 <_dtoa_r+0xadc>
 80066f6:	4593      	cmp	fp, r2
 80066f8:	d105      	bne.n	8006706 <_dtoa_r+0xafe>
 80066fa:	2331      	movs	r3, #49	; 0x31
 80066fc:	f10a 0a01 	add.w	sl, sl, #1
 8006700:	f88b 3000 	strb.w	r3, [fp]
 8006704:	e6ff      	b.n	8006506 <_dtoa_r+0x8fe>
 8006706:	4615      	mov	r5, r2
 8006708:	e79f      	b.n	800664a <_dtoa_r+0xa42>
 800670a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006770 <_dtoa_r+0xb68>
 800670e:	e007      	b.n	8006720 <_dtoa_r+0xb18>
 8006710:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006712:	f8df b060 	ldr.w	fp, [pc, #96]	; 8006774 <_dtoa_r+0xb6c>
 8006716:	b11b      	cbz	r3, 8006720 <_dtoa_r+0xb18>
 8006718:	f10b 0308 	add.w	r3, fp, #8
 800671c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800671e:	6013      	str	r3, [r2, #0]
 8006720:	4658      	mov	r0, fp
 8006722:	b017      	add	sp, #92	; 0x5c
 8006724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006728:	9b06      	ldr	r3, [sp, #24]
 800672a:	2b01      	cmp	r3, #1
 800672c:	f77f ae35 	ble.w	800639a <_dtoa_r+0x792>
 8006730:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006732:	9307      	str	r3, [sp, #28]
 8006734:	e649      	b.n	80063ca <_dtoa_r+0x7c2>
 8006736:	9b02      	ldr	r3, [sp, #8]
 8006738:	2b00      	cmp	r3, #0
 800673a:	dc03      	bgt.n	8006744 <_dtoa_r+0xb3c>
 800673c:	9b06      	ldr	r3, [sp, #24]
 800673e:	2b02      	cmp	r3, #2
 8006740:	f73f aecc 	bgt.w	80064dc <_dtoa_r+0x8d4>
 8006744:	465d      	mov	r5, fp
 8006746:	4639      	mov	r1, r7
 8006748:	9804      	ldr	r0, [sp, #16]
 800674a:	f7ff f9ce 	bl	8005aea <quorem>
 800674e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006752:	f805 8b01 	strb.w	r8, [r5], #1
 8006756:	9a02      	ldr	r2, [sp, #8]
 8006758:	eba5 030b 	sub.w	r3, r5, fp
 800675c:	429a      	cmp	r2, r3
 800675e:	ddb0      	ble.n	80066c2 <_dtoa_r+0xaba>
 8006760:	2300      	movs	r3, #0
 8006762:	220a      	movs	r2, #10
 8006764:	9904      	ldr	r1, [sp, #16]
 8006766:	4620      	mov	r0, r4
 8006768:	f000 f861 	bl	800682e <__multadd>
 800676c:	9004      	str	r0, [sp, #16]
 800676e:	e7ea      	b.n	8006746 <_dtoa_r+0xb3e>
 8006770:	080170f6 	.word	0x080170f6
 8006774:	0801721b 	.word	0x0801721b

08006778 <_localeconv_r>:
 8006778:	4b04      	ldr	r3, [pc, #16]	; (800678c <_localeconv_r+0x14>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	6a18      	ldr	r0, [r3, #32]
 800677e:	4b04      	ldr	r3, [pc, #16]	; (8006790 <_localeconv_r+0x18>)
 8006780:	2800      	cmp	r0, #0
 8006782:	bf08      	it	eq
 8006784:	4618      	moveq	r0, r3
 8006786:	30f0      	adds	r0, #240	; 0xf0
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	20000014 	.word	0x20000014
 8006790:	20000078 	.word	0x20000078

08006794 <__malloc_lock>:
 8006794:	4770      	bx	lr

08006796 <__malloc_unlock>:
 8006796:	4770      	bx	lr

08006798 <_Balloc>:
 8006798:	b570      	push	{r4, r5, r6, lr}
 800679a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800679c:	4604      	mov	r4, r0
 800679e:	460e      	mov	r6, r1
 80067a0:	b93d      	cbnz	r5, 80067b2 <_Balloc+0x1a>
 80067a2:	2010      	movs	r0, #16
 80067a4:	f7fe fc32 	bl	800500c <malloc>
 80067a8:	6260      	str	r0, [r4, #36]	; 0x24
 80067aa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80067ae:	6005      	str	r5, [r0, #0]
 80067b0:	60c5      	str	r5, [r0, #12]
 80067b2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80067b4:	68eb      	ldr	r3, [r5, #12]
 80067b6:	b183      	cbz	r3, 80067da <_Balloc+0x42>
 80067b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80067c0:	b9b8      	cbnz	r0, 80067f2 <_Balloc+0x5a>
 80067c2:	2101      	movs	r1, #1
 80067c4:	fa01 f506 	lsl.w	r5, r1, r6
 80067c8:	1d6a      	adds	r2, r5, #5
 80067ca:	0092      	lsls	r2, r2, #2
 80067cc:	4620      	mov	r0, r4
 80067ce:	f000 fabf 	bl	8006d50 <_calloc_r>
 80067d2:	b160      	cbz	r0, 80067ee <_Balloc+0x56>
 80067d4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80067d8:	e00e      	b.n	80067f8 <_Balloc+0x60>
 80067da:	2221      	movs	r2, #33	; 0x21
 80067dc:	2104      	movs	r1, #4
 80067de:	4620      	mov	r0, r4
 80067e0:	f000 fab6 	bl	8006d50 <_calloc_r>
 80067e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067e6:	60e8      	str	r0, [r5, #12]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1e4      	bne.n	80067b8 <_Balloc+0x20>
 80067ee:	2000      	movs	r0, #0
 80067f0:	bd70      	pop	{r4, r5, r6, pc}
 80067f2:	6802      	ldr	r2, [r0, #0]
 80067f4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80067f8:	2300      	movs	r3, #0
 80067fa:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80067fe:	e7f7      	b.n	80067f0 <_Balloc+0x58>

08006800 <_Bfree>:
 8006800:	b570      	push	{r4, r5, r6, lr}
 8006802:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006804:	4606      	mov	r6, r0
 8006806:	460d      	mov	r5, r1
 8006808:	b93c      	cbnz	r4, 800681a <_Bfree+0x1a>
 800680a:	2010      	movs	r0, #16
 800680c:	f7fe fbfe 	bl	800500c <malloc>
 8006810:	6270      	str	r0, [r6, #36]	; 0x24
 8006812:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006816:	6004      	str	r4, [r0, #0]
 8006818:	60c4      	str	r4, [r0, #12]
 800681a:	b13d      	cbz	r5, 800682c <_Bfree+0x2c>
 800681c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800681e:	686a      	ldr	r2, [r5, #4]
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006826:	6029      	str	r1, [r5, #0]
 8006828:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800682c:	bd70      	pop	{r4, r5, r6, pc}

0800682e <__multadd>:
 800682e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006832:	690d      	ldr	r5, [r1, #16]
 8006834:	461f      	mov	r7, r3
 8006836:	4606      	mov	r6, r0
 8006838:	460c      	mov	r4, r1
 800683a:	f101 0c14 	add.w	ip, r1, #20
 800683e:	2300      	movs	r3, #0
 8006840:	f8dc 0000 	ldr.w	r0, [ip]
 8006844:	b281      	uxth	r1, r0
 8006846:	fb02 7101 	mla	r1, r2, r1, r7
 800684a:	0c0f      	lsrs	r7, r1, #16
 800684c:	0c00      	lsrs	r0, r0, #16
 800684e:	fb02 7000 	mla	r0, r2, r0, r7
 8006852:	b289      	uxth	r1, r1
 8006854:	3301      	adds	r3, #1
 8006856:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800685a:	429d      	cmp	r5, r3
 800685c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006860:	f84c 1b04 	str.w	r1, [ip], #4
 8006864:	dcec      	bgt.n	8006840 <__multadd+0x12>
 8006866:	b1d7      	cbz	r7, 800689e <__multadd+0x70>
 8006868:	68a3      	ldr	r3, [r4, #8]
 800686a:	42ab      	cmp	r3, r5
 800686c:	dc12      	bgt.n	8006894 <__multadd+0x66>
 800686e:	6861      	ldr	r1, [r4, #4]
 8006870:	4630      	mov	r0, r6
 8006872:	3101      	adds	r1, #1
 8006874:	f7ff ff90 	bl	8006798 <_Balloc>
 8006878:	6922      	ldr	r2, [r4, #16]
 800687a:	3202      	adds	r2, #2
 800687c:	f104 010c 	add.w	r1, r4, #12
 8006880:	4680      	mov	r8, r0
 8006882:	0092      	lsls	r2, r2, #2
 8006884:	300c      	adds	r0, #12
 8006886:	f7fe fbdb 	bl	8005040 <memcpy>
 800688a:	4621      	mov	r1, r4
 800688c:	4630      	mov	r0, r6
 800688e:	f7ff ffb7 	bl	8006800 <_Bfree>
 8006892:	4644      	mov	r4, r8
 8006894:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006898:	3501      	adds	r5, #1
 800689a:	615f      	str	r7, [r3, #20]
 800689c:	6125      	str	r5, [r4, #16]
 800689e:	4620      	mov	r0, r4
 80068a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080068a4 <__hi0bits>:
 80068a4:	0c02      	lsrs	r2, r0, #16
 80068a6:	0412      	lsls	r2, r2, #16
 80068a8:	4603      	mov	r3, r0
 80068aa:	b9b2      	cbnz	r2, 80068da <__hi0bits+0x36>
 80068ac:	0403      	lsls	r3, r0, #16
 80068ae:	2010      	movs	r0, #16
 80068b0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80068b4:	bf04      	itt	eq
 80068b6:	021b      	lsleq	r3, r3, #8
 80068b8:	3008      	addeq	r0, #8
 80068ba:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80068be:	bf04      	itt	eq
 80068c0:	011b      	lsleq	r3, r3, #4
 80068c2:	3004      	addeq	r0, #4
 80068c4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80068c8:	bf04      	itt	eq
 80068ca:	009b      	lsleq	r3, r3, #2
 80068cc:	3002      	addeq	r0, #2
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	db06      	blt.n	80068e0 <__hi0bits+0x3c>
 80068d2:	005b      	lsls	r3, r3, #1
 80068d4:	d503      	bpl.n	80068de <__hi0bits+0x3a>
 80068d6:	3001      	adds	r0, #1
 80068d8:	4770      	bx	lr
 80068da:	2000      	movs	r0, #0
 80068dc:	e7e8      	b.n	80068b0 <__hi0bits+0xc>
 80068de:	2020      	movs	r0, #32
 80068e0:	4770      	bx	lr

080068e2 <__lo0bits>:
 80068e2:	6803      	ldr	r3, [r0, #0]
 80068e4:	f013 0207 	ands.w	r2, r3, #7
 80068e8:	4601      	mov	r1, r0
 80068ea:	d00b      	beq.n	8006904 <__lo0bits+0x22>
 80068ec:	07da      	lsls	r2, r3, #31
 80068ee:	d423      	bmi.n	8006938 <__lo0bits+0x56>
 80068f0:	0798      	lsls	r0, r3, #30
 80068f2:	bf49      	itett	mi
 80068f4:	085b      	lsrmi	r3, r3, #1
 80068f6:	089b      	lsrpl	r3, r3, #2
 80068f8:	2001      	movmi	r0, #1
 80068fa:	600b      	strmi	r3, [r1, #0]
 80068fc:	bf5c      	itt	pl
 80068fe:	600b      	strpl	r3, [r1, #0]
 8006900:	2002      	movpl	r0, #2
 8006902:	4770      	bx	lr
 8006904:	b298      	uxth	r0, r3
 8006906:	b9a8      	cbnz	r0, 8006934 <__lo0bits+0x52>
 8006908:	0c1b      	lsrs	r3, r3, #16
 800690a:	2010      	movs	r0, #16
 800690c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006910:	bf04      	itt	eq
 8006912:	0a1b      	lsreq	r3, r3, #8
 8006914:	3008      	addeq	r0, #8
 8006916:	071a      	lsls	r2, r3, #28
 8006918:	bf04      	itt	eq
 800691a:	091b      	lsreq	r3, r3, #4
 800691c:	3004      	addeq	r0, #4
 800691e:	079a      	lsls	r2, r3, #30
 8006920:	bf04      	itt	eq
 8006922:	089b      	lsreq	r3, r3, #2
 8006924:	3002      	addeq	r0, #2
 8006926:	07da      	lsls	r2, r3, #31
 8006928:	d402      	bmi.n	8006930 <__lo0bits+0x4e>
 800692a:	085b      	lsrs	r3, r3, #1
 800692c:	d006      	beq.n	800693c <__lo0bits+0x5a>
 800692e:	3001      	adds	r0, #1
 8006930:	600b      	str	r3, [r1, #0]
 8006932:	4770      	bx	lr
 8006934:	4610      	mov	r0, r2
 8006936:	e7e9      	b.n	800690c <__lo0bits+0x2a>
 8006938:	2000      	movs	r0, #0
 800693a:	4770      	bx	lr
 800693c:	2020      	movs	r0, #32
 800693e:	4770      	bx	lr

08006940 <__i2b>:
 8006940:	b510      	push	{r4, lr}
 8006942:	460c      	mov	r4, r1
 8006944:	2101      	movs	r1, #1
 8006946:	f7ff ff27 	bl	8006798 <_Balloc>
 800694a:	2201      	movs	r2, #1
 800694c:	6144      	str	r4, [r0, #20]
 800694e:	6102      	str	r2, [r0, #16]
 8006950:	bd10      	pop	{r4, pc}

08006952 <__multiply>:
 8006952:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006956:	4614      	mov	r4, r2
 8006958:	690a      	ldr	r2, [r1, #16]
 800695a:	6923      	ldr	r3, [r4, #16]
 800695c:	429a      	cmp	r2, r3
 800695e:	bfb8      	it	lt
 8006960:	460b      	movlt	r3, r1
 8006962:	4688      	mov	r8, r1
 8006964:	bfbc      	itt	lt
 8006966:	46a0      	movlt	r8, r4
 8006968:	461c      	movlt	r4, r3
 800696a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800696e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006972:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006976:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800697a:	eb07 0609 	add.w	r6, r7, r9
 800697e:	42b3      	cmp	r3, r6
 8006980:	bfb8      	it	lt
 8006982:	3101      	addlt	r1, #1
 8006984:	f7ff ff08 	bl	8006798 <_Balloc>
 8006988:	f100 0514 	add.w	r5, r0, #20
 800698c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006990:	462b      	mov	r3, r5
 8006992:	2200      	movs	r2, #0
 8006994:	4573      	cmp	r3, lr
 8006996:	d316      	bcc.n	80069c6 <__multiply+0x74>
 8006998:	f104 0214 	add.w	r2, r4, #20
 800699c:	f108 0114 	add.w	r1, r8, #20
 80069a0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80069a4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80069a8:	9300      	str	r3, [sp, #0]
 80069aa:	9b00      	ldr	r3, [sp, #0]
 80069ac:	9201      	str	r2, [sp, #4]
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d80c      	bhi.n	80069cc <__multiply+0x7a>
 80069b2:	2e00      	cmp	r6, #0
 80069b4:	dd03      	ble.n	80069be <__multiply+0x6c>
 80069b6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d05d      	beq.n	8006a7a <__multiply+0x128>
 80069be:	6106      	str	r6, [r0, #16]
 80069c0:	b003      	add	sp, #12
 80069c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069c6:	f843 2b04 	str.w	r2, [r3], #4
 80069ca:	e7e3      	b.n	8006994 <__multiply+0x42>
 80069cc:	f8b2 b000 	ldrh.w	fp, [r2]
 80069d0:	f1bb 0f00 	cmp.w	fp, #0
 80069d4:	d023      	beq.n	8006a1e <__multiply+0xcc>
 80069d6:	4689      	mov	r9, r1
 80069d8:	46ac      	mov	ip, r5
 80069da:	f04f 0800 	mov.w	r8, #0
 80069de:	f859 4b04 	ldr.w	r4, [r9], #4
 80069e2:	f8dc a000 	ldr.w	sl, [ip]
 80069e6:	b2a3      	uxth	r3, r4
 80069e8:	fa1f fa8a 	uxth.w	sl, sl
 80069ec:	fb0b a303 	mla	r3, fp, r3, sl
 80069f0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80069f4:	f8dc 4000 	ldr.w	r4, [ip]
 80069f8:	4443      	add	r3, r8
 80069fa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80069fe:	fb0b 840a 	mla	r4, fp, sl, r8
 8006a02:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006a06:	46e2      	mov	sl, ip
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006a0e:	454f      	cmp	r7, r9
 8006a10:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006a14:	f84a 3b04 	str.w	r3, [sl], #4
 8006a18:	d82b      	bhi.n	8006a72 <__multiply+0x120>
 8006a1a:	f8cc 8004 	str.w	r8, [ip, #4]
 8006a1e:	9b01      	ldr	r3, [sp, #4]
 8006a20:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006a24:	3204      	adds	r2, #4
 8006a26:	f1ba 0f00 	cmp.w	sl, #0
 8006a2a:	d020      	beq.n	8006a6e <__multiply+0x11c>
 8006a2c:	682b      	ldr	r3, [r5, #0]
 8006a2e:	4689      	mov	r9, r1
 8006a30:	46a8      	mov	r8, r5
 8006a32:	f04f 0b00 	mov.w	fp, #0
 8006a36:	f8b9 c000 	ldrh.w	ip, [r9]
 8006a3a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006a3e:	fb0a 440c 	mla	r4, sl, ip, r4
 8006a42:	445c      	add	r4, fp
 8006a44:	46c4      	mov	ip, r8
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006a4c:	f84c 3b04 	str.w	r3, [ip], #4
 8006a50:	f859 3b04 	ldr.w	r3, [r9], #4
 8006a54:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006a58:	0c1b      	lsrs	r3, r3, #16
 8006a5a:	fb0a b303 	mla	r3, sl, r3, fp
 8006a5e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006a62:	454f      	cmp	r7, r9
 8006a64:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006a68:	d805      	bhi.n	8006a76 <__multiply+0x124>
 8006a6a:	f8c8 3004 	str.w	r3, [r8, #4]
 8006a6e:	3504      	adds	r5, #4
 8006a70:	e79b      	b.n	80069aa <__multiply+0x58>
 8006a72:	46d4      	mov	ip, sl
 8006a74:	e7b3      	b.n	80069de <__multiply+0x8c>
 8006a76:	46e0      	mov	r8, ip
 8006a78:	e7dd      	b.n	8006a36 <__multiply+0xe4>
 8006a7a:	3e01      	subs	r6, #1
 8006a7c:	e799      	b.n	80069b2 <__multiply+0x60>
	...

08006a80 <__pow5mult>:
 8006a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a84:	4615      	mov	r5, r2
 8006a86:	f012 0203 	ands.w	r2, r2, #3
 8006a8a:	4606      	mov	r6, r0
 8006a8c:	460f      	mov	r7, r1
 8006a8e:	d007      	beq.n	8006aa0 <__pow5mult+0x20>
 8006a90:	3a01      	subs	r2, #1
 8006a92:	4c21      	ldr	r4, [pc, #132]	; (8006b18 <__pow5mult+0x98>)
 8006a94:	2300      	movs	r3, #0
 8006a96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006a9a:	f7ff fec8 	bl	800682e <__multadd>
 8006a9e:	4607      	mov	r7, r0
 8006aa0:	10ad      	asrs	r5, r5, #2
 8006aa2:	d035      	beq.n	8006b10 <__pow5mult+0x90>
 8006aa4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006aa6:	b93c      	cbnz	r4, 8006ab8 <__pow5mult+0x38>
 8006aa8:	2010      	movs	r0, #16
 8006aaa:	f7fe faaf 	bl	800500c <malloc>
 8006aae:	6270      	str	r0, [r6, #36]	; 0x24
 8006ab0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ab4:	6004      	str	r4, [r0, #0]
 8006ab6:	60c4      	str	r4, [r0, #12]
 8006ab8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006abc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006ac0:	b94c      	cbnz	r4, 8006ad6 <__pow5mult+0x56>
 8006ac2:	f240 2171 	movw	r1, #625	; 0x271
 8006ac6:	4630      	mov	r0, r6
 8006ac8:	f7ff ff3a 	bl	8006940 <__i2b>
 8006acc:	2300      	movs	r3, #0
 8006ace:	f8c8 0008 	str.w	r0, [r8, #8]
 8006ad2:	4604      	mov	r4, r0
 8006ad4:	6003      	str	r3, [r0, #0]
 8006ad6:	f04f 0800 	mov.w	r8, #0
 8006ada:	07eb      	lsls	r3, r5, #31
 8006adc:	d50a      	bpl.n	8006af4 <__pow5mult+0x74>
 8006ade:	4639      	mov	r1, r7
 8006ae0:	4622      	mov	r2, r4
 8006ae2:	4630      	mov	r0, r6
 8006ae4:	f7ff ff35 	bl	8006952 <__multiply>
 8006ae8:	4639      	mov	r1, r7
 8006aea:	4681      	mov	r9, r0
 8006aec:	4630      	mov	r0, r6
 8006aee:	f7ff fe87 	bl	8006800 <_Bfree>
 8006af2:	464f      	mov	r7, r9
 8006af4:	106d      	asrs	r5, r5, #1
 8006af6:	d00b      	beq.n	8006b10 <__pow5mult+0x90>
 8006af8:	6820      	ldr	r0, [r4, #0]
 8006afa:	b938      	cbnz	r0, 8006b0c <__pow5mult+0x8c>
 8006afc:	4622      	mov	r2, r4
 8006afe:	4621      	mov	r1, r4
 8006b00:	4630      	mov	r0, r6
 8006b02:	f7ff ff26 	bl	8006952 <__multiply>
 8006b06:	6020      	str	r0, [r4, #0]
 8006b08:	f8c0 8000 	str.w	r8, [r0]
 8006b0c:	4604      	mov	r4, r0
 8006b0e:	e7e4      	b.n	8006ada <__pow5mult+0x5a>
 8006b10:	4638      	mov	r0, r7
 8006b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b16:	bf00      	nop
 8006b18:	08017318 	.word	0x08017318

08006b1c <__lshift>:
 8006b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b20:	460c      	mov	r4, r1
 8006b22:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006b26:	6923      	ldr	r3, [r4, #16]
 8006b28:	6849      	ldr	r1, [r1, #4]
 8006b2a:	eb0a 0903 	add.w	r9, sl, r3
 8006b2e:	68a3      	ldr	r3, [r4, #8]
 8006b30:	4607      	mov	r7, r0
 8006b32:	4616      	mov	r6, r2
 8006b34:	f109 0501 	add.w	r5, r9, #1
 8006b38:	42ab      	cmp	r3, r5
 8006b3a:	db32      	blt.n	8006ba2 <__lshift+0x86>
 8006b3c:	4638      	mov	r0, r7
 8006b3e:	f7ff fe2b 	bl	8006798 <_Balloc>
 8006b42:	2300      	movs	r3, #0
 8006b44:	4680      	mov	r8, r0
 8006b46:	f100 0114 	add.w	r1, r0, #20
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	4553      	cmp	r3, sl
 8006b4e:	db2b      	blt.n	8006ba8 <__lshift+0x8c>
 8006b50:	6920      	ldr	r0, [r4, #16]
 8006b52:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006b56:	f104 0314 	add.w	r3, r4, #20
 8006b5a:	f016 021f 	ands.w	r2, r6, #31
 8006b5e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006b62:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006b66:	d025      	beq.n	8006bb4 <__lshift+0x98>
 8006b68:	f1c2 0e20 	rsb	lr, r2, #32
 8006b6c:	2000      	movs	r0, #0
 8006b6e:	681e      	ldr	r6, [r3, #0]
 8006b70:	468a      	mov	sl, r1
 8006b72:	4096      	lsls	r6, r2
 8006b74:	4330      	orrs	r0, r6
 8006b76:	f84a 0b04 	str.w	r0, [sl], #4
 8006b7a:	f853 0b04 	ldr.w	r0, [r3], #4
 8006b7e:	459c      	cmp	ip, r3
 8006b80:	fa20 f00e 	lsr.w	r0, r0, lr
 8006b84:	d814      	bhi.n	8006bb0 <__lshift+0x94>
 8006b86:	6048      	str	r0, [r1, #4]
 8006b88:	b108      	cbz	r0, 8006b8e <__lshift+0x72>
 8006b8a:	f109 0502 	add.w	r5, r9, #2
 8006b8e:	3d01      	subs	r5, #1
 8006b90:	4638      	mov	r0, r7
 8006b92:	f8c8 5010 	str.w	r5, [r8, #16]
 8006b96:	4621      	mov	r1, r4
 8006b98:	f7ff fe32 	bl	8006800 <_Bfree>
 8006b9c:	4640      	mov	r0, r8
 8006b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ba2:	3101      	adds	r1, #1
 8006ba4:	005b      	lsls	r3, r3, #1
 8006ba6:	e7c7      	b.n	8006b38 <__lshift+0x1c>
 8006ba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006bac:	3301      	adds	r3, #1
 8006bae:	e7cd      	b.n	8006b4c <__lshift+0x30>
 8006bb0:	4651      	mov	r1, sl
 8006bb2:	e7dc      	b.n	8006b6e <__lshift+0x52>
 8006bb4:	3904      	subs	r1, #4
 8006bb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bba:	f841 2f04 	str.w	r2, [r1, #4]!
 8006bbe:	459c      	cmp	ip, r3
 8006bc0:	d8f9      	bhi.n	8006bb6 <__lshift+0x9a>
 8006bc2:	e7e4      	b.n	8006b8e <__lshift+0x72>

08006bc4 <__mcmp>:
 8006bc4:	6903      	ldr	r3, [r0, #16]
 8006bc6:	690a      	ldr	r2, [r1, #16]
 8006bc8:	1a9b      	subs	r3, r3, r2
 8006bca:	b530      	push	{r4, r5, lr}
 8006bcc:	d10c      	bne.n	8006be8 <__mcmp+0x24>
 8006bce:	0092      	lsls	r2, r2, #2
 8006bd0:	3014      	adds	r0, #20
 8006bd2:	3114      	adds	r1, #20
 8006bd4:	1884      	adds	r4, r0, r2
 8006bd6:	4411      	add	r1, r2
 8006bd8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006bdc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006be0:	4295      	cmp	r5, r2
 8006be2:	d003      	beq.n	8006bec <__mcmp+0x28>
 8006be4:	d305      	bcc.n	8006bf2 <__mcmp+0x2e>
 8006be6:	2301      	movs	r3, #1
 8006be8:	4618      	mov	r0, r3
 8006bea:	bd30      	pop	{r4, r5, pc}
 8006bec:	42a0      	cmp	r0, r4
 8006bee:	d3f3      	bcc.n	8006bd8 <__mcmp+0x14>
 8006bf0:	e7fa      	b.n	8006be8 <__mcmp+0x24>
 8006bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8006bf6:	e7f7      	b.n	8006be8 <__mcmp+0x24>

08006bf8 <__mdiff>:
 8006bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bfc:	460d      	mov	r5, r1
 8006bfe:	4607      	mov	r7, r0
 8006c00:	4611      	mov	r1, r2
 8006c02:	4628      	mov	r0, r5
 8006c04:	4614      	mov	r4, r2
 8006c06:	f7ff ffdd 	bl	8006bc4 <__mcmp>
 8006c0a:	1e06      	subs	r6, r0, #0
 8006c0c:	d108      	bne.n	8006c20 <__mdiff+0x28>
 8006c0e:	4631      	mov	r1, r6
 8006c10:	4638      	mov	r0, r7
 8006c12:	f7ff fdc1 	bl	8006798 <_Balloc>
 8006c16:	2301      	movs	r3, #1
 8006c18:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c20:	bfa4      	itt	ge
 8006c22:	4623      	movge	r3, r4
 8006c24:	462c      	movge	r4, r5
 8006c26:	4638      	mov	r0, r7
 8006c28:	6861      	ldr	r1, [r4, #4]
 8006c2a:	bfa6      	itte	ge
 8006c2c:	461d      	movge	r5, r3
 8006c2e:	2600      	movge	r6, #0
 8006c30:	2601      	movlt	r6, #1
 8006c32:	f7ff fdb1 	bl	8006798 <_Balloc>
 8006c36:	692b      	ldr	r3, [r5, #16]
 8006c38:	60c6      	str	r6, [r0, #12]
 8006c3a:	6926      	ldr	r6, [r4, #16]
 8006c3c:	f105 0914 	add.w	r9, r5, #20
 8006c40:	f104 0214 	add.w	r2, r4, #20
 8006c44:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006c48:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006c4c:	f100 0514 	add.w	r5, r0, #20
 8006c50:	f04f 0e00 	mov.w	lr, #0
 8006c54:	f852 ab04 	ldr.w	sl, [r2], #4
 8006c58:	f859 4b04 	ldr.w	r4, [r9], #4
 8006c5c:	fa1e f18a 	uxtah	r1, lr, sl
 8006c60:	b2a3      	uxth	r3, r4
 8006c62:	1ac9      	subs	r1, r1, r3
 8006c64:	0c23      	lsrs	r3, r4, #16
 8006c66:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8006c6a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006c6e:	b289      	uxth	r1, r1
 8006c70:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006c74:	45c8      	cmp	r8, r9
 8006c76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006c7a:	4694      	mov	ip, r2
 8006c7c:	f845 3b04 	str.w	r3, [r5], #4
 8006c80:	d8e8      	bhi.n	8006c54 <__mdiff+0x5c>
 8006c82:	45bc      	cmp	ip, r7
 8006c84:	d304      	bcc.n	8006c90 <__mdiff+0x98>
 8006c86:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006c8a:	b183      	cbz	r3, 8006cae <__mdiff+0xb6>
 8006c8c:	6106      	str	r6, [r0, #16]
 8006c8e:	e7c5      	b.n	8006c1c <__mdiff+0x24>
 8006c90:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006c94:	fa1e f381 	uxtah	r3, lr, r1
 8006c98:	141a      	asrs	r2, r3, #16
 8006c9a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ca4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006ca8:	f845 3b04 	str.w	r3, [r5], #4
 8006cac:	e7e9      	b.n	8006c82 <__mdiff+0x8a>
 8006cae:	3e01      	subs	r6, #1
 8006cb0:	e7e9      	b.n	8006c86 <__mdiff+0x8e>

08006cb2 <__d2b>:
 8006cb2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006cb6:	460e      	mov	r6, r1
 8006cb8:	2101      	movs	r1, #1
 8006cba:	ec59 8b10 	vmov	r8, r9, d0
 8006cbe:	4615      	mov	r5, r2
 8006cc0:	f7ff fd6a 	bl	8006798 <_Balloc>
 8006cc4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006cc8:	4607      	mov	r7, r0
 8006cca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006cce:	bb34      	cbnz	r4, 8006d1e <__d2b+0x6c>
 8006cd0:	9301      	str	r3, [sp, #4]
 8006cd2:	f1b8 0300 	subs.w	r3, r8, #0
 8006cd6:	d027      	beq.n	8006d28 <__d2b+0x76>
 8006cd8:	a802      	add	r0, sp, #8
 8006cda:	f840 3d08 	str.w	r3, [r0, #-8]!
 8006cde:	f7ff fe00 	bl	80068e2 <__lo0bits>
 8006ce2:	9900      	ldr	r1, [sp, #0]
 8006ce4:	b1f0      	cbz	r0, 8006d24 <__d2b+0x72>
 8006ce6:	9a01      	ldr	r2, [sp, #4]
 8006ce8:	f1c0 0320 	rsb	r3, r0, #32
 8006cec:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf0:	430b      	orrs	r3, r1
 8006cf2:	40c2      	lsrs	r2, r0
 8006cf4:	617b      	str	r3, [r7, #20]
 8006cf6:	9201      	str	r2, [sp, #4]
 8006cf8:	9b01      	ldr	r3, [sp, #4]
 8006cfa:	61bb      	str	r3, [r7, #24]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	bf14      	ite	ne
 8006d00:	2102      	movne	r1, #2
 8006d02:	2101      	moveq	r1, #1
 8006d04:	6139      	str	r1, [r7, #16]
 8006d06:	b1c4      	cbz	r4, 8006d3a <__d2b+0x88>
 8006d08:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006d0c:	4404      	add	r4, r0
 8006d0e:	6034      	str	r4, [r6, #0]
 8006d10:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006d14:	6028      	str	r0, [r5, #0]
 8006d16:	4638      	mov	r0, r7
 8006d18:	b003      	add	sp, #12
 8006d1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d22:	e7d5      	b.n	8006cd0 <__d2b+0x1e>
 8006d24:	6179      	str	r1, [r7, #20]
 8006d26:	e7e7      	b.n	8006cf8 <__d2b+0x46>
 8006d28:	a801      	add	r0, sp, #4
 8006d2a:	f7ff fdda 	bl	80068e2 <__lo0bits>
 8006d2e:	9b01      	ldr	r3, [sp, #4]
 8006d30:	617b      	str	r3, [r7, #20]
 8006d32:	2101      	movs	r1, #1
 8006d34:	6139      	str	r1, [r7, #16]
 8006d36:	3020      	adds	r0, #32
 8006d38:	e7e5      	b.n	8006d06 <__d2b+0x54>
 8006d3a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006d3e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006d42:	6030      	str	r0, [r6, #0]
 8006d44:	6918      	ldr	r0, [r3, #16]
 8006d46:	f7ff fdad 	bl	80068a4 <__hi0bits>
 8006d4a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006d4e:	e7e1      	b.n	8006d14 <__d2b+0x62>

08006d50 <_calloc_r>:
 8006d50:	b538      	push	{r3, r4, r5, lr}
 8006d52:	fb02 f401 	mul.w	r4, r2, r1
 8006d56:	4621      	mov	r1, r4
 8006d58:	f7fe f9d4 	bl	8005104 <_malloc_r>
 8006d5c:	4605      	mov	r5, r0
 8006d5e:	b118      	cbz	r0, 8006d68 <_calloc_r+0x18>
 8006d60:	4622      	mov	r2, r4
 8006d62:	2100      	movs	r1, #0
 8006d64:	f7fe f977 	bl	8005056 <memset>
 8006d68:	4628      	mov	r0, r5
 8006d6a:	bd38      	pop	{r3, r4, r5, pc}

08006d6c <__ssputs_r>:
 8006d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d70:	688e      	ldr	r6, [r1, #8]
 8006d72:	429e      	cmp	r6, r3
 8006d74:	4682      	mov	sl, r0
 8006d76:	460c      	mov	r4, r1
 8006d78:	4690      	mov	r8, r2
 8006d7a:	4699      	mov	r9, r3
 8006d7c:	d837      	bhi.n	8006dee <__ssputs_r+0x82>
 8006d7e:	898a      	ldrh	r2, [r1, #12]
 8006d80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006d84:	d031      	beq.n	8006dea <__ssputs_r+0x7e>
 8006d86:	6825      	ldr	r5, [r4, #0]
 8006d88:	6909      	ldr	r1, [r1, #16]
 8006d8a:	1a6f      	subs	r7, r5, r1
 8006d8c:	6965      	ldr	r5, [r4, #20]
 8006d8e:	2302      	movs	r3, #2
 8006d90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d94:	fb95 f5f3 	sdiv	r5, r5, r3
 8006d98:	f109 0301 	add.w	r3, r9, #1
 8006d9c:	443b      	add	r3, r7
 8006d9e:	429d      	cmp	r5, r3
 8006da0:	bf38      	it	cc
 8006da2:	461d      	movcc	r5, r3
 8006da4:	0553      	lsls	r3, r2, #21
 8006da6:	d530      	bpl.n	8006e0a <__ssputs_r+0x9e>
 8006da8:	4629      	mov	r1, r5
 8006daa:	f7fe f9ab 	bl	8005104 <_malloc_r>
 8006dae:	4606      	mov	r6, r0
 8006db0:	b950      	cbnz	r0, 8006dc8 <__ssputs_r+0x5c>
 8006db2:	230c      	movs	r3, #12
 8006db4:	f8ca 3000 	str.w	r3, [sl]
 8006db8:	89a3      	ldrh	r3, [r4, #12]
 8006dba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dbe:	81a3      	strh	r3, [r4, #12]
 8006dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8006dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dc8:	463a      	mov	r2, r7
 8006dca:	6921      	ldr	r1, [r4, #16]
 8006dcc:	f7fe f938 	bl	8005040 <memcpy>
 8006dd0:	89a3      	ldrh	r3, [r4, #12]
 8006dd2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006dd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dda:	81a3      	strh	r3, [r4, #12]
 8006ddc:	6126      	str	r6, [r4, #16]
 8006dde:	6165      	str	r5, [r4, #20]
 8006de0:	443e      	add	r6, r7
 8006de2:	1bed      	subs	r5, r5, r7
 8006de4:	6026      	str	r6, [r4, #0]
 8006de6:	60a5      	str	r5, [r4, #8]
 8006de8:	464e      	mov	r6, r9
 8006dea:	454e      	cmp	r6, r9
 8006dec:	d900      	bls.n	8006df0 <__ssputs_r+0x84>
 8006dee:	464e      	mov	r6, r9
 8006df0:	4632      	mov	r2, r6
 8006df2:	4641      	mov	r1, r8
 8006df4:	6820      	ldr	r0, [r4, #0]
 8006df6:	f000 f90b 	bl	8007010 <memmove>
 8006dfa:	68a3      	ldr	r3, [r4, #8]
 8006dfc:	1b9b      	subs	r3, r3, r6
 8006dfe:	60a3      	str	r3, [r4, #8]
 8006e00:	6823      	ldr	r3, [r4, #0]
 8006e02:	441e      	add	r6, r3
 8006e04:	6026      	str	r6, [r4, #0]
 8006e06:	2000      	movs	r0, #0
 8006e08:	e7dc      	b.n	8006dc4 <__ssputs_r+0x58>
 8006e0a:	462a      	mov	r2, r5
 8006e0c:	f000 f919 	bl	8007042 <_realloc_r>
 8006e10:	4606      	mov	r6, r0
 8006e12:	2800      	cmp	r0, #0
 8006e14:	d1e2      	bne.n	8006ddc <__ssputs_r+0x70>
 8006e16:	6921      	ldr	r1, [r4, #16]
 8006e18:	4650      	mov	r0, sl
 8006e1a:	f7fe f925 	bl	8005068 <_free_r>
 8006e1e:	e7c8      	b.n	8006db2 <__ssputs_r+0x46>

08006e20 <_svfiprintf_r>:
 8006e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e24:	461d      	mov	r5, r3
 8006e26:	898b      	ldrh	r3, [r1, #12]
 8006e28:	061f      	lsls	r7, r3, #24
 8006e2a:	b09d      	sub	sp, #116	; 0x74
 8006e2c:	4680      	mov	r8, r0
 8006e2e:	460c      	mov	r4, r1
 8006e30:	4616      	mov	r6, r2
 8006e32:	d50f      	bpl.n	8006e54 <_svfiprintf_r+0x34>
 8006e34:	690b      	ldr	r3, [r1, #16]
 8006e36:	b96b      	cbnz	r3, 8006e54 <_svfiprintf_r+0x34>
 8006e38:	2140      	movs	r1, #64	; 0x40
 8006e3a:	f7fe f963 	bl	8005104 <_malloc_r>
 8006e3e:	6020      	str	r0, [r4, #0]
 8006e40:	6120      	str	r0, [r4, #16]
 8006e42:	b928      	cbnz	r0, 8006e50 <_svfiprintf_r+0x30>
 8006e44:	230c      	movs	r3, #12
 8006e46:	f8c8 3000 	str.w	r3, [r8]
 8006e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e4e:	e0c8      	b.n	8006fe2 <_svfiprintf_r+0x1c2>
 8006e50:	2340      	movs	r3, #64	; 0x40
 8006e52:	6163      	str	r3, [r4, #20]
 8006e54:	2300      	movs	r3, #0
 8006e56:	9309      	str	r3, [sp, #36]	; 0x24
 8006e58:	2320      	movs	r3, #32
 8006e5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e5e:	2330      	movs	r3, #48	; 0x30
 8006e60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e64:	9503      	str	r5, [sp, #12]
 8006e66:	f04f 0b01 	mov.w	fp, #1
 8006e6a:	4637      	mov	r7, r6
 8006e6c:	463d      	mov	r5, r7
 8006e6e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006e72:	b10b      	cbz	r3, 8006e78 <_svfiprintf_r+0x58>
 8006e74:	2b25      	cmp	r3, #37	; 0x25
 8006e76:	d13e      	bne.n	8006ef6 <_svfiprintf_r+0xd6>
 8006e78:	ebb7 0a06 	subs.w	sl, r7, r6
 8006e7c:	d00b      	beq.n	8006e96 <_svfiprintf_r+0x76>
 8006e7e:	4653      	mov	r3, sl
 8006e80:	4632      	mov	r2, r6
 8006e82:	4621      	mov	r1, r4
 8006e84:	4640      	mov	r0, r8
 8006e86:	f7ff ff71 	bl	8006d6c <__ssputs_r>
 8006e8a:	3001      	adds	r0, #1
 8006e8c:	f000 80a4 	beq.w	8006fd8 <_svfiprintf_r+0x1b8>
 8006e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e92:	4453      	add	r3, sl
 8006e94:	9309      	str	r3, [sp, #36]	; 0x24
 8006e96:	783b      	ldrb	r3, [r7, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f000 809d 	beq.w	8006fd8 <_svfiprintf_r+0x1b8>
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ea4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ea8:	9304      	str	r3, [sp, #16]
 8006eaa:	9307      	str	r3, [sp, #28]
 8006eac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006eb0:	931a      	str	r3, [sp, #104]	; 0x68
 8006eb2:	462f      	mov	r7, r5
 8006eb4:	2205      	movs	r2, #5
 8006eb6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006eba:	4850      	ldr	r0, [pc, #320]	; (8006ffc <_svfiprintf_r+0x1dc>)
 8006ebc:	f7f9 f9a8 	bl	8000210 <memchr>
 8006ec0:	9b04      	ldr	r3, [sp, #16]
 8006ec2:	b9d0      	cbnz	r0, 8006efa <_svfiprintf_r+0xda>
 8006ec4:	06d9      	lsls	r1, r3, #27
 8006ec6:	bf44      	itt	mi
 8006ec8:	2220      	movmi	r2, #32
 8006eca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006ece:	071a      	lsls	r2, r3, #28
 8006ed0:	bf44      	itt	mi
 8006ed2:	222b      	movmi	r2, #43	; 0x2b
 8006ed4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006ed8:	782a      	ldrb	r2, [r5, #0]
 8006eda:	2a2a      	cmp	r2, #42	; 0x2a
 8006edc:	d015      	beq.n	8006f0a <_svfiprintf_r+0xea>
 8006ede:	9a07      	ldr	r2, [sp, #28]
 8006ee0:	462f      	mov	r7, r5
 8006ee2:	2000      	movs	r0, #0
 8006ee4:	250a      	movs	r5, #10
 8006ee6:	4639      	mov	r1, r7
 8006ee8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006eec:	3b30      	subs	r3, #48	; 0x30
 8006eee:	2b09      	cmp	r3, #9
 8006ef0:	d94d      	bls.n	8006f8e <_svfiprintf_r+0x16e>
 8006ef2:	b1b8      	cbz	r0, 8006f24 <_svfiprintf_r+0x104>
 8006ef4:	e00f      	b.n	8006f16 <_svfiprintf_r+0xf6>
 8006ef6:	462f      	mov	r7, r5
 8006ef8:	e7b8      	b.n	8006e6c <_svfiprintf_r+0x4c>
 8006efa:	4a40      	ldr	r2, [pc, #256]	; (8006ffc <_svfiprintf_r+0x1dc>)
 8006efc:	1a80      	subs	r0, r0, r2
 8006efe:	fa0b f000 	lsl.w	r0, fp, r0
 8006f02:	4318      	orrs	r0, r3
 8006f04:	9004      	str	r0, [sp, #16]
 8006f06:	463d      	mov	r5, r7
 8006f08:	e7d3      	b.n	8006eb2 <_svfiprintf_r+0x92>
 8006f0a:	9a03      	ldr	r2, [sp, #12]
 8006f0c:	1d11      	adds	r1, r2, #4
 8006f0e:	6812      	ldr	r2, [r2, #0]
 8006f10:	9103      	str	r1, [sp, #12]
 8006f12:	2a00      	cmp	r2, #0
 8006f14:	db01      	blt.n	8006f1a <_svfiprintf_r+0xfa>
 8006f16:	9207      	str	r2, [sp, #28]
 8006f18:	e004      	b.n	8006f24 <_svfiprintf_r+0x104>
 8006f1a:	4252      	negs	r2, r2
 8006f1c:	f043 0302 	orr.w	r3, r3, #2
 8006f20:	9207      	str	r2, [sp, #28]
 8006f22:	9304      	str	r3, [sp, #16]
 8006f24:	783b      	ldrb	r3, [r7, #0]
 8006f26:	2b2e      	cmp	r3, #46	; 0x2e
 8006f28:	d10c      	bne.n	8006f44 <_svfiprintf_r+0x124>
 8006f2a:	787b      	ldrb	r3, [r7, #1]
 8006f2c:	2b2a      	cmp	r3, #42	; 0x2a
 8006f2e:	d133      	bne.n	8006f98 <_svfiprintf_r+0x178>
 8006f30:	9b03      	ldr	r3, [sp, #12]
 8006f32:	1d1a      	adds	r2, r3, #4
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	9203      	str	r2, [sp, #12]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	bfb8      	it	lt
 8006f3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f40:	3702      	adds	r7, #2
 8006f42:	9305      	str	r3, [sp, #20]
 8006f44:	4d2e      	ldr	r5, [pc, #184]	; (8007000 <_svfiprintf_r+0x1e0>)
 8006f46:	7839      	ldrb	r1, [r7, #0]
 8006f48:	2203      	movs	r2, #3
 8006f4a:	4628      	mov	r0, r5
 8006f4c:	f7f9 f960 	bl	8000210 <memchr>
 8006f50:	b138      	cbz	r0, 8006f62 <_svfiprintf_r+0x142>
 8006f52:	2340      	movs	r3, #64	; 0x40
 8006f54:	1b40      	subs	r0, r0, r5
 8006f56:	fa03 f000 	lsl.w	r0, r3, r0
 8006f5a:	9b04      	ldr	r3, [sp, #16]
 8006f5c:	4303      	orrs	r3, r0
 8006f5e:	3701      	adds	r7, #1
 8006f60:	9304      	str	r3, [sp, #16]
 8006f62:	7839      	ldrb	r1, [r7, #0]
 8006f64:	4827      	ldr	r0, [pc, #156]	; (8007004 <_svfiprintf_r+0x1e4>)
 8006f66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f6a:	2206      	movs	r2, #6
 8006f6c:	1c7e      	adds	r6, r7, #1
 8006f6e:	f7f9 f94f 	bl	8000210 <memchr>
 8006f72:	2800      	cmp	r0, #0
 8006f74:	d038      	beq.n	8006fe8 <_svfiprintf_r+0x1c8>
 8006f76:	4b24      	ldr	r3, [pc, #144]	; (8007008 <_svfiprintf_r+0x1e8>)
 8006f78:	bb13      	cbnz	r3, 8006fc0 <_svfiprintf_r+0x1a0>
 8006f7a:	9b03      	ldr	r3, [sp, #12]
 8006f7c:	3307      	adds	r3, #7
 8006f7e:	f023 0307 	bic.w	r3, r3, #7
 8006f82:	3308      	adds	r3, #8
 8006f84:	9303      	str	r3, [sp, #12]
 8006f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f88:	444b      	add	r3, r9
 8006f8a:	9309      	str	r3, [sp, #36]	; 0x24
 8006f8c:	e76d      	b.n	8006e6a <_svfiprintf_r+0x4a>
 8006f8e:	fb05 3202 	mla	r2, r5, r2, r3
 8006f92:	2001      	movs	r0, #1
 8006f94:	460f      	mov	r7, r1
 8006f96:	e7a6      	b.n	8006ee6 <_svfiprintf_r+0xc6>
 8006f98:	2300      	movs	r3, #0
 8006f9a:	3701      	adds	r7, #1
 8006f9c:	9305      	str	r3, [sp, #20]
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	250a      	movs	r5, #10
 8006fa2:	4638      	mov	r0, r7
 8006fa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fa8:	3a30      	subs	r2, #48	; 0x30
 8006faa:	2a09      	cmp	r2, #9
 8006fac:	d903      	bls.n	8006fb6 <_svfiprintf_r+0x196>
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d0c8      	beq.n	8006f44 <_svfiprintf_r+0x124>
 8006fb2:	9105      	str	r1, [sp, #20]
 8006fb4:	e7c6      	b.n	8006f44 <_svfiprintf_r+0x124>
 8006fb6:	fb05 2101 	mla	r1, r5, r1, r2
 8006fba:	2301      	movs	r3, #1
 8006fbc:	4607      	mov	r7, r0
 8006fbe:	e7f0      	b.n	8006fa2 <_svfiprintf_r+0x182>
 8006fc0:	ab03      	add	r3, sp, #12
 8006fc2:	9300      	str	r3, [sp, #0]
 8006fc4:	4622      	mov	r2, r4
 8006fc6:	4b11      	ldr	r3, [pc, #68]	; (800700c <_svfiprintf_r+0x1ec>)
 8006fc8:	a904      	add	r1, sp, #16
 8006fca:	4640      	mov	r0, r8
 8006fcc:	f7fe f988 	bl	80052e0 <_printf_float>
 8006fd0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006fd4:	4681      	mov	r9, r0
 8006fd6:	d1d6      	bne.n	8006f86 <_svfiprintf_r+0x166>
 8006fd8:	89a3      	ldrh	r3, [r4, #12]
 8006fda:	065b      	lsls	r3, r3, #25
 8006fdc:	f53f af35 	bmi.w	8006e4a <_svfiprintf_r+0x2a>
 8006fe0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006fe2:	b01d      	add	sp, #116	; 0x74
 8006fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fe8:	ab03      	add	r3, sp, #12
 8006fea:	9300      	str	r3, [sp, #0]
 8006fec:	4622      	mov	r2, r4
 8006fee:	4b07      	ldr	r3, [pc, #28]	; (800700c <_svfiprintf_r+0x1ec>)
 8006ff0:	a904      	add	r1, sp, #16
 8006ff2:	4640      	mov	r0, r8
 8006ff4:	f7fe fc2a 	bl	800584c <_printf_i>
 8006ff8:	e7ea      	b.n	8006fd0 <_svfiprintf_r+0x1b0>
 8006ffa:	bf00      	nop
 8006ffc:	08017324 	.word	0x08017324
 8007000:	0801732a 	.word	0x0801732a
 8007004:	0801732e 	.word	0x0801732e
 8007008:	080052e1 	.word	0x080052e1
 800700c:	08006d6d 	.word	0x08006d6d

08007010 <memmove>:
 8007010:	4288      	cmp	r0, r1
 8007012:	b510      	push	{r4, lr}
 8007014:	eb01 0302 	add.w	r3, r1, r2
 8007018:	d807      	bhi.n	800702a <memmove+0x1a>
 800701a:	1e42      	subs	r2, r0, #1
 800701c:	4299      	cmp	r1, r3
 800701e:	d00a      	beq.n	8007036 <memmove+0x26>
 8007020:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007024:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007028:	e7f8      	b.n	800701c <memmove+0xc>
 800702a:	4283      	cmp	r3, r0
 800702c:	d9f5      	bls.n	800701a <memmove+0xa>
 800702e:	1881      	adds	r1, r0, r2
 8007030:	1ad2      	subs	r2, r2, r3
 8007032:	42d3      	cmn	r3, r2
 8007034:	d100      	bne.n	8007038 <memmove+0x28>
 8007036:	bd10      	pop	{r4, pc}
 8007038:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800703c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007040:	e7f7      	b.n	8007032 <memmove+0x22>

08007042 <_realloc_r>:
 8007042:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007044:	4607      	mov	r7, r0
 8007046:	4614      	mov	r4, r2
 8007048:	460e      	mov	r6, r1
 800704a:	b921      	cbnz	r1, 8007056 <_realloc_r+0x14>
 800704c:	4611      	mov	r1, r2
 800704e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007052:	f7fe b857 	b.w	8005104 <_malloc_r>
 8007056:	b922      	cbnz	r2, 8007062 <_realloc_r+0x20>
 8007058:	f7fe f806 	bl	8005068 <_free_r>
 800705c:	4625      	mov	r5, r4
 800705e:	4628      	mov	r0, r5
 8007060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007062:	f000 f814 	bl	800708e <_malloc_usable_size_r>
 8007066:	42a0      	cmp	r0, r4
 8007068:	d20f      	bcs.n	800708a <_realloc_r+0x48>
 800706a:	4621      	mov	r1, r4
 800706c:	4638      	mov	r0, r7
 800706e:	f7fe f849 	bl	8005104 <_malloc_r>
 8007072:	4605      	mov	r5, r0
 8007074:	2800      	cmp	r0, #0
 8007076:	d0f2      	beq.n	800705e <_realloc_r+0x1c>
 8007078:	4631      	mov	r1, r6
 800707a:	4622      	mov	r2, r4
 800707c:	f7fd ffe0 	bl	8005040 <memcpy>
 8007080:	4631      	mov	r1, r6
 8007082:	4638      	mov	r0, r7
 8007084:	f7fd fff0 	bl	8005068 <_free_r>
 8007088:	e7e9      	b.n	800705e <_realloc_r+0x1c>
 800708a:	4635      	mov	r5, r6
 800708c:	e7e7      	b.n	800705e <_realloc_r+0x1c>

0800708e <_malloc_usable_size_r>:
 800708e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007092:	1f18      	subs	r0, r3, #4
 8007094:	2b00      	cmp	r3, #0
 8007096:	bfbc      	itt	lt
 8007098:	580b      	ldrlt	r3, [r1, r0]
 800709a:	18c0      	addlt	r0, r0, r3
 800709c:	4770      	bx	lr
	...

080070a0 <_init>:
 80070a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070a2:	bf00      	nop
 80070a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070a6:	bc08      	pop	{r3}
 80070a8:	469e      	mov	lr, r3
 80070aa:	4770      	bx	lr

080070ac <_fini>:
 80070ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ae:	bf00      	nop
 80070b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070b2:	bc08      	pop	{r3}
 80070b4:	469e      	mov	lr, r3
 80070b6:	4770      	bx	lr
