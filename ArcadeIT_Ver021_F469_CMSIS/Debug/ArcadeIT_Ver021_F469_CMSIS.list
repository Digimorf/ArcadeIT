
ArcadeIT_Ver021_F469_CMSIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cbc  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000f268  08006e80  08006e80  00016e80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080160e8  080160e8  000301d8  2**0
                  CONTENTS
  4 .ARM          00000000  080160e8  080160e8  000301d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080160e8  080160e8  000301d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080160e8  080160e8  000260e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080160ec  080160ec  000260ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  080160f0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000056c  200001d8  080162c8  000301d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000744  080162c8  00030744  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000133fb  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002697  00000000  00000000  00043603  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000778  00000000  00000000  00045ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006c0  00000000  00000000  00046418  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002425f  00000000  00000000  00046ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a7c2  00000000  00000000  0006ad37  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bf081  00000000  00000000  000754f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013457a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f98  00000000  00000000  001345f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00008708  00000000  00000000  00136590  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08006e64 	.word	0x08006e64

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001dc 	.word	0x200001dc
 80001fc:	08006e64 	.word	0x08006e64

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <main>:
// /////////////////////////////////////////////////////////////////////////////
// "M A I N"   E N T R Y   P O I N T
// /////////////////////////////////////////////////////////////////////////////

int main(void)
{
 8000bd8:	b508      	push	{r3, lr}
  ArcadeIT_Test_Bench();
 8000bda:	f000 fa3e 	bl	800105a <ArcadeIT_Test_Bench>

  return 0;

} // End main.
 8000bde:	2000      	movs	r0, #0
 8000be0:	bd08      	pop	{r3, pc}

08000be2 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000be2:	4770      	bx	lr

08000be4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be4:	e7fe      	b.n	8000be4 <HardFault_Handler>

08000be6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be6:	e7fe      	b.n	8000be6 <MemManage_Handler>

08000be8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be8:	e7fe      	b.n	8000be8 <BusFault_Handler>

08000bea <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bea:	e7fe      	b.n	8000bea <UsageFault_Handler>

08000bec <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bec:	4770      	bx	lr

08000bee <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bee:	4770      	bx	lr

08000bf0 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bf0:	4770      	bx	lr

08000bf2 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000bf2:	b508      	push	{r3, lr}
 8000bf4:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000bf6:	f240 12f4 	movw	r2, #500	; 0x1f4
 8000bfa:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000bfe:	6812      	ldr	r2, [r2, #0]
 8000c00:	b172      	cbz	r2, 8000c20 <_sbrk+0x2e>
		heap_end = &end;

	prev_heap_end = heap_end;
 8000c02:	f240 12f4 	movw	r2, #500	; 0x1f4
 8000c06:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000c0a:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8000c0c:	4403      	add	r3, r0
 8000c0e:	466a      	mov	r2, sp
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d80f      	bhi.n	8000c34 <_sbrk+0x42>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8000c14:	f240 12f4 	movw	r2, #500	; 0x1f4
 8000c18:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000c1c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8000c1e:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8000c20:	f240 12f4 	movw	r2, #500	; 0x1f4
 8000c24:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000c28:	f240 7148 	movw	r1, #1864	; 0x748
 8000c2c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8000c30:	6011      	str	r1, [r2, #0]
 8000c32:	e7e6      	b.n	8000c02 <_sbrk+0x10>
		errno = ENOMEM;
 8000c34:	f004 f89e 	bl	8004d74 <__errno>
 8000c38:	230c      	movs	r3, #12
 8000c3a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	e7ed      	b.n	8000c1e <_sbrk+0x2c>
	...

08000c44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c7c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c48:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c4a:	e003      	b.n	8000c54 <LoopCopyDataInit>

08000c4c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c4e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c50:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c52:	3104      	adds	r1, #4

08000c54 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c54:	480b      	ldr	r0, [pc, #44]	; (8000c84 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c56:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c58:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c5a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c5c:	d3f6      	bcc.n	8000c4c <CopyDataInit>
  ldr  r2, =_sbss
 8000c5e:	4a0b      	ldr	r2, [pc, #44]	; (8000c8c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c60:	e002      	b.n	8000c68 <LoopFillZerobss>

08000c62 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c62:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c64:	f842 3b04 	str.w	r3, [r2], #4

08000c68 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c68:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c6a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c6c:	d3f9      	bcc.n	8000c62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  ArcadeIT_System_Init//SystemInit
 8000c6e:	f000 f848 	bl	8000d02 <ArcadeIT_System_Init>
/* Call static constructors */
    bl __libc_init_array
 8000c72:	f004 f885 	bl	8004d80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c76:	f7ff ffaf 	bl	8000bd8 <main>
  bx  lr    
 8000c7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c7c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8000c80:	080160f0 	.word	0x080160f0
  ldr  r0, =_sdata
 8000c84:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c88:	200001d8 	.word	0x200001d8
  ldr  r2, =_sbss
 8000c8c:	200001d8 	.word	0x200001d8
  ldr  r3, = _ebss
 8000c90:	20000744 	.word	0x20000744

08000c94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c94:	e7fe      	b.n	8000c94 <ADC_IRQHandler>

08000c96 <ArcadeIT_SysTick_Init>:

} // end ArcadeIT_SysTick_Deinit

// -----------------------------------------------------------------------------
int ArcadeIT_SysTick_Init (void)
{
 8000c96:	b508      	push	{r3, lr}
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8000c98:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000c9c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000ca0:	f64b 721f 	movw	r2, #48927	; 0xbf1f
 8000ca4:	f2c0 0202 	movt	r2, #2
 8000ca8:	605a      	str	r2, [r3, #4]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000caa:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8000cae:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8000cb2:	21f0      	movs	r1, #240	; 0xf0
 8000cb4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000cb8:	2100      	movs	r1, #0
 8000cba:	6099      	str	r1, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cbc:	2107      	movs	r1, #7
 8000cbe:	6019      	str	r1, [r3, #0]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000cc0:	23c0      	movs	r3, #192	; 0xc0
 8000cc2:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
  lRetStatus = SysTick_Config(ARCADEIT_HCLKS_PER_MS);

  // Sets the priority of the interrupt
  NVIC_SetPriority (SysTick_IRQn, NVIC_SYSTICK_PRIORITY << 2);

  if (gDevices & ARCADEIT_DEVICE_SERIAL)
 8000cc6:	f240 13f8 	movw	r3, #504	; 0x1f8
 8000cca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8000cd4:	d101      	bne.n	8000cda <ArcadeIT_SysTick_Init+0x44>
  } // End if.

  // And return the status.
  return lRetStatus;

} // end ArcadeIT_SysTick_Init.
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	bd08      	pop	{r3, pc}
    ArcadeIT_Serial_Port_String_Send (TEXT_SYSTICK_INITED);
 8000cda:	f646 60a0 	movw	r0, #28320	; 0x6ea0
 8000cde:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000ce2:	f001 fa79 	bl	80021d8 <ArcadeIT_Serial_Port_String_Send>
 8000ce6:	e7f6      	b.n	8000cd6 <ArcadeIT_SysTick_Init+0x40>

08000ce8 <ArcadeIT_System_Delay>:
   * PARAMETERS:  See above.
   * RETURNS:     Nothing
   */

  // Get the parameter from the parameters pointer.
  gSystemTimer = pDelay;
 8000ce8:	f240 2308 	movw	r3, #520	; 0x208
 8000cec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000cf0:	6018      	str	r0, [r3, #0]
  while (gSystemTimer);
 8000cf2:	f240 2308 	movw	r3, #520	; 0x208
 8000cf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d1f8      	bne.n	8000cf2 <ArcadeIT_System_Delay+0xa>

} // end ArcadeIT_System_Delay.
 8000d00:	4770      	bx	lr

08000d02 <ArcadeIT_System_Init>:

// -----------------------------------------------------------------------------
void ArcadeIT_System_Init (void)
{
 8000d02:	b082      	sub	sp, #8
   * DESCRIPTION: This function initializes the core of the system
   * PARAMETERS:  None.
   * RETURNS:     Nothing.
   */

  __IO uint32_t lStartUpCounter = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	9301      	str	r3, [sp, #4]

  SCB->AIRCR = ((uint32_t)0x05FA0000) | NVIC_PriorityGroup_2; // Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup 2 value
 8000d08:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000d0c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000d10:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000d14:	f2c0 52fa 	movt	r2, #1530	; 0x5fa
 8000d18:	60da      	str	r2, [r3, #12]
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  // FPU settings: set CP10 and CP11 Full Access
 8000d1a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000d1e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000d22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET;     // Vector Table Relocation in Internal FLASH
 8000d26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d2a:	609a      	str	r2, [r3, #8]

  // In ArcadeIT PLL (clocked by HSE) is used as System clock source
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000d2c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000d30:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000d3a:	601a      	str	r2, [r3, #0]

  // Wait till HSE is ready and if Time out is reached exit
  while(((RCC->CR & RCC_CR_HSERDY) == 0) && (++lStartUpCounter != HSE_STARTUP_TIMEOUT));
 8000d3c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000d40:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000d4a:	d108      	bne.n	8000d5e <ArcadeIT_System_Init+0x5c>
 8000d4c:	9b01      	ldr	r3, [sp, #4]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	9301      	str	r3, [sp, #4]
 8000d52:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8000d56:	f2c1 5275 	movt	r2, #5493	; 0x1575
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d1ee      	bne.n	8000d3c <ArcadeIT_System_Init+0x3a>

  if (RCC->CR & RCC_CR_HSERDY)
 8000d5e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000d62:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000d6c:	d066      	beq.n	8000e3c <ArcadeIT_System_Init+0x13a>
  {
    // Select regulator voltage output Scale 1 mode
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000d6e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000d72:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000d76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d78:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d7c:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000d7e:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8000d82:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8000d86:	6811      	ldr	r1, [r2, #0]
 8000d88:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8000d8c:	6011      	str	r1, [r2, #0]
    // HCLK = SYSCLK / 1
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000d8e:	689a      	ldr	r2, [r3, #8]
 8000d90:	609a      	str	r2, [r3, #8]
    // PCLK2 = HCLK / 2
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000d92:	689a      	ldr	r2, [r3, #8]
 8000d94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d98:	609a      	str	r2, [r3, #8]
    // PCLK1 = HCLK / 4
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4; // 0x00001400U
 8000d9a:	689a      	ldr	r2, [r3, #8]
 8000d9c:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8000da0:	609a      	str	r2, [r3, #8]
    // Configure the main PLL
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) - 1) << 16) | (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
 8000da2:	f642 5204 	movw	r2, #11524	; 0x2d04
 8000da6:	f2c0 7240 	movt	r2, #1856	; 0x740
 8000daa:	605a      	str	r2, [r3, #4]
    // Enable the main PLL
    RCC->CR |= RCC_CR_PLLON;
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000db2:	601a      	str	r2, [r3, #0]
    // Wait till the main PLL is ready
    while((RCC->CR & RCC_CR_PLLRDY) == 0) {}
 8000db4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000db8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000dc2:	d0f7      	beq.n	8000db4 <ArcadeIT_System_Init+0xb2>
    // Enable the Over-drive to extend the clock frequency to 180 Mhz
    PWR->CR |= PWR_CR_ODEN;
 8000dc4:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000dc8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000dd2:	601a      	str	r2, [r3, #0]
    while((PWR->CSR & PWR_CSR_ODRDY) == 0) {}
 8000dd4:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000dd8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000de2:	d0f7      	beq.n	8000dd4 <ArcadeIT_System_Init+0xd2>
    PWR->CR |= PWR_CR_ODSWEN;
 8000de4:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000de8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000df2:	601a      	str	r2, [r3, #0]
    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0) {}
 8000df4:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000df8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000e02:	d0f7      	beq.n	8000df4 <ArcadeIT_System_Init+0xf2>
    // Configure Flash prefetch, Instruction cache, Data cache and wait state
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000e04:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000e08:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e0c:	f240 7205 	movw	r2, #1797	; 0x705
 8000e10:	601a      	str	r2, [r3, #0]
    // Select the main PLL as system clock source
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000e12:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000e16:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e1a:	689a      	ldr	r2, [r3, #8]
 8000e1c:	f022 0203 	bic.w	r2, r2, #3
 8000e20:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000e22:	689a      	ldr	r2, [r3, #8]
 8000e24:	f042 0202 	orr.w	r2, r2, #2
 8000e28:	609a      	str	r2, [r3, #8]
    // Wait till the main PLL is used as system clock source
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL) {}
 8000e2a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000e2e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	f003 030c 	and.w	r3, r3, #12
 8000e38:	2b08      	cmp	r3, #8
 8000e3a:	d1f6      	bne.n	8000e2a <ArcadeIT_System_Init+0x128>
    // configuration. User can add here some code to deal with this error

  } // end if

  // HCLK counter, DWT struct is defined inside the core_cm4.h file
  DWT->CTRL |= 1;  // enable the counter
 8000e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e40:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	f042 0201 	orr.w	r2, r2, #1
 8000e4a:	601a      	str	r2, [r3, #0]
  DWT->CYCCNT = 0; // reset the counter
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	605a      	str	r2, [r3, #4]

} // end ArcadeIT_System_Init.
 8000e50:	b002      	add	sp, #8
 8000e52:	4770      	bx	lr

08000e54 <ArcadeIT_SysTick_Handler>:

} // end ArcadeIT_If_VBlank.

// -----------------------------------------------------------------------------
void ArcadeIT_SysTick_Handler (void)
{
 8000e54:	b508      	push	{r3, lr}
   * PARAMETERS:  TimeDivider: this is the number to divide the system clock by (i.e. 1000: MSec, 1000000: MicroSec... ).
   * RETURNS:     Nothing
   */

  // Decrement timers synchronized to the MCU in ms.
  gSystemTick++;
 8000e56:	f240 2304 	movw	r3, #516	; 0x204
 8000e5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	3201      	adds	r2, #1
 8000e62:	601a      	str	r2, [r3, #0]

  if (gSecondaryTimer > 0)
 8000e64:	f240 13fc 	movw	r3, #508	; 0x1fc
 8000e68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	b133      	cbz	r3, 8000e7e <ArcadeIT_SysTick_Handler+0x2a>
    gSecondaryTimer--;
 8000e70:	f240 13fc 	movw	r3, #508	; 0x1fc
 8000e74:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	3a01      	subs	r2, #1
 8000e7c:	601a      	str	r2, [r3, #0]

  if (gSystemTimer > 0)
 8000e7e:	f240 2308 	movw	r3, #520	; 0x208
 8000e82:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	b133      	cbz	r3, 8000e98 <ArcadeIT_SysTick_Handler+0x44>
    gSystemTimer--;
 8000e8a:	f240 2308 	movw	r3, #520	; 0x208
 8000e8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	3a01      	subs	r2, #1
 8000e96:	601a      	str	r2, [r3, #0]

  // Run the tasks scheduler.
  if (gUnits & ARCADEIT_UNIT_SCHEDULER)
 8000e98:	f240 230c 	movw	r3, #524	; 0x20c
 8000e9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000ea6:	d100      	bne.n	8000eaa <ArcadeIT_SysTick_Handler+0x56>
  {
      ArcadeIT_Scheduler_Update();

  } // End if.

} // end ArcadeIT_SysTick_Handler.
 8000ea8:	bd08      	pop	{r3, pc}
      ArcadeIT_Scheduler_Update();
 8000eaa:	f001 fbfe 	bl	80026aa <ArcadeIT_Scheduler_Update>
} // end ArcadeIT_SysTick_Handler.
 8000eae:	e7fb      	b.n	8000ea8 <ArcadeIT_SysTick_Handler+0x54>

08000eb0 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000eb0:	b508      	push	{r3, lr}
  ArcadeIT_SysTick_Handler();
 8000eb2:	f7ff ffcf 	bl	8000e54 <ArcadeIT_SysTick_Handler>

} // End SysTick_Handler.
 8000eb6:	bd08      	pop	{r3, pc}

08000eb8 <ArcadeIT_ArcadeIT_Start>:

} // end ArcadeIT_PowerUP_Systems

// /////////////////////////////////////////////////////////////////////////////
void ArcadeIT_ArcadeIT_Start (void)
{
 8000eb8:	b500      	push	{lr}
 8000eba:	b0c1      	sub	sp, #260	; 0x104
   */

  char lString[256];

  // ---------------------------------------------------------------------------
  if (gDevices & ARCADEIT_DEVICE_SERIAL)
 8000ebc:	f240 13f8 	movw	r3, #504	; 0x1f8
 8000ec0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8000eca:	d145      	bne.n	8000f58 <ArcadeIT_ArcadeIT_Start+0xa0>

  } // End if.
  // ---------------------------------------------------------------------------
  // Clock and timer system. Thjis must be called before the SD card initialization.
  // 1ms System Tick timer.
  ArcadeIT_SysTick_Init();
 8000ecc:	f7ff fee3 	bl	8000c96 <ArcadeIT_SysTick_Init>

  // ---------------------------------------------------------------------------
  if (gDevices & ARCADEIT_DEVICE_TESTPADS)
 8000ed0:	f240 13f8 	movw	r3, #504	; 0x1f8
 8000ed4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000ede:	d140      	bne.n	8000f62 <ArcadeIT_ArcadeIT_Start+0xaa>
    //ArcadeIT_TestPad_Init (RCC_MCO2Source_PLLCLK, RCC_MCO2Div_4); // 45 MHz
    //ArcadeIT_TestPad_Init (RCC_MCO2Source_HSE, RCC_MCO2Div_1);    //  8 MHz

  } // End if.
  // ---------------------------------------------------------------------------
  if (gDevices & ARCADEIT_DEVICE_STATUSLED)
 8000ee0:	f240 13f8 	movw	r3, #504	; 0x1f8
 8000ee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000eee:	d13e      	bne.n	8000f6e <ArcadeIT_ArcadeIT_Start+0xb6>
    ArcadeIT_Status_LEDS_Init();

  } // End if.
  // ---------------------------------------------------------------------------
  // Time and date system.
  if (gUnits & ARCADEIT_UNIT_RTC)
 8000ef0:	f240 230c 	movw	r3, #524	; 0x20c
 8000ef4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f013 0f01 	tst.w	r3, #1
 8000efe:	d139      	bne.n	8000f74 <ArcadeIT_ArcadeIT_Start+0xbc>

    } // End if.
  // ---------------------------------------------------------------------------
  // Systems scheduler task. This must be set AFTER the Systick has been initialized
  // because uses the ISR function that is handled by the Systick.
  if (gUnits & ARCADEIT_UNIT_SCHEDULER)
 8000f00:	f240 230c 	movw	r3, #524	; 0x20c
 8000f04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000f0e:	d134      	bne.n	8000f7a <ArcadeIT_ArcadeIT_Start+0xc2>
    ArcadeIT_Scheduler_Task_Init();

  } // End if.
  // ---------------------------------------------------------------------------
  // Start the SPI Port
  if (gDevices & ARCADEIT_DEVICE_SPI1)
 8000f10:	f240 13f8 	movw	r3, #504	; 0x1f8
 8000f14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f013 0f10 	tst.w	r3, #16
 8000f1e:	d12f      	bne.n	8000f80 <ArcadeIT_ArcadeIT_Start+0xc8>
  {
    ArcadeIT_SPI_Port_Init (SPI_FREQ_45_00_MHz);

  } // End if.
  // ---------------------------------------------------------------------------
  if (gDevices & ARCADEIT_DEVICE_I2C)
 8000f20:	f240 13f8 	movw	r3, #504	; 0x1f8
 8000f24:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f013 0f20 	tst.w	r3, #32
 8000f2e:	d12b      	bne.n	8000f88 <ArcadeIT_ArcadeIT_Start+0xd0>
    ArcadeIT_I2C_Port_Init(I2C_100kHz);

  } // End if.
  // ---------------------------------------------------------------------------
  // Storage systems
  if (gStorage & (ARCADEIT_STORAGE_RAM_DISK | ARCADEIT_STORAGE_SD_CARD_SPI1))
 8000f30:	f240 2300 	movw	r3, #512	; 0x200
 8000f34:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f013 0f03 	tst.w	r3, #3
 8000f3e:	d002      	beq.n	8000f46 <ArcadeIT_ArcadeIT_Start+0x8e>
  {
    FRESULT lValue;

    if (gStorage & ARCADEIT_STORAGE_SD_CARD_SPI1)
 8000f40:	f013 0f02 	tst.w	r3, #2
 8000f44:	d127      	bne.n	8000f96 <ArcadeIT_ArcadeIT_Start+0xde>
    } // End if.

  } // End if.

  // ---------------------------------------------------------------------------
  ArcadeIT_Serial_Port_String_Send(CURSOR_NEWLINE);
 8000f46:	f646 70ac 	movw	r0, #28588	; 0x6fac
 8000f4a:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000f4e:	f001 f943 	bl	80021d8 <ArcadeIT_Serial_Port_String_Send>

} // End ArcadeIT_Start
 8000f52:	b041      	add	sp, #260	; 0x104
 8000f54:	f85d fb04 	ldr.w	pc, [sp], #4
    ArcadeIT_Serial_Port_Init (SYS_SERIAL_SPEED);
 8000f58:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8000f5c:	f001 f946 	bl	80021ec <ArcadeIT_Serial_Port_Init>
 8000f60:	e7b4      	b.n	8000ecc <ArcadeIT_ArcadeIT_Start+0x14>
    ArcadeIT_TestPad_Init (RCC_MCO2Source_SYSCLK, RCC_MCO2Div_4);  //  45 MHz
 8000f62:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
 8000f66:	2000      	movs	r0, #0
 8000f68:	f001 facc 	bl	8002504 <ArcadeIT_TestPad_Init>
 8000f6c:	e7b8      	b.n	8000ee0 <ArcadeIT_ArcadeIT_Start+0x28>
    ArcadeIT_Status_LEDS_Init();
 8000f6e:	f001 fa21 	bl	80023b4 <ArcadeIT_Status_LEDS_Init>
 8000f72:	e7bd      	b.n	8000ef0 <ArcadeIT_ArcadeIT_Start+0x38>
      ArcadeIT_RTC_Init ();
 8000f74:	f000 fb20 	bl	80015b8 <ArcadeIT_RTC_Init>
 8000f78:	e7c2      	b.n	8000f00 <ArcadeIT_ArcadeIT_Start+0x48>
    ArcadeIT_Scheduler_Task_Init();
 8000f7a:	f001 fb2f 	bl	80025dc <ArcadeIT_Scheduler_Task_Init>
 8000f7e:	e7c7      	b.n	8000f10 <ArcadeIT_ArcadeIT_Start+0x58>
    ArcadeIT_SPI_Port_Init (SPI_FREQ_45_00_MHz);
 8000f80:	2000      	movs	r0, #0
 8000f82:	f001 f815 	bl	8001fb0 <ArcadeIT_SPI_Port_Init>
 8000f86:	e7cb      	b.n	8000f20 <ArcadeIT_ArcadeIT_Start+0x68>
    ArcadeIT_I2C_Port_Init(I2C_100kHz);
 8000f88:	f248 60a0 	movw	r0, #34464	; 0x86a0
 8000f8c:	f2c0 0001 	movt	r0, #1
 8000f90:	f000 f967 	bl	8001262 <ArcadeIT_I2C_Port_Init>
 8000f94:	e7cc      	b.n	8000f30 <ArcadeIT_ArcadeIT_Start+0x78>
      lValue = ArcadeIT_SDCard_Disk_Start();
 8000f96:	f000 ff01 	bl	8001d9c <ArcadeIT_SDCard_Disk_Start>
      if (lValue == FR_OK)
 8000f9a:	b1c8      	cbz	r0, 8000fd0 <ArcadeIT_ArcadeIT_Start+0x118>
        if (gDevices & ARCADEIT_DEVICE_SERIAL)
 8000f9c:	f240 13f8 	movw	r3, #504	; 0x1f8
 8000fa0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8000faa:	d0cc      	beq.n	8000f46 <ArcadeIT_ArcadeIT_Start+0x8e>
          sprintf(lString, "%s\n\r", ArcadeIT_Utility_Get_String_ID(lValue, (char*)gErrorMessages));
 8000fac:	f247 01d0 	movw	r1, #28880	; 0x70d0
 8000fb0:	f6c0 0100 	movt	r1, #2048	; 0x800
 8000fb4:	f000 f948 	bl	8001248 <ArcadeIT_Utility_Get_String_ID>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	f646 6198 	movw	r1, #28312	; 0x6e98
 8000fbe:	f6c0 0100 	movt	r1, #2048	; 0x800
 8000fc2:	4668      	mov	r0, sp
 8000fc4:	f004 fb76 	bl	80056b4 <siprintf>
          ArcadeIT_Serial_Port_String_Send(lString);
 8000fc8:	4668      	mov	r0, sp
 8000fca:	f001 f905 	bl	80021d8 <ArcadeIT_Serial_Port_String_Send>
 8000fce:	e7ba      	b.n	8000f46 <ArcadeIT_ArcadeIT_Start+0x8e>
        lValue = f_chdrive(ArcadeIT_Utility_Get_String_ID(DEV_SD, (char*)gDriveName));
 8000fd0:	f247 01bc 	movw	r1, #28860	; 0x70bc
 8000fd4:	f6c0 0100 	movt	r1, #2048	; 0x800
 8000fd8:	2001      	movs	r0, #1
 8000fda:	f000 f935 	bl	8001248 <ArcadeIT_Utility_Get_String_ID>
 8000fde:	f003 f9d1 	bl	8004384 <f_chdrive>
        if (lValue == FR_OK)
 8000fe2:	bb00      	cbnz	r0, 8001026 <ArcadeIT_ArcadeIT_Start+0x16e>
          gCurrentDrive = DEV_SD;
 8000fe4:	f240 0300 	movw	r3, #0
 8000fe8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000fec:	2201      	movs	r2, #1
 8000fee:	701a      	strb	r2, [r3, #0]
          if (gDevices & ARCADEIT_DEVICE_SERIAL)
 8000ff0:	f240 13f8 	movw	r3, #504	; 0x1f8
 8000ff4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8000ffe:	d0a2      	beq.n	8000f46 <ArcadeIT_ArcadeIT_Start+0x8e>
            sprintf(lString, "Current drive: [%s]\n\r", ArcadeIT_Utility_Get_String_ID(gCurrentDrive, (char*)gDriveName));
 8001000:	f247 01bc 	movw	r1, #28860	; 0x70bc
 8001004:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001008:	4610      	mov	r0, r2
 800100a:	f000 f91d 	bl	8001248 <ArcadeIT_Utility_Get_String_ID>
 800100e:	4602      	mov	r2, r0
 8001010:	f646 6180 	movw	r1, #28288	; 0x6e80
 8001014:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001018:	4668      	mov	r0, sp
 800101a:	f004 fb4b 	bl	80056b4 <siprintf>
            ArcadeIT_Serial_Port_String_Send(lString);
 800101e:	4668      	mov	r0, sp
 8001020:	f001 f8da 	bl	80021d8 <ArcadeIT_Serial_Port_String_Send>
 8001024:	e78f      	b.n	8000f46 <ArcadeIT_ArcadeIT_Start+0x8e>
          if (gDevices & ARCADEIT_DEVICE_SERIAL)
 8001026:	f240 13f8 	movw	r3, #504	; 0x1f8
 800102a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001034:	d087      	beq.n	8000f46 <ArcadeIT_ArcadeIT_Start+0x8e>
            sprintf(lString, "%s\n\r", ArcadeIT_Utility_Get_String_ID(lValue, (char*)gErrorMessages));
 8001036:	f247 01d0 	movw	r1, #28880	; 0x70d0
 800103a:	f6c0 0100 	movt	r1, #2048	; 0x800
 800103e:	f000 f903 	bl	8001248 <ArcadeIT_Utility_Get_String_ID>
 8001042:	4602      	mov	r2, r0
 8001044:	f646 6198 	movw	r1, #28312	; 0x6e98
 8001048:	f6c0 0100 	movt	r1, #2048	; 0x800
 800104c:	4668      	mov	r0, sp
 800104e:	f004 fb31 	bl	80056b4 <siprintf>
            ArcadeIT_Serial_Port_String_Send(lString);
 8001052:	4668      	mov	r0, sp
 8001054:	f001 f8c0 	bl	80021d8 <ArcadeIT_Serial_Port_String_Send>
 8001058:	e775      	b.n	8000f46 <ArcadeIT_ArcadeIT_Start+0x8e>

0800105a <ArcadeIT_Test_Bench>:

// ////////////////////////////////////////////////////////////////////////////
void ArcadeIT_Test_Bench (void)
{
 800105a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800105e:	f5ad 7d53 	sub.w	sp, sp, #844	; 0x34c
  // The following variables hold the flags that start the features/peripherals
  // of the ArcadeIT System. It could be possible to configure the ArcadeIT System from a
  // *.ini text file on the SD Card, or other sources.

  // System features.
  gUnits = NONE
 8001062:	f240 240c 	movw	r4, #524	; 0x20c
 8001066:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800106a:	f240 1301 	movw	r3, #257	; 0x101
 800106e:	6023      	str	r3, [r4, #0]
        | ARCADEIT_UNIT_RTC           // Real time clock
      //| ARCADEIT_UNIT_DMM           // The custom ArcadeIt Dynamic Memory Manager
        | ARCADEIT_UNIT_SCHEDULER     // The task scheduler system.
      ;

  gStorage = NONE
 8001070:	f240 2300 	movw	r3, #512	; 0x200
 8001074:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001078:	2202      	movs	r2, #2
 800107a:	601a      	str	r2, [r3, #0]
      //| ARCADEIT_STORAGE_RAM_DISK     // Ram disk with a FAT File system on the SRAM expansion
        | ARCADEIT_STORAGE_SD_CARD_SPI1 // File system FAT on SD Card over the SPI1 port
      ;

  gDevices = NONE
 800107c:	f240 13f8 	movw	r3, #504	; 0x1f8
 8001080:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001084:	f244 0230 	movw	r2, #16432	; 0x4030
 8001088:	f2c0 0203 	movt	r2, #3
 800108c:	601a      	str	r2, [r3, #0]
        | ARCADEIT_DEVICE_SERIAL        // Serial port USART 2
        | ARCADEIT_DEVICE_STATUSLED     // Two Status LEDs
        | ARCADEIT_DEVICE_TESTPADS      // System clock test pads
       ;

  ArcadeIT_ArcadeIT_Start();
 800108e:	f7ff ff13 	bl	8000eb8 <ArcadeIT_ArcadeIT_Start>
  } // End if.
#endif
#if 1
  // --------------------------------------------------------------------------
  // We setup the scheduler to blink the Status LED 1 at 1Hz (every seconds).
  if (gUnits & ARCADEIT_UNIT_SCHEDULER)
 8001092:	6823      	ldr	r3, [r4, #0]
 8001094:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001098:	d013      	beq.n	80010c2 <ArcadeIT_Test_Bench+0x68>
  {
    if (gDevices & ARCADEIT_DEVICE_STATUSLED)
 800109a:	f240 13f8 	movw	r3, #504	; 0x1f8
 800109e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80010a8:	d00b      	beq.n	80010c2 <ArcadeIT_Test_Bench+0x68>
    {
          ArcadeIT_Scheduler_Task_Set (
 80010aa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	2300      	movs	r3, #0
 80010b2:	461a      	mov	r2, r3
 80010b4:	f242 4187 	movw	r1, #9351	; 0x2487
 80010b8:	f6c0 0100 	movt	r1, #2048	; 0x800
 80010bc:	4618      	mov	r0, r3
 80010be:	f001 faa7 	bl	8002610 <ArcadeIT_Scheduler_Task_Set>
  } // end if
#endif
#if 01
  // ---------------------------------------------------------------------------
  // SD-Card access test
  if (gStorage & ARCADEIT_STORAGE_SD_CARD_SPI1)
 80010c2:	f240 2300 	movw	r3, #512	; 0x200
 80010c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f013 0f02 	tst.w	r3, #2
 80010d0:	f000 80aa 	beq.w	8001228 <ArcadeIT_Test_Bench+0x1ce>
  {
    if (gDevices & ARCADEIT_DEVICE_SERIAL)
 80010d4:	f240 13f8 	movw	r3, #504	; 0x1f8
 80010d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80010e2:	d011      	beq.n	8001108 <ArcadeIT_Test_Bench+0xae>
    {
      ArcadeIT_System_Delay(5000);
 80010e4:	f241 3088 	movw	r0, #5000	; 0x1388
 80010e8:	f7ff fdfe 	bl	8000ce8 <ArcadeIT_System_Delay>
      ArcadeIT_Serial_Port_String_Send(RESET_DEVICE);
 80010ec:	f646 7024 	movw	r0, #28452	; 0x6f24
 80010f0:	f6c0 0000 	movt	r0, #2048	; 0x800
 80010f4:	f001 f870 	bl	80021d8 <ArcadeIT_Serial_Port_String_Send>
      ArcadeIT_Status_LED2_Toggle();
 80010f8:	f001 f9df 	bl	80024ba <ArcadeIT_Status_LED2_Toggle>

      ArcadeIT_Serial_Port_String_Send("Speed test for SD-Card:\n\r");
 80010fc:	f646 7028 	movw	r0, #28456	; 0x6f28
 8001100:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001104:	f001 f868 	bl	80021d8 <ArcadeIT_Serial_Port_String_Send>
    // Create a new file
    // the global file system that ArcadeIT! opens is held by the global variable
    // FATFS gFileSystemSD;
    FIL lFile;                /* File objects */
    FRESULT lFileStatus = 0;  /* FatFs function common result code */
    UINT lBytesToSave = 1024*1024*2, lBytesRead = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	9307      	str	r3, [sp, #28]
    BYTE *lMemoryFrom = 0x8000000;
    uint32_t lCurrentTime = 0, lLastTime = 0, lTimeElapsed = 0;

    // create a file
    lFileStatus += f_open(&lFile, "SDCARD:ArcadeIT_firmware.bin", FA_WRITE | FA_CREATE_ALWAYS);
 800110c:	220a      	movs	r2, #10
 800110e:	f646 7144 	movw	r1, #28484	; 0x6f44
 8001112:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001116:	a808      	add	r0, sp, #32
 8001118:	f002 ff03 	bl	8003f22 <f_open>
 800111c:	4604      	mov	r4, r0
    if (gDevices & ARCADEIT_DEVICE_SERIAL)
 800111e:	f240 13f8 	movw	r3, #504	; 0x1f8
 8001122:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800112c:	d00a      	beq.n	8001144 <ArcadeIT_Test_Bench+0xea>
    {
      sprintf(lString, "%s", lFileStatus == FR_OK ? "File created.\r\n" : "Problems in creating the file.\r\n");
 800112e:	b998      	cbnz	r0, 8001158 <ArcadeIT_Test_Bench+0xfe>
 8001130:	f646 61bc 	movw	r1, #28348	; 0x6ebc
 8001134:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001138:	a892      	add	r0, sp, #584	; 0x248
 800113a:	f004 fadb 	bl	80056f4 <strcpy>
      ArcadeIT_Serial_Port_String_Send(lString);
 800113e:	a892      	add	r0, sp, #584	; 0x248
 8001140:	f001 f84a 	bl	80021d8 <ArcadeIT_Serial_Port_String_Send>
      sprintf(lString, "%s", lFileStatus == FR_OK ? "File created.\r\n" : "Problems in creating the file.\r\n");
 8001144:	f04f 0900 	mov.w	r9, #0
 8001148:	f04f 6b00 	mov.w	fp, #134217728	; 0x8000000
 800114c:	f44f 1a00 	mov.w	sl, #2097152	; 0x200000
 8001150:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8001154:	4657      	mov	r7, sl
 8001156:	e01f      	b.n	8001198 <ArcadeIT_Test_Bench+0x13e>
 8001158:	f646 61cc 	movw	r1, #28364	; 0x6ecc
 800115c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001160:	e7ea      	b.n	8001138 <ArcadeIT_Test_Bench+0xde>


    // store the content of the FLASH int the file
    while (lBytesToSave)
    {
      lLastTime = SYS_MCU_CYCLES();
 8001162:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8001166:	f2ce 0500 	movt	r5, #57344	; 0xe000
 800116a:	f8d5 8004 	ldr.w	r8, [r5, #4]
      lFileStatus += f_write(&lFile, lMemoryFrom, 4096, &lBytesRead);
 800116e:	ab07      	add	r3, sp, #28
 8001170:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001174:	4659      	mov	r1, fp
 8001176:	a808      	add	r0, sp, #32
 8001178:	f002 ffc3 	bl	8004102 <f_write>
 800117c:	4404      	add	r4, r0
 800117e:	b2e4      	uxtb	r4, r4
      lCurrentTime = SYS_MCU_CYCLES();
 8001180:	686b      	ldr	r3, [r5, #4]
      lTimeElapsed += (lCurrentTime - lLastTime);
 8001182:	eba3 0308 	sub.w	r3, r3, r8
 8001186:	4499      	add	r9, r3

      if (lBytesRead != 4096) break;
 8001188:	9b07      	ldr	r3, [sp, #28]
 800118a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800118e:	d105      	bne.n	800119c <ArcadeIT_Test_Bench+0x142>
      lMemoryFrom += 4096;
 8001190:	f50b 5b80 	add.w	fp, fp, #4096	; 0x1000
      lBytesToSave -= 4096;
 8001194:	f5a7 5780 	sub.w	r7, r7, #4096	; 0x1000
    while (lBytesToSave)
 8001198:	2f00      	cmp	r7, #0
 800119a:	d1e2      	bne.n	8001162 <ArcadeIT_Test_Bench+0x108>

    } // end while

    if (gDevices & ARCADEIT_DEVICE_SERIAL)
 800119c:	f240 13f8 	movw	r3, #504	; 0x1f8
 80011a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80011aa:	d025      	beq.n	80011f8 <ArcadeIT_Test_Bench+0x19e>
    {
      sprintf(lString, "Transfer rate: %0.2f kB/s\r\n", 2048/(lTimeElapsed*0.00000000555));
 80011ac:	4648      	mov	r0, r9
 80011ae:	f7ff f9c1 	bl	8000534 <__aeabi_ui2d>
 80011b2:	f241 6688 	movw	r6, #5768	; 0x1688
 80011b6:	f6c1 66e9 	movt	r6, #7913	; 0x1ee9
 80011ba:	f24d 674a 	movw	r7, #54858	; 0xd64a
 80011be:	f6c3 6737 	movt	r7, #15927	; 0x3e37
 80011c2:	4632      	mov	r2, r6
 80011c4:	463b      	mov	r3, r7
 80011c6:	f7ff fa2f 	bl	8000628 <__aeabi_dmul>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	2100      	movs	r1, #0
 80011d0:	9102      	str	r1, [sp, #8]
 80011d2:	f2c4 01a0 	movt	r1, #16544	; 0x40a0
 80011d6:	9103      	str	r1, [sp, #12]
 80011d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80011dc:	f7ff fb4e 	bl	800087c <__aeabi_ddiv>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	f646 7164 	movw	r1, #28516	; 0x6f64
 80011e8:	f6c0 0100 	movt	r1, #2048	; 0x800
 80011ec:	a892      	add	r0, sp, #584	; 0x248
 80011ee:	f004 fa61 	bl	80056b4 <siprintf>
      ArcadeIT_Serial_Port_String_Send(lString);
 80011f2:	a892      	add	r0, sp, #584	; 0x248
 80011f4:	f000 fff0 	bl	80021d8 <ArcadeIT_Serial_Port_String_Send>

    } // End if.

    if (gDevices & ARCADEIT_DEVICE_SERIAL)
 80011f8:	f240 13f8 	movw	r3, #504	; 0x1f8
 80011fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001206:	d00a      	beq.n	800121e <ArcadeIT_Test_Bench+0x1c4>
    {
      sprintf(lString, "%s", lFileStatus == FR_OK ? "Firmware saved.\r\n" : "Problems in saving the file.\r\n");
 8001208:	b9cc      	cbnz	r4, 800123e <ArcadeIT_Test_Bench+0x1e4>
 800120a:	f646 61f0 	movw	r1, #28400	; 0x6ef0
 800120e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001212:	a892      	add	r0, sp, #584	; 0x248
 8001214:	f004 fa6e 	bl	80056f4 <strcpy>
      ArcadeIT_Serial_Port_String_Send(lString);
 8001218:	a892      	add	r0, sp, #584	; 0x248
 800121a:	f000 ffdd 	bl	80021d8 <ArcadeIT_Serial_Port_String_Send>

    } // end if

    // close file
    f_close(&lFile);
 800121e:	a808      	add	r0, sp, #32
 8001220:	f003 f89c 	bl	800435c <f_close>

    ArcadeIT_Status_LED2_Toggle();
 8001224:	f001 f949 	bl	80024ba <ArcadeIT_Status_LED2_Toggle>

  while (1)
  {

    // Periodic tasks
    if (gUnits & ARCADEIT_UNIT_SCHEDULER)
 8001228:	f240 230c 	movw	r3, #524	; 0x20c
 800122c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001236:	d0f7      	beq.n	8001228 <ArcadeIT_Test_Bench+0x1ce>
    {
      ArcadeIT_Scheduler_Run();
 8001238:	f001 fa88 	bl	800274c <ArcadeIT_Scheduler_Run>
 800123c:	e7f4      	b.n	8001228 <ArcadeIT_Test_Bench+0x1ce>
      sprintf(lString, "%s", lFileStatus == FR_OK ? "Firmware saved.\r\n" : "Problems in saving the file.\r\n");
 800123e:	f646 7104 	movw	r1, #28420	; 0x6f04
 8001242:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001246:	e7e4      	b.n	8001212 <ArcadeIT_Test_Bench+0x1b8>

08001248 <ArcadeIT_Utility_Get_String_ID>:
  * PARAMETERS:  See above.
  * RETURNS:     Nothing.
  */

  // Temporary character.
  uint32_t lTempCharacter = 0;
 8001248:	2300      	movs	r3, #0

  char *msg = pBuffer;

  // Go through the characters of the string provided and transform them to upper case.
  while (lTempCharacter != pId)
 800124a:	e000      	b.n	800124e <ArcadeIT_Utility_Get_String_ID+0x6>
{
 800124c:	4611      	mov	r1, r2
  while (lTempCharacter != pId)
 800124e:	4283      	cmp	r3, r0
 8001250:	d005      	beq.n	800125e <ArcadeIT_Utility_Get_String_ID+0x16>
  {
    if (*msg++ == '\0') lTempCharacter++;
 8001252:	1c4a      	adds	r2, r1, #1
 8001254:	7809      	ldrb	r1, [r1, #0]
 8001256:	2900      	cmp	r1, #0
 8001258:	d1f8      	bne.n	800124c <ArcadeIT_Utility_Get_String_ID+0x4>
 800125a:	3301      	adds	r3, #1
 800125c:	e7f6      	b.n	800124c <ArcadeIT_Utility_Get_String_ID+0x4>

  } // End while.

  return msg;

} // End ArcadeIT_Utility_Get_String_ID.
 800125e:	4608      	mov	r0, r1
 8001260:	4770      	bx	lr

08001262 <ArcadeIT_I2C_Port_Init>:

// -----------------------------------------------------------------------------
void ArcadeIT_I2C_Port_Init(
    uint32_t pClock     // The frequency clock of the I2C device
    )
{
 8001262:	b538      	push	{r3, r4, r5, lr}
 8001264:	4605      	mov	r5, r0
  uint32_t lPinPosition;

  // configure the pins of the I2C
  lPinPosition = (SYS_I2C_SCL_PIN_NO * 2);

  if ((RCC->AHB1ENR & RCC_AHB1Periph_GPIOH) == FALSE) RCC->AHB1ENR |= RCC_AHB1Periph_GPIOH;
 8001266:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800126a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800126e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001270:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001274:	d107      	bne.n	8001286 <ArcadeIT_I2C_Port_Init+0x24>
 8001276:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800127a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800127e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001280:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001284:	631a      	str	r2, [r3, #48]	; 0x30
  if ((RCC->APB1ENR & RCC_APB1Periph_I2C2) == FALSE) RCC->APB1ENR |= RCC_APB1Periph_I2C2;
 8001286:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800128a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800128e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001290:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001294:	d107      	bne.n	80012a6 <ArcadeIT_I2C_Port_Init+0x44>
 8001296:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800129a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800129e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012a0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80012a4:	641a      	str	r2, [r3, #64]	; 0x40

  // Configure the pin PH4 as alternate function 4 (I2C SCL).
  SYS_I2C_SCL_PER->MODER   &= ~GPIO_MODER_MODER4;
 80012a6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80012aa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80012b4:	601a      	str	r2, [r3, #0]
  SYS_I2C_SCL_PER->MODER   |= (((uint32_t)GPIO_Mode_AF) << lPinPosition);
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012bc:	601a      	str	r2, [r3, #0]
  SYS_I2C_SCL_PER->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR4;
 80012be:	689a      	ldr	r2, [r3, #8]
 80012c0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80012c4:	609a      	str	r2, [r3, #8]
  SYS_I2C_SCL_PER->OSPEEDR |= ((uint32_t)(GPIO_Speed_2MHz) << lPinPosition);
 80012c6:	689a      	ldr	r2, [r3, #8]
 80012c8:	609a      	str	r2, [r3, #8]
  SYS_I2C_SCL_PER->OTYPER  &= ~GPIO_OTYPER_OT_4;
 80012ca:	685a      	ldr	r2, [r3, #4]
 80012cc:	f022 0210 	bic.w	r2, r2, #16
 80012d0:	605a      	str	r2, [r3, #4]
  SYS_I2C_SCL_PER->OTYPER  |= (uint16_t)(GPIO_OType_OD << SYS_I2C_SCL_PIN_NO);
 80012d2:	685a      	ldr	r2, [r3, #4]
 80012d4:	f042 0210 	orr.w	r2, r2, #16
 80012d8:	605a      	str	r2, [r3, #4]
  SYS_I2C_SCL_PER->PUPDR   &= ~GPIO_PUPDR_PUPDR4;
 80012da:	68da      	ldr	r2, [r3, #12]
 80012dc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80012e0:	60da      	str	r2, [r3, #12]
  SYS_I2C_SCL_PER->PUPDR   |= (((uint32_t)GPIO_PuPd_NOPULL) << lPinPosition);
 80012e2:	68da      	ldr	r2, [r3, #12]
 80012e4:	60da      	str	r2, [r3, #12]
  SYS_I2C_SCL_PER->AFR[0]  &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)SYS_I2C_SCL_PIN_NO & (uint32_t)0x07) * 4));
 80012e6:	6a1a      	ldr	r2, [r3, #32]
 80012e8:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80012ec:	621a      	str	r2, [r3, #32]
  SYS_I2C_SCL_PER->AFR[0]  |= ((uint32_t)(SYS_I2C_AF) << ((uint32_t)((uint32_t)SYS_I2C_SCL_PIN_NO & (uint32_t)0x07) * 4));
 80012ee:	6a1a      	ldr	r2, [r3, #32]
 80012f0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80012f4:	621a      	str	r2, [r3, #32]

  lPinPosition = (SYS_I2C_SDA_PIN_NO * 2);

  // Configure the pin PH5 as alternate function 4 (I2C SDA).
  SYS_I2C_SDA_PER->MODER   &= ~GPIO_MODER_MODER5;
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80012fc:	601a      	str	r2, [r3, #0]
  SYS_I2C_SDA_PER->MODER   |= (((uint32_t)GPIO_Mode_AF) << lPinPosition);
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001304:	601a      	str	r2, [r3, #0]
  SYS_I2C_SDA_PER->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR5;
 8001306:	689a      	ldr	r2, [r3, #8]
 8001308:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800130c:	609a      	str	r2, [r3, #8]
  SYS_I2C_SDA_PER->OSPEEDR |= ((uint32_t)(GPIO_Speed_2MHz) << lPinPosition);
 800130e:	689a      	ldr	r2, [r3, #8]
 8001310:	609a      	str	r2, [r3, #8]
  SYS_I2C_SDA_PER->OTYPER  &= ~GPIO_OTYPER_OT_5;
 8001312:	685a      	ldr	r2, [r3, #4]
 8001314:	f022 0220 	bic.w	r2, r2, #32
 8001318:	605a      	str	r2, [r3, #4]
  SYS_I2C_SDA_PER->OTYPER  |= (uint16_t)(GPIO_OType_OD << SYS_I2C_SDA_PIN_NO);
 800131a:	685a      	ldr	r2, [r3, #4]
 800131c:	f042 0220 	orr.w	r2, r2, #32
 8001320:	605a      	str	r2, [r3, #4]
  SYS_I2C_SDA_PER->PUPDR   &= ~GPIO_PUPDR_PUPDR5;
 8001322:	68da      	ldr	r2, [r3, #12]
 8001324:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001328:	60da      	str	r2, [r3, #12]
  SYS_I2C_SDA_PER->PUPDR   |= (((uint32_t)GPIO_PuPd_NOPULL) << lPinPosition);
 800132a:	68da      	ldr	r2, [r3, #12]
 800132c:	60da      	str	r2, [r3, #12]
  SYS_I2C_SDA_PER->AFR[0] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)SYS_I2C_SDA_PIN_NO & (uint32_t)0x07) * 4)) ;
 800132e:	6a1a      	ldr	r2, [r3, #32]
 8001330:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001334:	621a      	str	r2, [r3, #32]
  SYS_I2C_SDA_PER->AFR[0] |= ((uint32_t)(SYS_I2C_AF) << ((uint32_t)((uint32_t)SYS_I2C_SDA_PIN_NO & (uint32_t)0x07) * 4));
 8001336:	6a1a      	ldr	r2, [r3, #32]
 8001338:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800133c:	621a      	str	r2, [r3, #32]

  // reset the I2C peripheral
  I2C2->CR1 |= I2C_CR1_SWRST;
 800133e:	f44f 44b0 	mov.w	r4, #22528	; 0x5800
 8001342:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8001346:	6823      	ldr	r3, [r4, #0]
 8001348:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800134c:	6023      	str	r3, [r4, #0]
  ArcadeIT_System_Delay(1000);
 800134e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001352:	f7ff fcc9 	bl	8000ce8 <ArcadeIT_System_Delay>
  I2C2->CR1 = 0x0;
 8001356:	2300      	movs	r3, #0
 8001358:	6023      	str	r3, [r4, #0]

  // configure the I2C port
  I2C2->CR1 &= ~I2C_CR1_PE;
 800135a:	6823      	ldr	r3, [r4, #0]
 800135c:	f023 0301 	bic.w	r3, r3, #1
 8001360:	6023      	str	r3, [r4, #0]
  uint16_t result = 0x04;
  uint8_t lDuty = I2C_DUTY_2;

  freqrange = (apbclock / 1000000);

  I2C2->CR2 &= ~I2C_CR2_FREQ;
 8001362:	6863      	ldr	r3, [r4, #4]
 8001364:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001368:	6063      	str	r3, [r4, #4]
  I2C2->CR2 |= freqrange;
 800136a:	6863      	ldr	r3, [r4, #4]
 800136c:	f043 032d 	orr.w	r3, r3, #45	; 0x2d
 8001370:	6063      	str	r3, [r4, #4]

  // Configure speed in standard mode
  if (pClock <= 100000)
 8001372:	f248 63a0 	movw	r3, #34464	; 0x86a0
 8001376:	f2c0 0301 	movt	r3, #1
 800137a:	429d      	cmp	r5, r3
 800137c:	d83f      	bhi.n	80013fe <ArcadeIT_I2C_Port_Init+0x19c>
  {
    // Standard mode speed calculate
    result = (uint16_t)(apbclock / (pClock << 1));
 800137e:	006d      	lsls	r5, r5, #1
 8001380:	f24a 5040 	movw	r0, #42304	; 0xa540
 8001384:	f2c0 20ae 	movt	r0, #686	; 0x2ae
 8001388:	fbb0 f0f5 	udiv	r0, r0, r5
 800138c:	b280      	uxth	r0, r0

    // Test if CCR value is under 0x4
    if (result < 0x04)
 800138e:	2803      	cmp	r0, #3
 8001390:	d800      	bhi.n	8001394 <ArcadeIT_I2C_Port_Init+0x132>
    {
      // Set minimum allowed value
      result = 0x04;
 8001392:	2004      	movs	r0, #4

    // Set speed value for standard mode
    tmpreg |= result;

    // Set Maximum Rise Time for standard mode
    I2C2->TRISE = freqrange + 1;
 8001394:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 8001398:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800139c:	222e      	movs	r2, #46	; 0x2e
 800139e:	621a      	str	r2, [r3, #32]
    // Set Maximum Rise Time for fast mode
    I2C2->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);

  } // End if.

  I2C2->CCR = tmpreg;
 80013a0:	f44f 42b0 	mov.w	r2, #22528	; 0x5800
 80013a4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80013a8:	61d0      	str	r0, [r2, #28]
  I2C2->OAR1 = I2C_AcknowledgedAddress_7bit;
 80013aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013ae:	6093      	str	r3, [r2, #8]
  I2C2->OAR2 = 0;
 80013b0:	f44f 42b0 	mov.w	r2, #22528	; 0x5800
 80013b4:	f363 421f 	bfi	r2, r3, #16, #16
 80013b8:	2100      	movs	r1, #0
 80013ba:	60d1      	str	r1, [r2, #12]
  I2C2->CR1 |= I2C_CR1_ACK;
 80013bc:	f44f 42b0 	mov.w	r2, #22528	; 0x5800
 80013c0:	f363 421f 	bfi	r2, r3, #16, #16
 80013c4:	6812      	ldr	r2, [r2, #0]
 80013c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80013ca:	f44f 41b0 	mov.w	r1, #22528	; 0x5800
 80013ce:	f363 411f 	bfi	r1, r3, #16, #16
 80013d2:	600a      	str	r2, [r1, #0]
  I2C2->CR1 |= I2C_CR1_PE;
 80013d4:	f44f 42b0 	mov.w	r2, #22528	; 0x5800
 80013d8:	f363 421f 	bfi	r2, r3, #16, #16
 80013dc:	6812      	ldr	r2, [r2, #0]
 80013de:	f042 0201 	orr.w	r2, r2, #1
 80013e2:	f44f 41b0 	mov.w	r1, #22528	; 0x5800
 80013e6:	f363 411f 	bfi	r1, r3, #16, #16
 80013ea:	600a      	str	r2, [r1, #0]

  // Shows a message to serial port as debug
  if (gDevices & ARCADEIT_DEVICE_SERIAL)
 80013ec:	f240 13f8 	movw	r3, #504	; 0x1f8
 80013f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80013fa:	d117      	bne.n	800142c <ArcadeIT_I2C_Port_Init+0x1ca>
  {
    ArcadeIT_Serial_Port_String_Send(TEXT_I2C_INITED);

  } // End if.

} // end ArcadeIT_I2C_Port_Init
 80013fc:	bd38      	pop	{r3, r4, r5, pc}
      result = (uint16_t)(apbclock / (pClock * 3));
 80013fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001402:	f24a 5340 	movw	r3, #42304	; 0xa540
 8001406:	f2c0 23ae 	movt	r3, #686	; 0x2ae
 800140a:	fbb3 f3f5 	udiv	r3, r3, r5
 800140e:	b298      	uxth	r0, r3
    if ((result & I2C_CCR_CCR) == 0)
 8001410:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001414:	b90b      	cbnz	r3, 800141a <ArcadeIT_I2C_Port_Init+0x1b8>
      result |= (uint16_t)0x0001;
 8001416:	f040 0001 	orr.w	r0, r0, #1
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 800141a:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
    I2C2->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);
 800141e:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 8001422:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001426:	220e      	movs	r2, #14
 8001428:	621a      	str	r2, [r3, #32]
 800142a:	e7b9      	b.n	80013a0 <ArcadeIT_I2C_Port_Init+0x13e>
    ArcadeIT_Serial_Port_String_Send(TEXT_I2C_INITED);
 800142c:	f646 7080 	movw	r0, #28544	; 0x6f80
 8001430:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001434:	f000 fed0 	bl	80021d8 <ArcadeIT_Serial_Port_String_Send>
} // end ArcadeIT_I2C_Port_Init
 8001438:	e7e0      	b.n	80013fc <ArcadeIT_I2C_Port_Init+0x19a>

0800143a <ArcadeIT_RTC_ReadBackupRegister>:
// -----------------------------------------------------------------------------
uint32_t ArcadeIT_RTC_ReadBackupRegister
(
    uint32_t RTC_BKP_DR // RTC Backup data Register number.
)
{
 800143a:	b082      	sub	sp, #8
   * DESCRIPTION: Reads data from the specified RTC Backup data Register.
   * PARAMETERS:  See above.
   * RETURNS:     Nothing.
   */

  __IO uint32_t tmp = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	9301      	str	r3, [sp, #4]

  tmp = RTC_BASE + 0x50;
 8001440:	f642 0350 	movw	r3, #10320	; 0x2850
 8001444:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001448:	9301      	str	r3, [sp, #4]
  tmp += (RTC_BKP_DR * 4);
 800144a:	9b01      	ldr	r3, [sp, #4]
 800144c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001450:	9001      	str	r0, [sp, #4]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8001452:	9b01      	ldr	r3, [sp, #4]
 8001454:	6818      	ldr	r0, [r3, #0]

} // end ArcadeIT_RTC_ReadBackupRegister
 8001456:	b002      	add	sp, #8
 8001458:	4770      	bx	lr

0800145a <ArcadeIT_RTC_WriteBackupRegister>:
// -----------------------------------------------------------------------------
void ArcadeIT_RTC_WriteBackupRegister(
    uint32_t RTC_BKP_DR, // RTC Backup data Register number.
    uint32_t Data        // Data to be written in the specified RTC Backup data register.
)
{
 800145a:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	9301      	str	r3, [sp, #4]

  tmp = RTC_BASE + 0x50;
 8001460:	f642 0350 	movw	r3, #10320	; 0x2850
 8001464:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001468:	9301      	str	r3, [sp, #4]
  tmp += (RTC_BKP_DR * 4);
 800146a:	9b01      	ldr	r3, [sp, #4]
 800146c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001470:	9001      	str	r0, [sp, #4]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8001472:	9b01      	ldr	r3, [sp, #4]
 8001474:	6019      	str	r1, [r3, #0]

} // end RTC_WriteBackupRegister
 8001476:	b002      	add	sp, #8
 8001478:	4770      	bx	lr

0800147a <ArcadeIT_RCC_LSEConfig>:
  * RETURNS:     Nothing.
  */

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800147a:	f643 0370 	movw	r3, #14448	; 0x3870
 800147e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001482:	2200      	movs	r2, #0
 8001484:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8001486:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8001488:	2801      	cmp	r0, #1
 800148a:	d003      	beq.n	8001494 <ArcadeIT_RCC_LSEConfig+0x1a>
 800148c:	2804      	cmp	r0, #4
 800148e:	d008      	beq.n	80014a2 <ArcadeIT_RCC_LSEConfig+0x28>

  } // end switch

  return 0;

} // end ArcadeIT_RCC_LSEConfig
 8001490:	2000      	movs	r0, #0
 8001492:	4770      	bx	lr
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 8001494:	f643 0370 	movw	r3, #14448	; 0x3870
 8001498:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800149c:	2201      	movs	r2, #1
 800149e:	701a      	strb	r2, [r3, #0]
      break;
 80014a0:	e7f6      	b.n	8001490 <ArcadeIT_RCC_LSEConfig+0x16>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 80014a2:	f643 0370 	movw	r3, #14448	; 0x3870
 80014a6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014aa:	2205      	movs	r2, #5
 80014ac:	701a      	strb	r2, [r3, #0]
      break;
 80014ae:	e7ef      	b.n	8001490 <ArcadeIT_RCC_LSEConfig+0x16>

080014b0 <ArcadeIT_RCC_GetFlagStatus>:
  uint32_t tmp = 0;
  uint32_t statusreg = 0;
  FlagStatus bitstatus = RESET;

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 80014b0:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d00f      	beq.n	80014d6 <ArcadeIT_RCC_GetFlagStatus+0x26>
    statusreg = RCC->CR;
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d013      	beq.n	80014e2 <ArcadeIT_RCC_GetFlagStatus+0x32>
    statusreg = RCC->BDCR;
  else                        /* The flag to check is in CSR register */
    statusreg = RCC->CSR;
 80014ba:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80014be:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74

  /* Get the flag position */
  tmp = RCC_FLAG & ((uint8_t)0x1F);
 80014c4:	f000 001f 	and.w	r0, r0, #31
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 80014c8:	fa23 f000 	lsr.w	r0, r3, r0
 80014cc:	f010 0f01 	tst.w	r0, #1
 80014d0:	d10d      	bne.n	80014ee <ArcadeIT_RCC_GetFlagStatus+0x3e>
    bitstatus = SET;
  else
    bitstatus = RESET;
 80014d2:	2000      	movs	r0, #0

  /* Return the flag status */
  return bitstatus;

} // end ArcadeIT_RCC_GetFlagStatus
 80014d4:	4770      	bx	lr
    statusreg = RCC->CR;
 80014d6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80014da:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	e7f0      	b.n	80014c4 <ArcadeIT_RCC_GetFlagStatus+0x14>
    statusreg = RCC->BDCR;
 80014e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80014e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80014ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ec:	e7ea      	b.n	80014c4 <ArcadeIT_RCC_GetFlagStatus+0x14>
    bitstatus = SET;
 80014ee:	2001      	movs	r0, #1
 80014f0:	4770      	bx	lr

080014f2 <ArcadeIT_RTC_WaitForSynchro>:

// -----------------------------------------------------------------------------
ErrorStatus ArcadeIT_RTC_WaitForSynchro(void)
{
 80014f2:	b082      	sub	sp, #8
  *              synchronized with RTC APB clock.
  * PARAMETERS:  None.
  * RETURNS:     A Status.
  */

  __IO uint32_t synchrocounter = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	9301      	str	r3, [sp, #4]
  ErrorStatus status = ERROR;
  uint32_t synchrostatus = 0x00;

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80014f8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80014fc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001500:	22ca      	movs	r2, #202	; 0xca
 8001502:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8001504:	2253      	movs	r2, #83	; 0x53
 8001506:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear RSF flag */
  RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 8001508:	68da      	ldr	r2, [r3, #12]
 800150a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800150e:	60da      	str	r2, [r3, #12]

  /* Wait the registers to be synchronised */
  do
  {
    synchrostatus = RTC->ISR & RTC_ISR_RSF;
 8001510:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001514:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001518:	68da      	ldr	r2, [r3, #12]
 800151a:	f002 0220 	and.w	r2, r2, #32
    synchrocounter++;
 800151e:	9b01      	ldr	r3, [sp, #4]
 8001520:	3301      	adds	r3, #1
 8001522:	9301      	str	r3, [sp, #4]

  } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 8001524:	9b01      	ldr	r3, [sp, #4]
 8001526:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800152a:	d001      	beq.n	8001530 <ArcadeIT_RTC_WaitForSynchro+0x3e>
 800152c:	2a00      	cmp	r2, #0
 800152e:	d0ef      	beq.n	8001510 <ArcadeIT_RTC_WaitForSynchro+0x1e>

  if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 8001530:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001534:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	f013 0f20 	tst.w	r3, #32
 800153e:	d108      	bne.n	8001552 <ArcadeIT_RTC_WaitForSynchro+0x60>
    status = SUCCESS;
  else
    status = ERROR;
 8001540:	2001      	movs	r0, #1

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 8001542:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001546:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800154a:	22ff      	movs	r2, #255	; 0xff
 800154c:	625a      	str	r2, [r3, #36]	; 0x24

  return (status);

} // end ArcadeIT_RTC_WaitForSynchro
 800154e:	b002      	add	sp, #8
 8001550:	4770      	bx	lr
    status = SUCCESS;
 8001552:	2000      	movs	r0, #0
 8001554:	e7f5      	b.n	8001542 <ArcadeIT_RTC_WaitForSynchro+0x50>

08001556 <ArcadeIT_RTC_EnterInitMode>:

// -----------------------------------------------------------------------------
ErrorStatus ArcadeIT_RTC_EnterInitMode(void)
{
 8001556:	b082      	sub	sp, #8
  * DESCRIPTION: Enters the RTC Initialization mode.
  * PARAMETERS:  None.
  * RETURNS:     An ErrorStatus.
  */

  __IO uint32_t initcounter = 0x00;
 8001558:	2300      	movs	r3, #0
 800155a:	9301      	str	r3, [sp, #4]
  ErrorStatus status = ERROR;
  uint32_t initstatus = 0x00;

  /* Check if the Initialization mode is set */
  if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800155c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001560:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	f013 0f40 	tst.w	r3, #64	; 0x40
 800156a:	d122      	bne.n	80015b2 <ArcadeIT_RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    RTC->ISR = (uint32_t)RTC_INIT_MASK;
 800156c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001570:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001574:	f04f 32ff 	mov.w	r2, #4294967295
 8001578:	60da      	str	r2, [r3, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    do
    {
      initstatus = RTC->ISR & RTC_ISR_INITF;
 800157a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800157e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001582:	68da      	ldr	r2, [r3, #12]
 8001584:	f002 0240 	and.w	r2, r2, #64	; 0x40
      initcounter++;
 8001588:	9b01      	ldr	r3, [sp, #4]
 800158a:	3301      	adds	r3, #1
 800158c:	9301      	str	r3, [sp, #4]

    } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 800158e:	9b01      	ldr	r3, [sp, #4]
 8001590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001594:	d001      	beq.n	800159a <ArcadeIT_RTC_EnterInitMode+0x44>
 8001596:	2a00      	cmp	r2, #0
 8001598:	d0ef      	beq.n	800157a <ArcadeIT_RTC_EnterInitMode+0x24>

    if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 800159a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800159e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80015a8:	d101      	bne.n	80015ae <ArcadeIT_RTC_EnterInitMode+0x58>
      status = SUCCESS;
    else
      status = ERROR;
 80015aa:	2001      	movs	r0, #1
 80015ac:	e002      	b.n	80015b4 <ArcadeIT_RTC_EnterInitMode+0x5e>
      status = SUCCESS;
 80015ae:	2000      	movs	r0, #0
 80015b0:	e000      	b.n	80015b4 <ArcadeIT_RTC_EnterInitMode+0x5e>
  }
  else
    status = SUCCESS;
 80015b2:	2000      	movs	r0, #0

  return (status);

} // end ArcadeIT_RTC_EnterInitMode
 80015b4:	b002      	add	sp, #8
 80015b6:	4770      	bx	lr

080015b8 <ArcadeIT_RTC_Init>:

// -----------------------------------------------------------------------------
void ArcadeIT_RTC_Init(void)
{
 80015b8:	b508      	push	{r3, lr}
  * DESCRIPTION: This function modify the string provided to upper case.
  * PARAMETERS:  None.
  * RETURNS:     Nothing.
  */

  if (ArcadeIT_RTC_ReadBackupRegister(RTC_BKP_DR0) != FIRST_DATA)
 80015ba:	2000      	movs	r0, #0
 80015bc:	f7ff ff3d 	bl	800143a <ArcadeIT_RTC_ReadBackupRegister>
 80015c0:	f243 23f2 	movw	r3, #13042	; 0x32f2
 80015c4:	4298      	cmp	r0, r3
 80015c6:	d073      	beq.n	80016b0 <ArcadeIT_RTC_Init+0xf8>
  {
    // Enable the PWR clock if not yet.
    if ((RCC->APB1ENR & RCC_APB1Periph_PWR) == FALSE) RCC->APB1ENR |= RCC_APB1Periph_PWR;
 80015c8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80015cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80015d6:	d107      	bne.n	80015e8 <ArcadeIT_RTC_Init+0x30>
 80015d8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80015dc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80015e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015e2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80015e6:	641a      	str	r2, [r3, #64]	; 0x40

    // Allow access to RTC.
    *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80015e8:	2320      	movs	r3, #32
 80015ea:	f2c4 230e 	movt	r3, #16910	; 0x420e
 80015ee:	2001      	movs	r0, #1
 80015f0:	6018      	str	r0, [r3, #0]
    RTC->WPR = 0xCA;
 80015f2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80015f6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80015fa:	22ca      	movs	r2, #202	; 0xca
 80015fc:	625a      	str	r2, [r3, #36]	; 0x24
    RTC->WPR = 0x53;
 80015fe:	2253      	movs	r2, #83	; 0x53
 8001600:	625a      	str	r2, [r3, #36]	; 0x24

    // Reset RTC Domain.
    *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)(ENABLE);
 8001602:	f44f 6364 	mov.w	r3, #3648	; 0xe40
 8001606:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800160a:	6018      	str	r0, [r3, #0]
    *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)(DISABLE);
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]

    // Enable the LSE OSC.
    *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)DISABLE;
 8001610:	f44f 6368 	mov.w	r3, #3712	; 0xe80
 8001614:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001618:	601a      	str	r2, [r3, #0]
    ArcadeIT_RCC_LSEConfig(RCC_LSE_ON);
 800161a:	f7ff ff2e 	bl	800147a <ArcadeIT_RCC_LSEConfig>

    // Wait till LSE is ready.
    while(ArcadeIT_RCC_GetFlagStatus(RCC_FLAG_LSERDY) == RESET) {};
 800161e:	2041      	movs	r0, #65	; 0x41
 8001620:	f7ff ff46 	bl	80014b0 <ArcadeIT_RCC_GetFlagStatus>
 8001624:	2800      	cmp	r0, #0
 8001626:	d0fa      	beq.n	800161e <ArcadeIT_RTC_Init+0x66>
      /* Store the new value */
      RCC->CFGR = tmpreg;
    }

    /* Select the RTC clock source */
    RCC->BDCR |= (RCC_RTCCLKSource_LSE & 0x00000FFF);
 8001628:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800162c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001630:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001632:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001636:	671a      	str	r2, [r3, #112]	; 0x70

    // Enable the RTC Clock.
    *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)ENABLE;
 8001638:	f640 633c 	movw	r3, #3644	; 0xe3c
 800163c:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8001640:	2201      	movs	r2, #1
 8001642:	601a      	str	r2, [r3, #0]

    // Wait for RTC APB registers synchronization.
    ArcadeIT_RTC_WaitForSynchro();
 8001644:	f7ff ff55 	bl	80014f2 <ArcadeIT_RTC_WaitForSynchro>

    /* Disable the write protection for RTC registers */
    RTC->WPR = 0xCA;
 8001648:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800164c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001650:	22ca      	movs	r2, #202	; 0xca
 8001652:	625a      	str	r2, [r3, #36]	; 0x24
    RTC->WPR = 0x53;
 8001654:	2253      	movs	r2, #83	; 0x53
 8001656:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (ArcadeIT_RTC_EnterInitMode() != ERROR)
 8001658:	f7ff ff7d 	bl	8001556 <ArcadeIT_RTC_EnterInitMode>
 800165c:	2801      	cmp	r0, #1
 800165e:	d013      	beq.n	8001688 <ArcadeIT_RTC_Init+0xd0>
    {
      /* Clear RTC CR FMT Bit */
      RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 8001660:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001664:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001668:	689a      	ldr	r2, [r3, #8]
 800166a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800166e:	609a      	str	r2, [r3, #8]

      /* Set RTC_CR register */
      RTC->CR |=  ((uint32_t)(RTC_HourFormat_24));
 8001670:	689a      	ldr	r2, [r3, #8]
 8001672:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      RTC->PRER = (uint32_t)(255);
 8001674:	22ff      	movs	r2, #255	; 0xff
 8001676:	611a      	str	r2, [r3, #16]
      RTC->PRER |= (uint32_t)(127 << 16);
 8001678:	691a      	ldr	r2, [r3, #16]
 800167a:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
 800167e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      RTC->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001680:	68da      	ldr	r2, [r3, #12]
 8001682:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001686:	60da      	str	r2, [r3, #12]

    } // end if

    /* Enable the write protection for RTC registers */
    RTC->WPR = 0xFF;
 8001688:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800168c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001690:	22ff      	movs	r2, #255	; 0xff
 8001692:	625a      	str	r2, [r3, #36]	; 0x24

    // Indicator for the RTC configuration.
    ArcadeIT_RTC_WriteBackupRegister(RTC_BKP_DR0, FIRST_DATA);
 8001694:	f243 21f2 	movw	r1, #13042	; 0x32f2
 8001698:	2000      	movs	r0, #0
 800169a:	f7ff fede 	bl	800145a <ArcadeIT_RTC_WriteBackupRegister>
    // Enable BKPSRAM Clock.
    RCC->AHB1ENR |= RCC_AHB1Periph_BKPSRAM;

  } // End if.

  if (gDevices & ARCADEIT_DEVICE_SERIAL)
 800169e:	f240 13f8 	movw	r3, #504	; 0x1f8
 80016a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80016ac:	d10b      	bne.n	80016c6 <ArcadeIT_RTC_Init+0x10e>
  {
    ArcadeIT_Serial_Port_String_Send(TEXT_RTC_INITED);

  } // End if.

} // End ArcadeIT_RTC_Init.
 80016ae:	bd08      	pop	{r3, pc}
    ArcadeIT_RTC_WaitForSynchro();
 80016b0:	f7ff ff1f 	bl	80014f2 <ArcadeIT_RTC_WaitForSynchro>
    RCC->AHB1ENR |= RCC_AHB1Periph_BKPSRAM;
 80016b4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80016b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80016bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016be:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80016c2:	631a      	str	r2, [r3, #48]	; 0x30
 80016c4:	e7eb      	b.n	800169e <ArcadeIT_RTC_Init+0xe6>
    ArcadeIT_Serial_Port_String_Send(TEXT_RTC_INITED);
 80016c6:	f646 7094 	movw	r0, #28564	; 0x6f94
 80016ca:	f6c0 0000 	movt	r0, #2048	; 0x800
 80016ce:	f000 fd83 	bl	80021d8 <ArcadeIT_Serial_Port_String_Send>
} // End ArcadeIT_RTC_Init.
 80016d2:	e7ec      	b.n	80016ae <ArcadeIT_RTC_Init+0xf6>

080016d4 <ArcadeIT_RTC_TimeDate_Get>:
  return status;
}

// -----------------------------------------------------------------------------
rtc_time_t ArcadeIT_RTC_TimeDate_Get(void)
{
 80016d4:	b410      	push	{r4}

  rtc_time_t lTempTime;

  uint32_t tmpreg;

  tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK);
 80016d6:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 80016da:	f2c4 0100 	movt	r1, #16384	; 0x4000
 80016de:	680b      	ldr	r3, [r1, #0]
 80016e0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80016e4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
  lTempTime.hour = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 80016e8:	f3c3 4405 	ubfx	r4, r3, #16, #6
 80016ec:	70c4      	strb	r4, [r0, #3]
  lTempTime.min = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 80016ee:	f3c3 2406 	ubfx	r4, r3, #8, #7
 80016f2:	7104      	strb	r4, [r0, #4]
  lTempTime.sec = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80016f4:	7143      	strb	r3, [r0, #5]

  tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK);
 80016f6:	684b      	ldr	r3, [r1, #4]
 80016f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80016fc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
  lTempTime.month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8001700:	f3c3 2104 	ubfx	r1, r3, #8, #5
 8001704:	7001      	strb	r1, [r0, #0]
  lTempTime.mday = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 8001706:	7043      	strb	r3, [r0, #1]
  lTempTime.year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8001708:	0c1b      	lsrs	r3, r3, #16
 800170a:	7083      	strb	r3, [r0, #2]

  return lTempTime;

} // End ArcadeIT_RTC_TimeDate_Get.
 800170c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001710:	4770      	bx	lr

08001712 <wait_ready>:
// /////////////////////////////////////////////////////////////////////////////
static int32_t wait_ready
(
  uint32_t pTimeOut   // Timeout in milliseconds.
)
{
 8001712:	b508      	push	{r3, lr}
  // pTimeOut:  Timeout [ms]
  // lReturnValue : 1:Ready, 0:Timeout

  uint8_t lData;

  gSecondaryTimer = pTimeOut;
 8001714:	f240 13fc 	movw	r3, #508	; 0x1fc
 8001718:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800171c:	6018      	str	r0, [r3, #0]

  do {
    lData = ArcadeIT_SPI_Port_RW_Byte(DUMMY_BYTE);
 800171e:	20ff      	movs	r0, #255	; 0xff
 8001720:	f000 fc05 	bl	8001f2e <ArcadeIT_SPI_Port_RW_Byte>
    // This loop takes a time. Insert rot_rdq() here for multi task environment.

  } while (lData != DUMMY_BYTE && gSecondaryTimer); // Wait for card goes ready or timeout
 8001724:	28ff      	cmp	r0, #255	; 0xff
 8001726:	d006      	beq.n	8001736 <wait_ready+0x24>
 8001728:	f240 13fc 	movw	r3, #508	; 0x1fc
 800172c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1f3      	bne.n	800171e <wait_ready+0xc>

  return (lData == DUMMY_BYTE) ? 1 : 0;

} // End wait_ready.
 8001736:	28ff      	cmp	r0, #255	; 0xff
 8001738:	bf14      	ite	ne
 800173a:	2000      	movne	r0, #0
 800173c:	2001      	moveq	r0, #1
 800173e:	bd08      	pop	{r3, pc}

08001740 <sd_deselect>:

// /////////////////////////////////////////////////////////////////////////////
static void sd_deselect(void)
{
 8001740:	b508      	push	{r3, lr}
  // Deselect card and release SPI.
  SYS_SPI_CS_HIGH();
 8001742:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001746:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800174a:	695a      	ldr	r2, [r3, #20]
 800174c:	f042 0210 	orr.w	r2, r2, #16
 8001750:	615a      	str	r2, [r3, #20]

  // Dummy clock (force DO hi-z for multiple slave SPI).
  ArcadeIT_SPI_Port_RW_Byte(DUMMY_BYTE);
 8001752:	20ff      	movs	r0, #255	; 0xff
 8001754:	f000 fbeb 	bl	8001f2e <ArcadeIT_SPI_Port_RW_Byte>

} // End sd_deselect.
 8001758:	bd08      	pop	{r3, pc}

0800175a <sd_select>:

// /////////////////////////////////////////////////////////////////////////////
static int sd_select (void) /* 1:OK, 0:Timeout */
{
 800175a:	b508      	push	{r3, lr}
  // Select card and wait for ready
  // lReturnValue :  1:OK, 0:Timeout
  SYS_SPI_CS_LOW();
 800175c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001760:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001764:	695a      	ldr	r2, [r3, #20]
 8001766:	f022 0210 	bic.w	r2, r2, #16
 800176a:	615a      	str	r2, [r3, #20]

  // Dummy clock (force DO enabled).
  ArcadeIT_SPI_Port_RW_Byte(DUMMY_BYTE);
 800176c:	20ff      	movs	r0, #255	; 0xff
 800176e:	f000 fbde 	bl	8001f2e <ArcadeIT_SPI_Port_RW_Byte>

  if (wait_ready(ARCADEIT_MILLISECOND)) return TRUE; // OK
 8001772:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001776:	f7ff ffcc 	bl	8001712 <wait_ready>
 800177a:	b108      	cbz	r0, 8001780 <sd_select+0x26>
 800177c:	2001      	movs	r0, #1

  sd_deselect();

  return FALSE; // Timeout.

} // End sd_select.
 800177e:	bd08      	pop	{r3, pc}
  sd_deselect();
 8001780:	f7ff ffde 	bl	8001740 <sd_deselect>
  return FALSE; // Timeout.
 8001784:	2000      	movs	r0, #0
 8001786:	e7fa      	b.n	800177e <sd_select+0x24>

08001788 <send_cmd>:
(
  BYTE  pCommand,   // Command index
  DWORD pArgument   // Argument
                    // Return value: R1 resp (bit7==1:Failed to send)
)
{
 8001788:	b538      	push	{r3, r4, r5, lr}
 800178a:	4604      	mov	r4, r0
 800178c:	460d      	mov	r5, r1
  BYTE n, lResult;

  uint8_t lData;

  if (pCommand & 0x80)
 800178e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001792:	d12c      	bne.n	80017ee <send_cmd+0x66>
    if (lResult > 1) return lResult;

  } // End if.

  // Select the card and wait for ready except to stop multiple block read.
  if (pCommand != CMD12)
 8001794:	2c0c      	cmp	r4, #12
 8001796:	d004      	beq.n	80017a2 <send_cmd+0x1a>
  {
    sd_deselect();
 8001798:	f7ff ffd2 	bl	8001740 <sd_deselect>

    if (!sd_select()) return DUMMY_BYTE;
 800179c:	f7ff ffdd 	bl	800175a <sd_select>
 80017a0:	b3b0      	cbz	r0, 8001810 <send_cmd+0x88>

  } // End if.

  // Send command packet.
  ArcadeIT_SPI_Port_RW_Byte(0x40 | pCommand);          // Start + command index
 80017a2:	f044 0040 	orr.w	r0, r4, #64	; 0x40
 80017a6:	f000 fbc2 	bl	8001f2e <ArcadeIT_SPI_Port_RW_Byte>
  ArcadeIT_SPI_Port_RW_Byte((pArgument >> 24) & 0xFF); // Argument[31..24]
 80017aa:	0e28      	lsrs	r0, r5, #24
 80017ac:	f000 fbbf 	bl	8001f2e <ArcadeIT_SPI_Port_RW_Byte>
  ArcadeIT_SPI_Port_RW_Byte((pArgument >> 16) & 0xFF); // Argument[23..16]
 80017b0:	f3c5 4007 	ubfx	r0, r5, #16, #8
 80017b4:	f000 fbbb 	bl	8001f2e <ArcadeIT_SPI_Port_RW_Byte>
  ArcadeIT_SPI_Port_RW_Byte((pArgument >> 8) & 0xFF);  // Argument[15..8]
 80017b8:	f3c5 2007 	ubfx	r0, r5, #8, #8
 80017bc:	f000 fbb7 	bl	8001f2e <ArcadeIT_SPI_Port_RW_Byte>
  ArcadeIT_SPI_Port_RW_Byte(pArgument & 0xFF);         // Argument[7..0]
 80017c0:	b2e8      	uxtb	r0, r5
 80017c2:	f000 fbb4 	bl	8001f2e <ArcadeIT_SPI_Port_RW_Byte>

  lData = 0x01;                        // Dummy CRC + Stop.
  if (pCommand == CMD0) lData = 0x95;  // Valid CRC for CMD0(0).
 80017c6:	b1dc      	cbz	r4, 8001800 <send_cmd+0x78>
  lData = 0x01;                        // Dummy CRC + Stop.
 80017c8:	2001      	movs	r0, #1
  if (pCommand == CMD8) lData = 0x87;  // Valid CRC for CMD8(0x1AA).
 80017ca:	2c08      	cmp	r4, #8
 80017cc:	d01a      	beq.n	8001804 <send_cmd+0x7c>

  ArcadeIT_SPI_Port_RW_Byte(lData);
 80017ce:	f000 fbae 	bl	8001f2e <ArcadeIT_SPI_Port_RW_Byte>

  // Receive command response.
  lData = DUMMY_BYTE;

  // Discard following one byte when CMD12.
  if (pCommand == CMD12) ArcadeIT_SPI_Port_RW_Byte(lData);
 80017d2:	2c0c      	cmp	r4, #12
 80017d4:	d018      	beq.n	8001808 <send_cmd+0x80>
  if (pCommand == CMD8) lData = 0x87;  // Valid CRC for CMD8(0x1AA).
 80017d6:	240a      	movs	r4, #10

  // Wait for response (10 bytes max).
  n = 10;
  do {
    lResult = ArcadeIT_SPI_Port_RW_Byte(lData);
 80017d8:	20ff      	movs	r0, #255	; 0xff
 80017da:	f000 fba8 	bl	8001f2e <ArcadeIT_SPI_Port_RW_Byte>

  } while ((lResult & 0x80) && --n);
 80017de:	f010 0f80 	tst.w	r0, #128	; 0x80
 80017e2:	d003      	beq.n	80017ec <send_cmd+0x64>
 80017e4:	1e63      	subs	r3, r4, #1
 80017e6:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 80017ea:	d1f5      	bne.n	80017d8 <send_cmd+0x50>

  // Return received response.
  return lResult;

} // End send_cmd.
 80017ec:	bd38      	pop	{r3, r4, r5, pc}
    pCommand &= 0x7F;
 80017ee:	f000 047f 	and.w	r4, r0, #127	; 0x7f
    lResult = send_cmd(CMD55, 0);
 80017f2:	2100      	movs	r1, #0
 80017f4:	2037      	movs	r0, #55	; 0x37
 80017f6:	f7ff ffc7 	bl	8001788 <send_cmd>
    if (lResult > 1) return lResult;
 80017fa:	2801      	cmp	r0, #1
 80017fc:	d8f6      	bhi.n	80017ec <send_cmd+0x64>
 80017fe:	e7c9      	b.n	8001794 <send_cmd+0xc>
  if (pCommand == CMD0) lData = 0x95;  // Valid CRC for CMD0(0).
 8001800:	2095      	movs	r0, #149	; 0x95
 8001802:	e7e2      	b.n	80017ca <send_cmd+0x42>
  if (pCommand == CMD8) lData = 0x87;  // Valid CRC for CMD8(0x1AA).
 8001804:	2087      	movs	r0, #135	; 0x87
 8001806:	e7e2      	b.n	80017ce <send_cmd+0x46>
  if (pCommand == CMD12) ArcadeIT_SPI_Port_RW_Byte(lData);
 8001808:	20ff      	movs	r0, #255	; 0xff
 800180a:	f000 fb90 	bl	8001f2e <ArcadeIT_SPI_Port_RW_Byte>
 800180e:	e7e2      	b.n	80017d6 <send_cmd+0x4e>
    if (!sd_select()) return DUMMY_BYTE;
 8001810:	20ff      	movs	r0, #255	; 0xff
 8001812:	e7eb      	b.n	80017ec <send_cmd+0x64>

08001814 <sd_read_block>:
{
 8001814:	b538      	push	{r3, r4, r5, lr}
 8001816:	4604      	mov	r4, r0
 8001818:	460d      	mov	r5, r1
  gSecondaryTimer = 200;
 800181a:	f240 13fc 	movw	r3, #508	; 0x1fc
 800181e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001822:	22c8      	movs	r2, #200	; 0xc8
 8001824:	601a      	str	r2, [r3, #0]
    lToken = ArcadeIT_SPI_Port_RW_Byte(DUMMY_BYTE);
 8001826:	20ff      	movs	r0, #255	; 0xff
 8001828:	f000 fb81 	bl	8001f2e <ArcadeIT_SPI_Port_RW_Byte>
  } while ((lToken == DUMMY_BYTE) && gSecondaryTimer);
 800182c:	28ff      	cmp	r0, #255	; 0xff
 800182e:	d106      	bne.n	800183e <sd_read_block+0x2a>
 8001830:	f240 13fc 	movw	r3, #508	; 0x1fc
 8001834:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1f3      	bne.n	8001826 <sd_read_block+0x12>
  if(lToken != 0xFE) return 0;
 800183e:	28fe      	cmp	r0, #254	; 0xfe
 8001840:	d001      	beq.n	8001846 <sd_read_block+0x32>
 8001842:	2000      	movs	r0, #0
} // End sd_read_block.
 8001844:	bd38      	pop	{r3, r4, r5, pc}
  ArcadeIT_SPI_Port_Read_Buffer(pBuffer, pNumberOfBytes);
 8001846:	4629      	mov	r1, r5
 8001848:	4620      	mov	r0, r4
 800184a:	f000 fb98 	bl	8001f7e <ArcadeIT_SPI_Port_Read_Buffer>
  ArcadeIT_SPI_Port_RW_Byte(DUMMY_BYTE);
 800184e:	20ff      	movs	r0, #255	; 0xff
 8001850:	f000 fb6d 	bl	8001f2e <ArcadeIT_SPI_Port_RW_Byte>
  ArcadeIT_SPI_Port_RW_Byte(DUMMY_BYTE);
 8001854:	20ff      	movs	r0, #255	; 0xff
 8001856:	f000 fb6a 	bl	8001f2e <ArcadeIT_SPI_Port_RW_Byte>
  return 1;
 800185a:	2001      	movs	r0, #1
 800185c:	e7f2      	b.n	8001844 <sd_read_block+0x30>

0800185e <sd_write_block>:
{
 800185e:	b538      	push	{r3, r4, r5, lr}
 8001860:	4605      	mov	r5, r0
 8001862:	460c      	mov	r4, r1
  if (!wait_ready(500)) return 0;
 8001864:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001868:	f7ff ff53 	bl	8001712 <wait_ready>
 800186c:	b908      	cbnz	r0, 8001872 <sd_write_block+0x14>
 800186e:	2000      	movs	r0, #0
} // End sd_write_block.
 8001870:	bd38      	pop	{r3, r4, r5, pc}
  ArcadeIT_SPI_Port_RW_Byte(pToken);
 8001872:	4620      	mov	r0, r4
 8001874:	f000 fb5b 	bl	8001f2e <ArcadeIT_SPI_Port_RW_Byte>
  if (pToken != 0xFD)
 8001878:	2cfd      	cmp	r4, #253	; 0xfd
 800187a:	d013      	beq.n	80018a4 <sd_write_block+0x46>
    ArcadeIT_SPI_Port_Write_Buffer(pBuffer, 512);
 800187c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001880:	4628      	mov	r0, r5
 8001882:	f000 fb89 	bl	8001f98 <ArcadeIT_SPI_Port_Write_Buffer>
    ArcadeIT_SPI_Port_RW_Byte(DUMMY_BYTE);
 8001886:	20ff      	movs	r0, #255	; 0xff
 8001888:	f000 fb51 	bl	8001f2e <ArcadeIT_SPI_Port_RW_Byte>
    ArcadeIT_SPI_Port_RW_Byte(DUMMY_BYTE);
 800188c:	20ff      	movs	r0, #255	; 0xff
 800188e:	f000 fb4e 	bl	8001f2e <ArcadeIT_SPI_Port_RW_Byte>
    lResponse = ArcadeIT_SPI_Port_RW_Byte(DUMMY_BYTE);
 8001892:	20ff      	movs	r0, #255	; 0xff
 8001894:	f000 fb4b 	bl	8001f2e <ArcadeIT_SPI_Port_RW_Byte>
    if ((lResponse & 0x1F) != 0x05) return 0;
 8001898:	f000 001f 	and.w	r0, r0, #31
 800189c:	2805      	cmp	r0, #5
 800189e:	d003      	beq.n	80018a8 <sd_write_block+0x4a>
 80018a0:	2000      	movs	r0, #0
 80018a2:	e7e5      	b.n	8001870 <sd_write_block+0x12>
  return 1;
 80018a4:	2001      	movs	r0, #1
 80018a6:	e7e3      	b.n	8001870 <sd_write_block+0x12>
 80018a8:	2001      	movs	r0, #1
 80018aa:	e7e1      	b.n	8001870 <sd_write_block+0x12>

080018ac <ArcadeIT_SDCard_Disk_Initialize>:

// /////////////////////////////////////////////////////////////////////////////
DSTATUS ArcadeIT_SDCard_Disk_Initialize(void)
{
 80018ac:	b570      	push	{r4, r5, r6, lr}
 80018ae:	b082      	sub	sp, #8
  BYTE n, cmd, ty, ocr[4];

  BYTE lData = DUMMY_BYTE;

  SYS_SPI_SLOW();
 80018b0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80018b4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 80018be:	601a      	str	r2, [r3, #0]

  // Send 80 dummy clocks.
  for (n = 40; n; n--) ArcadeIT_SPI_Port_RW_Byte(DUMMY_BYTE);
 80018c0:	2428      	movs	r4, #40	; 0x28
 80018c2:	e004      	b.n	80018ce <ArcadeIT_SDCard_Disk_Initialize+0x22>
 80018c4:	20ff      	movs	r0, #255	; 0xff
 80018c6:	f000 fb32 	bl	8001f2e <ArcadeIT_SPI_Port_RW_Byte>
 80018ca:	3c01      	subs	r4, #1
 80018cc:	b2e4      	uxtb	r4, r4
 80018ce:	2c00      	cmp	r4, #0
 80018d0:	d1f8      	bne.n	80018c4 <ArcadeIT_SDCard_Disk_Initialize+0x18>

  ty = 0;
  if (send_cmd(CMD0, 0) == 1)
 80018d2:	2100      	movs	r1, #0
 80018d4:	4608      	mov	r0, r1
 80018d6:	f7ff ff57 	bl	8001788 <send_cmd>
 80018da:	4605      	mov	r5, r0
 80018dc:	2801      	cmp	r0, #1
 80018de:	d016      	beq.n	800190e <ArcadeIT_SDCard_Disk_Initialize+0x62>

    } // End if.

  } // End if.

  gCardType = ty;  // Card type
 80018e0:	f240 6360 	movw	r3, #1632	; 0x660
 80018e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80018e8:	701c      	strb	r4, [r3, #0]

  sd_deselect();
 80018ea:	f7ff ff29 	bl	8001740 <sd_deselect>

  if (ty)
 80018ee:	2c00      	cmp	r4, #0
 80018f0:	f040 808e 	bne.w	8001a10 <ArcadeIT_SDCard_Disk_Initialize+0x164>
    gStatus[DEV_SD] &= ~STA_NOINIT;  // Clear STA_NOINIT flag
  }
  else
  {
    // Failed
    gStatus[DEV_SD] = STA_NOINIT;
 80018f4:	f240 0304 	movw	r3, #4
 80018f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80018fc:	2201      	movs	r2, #1
 80018fe:	705a      	strb	r2, [r3, #1]

  } // End if.

  return gStatus[DEV_SD];
 8001900:	f240 0304 	movw	r3, #4
 8001904:	f2c2 0300 	movt	r3, #8192	; 0x2000

} // End ArcadeIT_SDCard_Disk_Initialize.
 8001908:	7858      	ldrb	r0, [r3, #1]
 800190a:	b002      	add	sp, #8
 800190c:	bd70      	pop	{r4, r5, r6, pc}
    if (send_cmd(CMD8, 0x1AA) == 1)
 800190e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001912:	2008      	movs	r0, #8
 8001914:	f7ff ff38 	bl	8001788 <send_cmd>
 8001918:	2801      	cmp	r0, #1
 800191a:	d148      	bne.n	80019ae <ArcadeIT_SDCard_Disk_Initialize+0x102>
      for (n = 0; n < 4; n++)
 800191c:	4625      	mov	r5, r4
 800191e:	e008      	b.n	8001932 <ArcadeIT_SDCard_Disk_Initialize+0x86>
        lData = ArcadeIT_SPI_Port_RW_Byte(DUMMY_BYTE);
 8001920:	20ff      	movs	r0, #255	; 0xff
 8001922:	f000 fb04 	bl	8001f2e <ArcadeIT_SPI_Port_RW_Byte>
        ocr[n] = lData;
 8001926:	ab02      	add	r3, sp, #8
 8001928:	442b      	add	r3, r5
 800192a:	f803 0c04 	strb.w	r0, [r3, #-4]
      for (n = 0; n < 4; n++)
 800192e:	3501      	adds	r5, #1
 8001930:	b2ed      	uxtb	r5, r5
 8001932:	2d03      	cmp	r5, #3
 8001934:	d9f4      	bls.n	8001920 <ArcadeIT_SDCard_Disk_Initialize+0x74>
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001936:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d1d0      	bne.n	80018e0 <ArcadeIT_SDCard_Disk_Initialize+0x34>
 800193e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001942:	2baa      	cmp	r3, #170	; 0xaa
 8001944:	d1cc      	bne.n	80018e0 <ArcadeIT_SDCard_Disk_Initialize+0x34>
        gSecondaryTimer = ARCADEIT_MILLISECOND;
 8001946:	f240 13fc 	movw	r3, #508	; 0x1fc
 800194a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800194e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001952:	601a      	str	r2, [r3, #0]
        while (gSecondaryTimer && send_cmd(ACMD41, 1UL << 30)); // Wait for end of initialization with ACMD41(HCS)
 8001954:	f240 13fc 	movw	r3, #508	; 0x1fc
 8001958:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	b133      	cbz	r3, 800196e <ArcadeIT_SDCard_Disk_Initialize+0xc2>
 8001960:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001964:	20a9      	movs	r0, #169	; 0xa9
 8001966:	f7ff ff0f 	bl	8001788 <send_cmd>
 800196a:	2800      	cmp	r0, #0
 800196c:	d1f2      	bne.n	8001954 <ArcadeIT_SDCard_Disk_Initialize+0xa8>
        if (gSecondaryTimer && send_cmd(CMD58, 0) == 0)
 800196e:	f240 13fc 	movw	r3, #508	; 0x1fc
 8001972:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d0b1      	beq.n	80018e0 <ArcadeIT_SDCard_Disk_Initialize+0x34>
 800197c:	2100      	movs	r1, #0
 800197e:	203a      	movs	r0, #58	; 0x3a
 8001980:	f7ff ff02 	bl	8001788 <send_cmd>
 8001984:	4605      	mov	r5, r0
 8001986:	b148      	cbz	r0, 800199c <ArcadeIT_SDCard_Disk_Initialize+0xf0>
 8001988:	e7aa      	b.n	80018e0 <ArcadeIT_SDCard_Disk_Initialize+0x34>
            lData = ArcadeIT_SPI_Port_RW_Byte(DUMMY_BYTE);
 800198a:	20ff      	movs	r0, #255	; 0xff
 800198c:	f000 facf 	bl	8001f2e <ArcadeIT_SPI_Port_RW_Byte>
            ocr[n] = lData;
 8001990:	ab02      	add	r3, sp, #8
 8001992:	442b      	add	r3, r5
 8001994:	f803 0c04 	strb.w	r0, [r3, #-4]
          for (n = 0; n < 4; n++)
 8001998:	3501      	adds	r5, #1
 800199a:	b2ed      	uxtb	r5, r5
 800199c:	2d03      	cmp	r5, #3
 800199e:	d9f4      	bls.n	800198a <ArcadeIT_SDCard_Disk_Initialize+0xde>
          ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;  // Card id SDv2
 80019a0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80019a4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80019a8:	d030      	beq.n	8001a0c <ArcadeIT_SDCard_Disk_Initialize+0x160>
 80019aa:	240c      	movs	r4, #12
 80019ac:	e798      	b.n	80018e0 <ArcadeIT_SDCard_Disk_Initialize+0x34>
      if (send_cmd(ACMD41, 0) <= 1)
 80019ae:	2100      	movs	r1, #0
 80019b0:	20a9      	movs	r0, #169	; 0xa9
 80019b2:	f7ff fee9 	bl	8001788 <send_cmd>
 80019b6:	2801      	cmp	r0, #1
 80019b8:	d925      	bls.n	8001a06 <ArcadeIT_SDCard_Disk_Initialize+0x15a>
        ty = CT_MMC;
 80019ba:	462e      	mov	r6, r5
      gSecondaryTimer = ARCADEIT_MILLISECOND;
 80019bc:	f240 13fc 	movw	r3, #508	; 0x1fc
 80019c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80019c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019c8:	601a      	str	r2, [r3, #0]
      while (gSecondaryTimer && send_cmd(cmd, 0));    // Wait for end of initialization
 80019ca:	f240 13fc 	movw	r3, #508	; 0x1fc
 80019ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	b12b      	cbz	r3, 80019e2 <ArcadeIT_SDCard_Disk_Initialize+0x136>
 80019d6:	2100      	movs	r1, #0
 80019d8:	4628      	mov	r0, r5
 80019da:	f7ff fed5 	bl	8001788 <send_cmd>
 80019de:	2800      	cmp	r0, #0
 80019e0:	d1f3      	bne.n	80019ca <ArcadeIT_SDCard_Disk_Initialize+0x11e>
      if (!gSecondaryTimer || send_cmd(CMD16, 512) != 0) // Set block length: 512
 80019e2:	f240 13fc 	movw	r3, #508	; 0x1fc
 80019e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	f43f af77 	beq.w	80018e0 <ArcadeIT_SDCard_Disk_Initialize+0x34>
 80019f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019f6:	2010      	movs	r0, #16
 80019f8:	f7ff fec6 	bl	8001788 <send_cmd>
 80019fc:	2800      	cmp	r0, #0
 80019fe:	f47f af6f 	bne.w	80018e0 <ArcadeIT_SDCard_Disk_Initialize+0x34>
 8001a02:	4634      	mov	r4, r6
 8001a04:	e76c      	b.n	80018e0 <ArcadeIT_SDCard_Disk_Initialize+0x34>
        ty = CT_SD1;
 8001a06:	2602      	movs	r6, #2
        cmd = ACMD41;  // SDv1 (ACMD41(0))
 8001a08:	25a9      	movs	r5, #169	; 0xa9
 8001a0a:	e7d7      	b.n	80019bc <ArcadeIT_SDCard_Disk_Initialize+0x110>
          ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;  // Card id SDv2
 8001a0c:	2404      	movs	r4, #4
 8001a0e:	e767      	b.n	80018e0 <ArcadeIT_SDCard_Disk_Initialize+0x34>
    SYS_SPI_FAST();                      // Set fast clock
 8001a10:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001a14:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8001a18:	6813      	ldr	r3, [r2, #0]
 8001a1a:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001a1e:	f043 0308 	orr.w	r3, r3, #8
 8001a22:	6013      	str	r3, [r2, #0]
    gStatus[DEV_SD] &= ~STA_NOINIT;  // Clear STA_NOINIT flag
 8001a24:	f240 0304 	movw	r3, #4
 8001a28:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a2c:	785a      	ldrb	r2, [r3, #1]
 8001a2e:	f022 0201 	bic.w	r2, r2, #1
 8001a32:	705a      	strb	r2, [r3, #1]
 8001a34:	e764      	b.n	8001900 <ArcadeIT_SDCard_Disk_Initialize+0x54>

08001a36 <ArcadeIT_SDCard_Disk_Status>:

// /////////////////////////////////////////////////////////////////////////////
DSTATUS ArcadeIT_SDCard_Disk_Status (void)
{
  // Return disk status.
  return gStatus[DEV_SD];
 8001a36:	f240 0304 	movw	r3, #4
 8001a3a:	f2c2 0300 	movt	r3, #8192	; 0x2000

} // End ArcadeIT_SDCard_Disk_Status.
 8001a3e:	7858      	ldrb	r0, [r3, #1]
 8001a40:	4770      	bx	lr

08001a42 <ArcadeIT_SDCard_Disk_Read>:
  BYTE *pBuffer,   // Pointer to the data buffer to store read data
  DWORD pSector,   // Start pSector number (LBA)
  UINT  pCount     // Number of sectors to read (1..128)
)
{
  if (!pCount) return RES_PARERR;   // Check parameter
 8001a42:	2a00      	cmp	r2, #0
 8001a44:	d03b      	beq.n	8001abe <ArcadeIT_SDCard_Disk_Read+0x7c>
{
 8001a46:	b538      	push	{r3, r4, r5, lr}
 8001a48:	4605      	mov	r5, r0
 8001a4a:	4614      	mov	r4, r2

  if (gStatus[DEV_SD] & STA_NOINIT) return RES_NOTRDY; // Check if drive is ready
 8001a4c:	f240 0304 	movw	r3, #4
 8001a50:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a54:	785b      	ldrb	r3, [r3, #1]
 8001a56:	f013 0f01 	tst.w	r3, #1
 8001a5a:	d132      	bne.n	8001ac2 <ArcadeIT_SDCard_Disk_Read+0x80>

  if (!(gCardType & CT_BLOCK)) pSector *= 512;  // LBA of BA conversion (byte addressing cards)
 8001a5c:	f240 6360 	movw	r3, #1632	; 0x660
 8001a60:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	f013 0f08 	tst.w	r3, #8
 8001a6a:	d100      	bne.n	8001a6e <ArcadeIT_SDCard_Disk_Read+0x2c>
 8001a6c:	0249      	lsls	r1, r1, #9

  if (pCount == 1)
 8001a6e:	2c01      	cmp	r4, #1
 8001a70:	d017      	beq.n	8001aa2 <ArcadeIT_SDCard_Disk_Read+0x60>
    }
  }
  else
  {
    // Multiple pSector read
    if (send_cmd(CMD18, pSector) == 0)
 8001a72:	2012      	movs	r0, #18
 8001a74:	f7ff fe88 	bl	8001788 <send_cmd>
 8001a78:	b968      	cbnz	r0, 8001a96 <ArcadeIT_SDCard_Disk_Read+0x54>
    {
      // READ_MULTIPLE_BLOCK
      do {
        if (!sd_read_block(pBuffer, 512)) break;
 8001a7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a7e:	4628      	mov	r0, r5
 8001a80:	f7ff fec8 	bl	8001814 <sd_read_block>
 8001a84:	b118      	cbz	r0, 8001a8e <ArcadeIT_SDCard_Disk_Read+0x4c>

        pBuffer += 512;
 8001a86:	f505 7500 	add.w	r5, r5, #512	; 0x200

      } while (--pCount);
 8001a8a:	3c01      	subs	r4, #1
 8001a8c:	d1f5      	bne.n	8001a7a <ArcadeIT_SDCard_Disk_Read+0x38>

      // STOP_TRANSMISSION
      send_cmd(CMD12, 0);
 8001a8e:	2100      	movs	r1, #0
 8001a90:	200c      	movs	r0, #12
 8001a92:	f7ff fe79 	bl	8001788 <send_cmd>
    }
  }

  sd_deselect();
 8001a96:	f7ff fe53 	bl	8001740 <sd_deselect>

  // Return result
  return pCount ? RES_ERROR : RES_OK;
 8001a9a:	1c20      	adds	r0, r4, #0
 8001a9c:	bf18      	it	ne
 8001a9e:	2001      	movne	r0, #1

} // End ArcadeIT_SDCard_Disk_Read.
 8001aa0:	bd38      	pop	{r3, r4, r5, pc}
    if ((send_cmd(CMD17, pSector) == 0) && sd_read_block(pBuffer, 512))
 8001aa2:	2011      	movs	r0, #17
 8001aa4:	f7ff fe70 	bl	8001788 <send_cmd>
 8001aa8:	2800      	cmp	r0, #0
 8001aaa:	d1f4      	bne.n	8001a96 <ArcadeIT_SDCard_Disk_Read+0x54>
 8001aac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ab0:	4628      	mov	r0, r5
 8001ab2:	f7ff feaf 	bl	8001814 <sd_read_block>
 8001ab6:	2800      	cmp	r0, #0
 8001ab8:	d0ed      	beq.n	8001a96 <ArcadeIT_SDCard_Disk_Read+0x54>
      pCount = 0;
 8001aba:	2400      	movs	r4, #0
 8001abc:	e7eb      	b.n	8001a96 <ArcadeIT_SDCard_Disk_Read+0x54>
  if (!pCount) return RES_PARERR;   // Check parameter
 8001abe:	2004      	movs	r0, #4
} // End ArcadeIT_SDCard_Disk_Read.
 8001ac0:	4770      	bx	lr
  if (gStatus[DEV_SD] & STA_NOINIT) return RES_NOTRDY; // Check if drive is ready
 8001ac2:	2003      	movs	r0, #3
 8001ac4:	e7ec      	b.n	8001aa0 <ArcadeIT_SDCard_Disk_Read+0x5e>

08001ac6 <ArcadeIT_SDCard_Disk_Write>:
  const BYTE *pBuffer,   // Pointer to the data to write
  DWORD pSector,   // Start pSector number (LBA)
  UINT  pCount     // Number of sectors to write (1..128)
)
{
  if (!pCount) return RES_PARERR;   // Check parameter
 8001ac6:	2a00      	cmp	r2, #0
 8001ac8:	d04a      	beq.n	8001b60 <ArcadeIT_SDCard_Disk_Write+0x9a>
{
 8001aca:	b570      	push	{r4, r5, r6, lr}
 8001acc:	4605      	mov	r5, r0
 8001ace:	460e      	mov	r6, r1
 8001ad0:	4614      	mov	r4, r2
  if (gStatus[DEV_SD] & STA_NOINIT) return RES_NOTRDY; // Check if drive is ready
 8001ad2:	f240 0304 	movw	r3, #4
 8001ad6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ada:	785b      	ldrb	r3, [r3, #1]
 8001adc:	f013 0f01 	tst.w	r3, #1
 8001ae0:	d140      	bne.n	8001b64 <ArcadeIT_SDCard_Disk_Write+0x9e>
  if (gStatus[DEV_SD] & STA_PROTECT) return RES_WRPRT; // Check write protect
 8001ae2:	f013 0f04 	tst.w	r3, #4
 8001ae6:	d13f      	bne.n	8001b68 <ArcadeIT_SDCard_Disk_Write+0xa2>

  if (!(gCardType & CT_BLOCK)) pSector *= 512;  // LBA ==> BA conversion (byte addressing cards)
 8001ae8:	f240 6360 	movw	r3, #1632	; 0x660
 8001aec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	f013 0f08 	tst.w	r3, #8
 8001af6:	d100      	bne.n	8001afa <ArcadeIT_SDCard_Disk_Write+0x34>
 8001af8:	024e      	lsls	r6, r1, #9

  if (pCount == 1)
 8001afa:	2c01      	cmp	r4, #1
 8001afc:	d01b      	beq.n	8001b36 <ArcadeIT_SDCard_Disk_Write+0x70>

    } // End if.
  }
  else
  {        // Multiple pSector write
    if (gCardType & CT_SDC) send_cmd(ACMD23, pCount); // Predefine number of sectors
 8001afe:	f013 0f06 	tst.w	r3, #6
 8001b02:	d126      	bne.n	8001b52 <ArcadeIT_SDCard_Disk_Write+0x8c>

    if (send_cmd(CMD25, pSector) == 0)
 8001b04:	4631      	mov	r1, r6
 8001b06:	2019      	movs	r0, #25
 8001b08:	f7ff fe3e 	bl	8001788 <send_cmd>
 8001b0c:	b968      	cbnz	r0, 8001b2a <ArcadeIT_SDCard_Disk_Write+0x64>
    {
      // WRITE_MULTIPLE_BLOCK
      do {
        if (!sd_write_block((BYTE*)pBuffer, 0xFC)) break;
 8001b0e:	21fc      	movs	r1, #252	; 0xfc
 8001b10:	4628      	mov	r0, r5
 8001b12:	f7ff fea4 	bl	800185e <sd_write_block>
 8001b16:	b118      	cbz	r0, 8001b20 <ArcadeIT_SDCard_Disk_Write+0x5a>

        pBuffer += 512;
 8001b18:	f505 7500 	add.w	r5, r5, #512	; 0x200

      } while (--pCount);
 8001b1c:	3c01      	subs	r4, #1
 8001b1e:	d1f6      	bne.n	8001b0e <ArcadeIT_SDCard_Disk_Write+0x48>

      if (!sd_write_block(0, 0xFD)) pCount = 1;  // STOP_TRAN token
 8001b20:	21fd      	movs	r1, #253	; 0xfd
 8001b22:	2000      	movs	r0, #0
 8001b24:	f7ff fe9b 	bl	800185e <sd_write_block>
 8001b28:	b1c0      	cbz	r0, 8001b5c <ArcadeIT_SDCard_Disk_Write+0x96>

    } // End if.

  } // End if.

  sd_deselect();
 8001b2a:	f7ff fe09 	bl	8001740 <sd_deselect>

  // Return result.
  return pCount ? RES_ERROR : RES_OK;
 8001b2e:	1c20      	adds	r0, r4, #0
 8001b30:	bf18      	it	ne
 8001b32:	2001      	movne	r0, #1

} // End ArcadeIT_SDCard_Disk_Write.
 8001b34:	bd70      	pop	{r4, r5, r6, pc}
    if ((send_cmd(CMD24, pSector) == 0) && sd_write_block((BYTE*)pBuffer, 0xFE))
 8001b36:	4631      	mov	r1, r6
 8001b38:	2018      	movs	r0, #24
 8001b3a:	f7ff fe25 	bl	8001788 <send_cmd>
 8001b3e:	2800      	cmp	r0, #0
 8001b40:	d1f3      	bne.n	8001b2a <ArcadeIT_SDCard_Disk_Write+0x64>
 8001b42:	21fe      	movs	r1, #254	; 0xfe
 8001b44:	4628      	mov	r0, r5
 8001b46:	f7ff fe8a 	bl	800185e <sd_write_block>
 8001b4a:	2800      	cmp	r0, #0
 8001b4c:	d0ed      	beq.n	8001b2a <ArcadeIT_SDCard_Disk_Write+0x64>
      pCount = 0;
 8001b4e:	2400      	movs	r4, #0
 8001b50:	e7eb      	b.n	8001b2a <ArcadeIT_SDCard_Disk_Write+0x64>
    if (gCardType & CT_SDC) send_cmd(ACMD23, pCount); // Predefine number of sectors
 8001b52:	4621      	mov	r1, r4
 8001b54:	2097      	movs	r0, #151	; 0x97
 8001b56:	f7ff fe17 	bl	8001788 <send_cmd>
 8001b5a:	e7d3      	b.n	8001b04 <ArcadeIT_SDCard_Disk_Write+0x3e>
      if (!sd_write_block(0, 0xFD)) pCount = 1;  // STOP_TRAN token
 8001b5c:	2401      	movs	r4, #1
 8001b5e:	e7e4      	b.n	8001b2a <ArcadeIT_SDCard_Disk_Write+0x64>
  if (!pCount) return RES_PARERR;   // Check parameter
 8001b60:	2004      	movs	r0, #4
} // End ArcadeIT_SDCard_Disk_Write.
 8001b62:	4770      	bx	lr
  if (gStatus[DEV_SD] & STA_NOINIT) return RES_NOTRDY; // Check if drive is ready
 8001b64:	2003      	movs	r0, #3
 8001b66:	e7e5      	b.n	8001b34 <ArcadeIT_SDCard_Disk_Write+0x6e>
  if (gStatus[DEV_SD] & STA_PROTECT) return RES_WRPRT; // Check write protect
 8001b68:	2002      	movs	r0, #2
 8001b6a:	e7e3      	b.n	8001b34 <ArcadeIT_SDCard_Disk_Write+0x6e>

08001b6c <ArcadeIT_SDCard_Disk_Ioctl>:
DRESULT ArcadeIT_SDCard_Disk_Ioctl
(
  BYTE pCommand,   // Control command code
  void *pBuffer    // Pointer to the conrtol data
)
{
 8001b6c:	b530      	push	{r4, r5, lr}
 8001b6e:	b085      	sub	sp, #20
  DRESULT res;
  BYTE n, csd[16];
  DWORD *dp, st, ed, csize;

  if (gStatus[DEV_SD] & STA_NOINIT) return RES_NOTRDY; // Check if drive is ready
 8001b70:	f240 0304 	movw	r3, #4
 8001b74:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b78:	785b      	ldrb	r3, [r3, #1]
 8001b7a:	f013 0f01 	tst.w	r3, #1
 8001b7e:	f040 810b 	bne.w	8001d98 <ArcadeIT_SDCard_Disk_Ioctl+0x22c>
 8001b82:	460d      	mov	r5, r1

  res = RES_ERROR;

  switch (pCommand)
 8001b84:	2804      	cmp	r0, #4
 8001b86:	f200 80fb 	bhi.w	8001d80 <ArcadeIT_SDCard_Disk_Ioctl+0x214>
 8001b8a:	e8df f010 	tbh	[pc, r0, lsl #1]
 8001b8e:	0005      	.short	0x0005
 8001b90:	00f9000c 	.word	0x00f9000c
 8001b94:	00b60055 	.word	0x00b60055
  {
    case CTRL_SYNC :    // Wait for end of internal write process of the drive
      if (sd_select()) res = RES_OK;
 8001b98:	f7ff fddf 	bl	800175a <sd_select>
 8001b9c:	2800      	cmp	r0, #0
 8001b9e:	f040 80f1 	bne.w	8001d84 <ArcadeIT_SDCard_Disk_Ioctl+0x218>
  res = RES_ERROR;
 8001ba2:	2401      	movs	r4, #1
 8001ba4:	e005      	b.n	8001bb2 <ArcadeIT_SDCard_Disk_Ioctl+0x46>
      break;

    case GET_SECTOR_COUNT : // Get drive capacity in unit of sector (DWORD)
      if ((send_cmd(CMD9, 0) == 0) && sd_read_block(csd, 16))
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	2009      	movs	r0, #9
 8001baa:	f7ff fded 	bl	8001788 <send_cmd>
 8001bae:	b128      	cbz	r0, 8001bbc <ArcadeIT_SDCard_Disk_Ioctl+0x50>
  res = RES_ERROR;
 8001bb0:	2401      	movs	r4, #1

    default: res = RES_PARERR; break;

  } // End switch.

  sd_deselect();
 8001bb2:	f7ff fdc5 	bl	8001740 <sd_deselect>

  return res;

} // End ArcadeIT_SDCard_Disk_Ioctl.
 8001bb6:	4620      	mov	r0, r4
 8001bb8:	b005      	add	sp, #20
 8001bba:	bd30      	pop	{r4, r5, pc}
      if ((send_cmd(CMD9, 0) == 0) && sd_read_block(csd, 16))
 8001bbc:	2110      	movs	r1, #16
 8001bbe:	4668      	mov	r0, sp
 8001bc0:	f7ff fe28 	bl	8001814 <sd_read_block>
 8001bc4:	2800      	cmp	r0, #0
 8001bc6:	f000 80df 	beq.w	8001d88 <ArcadeIT_SDCard_Disk_Ioctl+0x21c>
        if ((csd[0] >> 6) == 1)
 8001bca:	f89d 3000 	ldrb.w	r3, [sp]
 8001bce:	099b      	lsrs	r3, r3, #6
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d020      	beq.n	8001c16 <ArcadeIT_SDCard_Disk_Ioctl+0xaa>
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001bd4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8001bd8:	f002 020f 	and.w	r2, r2, #15
 8001bdc:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8001be0:	eb02 12d3 	add.w	r2, r2, r3, lsr #7
 8001be4:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	f003 0306 	and.w	r3, r3, #6
 8001bee:	441a      	add	r2, r3
          csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8001bf0:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8001bf4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	eb03 1391 	add.w	r3, r3, r1, lsr #6
 8001bfe:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8001c02:	0289      	lsls	r1, r1, #10
 8001c04:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
 8001c08:	440b      	add	r3, r1
 8001c0a:	3301      	adds	r3, #1
          *(DWORD*)pBuffer = csize << (n - 9);
 8001c0c:	3a07      	subs	r2, #7
 8001c0e:	4093      	lsls	r3, r2
 8001c10:	602b      	str	r3, [r5, #0]
        res = RES_OK;
 8001c12:	2400      	movs	r4, #0
 8001c14:	e7cd      	b.n	8001bb2 <ArcadeIT_SDCard_Disk_Ioctl+0x46>
          csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8001c16:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8001c1a:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8001c1e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001c22:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001c26:	0412      	lsls	r2, r2, #16
 8001c28:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 8001c2c:	4413      	add	r3, r2
 8001c2e:	3301      	adds	r3, #1
          *(DWORD*)pBuffer = csize << 10;
 8001c30:	029b      	lsls	r3, r3, #10
 8001c32:	602b      	str	r3, [r5, #0]
        res = RES_OK;
 8001c34:	2400      	movs	r4, #0
 8001c36:	e7bc      	b.n	8001bb2 <ArcadeIT_SDCard_Disk_Ioctl+0x46>
      if (gCardType & CT_SD2)
 8001c38:	f240 6360 	movw	r3, #1632	; 0x660
 8001c3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	f013 0f04 	tst.w	r3, #4
 8001c46:	d020      	beq.n	8001c8a <ArcadeIT_SDCard_Disk_Ioctl+0x11e>
        if (send_cmd(ACMD13, 0) == 0)
 8001c48:	2100      	movs	r1, #0
 8001c4a:	208d      	movs	r0, #141	; 0x8d
 8001c4c:	f7ff fd9c 	bl	8001788 <send_cmd>
 8001c50:	b108      	cbz	r0, 8001c56 <ArcadeIT_SDCard_Disk_Ioctl+0xea>
  res = RES_ERROR;
 8001c52:	2401      	movs	r4, #1
 8001c54:	e7ad      	b.n	8001bb2 <ArcadeIT_SDCard_Disk_Ioctl+0x46>
          ArcadeIT_SPI_Port_RW_Byte(DUMMY_BYTE);
 8001c56:	20ff      	movs	r0, #255	; 0xff
 8001c58:	f000 f969 	bl	8001f2e <ArcadeIT_SPI_Port_RW_Byte>
          if (sd_read_block(csd, 16))
 8001c5c:	2110      	movs	r1, #16
 8001c5e:	4668      	mov	r0, sp
 8001c60:	f7ff fdd8 	bl	8001814 <sd_read_block>
 8001c64:	b978      	cbnz	r0, 8001c86 <ArcadeIT_SDCard_Disk_Ioctl+0x11a>
  res = RES_ERROR;
 8001c66:	2401      	movs	r4, #1
 8001c68:	e7a3      	b.n	8001bb2 <ArcadeIT_SDCard_Disk_Ioctl+0x46>
            for (n = 64 - 16; n; n--) ArcadeIT_SPI_Port_RW_Byte(DUMMY_BYTE); // Purge trailing data
 8001c6a:	20ff      	movs	r0, #255	; 0xff
 8001c6c:	f000 f95f 	bl	8001f2e <ArcadeIT_SPI_Port_RW_Byte>
 8001c70:	3c01      	subs	r4, #1
 8001c72:	b2e4      	uxtb	r4, r4
 8001c74:	2c00      	cmp	r4, #0
 8001c76:	d1f8      	bne.n	8001c6a <ArcadeIT_SDCard_Disk_Ioctl+0xfe>
            *(DWORD*)pBuffer = 16UL << (csd[10] >> 4);
 8001c78:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8001c7c:	091a      	lsrs	r2, r3, #4
 8001c7e:	2310      	movs	r3, #16
 8001c80:	4093      	lsls	r3, r2
 8001c82:	602b      	str	r3, [r5, #0]
 8001c84:	e795      	b.n	8001bb2 <ArcadeIT_SDCard_Disk_Ioctl+0x46>
            for (n = 64 - 16; n; n--) ArcadeIT_SPI_Port_RW_Byte(DUMMY_BYTE); // Purge trailing data
 8001c86:	2430      	movs	r4, #48	; 0x30
 8001c88:	e7f4      	b.n	8001c74 <ArcadeIT_SDCard_Disk_Ioctl+0x108>
        if ((send_cmd(CMD9, 0) == 0) && sd_read_block(csd, 16))
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	2009      	movs	r0, #9
 8001c8e:	f7ff fd7b 	bl	8001788 <send_cmd>
 8001c92:	b108      	cbz	r0, 8001c98 <ArcadeIT_SDCard_Disk_Ioctl+0x12c>
  res = RES_ERROR;
 8001c94:	2401      	movs	r4, #1
 8001c96:	e78c      	b.n	8001bb2 <ArcadeIT_SDCard_Disk_Ioctl+0x46>
        if ((send_cmd(CMD9, 0) == 0) && sd_read_block(csd, 16))
 8001c98:	2110      	movs	r1, #16
 8001c9a:	4668      	mov	r0, sp
 8001c9c:	f7ff fdba 	bl	8001814 <sd_read_block>
 8001ca0:	2800      	cmp	r0, #0
 8001ca2:	d073      	beq.n	8001d8c <ArcadeIT_SDCard_Disk_Ioctl+0x220>
          if (gCardType & CT_SD1)
 8001ca4:	f240 6360 	movw	r3, #1632	; 0x660
 8001ca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	f013 0f02 	tst.w	r3, #2
 8001cb2:	d011      	beq.n	8001cd8 <ArcadeIT_SDCard_Disk_Ioctl+0x16c>
            *(DWORD*)pBuffer = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8001cb4:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001cbe:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8001cc2:	eb03 13d2 	add.w	r3, r3, r2, lsr #7
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8001ccc:	0992      	lsrs	r2, r2, #6
 8001cce:	3a01      	subs	r2, #1
 8001cd0:	4093      	lsls	r3, r2
 8001cd2:	602b      	str	r3, [r5, #0]
          res = RES_OK;
 8001cd4:	2400      	movs	r4, #0
 8001cd6:	e76c      	b.n	8001bb2 <ArcadeIT_SDCard_Disk_Ioctl+0x46>
            *(DWORD*)pBuffer = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8001cd8:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8001cdc:	f3c3 0284 	ubfx	r2, r3, #2, #5
 8001ce0:	f89d 100b 	ldrb.w	r1, [sp, #11]
 8001ce4:	00cb      	lsls	r3, r1, #3
 8001ce6:	f003 0318 	and.w	r3, r3, #24
 8001cea:	eb03 1351 	add.w	r3, r3, r1, lsr #5
 8001cee:	3301      	adds	r3, #1
 8001cf0:	fb02 3303 	mla	r3, r2, r3, r3
 8001cf4:	602b      	str	r3, [r5, #0]
          res = RES_OK;
 8001cf6:	2400      	movs	r4, #0
 8001cf8:	e75b      	b.n	8001bb2 <ArcadeIT_SDCard_Disk_Ioctl+0x46>
      if (!(gCardType & CT_SDC)) break;        // Check if the card is SDC
 8001cfa:	f240 6360 	movw	r3, #1632	; 0x660
 8001cfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	f013 0f06 	tst.w	r3, #6
 8001d08:	d101      	bne.n	8001d0e <ArcadeIT_SDCard_Disk_Ioctl+0x1a2>
  res = RES_ERROR;
 8001d0a:	2401      	movs	r4, #1
 8001d0c:	e751      	b.n	8001bb2 <ArcadeIT_SDCard_Disk_Ioctl+0x46>
      if (disk_ioctl(DEV_SD, SD_GET_CSD, csd)) break; // Get CSD
 8001d0e:	466a      	mov	r2, sp
 8001d10:	210b      	movs	r1, #11
 8001d12:	2001      	movs	r0, #1
 8001d14:	f000 fd8a 	bl	800282c <disk_ioctl>
 8001d18:	4604      	mov	r4, r0
 8001d1a:	bbc8      	cbnz	r0, 8001d90 <ArcadeIT_SDCard_Disk_Ioctl+0x224>
      if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break; // Check if sector erase can be applied to the card
 8001d1c:	f89d 3000 	ldrb.w	r3, [sp]
 8001d20:	099b      	lsrs	r3, r3, #6
 8001d22:	d104      	bne.n	8001d2e <ArcadeIT_SDCard_Disk_Ioctl+0x1c2>
 8001d24:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8001d28:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001d2c:	d032      	beq.n	8001d94 <ArcadeIT_SDCard_Disk_Ioctl+0x228>
      dp = pBuffer; st = dp[0]; ed = dp[1];        // Load sector block
 8001d2e:	6829      	ldr	r1, [r5, #0]
 8001d30:	686d      	ldr	r5, [r5, #4]
      if (!(gCardType & CT_BLOCK))
 8001d32:	f240 6360 	movw	r3, #1632	; 0x660
 8001d36:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	f013 0f08 	tst.w	r3, #8
 8001d40:	d101      	bne.n	8001d46 <ArcadeIT_SDCard_Disk_Ioctl+0x1da>
        st *= 512; ed *= 512;
 8001d42:	0249      	lsls	r1, r1, #9
 8001d44:	026d      	lsls	r5, r5, #9
      if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000))
 8001d46:	2020      	movs	r0, #32
 8001d48:	f7ff fd1e 	bl	8001788 <send_cmd>
 8001d4c:	b108      	cbz	r0, 8001d52 <ArcadeIT_SDCard_Disk_Ioctl+0x1e6>
  res = RES_ERROR;
 8001d4e:	2401      	movs	r4, #1
 8001d50:	e72f      	b.n	8001bb2 <ArcadeIT_SDCard_Disk_Ioctl+0x46>
      if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000))
 8001d52:	4629      	mov	r1, r5
 8001d54:	2021      	movs	r0, #33	; 0x21
 8001d56:	f7ff fd17 	bl	8001788 <send_cmd>
 8001d5a:	b108      	cbz	r0, 8001d60 <ArcadeIT_SDCard_Disk_Ioctl+0x1f4>
  res = RES_ERROR;
 8001d5c:	2401      	movs	r4, #1
 8001d5e:	e728      	b.n	8001bb2 <ArcadeIT_SDCard_Disk_Ioctl+0x46>
      if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000))
 8001d60:	2100      	movs	r1, #0
 8001d62:	2026      	movs	r0, #38	; 0x26
 8001d64:	f7ff fd10 	bl	8001788 <send_cmd>
 8001d68:	b108      	cbz	r0, 8001d6e <ArcadeIT_SDCard_Disk_Ioctl+0x202>
  res = RES_ERROR;
 8001d6a:	2401      	movs	r4, #1
 8001d6c:	e721      	b.n	8001bb2 <ArcadeIT_SDCard_Disk_Ioctl+0x46>
      if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000))
 8001d6e:	f247 5030 	movw	r0, #30000	; 0x7530
 8001d72:	f7ff fcce 	bl	8001712 <wait_ready>
 8001d76:	2800      	cmp	r0, #0
 8001d78:	f47f af1b 	bne.w	8001bb2 <ArcadeIT_SDCard_Disk_Ioctl+0x46>
  res = RES_ERROR;
 8001d7c:	2401      	movs	r4, #1
 8001d7e:	e718      	b.n	8001bb2 <ArcadeIT_SDCard_Disk_Ioctl+0x46>
    default: res = RES_PARERR; break;
 8001d80:	2404      	movs	r4, #4
 8001d82:	e716      	b.n	8001bb2 <ArcadeIT_SDCard_Disk_Ioctl+0x46>
      if (sd_select()) res = RES_OK;
 8001d84:	2400      	movs	r4, #0
 8001d86:	e714      	b.n	8001bb2 <ArcadeIT_SDCard_Disk_Ioctl+0x46>
  res = RES_ERROR;
 8001d88:	2401      	movs	r4, #1
 8001d8a:	e712      	b.n	8001bb2 <ArcadeIT_SDCard_Disk_Ioctl+0x46>
 8001d8c:	2401      	movs	r4, #1
 8001d8e:	e710      	b.n	8001bb2 <ArcadeIT_SDCard_Disk_Ioctl+0x46>
 8001d90:	2401      	movs	r4, #1
 8001d92:	e70e      	b.n	8001bb2 <ArcadeIT_SDCard_Disk_Ioctl+0x46>
 8001d94:	2401      	movs	r4, #1
 8001d96:	e70c      	b.n	8001bb2 <ArcadeIT_SDCard_Disk_Ioctl+0x46>
  if (gStatus[DEV_SD] & STA_NOINIT) return RES_NOTRDY; // Check if drive is ready
 8001d98:	2403      	movs	r4, #3
 8001d9a:	e70c      	b.n	8001bb6 <ArcadeIT_SDCard_Disk_Ioctl+0x4a>

08001d9c <ArcadeIT_SDCard_Disk_Start>:

// /////////////////////////////////////////////////////////////////////////////
FRESULT ArcadeIT_SDCard_Disk_Start (void)
{
 8001d9c:	b570      	push	{r4, r5, r6, lr}
 8001d9e:	f5ad 5d90 	sub.w	sp, sp, #4608	; 0x1200
 8001da2:	b082      	sub	sp, #8
  char lString[ARCADEIT_STRING_LENGTH_MAX];
  FATFS *lFileSystemReferenceTemp;

  lActive = FR_NOT_READY;

  lResult = f_mount(&gFileSystemSD, ArcadeIT_Utility_Get_String_ID(DEV_SD, (char*)gDriveName), 1);
 8001da4:	f247 01bc 	movw	r1, #28860	; 0x70bc
 8001da8:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001dac:	2001      	movs	r0, #1
 8001dae:	f7ff fa4b 	bl	8001248 <ArcadeIT_Utility_Get_String_ID>
 8001db2:	2201      	movs	r2, #1
 8001db4:	4601      	mov	r1, r0
 8001db6:	f240 4028 	movw	r0, #1064	; 0x428
 8001dba:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001dbe:	f002 f884 	bl	8003eca <f_mount>
  switch (lResult)
 8001dc2:	4606      	mov	r6, r0
 8001dc4:	2800      	cmp	r0, #0
 8001dc6:	d055      	beq.n	8001e74 <ArcadeIT_SDCard_Disk_Start+0xd8>
 8001dc8:	280d      	cmp	r0, #13
 8001dca:	f040 8097 	bne.w	8001efc <ArcadeIT_SDCard_Disk_Start+0x160>
  {
    case FR_NO_FILESYSTEM:
      sprintf(lString, "No file system on SD-Card");
 8001dce:	ac01      	add	r4, sp, #4
 8001dd0:	f646 75b0 	movw	r5, #28592	; 0x6fb0
 8001dd4:	f6c0 0500 	movt	r5, #2048	; 0x800
 8001dd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ddc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001de0:	c403      	stmia	r4!, {r0, r1}
 8001de2:	8022      	strh	r2, [r4, #0]
      // Shows a message to serial port as debug
      if (gDevices & ARCADEIT_DEVICE_SERIAL)
 8001de4:	f240 13f8 	movw	r3, #504	; 0x1f8
 8001de8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001df2:	d137      	bne.n	8001e64 <ArcadeIT_SDCard_Disk_Start+0xc8>
        // Starts and configure the serial port.
        ArcadeIT_Serial_Port_String_Send(lString);

      } // End if.

      lResult = f_mkfs(ArcadeIT_Utility_Get_String_ID(DEV_SD, (char*)gDriveName), NULL, lBuffer, sizeof(lBuffer));
 8001df4:	f247 01bc 	movw	r1, #28860	; 0x70bc
 8001df8:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001dfc:	2001      	movs	r0, #1
 8001dfe:	f7ff fa23 	bl	8001248 <ArcadeIT_Utility_Get_String_ID>
 8001e02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e06:	aa82      	add	r2, sp, #520	; 0x208
 8001e08:	2100      	movs	r1, #0
 8001e0a:	f002 fbdb 	bl	80045c4 <f_mkfs>
      sprintf(lString, "Preparing SD-Card Disk Drive: %s", ArcadeIT_Utility_Get_String_ID(lResult, (char*)gErrorMessages));
 8001e0e:	f247 01d0 	movw	r1, #28880	; 0x70d0
 8001e12:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001e16:	f7ff fa17 	bl	8001248 <ArcadeIT_Utility_Get_String_ID>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	f646 71cc 	movw	r1, #28620	; 0x6fcc
 8001e20:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001e24:	a801      	add	r0, sp, #4
 8001e26:	f003 fc45 	bl	80056b4 <siprintf>
      // Shows a message to serial port as debug
      if (gDevices & ARCADEIT_DEVICE_SERIAL)
 8001e2a:	f240 13f8 	movw	r3, #504	; 0x1f8
 8001e2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001e38:	d118      	bne.n	8001e6c <ArcadeIT_SDCard_Disk_Start+0xd0>
        // Starts and configure the serial port.
        ArcadeIT_Serial_Port_String_Send(lString);

      } // End if.

      f_chdrive(ArcadeIT_Utility_Get_String_ID(DEV_SD, (char*)gDriveName));
 8001e3a:	f247 01bc 	movw	r1, #28860	; 0x70bc
 8001e3e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001e42:	2001      	movs	r0, #1
 8001e44:	f7ff fa00 	bl	8001248 <ArcadeIT_Utility_Get_String_ID>
 8001e48:	f002 fa9c 	bl	8004384 <f_chdrive>
      f_setlabel(ARCADEIT_TEXT_SDCARD_NAME);
 8001e4c:	f646 70f0 	movw	r0, #28656	; 0x6ff0
 8001e50:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001e54:	f002 fb16 	bl	8004484 <f_setlabel>
  lActive = FR_NOT_READY;
 8001e58:	2603      	movs	r6, #3

  } // End switch.

  return lActive;

} // End ArcadeIT_SDCard_Disk_Start.
 8001e5a:	4630      	mov	r0, r6
 8001e5c:	f50d 5d90 	add.w	sp, sp, #4608	; 0x1200
 8001e60:	b002      	add	sp, #8
 8001e62:	bd70      	pop	{r4, r5, r6, pc}
        ArcadeIT_Serial_Port_String_Send(lString);
 8001e64:	a801      	add	r0, sp, #4
 8001e66:	f000 f9b7 	bl	80021d8 <ArcadeIT_Serial_Port_String_Send>
 8001e6a:	e7c3      	b.n	8001df4 <ArcadeIT_SDCard_Disk_Start+0x58>
        ArcadeIT_Serial_Port_String_Send(lString);
 8001e6c:	a801      	add	r0, sp, #4
 8001e6e:	f000 f9b3 	bl	80021d8 <ArcadeIT_Serial_Port_String_Send>
 8001e72:	e7e2      	b.n	8001e3a <ArcadeIT_SDCard_Disk_Start+0x9e>
      sprintf(lString, "SD-Card Disk device: [%s] ",ArcadeIT_Utility_Get_String_ID(DEV_SD, (char*)gDriveName));
 8001e74:	f247 01bc 	movw	r1, #28860	; 0x70bc
 8001e78:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001e7c:	2001      	movs	r0, #1
 8001e7e:	f7ff f9e3 	bl	8001248 <ArcadeIT_Utility_Get_String_ID>
 8001e82:	4602      	mov	r2, r0
 8001e84:	f247 0100 	movw	r1, #28672	; 0x7000
 8001e88:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001e8c:	a801      	add	r0, sp, #4
 8001e8e:	f003 fc11 	bl	80056b4 <siprintf>
      if (gDevices & ARCADEIT_DEVICE_SERIAL)
 8001e92:	f240 13f8 	movw	r3, #504	; 0x1f8
 8001e96:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001ea0:	d128      	bne.n	8001ef4 <ArcadeIT_SDCard_Disk_Start+0x158>
      lResult = f_getfree(ArcadeIT_Utility_Get_String_ID(DEV_SD, (char*)gDriveName), &lFreeCluster, &lFileSystemReferenceTemp);
 8001ea2:	f247 01bc 	movw	r1, #28860	; 0x70bc
 8001ea6:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001eaa:	2001      	movs	r0, #1
 8001eac:	f7ff f9cc 	bl	8001248 <ArcadeIT_Utility_Get_String_ID>
 8001eb0:	466a      	mov	r2, sp
 8001eb2:	a981      	add	r1, sp, #516	; 0x204
 8001eb4:	f002 fa7b 	bl	80043ae <f_getfree>
             (lFreeCluster * ((lFileSystemReferenceTemp->csize * SECTOR_SIZE) / 1024)),
 8001eb8:	9b00      	ldr	r3, [sp, #0]
 8001eba:	895a      	ldrh	r2, [r3, #10]
 8001ebc:	0252      	lsls	r2, r2, #9
 8001ebe:	1292      	asrs	r2, r2, #10
             ((lFileSystemReferenceTemp->n_fatent - 2) * ((lFileSystemReferenceTemp->csize * SECTOR_SIZE) / 1024))
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	3b02      	subs	r3, #2
      sprintf(lString,
 8001ec4:	9981      	ldr	r1, [sp, #516]	; 0x204
 8001ec6:	fb03 f302 	mul.w	r3, r3, r2
 8001eca:	fb01 f202 	mul.w	r2, r1, r2
 8001ece:	f247 011c 	movw	r1, #28700	; 0x701c
 8001ed2:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001ed6:	a801      	add	r0, sp, #4
 8001ed8:	f003 fbec 	bl	80056b4 <siprintf>
      if (gDevices & ARCADEIT_DEVICE_SERIAL)
 8001edc:	f240 13f8 	movw	r3, #504	; 0x1f8
 8001ee0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001eea:	d0b6      	beq.n	8001e5a <ArcadeIT_SDCard_Disk_Start+0xbe>
        ArcadeIT_Serial_Port_String_Send(lString);
 8001eec:	a801      	add	r0, sp, #4
 8001eee:	f000 f973 	bl	80021d8 <ArcadeIT_Serial_Port_String_Send>
 8001ef2:	e7b2      	b.n	8001e5a <ArcadeIT_SDCard_Disk_Start+0xbe>
        ArcadeIT_Serial_Port_String_Send(lString);
 8001ef4:	a801      	add	r0, sp, #4
 8001ef6:	f000 f96f 	bl	80021d8 <ArcadeIT_Serial_Port_String_Send>
 8001efa:	e7d2      	b.n	8001ea2 <ArcadeIT_SDCard_Disk_Start+0x106>
      sprintf(lString, "SD-Card not present or hardware error.\n\r");
 8001efc:	ac01      	add	r4, sp, #4
 8001efe:	f247 0530 	movw	r5, #28720	; 0x7030
 8001f02:	f6c0 0500 	movt	r5, #2048	; 0x800
 8001f06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f0e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f12:	c403      	stmia	r4!, {r0, r1}
 8001f14:	7022      	strb	r2, [r4, #0]
      if (gDevices & ARCADEIT_DEVICE_SERIAL)
 8001f16:	f240 13f8 	movw	r3, #504	; 0x1f8
 8001f1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001f24:	d099      	beq.n	8001e5a <ArcadeIT_SDCard_Disk_Start+0xbe>
        ArcadeIT_Serial_Port_String_Send(lString);
 8001f26:	a801      	add	r0, sp, #4
 8001f28:	f000 f956 	bl	80021d8 <ArcadeIT_Serial_Port_String_Send>
 8001f2c:	e795      	b.n	8001e5a <ArcadeIT_SDCard_Disk_Start+0xbe>

08001f2e <ArcadeIT_SPI_Port_RW_Byte>:
  // The read byte.
  uint8_t lParameter;
  uint32_t lTimeout;

  //Wait until the transmit buffer is empty.
  lTimeout = SYS_SD_SPI_TIMEOUT;
 8001f2e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4

  while ((SYS_SD_SPI_PORT->SR & SPI_I2S_FLAG_TXE) == RESET)
 8001f32:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001f36:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f013 0f02 	tst.w	r3, #2
 8001f40:	d103      	bne.n	8001f4a <ArcadeIT_SPI_Port_RW_Byte+0x1c>
  {
    if (lTimeout-- == 0) break;
 8001f42:	1e53      	subs	r3, r2, #1
 8001f44:	b10a      	cbz	r2, 8001f4a <ArcadeIT_SPI_Port_RW_Byte+0x1c>
 8001f46:	461a      	mov	r2, r3
 8001f48:	e7f3      	b.n	8001f32 <ArcadeIT_SPI_Port_RW_Byte+0x4>
  };

  // Send the byte.
  SYS_SD_SPI_PORT->DR = pData;
 8001f4a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001f4e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001f52:	60d8      	str	r0, [r3, #12]

  // Wait to receive a byte.
  lTimeout = SYS_SD_SPI_TIMEOUT;
 8001f54:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  while ((SYS_SD_SPI_PORT->SR & SPI_I2S_FLAG_RXNE) == RESET)
 8001f58:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001f5c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f013 0f01 	tst.w	r3, #1
 8001f66:	d103      	bne.n	8001f70 <ArcadeIT_SPI_Port_RW_Byte+0x42>
  {
    if (lTimeout-- == 0) break;
 8001f68:	1e53      	subs	r3, r2, #1
 8001f6a:	b10a      	cbz	r2, 8001f70 <ArcadeIT_SPI_Port_RW_Byte+0x42>
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	e7f3      	b.n	8001f58 <ArcadeIT_SPI_Port_RW_Byte+0x2a>
  };

  // Return the byte read from the SPI bus.
  lParameter = SYS_SD_SPI_PORT->DR;
 8001f70:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001f74:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001f78:	68d8      	ldr	r0, [r3, #12]

  return lParameter;

} // End ArcadeIT_SPI_Port_RW_Byte.
 8001f7a:	b2c0      	uxtb	r0, r0
 8001f7c:	4770      	bx	lr

08001f7e <ArcadeIT_SPI_Port_Read_Buffer>:
void ArcadeIT_SPI_Port_Read_Buffer
(
  uint8_t *pBuffer,       // Pointer to data buffer.
  uint32_t pNumberOfBytes // Number of bytes to receive.
)
{
 8001f7e:	b570      	push	{r4, r5, r6, lr}
 8001f80:	4606      	mov	r6, r0
 8001f82:	460d      	mov	r5, r1
  * RETURNS:     Nothing.
  */

  uint8_t lData;

  for (uint32_t lBytes = 0; lBytes < pNumberOfBytes; lBytes++)
 8001f84:	2400      	movs	r4, #0
 8001f86:	e004      	b.n	8001f92 <ArcadeIT_SPI_Port_Read_Buffer+0x14>
  {
    // Receive the data block into buffer.
    lData = ArcadeIT_SPI_Port_RW_Byte(ARCADEIT_DUMMY_BYTE);
 8001f88:	20ff      	movs	r0, #255	; 0xff
 8001f8a:	f7ff ffd0 	bl	8001f2e <ArcadeIT_SPI_Port_RW_Byte>
    pBuffer[lBytes] = lData;
 8001f8e:	5530      	strb	r0, [r6, r4]
  for (uint32_t lBytes = 0; lBytes < pNumberOfBytes; lBytes++)
 8001f90:	3401      	adds	r4, #1
 8001f92:	42ac      	cmp	r4, r5
 8001f94:	d3f8      	bcc.n	8001f88 <ArcadeIT_SPI_Port_Read_Buffer+0xa>

  } // End for.

} // End ArcadeIT_SPI_Port_Read_Buffer.
 8001f96:	bd70      	pop	{r4, r5, r6, pc}

08001f98 <ArcadeIT_SPI_Port_Write_Buffer>:
void ArcadeIT_SPI_Port_Write_Buffer
(
  uint8_t *pBuffer,       // Pointer to data buffer.
  uint32_t pNumberOfBytes // Number of bytes to send.
)
{
 8001f98:	b570      	push	{r4, r5, r6, lr}
 8001f9a:	4606      	mov	r6, r0
 8001f9c:	460d      	mov	r5, r1
  * DESCRIPTION: This function is used to write a block of memory to the SPI port.
  * PARAMETERS:  See above.
  * RETURNS:     Nothing.
  */

  for (uint32_t lBytes = 0; lBytes < pNumberOfBytes; lBytes++)
 8001f9e:	2400      	movs	r4, #0
 8001fa0:	e003      	b.n	8001faa <ArcadeIT_SPI_Port_Write_Buffer+0x12>
  {
    // Sends the data block to the SPI.
    ArcadeIT_SPI_Port_RW_Byte(pBuffer[lBytes]);
 8001fa2:	5d30      	ldrb	r0, [r6, r4]
 8001fa4:	f7ff ffc3 	bl	8001f2e <ArcadeIT_SPI_Port_RW_Byte>
  for (uint32_t lBytes = 0; lBytes < pNumberOfBytes; lBytes++)
 8001fa8:	3401      	adds	r4, #1
 8001faa:	42ac      	cmp	r4, r5
 8001fac:	d3f9      	bcc.n	8001fa2 <ArcadeIT_SPI_Port_Write_Buffer+0xa>

  } // End for.

} // End ArcadeIT_SPI_Port_Write_Buffer.
 8001fae:	bd70      	pop	{r4, r5, r6, pc}

08001fb0 <ArcadeIT_SPI_Port_Init>:

// /////////////////////////////////////////////////////////////////////////////
int ArcadeIT_SPI_Port_Init (
  uint16_t pClock // the clock frequency to set the SPI port
  )
{
 8001fb0:	b508      	push	{r3, lr}
   * PARAMETERS:  None.
   * RETURNS:     Nothing.
   */

  // Enable GPIOs used by the SPI.
  if ((RCC->AHB1ENR & RCC_AHB1Periph_GPIOA) == FALSE) RCC->AHB1ENR |= RCC_AHB1Periph_GPIOA;
 8001fb2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001fb6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbc:	f013 0f01 	tst.w	r3, #1
 8001fc0:	d107      	bne.n	8001fd2 <ArcadeIT_SPI_Port_Init+0x22>
 8001fc2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001fc6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001fca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fcc:	f042 0201 	orr.w	r2, r2, #1
 8001fd0:	631a      	str	r2, [r3, #48]	; 0x30
  if ((RCC->AHB1ENR & RCC_AHB1Periph_GPIOC) == FALSE) RCC->AHB1ENR |= RCC_AHB1Periph_GPIOC;
 8001fd2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001fd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fdc:	f013 0f04 	tst.w	r3, #4
 8001fe0:	d107      	bne.n	8001ff2 <ArcadeIT_SPI_Port_Init+0x42>
 8001fe2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001fe6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001fea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fec:	f042 0204 	orr.w	r2, r2, #4
 8001ff0:	631a      	str	r2, [r3, #48]	; 0x30
  if ((RCC->AHB1ENR & RCC_AHB1Periph_GPIOD) == FALSE) RCC->AHB1ENR |= RCC_AHB1Periph_GPIOD;
 8001ff2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001ff6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffc:	f013 0f08 	tst.w	r3, #8
 8002000:	d107      	bne.n	8002012 <ArcadeIT_SPI_Port_Init+0x62>
 8002002:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002006:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800200a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800200c:	f042 0208 	orr.w	r2, r2, #8
 8002010:	631a      	str	r2, [r3, #48]	; 0x30
  if ((RCC->APB2ENR & RCC_APB2Periph_SPI1) == FALSE) RCC->APB2ENR |= RCC_APB2Periph_SPI1;
 8002012:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002016:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800201a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002020:	d107      	bne.n	8002032 <ArcadeIT_SPI_Port_Init+0x82>
 8002022:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002026:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800202a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800202c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002030:	645a      	str	r2, [r3, #68]	; 0x44
  uint32_t lPinPosition;

  // Configure the output line SCK as alternate function.
  lPinPosition = (SYS_SD_SPI_SCK_PIN_NO * 2);

  SYS_SD_SPI_SCK_PER->MODER   &= ~GPIO_MODER_MODER5;
 8002032:	2300      	movs	r3, #0
 8002034:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800203e:	601a      	str	r2, [r3, #0]
  SYS_SD_SPI_SCK_PER->MODER   |= (((uint32_t)GPIO_Mode_AF) << lPinPosition);
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002046:	601a      	str	r2, [r3, #0]
  SYS_SD_SPI_SCK_PER->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR5;
 8002048:	689a      	ldr	r2, [r3, #8]
 800204a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800204e:	609a      	str	r2, [r3, #8]
  SYS_SD_SPI_SCK_PER->OSPEEDR |= ((uint32_t)(GPIO_Speed_100MHz) << lPinPosition);
 8002050:	689a      	ldr	r2, [r3, #8]
 8002052:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
 8002056:	609a      	str	r2, [r3, #8]
  SYS_SD_SPI_SCK_PER->OTYPER  &= ~GPIO_OTYPER_OT_5;
 8002058:	685a      	ldr	r2, [r3, #4]
 800205a:	f022 0220 	bic.w	r2, r2, #32
 800205e:	605a      	str	r2, [r3, #4]
  SYS_SD_SPI_SCK_PER->OTYPER  |= (uint16_t)(GPIO_OType_PP << SYS_SD_SPI_SCK_PIN_NO);
 8002060:	685a      	ldr	r2, [r3, #4]
 8002062:	605a      	str	r2, [r3, #4]
  SYS_SD_SPI_SCK_PER->PUPDR   &= ~GPIO_PUPDR_PUPDR5;
 8002064:	68da      	ldr	r2, [r3, #12]
 8002066:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800206a:	60da      	str	r2, [r3, #12]
  SYS_SD_SPI_SCK_PER->PUPDR   |= (((uint32_t)GPIO_PuPd_DOWN) << lPinPosition);
 800206c:	68da      	ldr	r2, [r3, #12]
 800206e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002072:	60da      	str	r2, [r3, #12]

  SYS_SD_SPI_SCK_PER->AFR[0]  &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)SYS_SD_SPI_SCK_PIN_NO & (uint32_t)0x07) * 4));
 8002074:	6a1a      	ldr	r2, [r3, #32]
 8002076:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800207a:	621a      	str	r2, [r3, #32]
  SYS_SD_SPI_SCK_PER->AFR[0]  |= ((uint32_t)(SYS_SD_SPI_AF) << ((uint32_t)((uint32_t)SYS_SD_SPI_SCK_PIN_NO & (uint32_t)0x07) * 4));
 800207c:	6a1a      	ldr	r2, [r3, #32]
 800207e:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002082:	621a      	str	r2, [r3, #32]

  // Configure the output line MOSI as alternate function.
  lPinPosition = (SYS_SD_SPI_MOSI_PIN_NO * 2);

  SYS_SD_SPI_MOSI_PER->MODER   &= ~GPIO_MODER_MODER7;
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800208a:	601a      	str	r2, [r3, #0]
  SYS_SD_SPI_MOSI_PER->MODER   |= (((uint32_t)GPIO_Mode_AF) << lPinPosition);
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002092:	601a      	str	r2, [r3, #0]
  SYS_SD_SPI_MOSI_PER->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR7;
 8002094:	689a      	ldr	r2, [r3, #8]
 8002096:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800209a:	609a      	str	r2, [r3, #8]
  SYS_SD_SPI_MOSI_PER->OSPEEDR |= ((uint32_t)(GPIO_Speed_100MHz) << lPinPosition);
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80020a2:	609a      	str	r2, [r3, #8]
  SYS_SD_SPI_MOSI_PER->OTYPER  &= ~GPIO_OTYPER_OT_7;
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020aa:	605a      	str	r2, [r3, #4]
  SYS_SD_SPI_MOSI_PER->OTYPER  |= (uint16_t)(GPIO_OType_PP << SYS_SD_SPI_MOSI_PIN_NO);
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	605a      	str	r2, [r3, #4]
  SYS_SD_SPI_MOSI_PER->PUPDR   &= ~GPIO_PUPDR_PUPDR7;
 80020b0:	68da      	ldr	r2, [r3, #12]
 80020b2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80020b6:	60da      	str	r2, [r3, #12]
  SYS_SD_SPI_MOSI_PER->PUPDR   |= (((uint32_t)GPIO_PuPd_DOWN) << lPinPosition);
 80020b8:	68da      	ldr	r2, [r3, #12]
 80020ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020be:	60da      	str	r2, [r3, #12]

  SYS_SD_SPI_MOSI_PER->AFR[0]  &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)SYS_SD_SPI_MOSI_PIN_NO & (uint32_t)0x07) * 4));
 80020c0:	6a1a      	ldr	r2, [r3, #32]
 80020c2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80020c6:	621a      	str	r2, [r3, #32]
  SYS_SD_SPI_MOSI_PER->AFR[0]  |= ((uint32_t)(SYS_SD_SPI_AF) << ((uint32_t)((uint32_t)SYS_SD_SPI_MOSI_PIN_NO & (uint32_t)0x07) * 4));
 80020c8:	6a1a      	ldr	r2, [r3, #32]
 80020ca:	f042 42a0 	orr.w	r2, r2, #1342177280	; 0x50000000
 80020ce:	621a      	str	r2, [r3, #32]

  // Configure the output line MISO as alternate function.
  lPinPosition = (SYS_SD_SPI_MISO_PIN_NO * 2);

  SYS_SD_SPI_MISO_PER->MODER   &= ~GPIO_MODER_MODER6;
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80020d6:	601a      	str	r2, [r3, #0]
  SYS_SD_SPI_MISO_PER->MODER   |= (((uint32_t)GPIO_Mode_AF) << lPinPosition);
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020de:	601a      	str	r2, [r3, #0]
  SYS_SD_SPI_MISO_PER->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR6;
 80020e0:	689a      	ldr	r2, [r3, #8]
 80020e2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80020e6:	609a      	str	r2, [r3, #8]
  SYS_SD_SPI_MISO_PER->OSPEEDR |= ((uint32_t)(GPIO_Speed_100MHz) << lPinPosition);
 80020e8:	689a      	ldr	r2, [r3, #8]
 80020ea:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80020ee:	609a      	str	r2, [r3, #8]
  SYS_SD_SPI_MISO_PER->OTYPER  &= ~GPIO_OTYPER_OT_6;
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020f6:	605a      	str	r2, [r3, #4]
  SYS_SD_SPI_MISO_PER->OTYPER  |= (uint16_t)(GPIO_OType_PP << SYS_SD_SPI_MISO_PIN_NO);
 80020f8:	685a      	ldr	r2, [r3, #4]
 80020fa:	605a      	str	r2, [r3, #4]
  SYS_SD_SPI_MISO_PER->PUPDR   &= ~GPIO_PUPDR_PUPDR6;
 80020fc:	68da      	ldr	r2, [r3, #12]
 80020fe:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002102:	60da      	str	r2, [r3, #12]
  SYS_SD_SPI_MISO_PER->PUPDR   |= (((uint32_t)GPIO_PuPd_UP) << lPinPosition);
 8002104:	68da      	ldr	r2, [r3, #12]
 8002106:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800210a:	60da      	str	r2, [r3, #12]

  SYS_SD_SPI_MISO_PER->AFR[0]  &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)SYS_SD_SPI_MISO_PIN_NO & (uint32_t)0x07) * 4));
 800210c:	6a1a      	ldr	r2, [r3, #32]
 800210e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002112:	621a      	str	r2, [r3, #32]
  SYS_SD_SPI_MISO_PER->AFR[0]  |= ((uint32_t)(SYS_SD_SPI_AF) << ((uint32_t)((uint32_t)SYS_SD_SPI_MISO_PIN_NO & (uint32_t)0x07) * 4));
 8002114:	6a1a      	ldr	r2, [r3, #32]
 8002116:	f042 62a0 	orr.w	r2, r2, #83886080	; 0x5000000
 800211a:	621a      	str	r2, [r3, #32]

  // Configure the output line CS as a normal output GPIO.
  lPinPosition = (SYS_SD_SPI_CS_PIN_NO * 2);

  SYS_SD_SPI_CS_PER->MODER   &= ~GPIO_MODER_MODER4;
 800211c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002120:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800212a:	601a      	str	r2, [r3, #0]
  SYS_SD_SPI_CS_PER->MODER   |= (((uint32_t)GPIO_Mode_OUT) << lPinPosition);
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002132:	601a      	str	r2, [r3, #0]
  SYS_SD_SPI_CS_PER->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR4;
 8002134:	689a      	ldr	r2, [r3, #8]
 8002136:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800213a:	609a      	str	r2, [r3, #8]
  SYS_SD_SPI_CS_PER->OSPEEDR |= ((uint32_t)(GPIO_Speed_100MHz) << lPinPosition);
 800213c:	689a      	ldr	r2, [r3, #8]
 800213e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002142:	609a      	str	r2, [r3, #8]
  SYS_SD_SPI_CS_PER->OTYPER  &= ~GPIO_OTYPER_OT_4;
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	f022 0210 	bic.w	r2, r2, #16
 800214a:	605a      	str	r2, [r3, #4]
  SYS_SD_SPI_CS_PER->OTYPER  |= (uint16_t)(GPIO_OType_PP << SYS_SD_SPI_CS_PIN_NO);
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	605a      	str	r2, [r3, #4]
  SYS_SD_SPI_CS_PER->PUPDR   &= ~GPIO_PUPDR_PUPDR4;
 8002150:	68da      	ldr	r2, [r3, #12]
 8002152:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002156:	60da      	str	r2, [r3, #12]
  SYS_SD_SPI_CS_PER->PUPDR   |= (((uint32_t)GPIO_PuPd_UP) << lPinPosition);
 8002158:	68da      	ldr	r2, [r3, #12]
 800215a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800215e:	60da      	str	r2, [r3, #12]

  // Initially the SPI port has 4 multiplexed lines to use as CS.
  // CS1 0 1 0 1
  SYS_SPI_CS_HIGH();
 8002160:	695a      	ldr	r2, [r3, #20]
 8002162:	f042 0210 	orr.w	r2, r2, #16
 8002166:	615a      	str	r2, [r3, #20]

  // SPI configuration.
  // Reset SPI
  RCC->APB2RSTR |= RCC_APB2Periph_SPI1;
 8002168:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800216c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002170:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002172:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002176:	625a      	str	r2, [r3, #36]	; 0x24
  RCC->APB2RSTR &= ~RCC_APB2Periph_SPI1;
 8002178:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800217a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800217e:	625a      	str	r2, [r3, #36]	; 0x24

  // configuration of SPI port for common use
  SYS_SD_SPI_PORT->CR1 |=
 8002180:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002184:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002188:	681a      	ldr	r2, [r3, #0]
      (uint16_t)((uint32_t)SPI_Direction_2Lines_FullDuplex
 800218a:	f440 7041 	orr.w	r0, r0, #772	; 0x304
  SYS_SD_SPI_PORT->CR1 |=
 800218e:	4310      	orrs	r0, r2
 8002190:	6018      	str	r0, [r3, #0]
                         | SPI_CPHA_1Edge
                         | SPI_NSS_Soft
                         | pClock
                         | SPI_FirstBit_MSB);

  SYS_SD_SPI_PORT->CR1 |= SPI_CR1_SPE;
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002198:	601a      	str	r2, [r3, #0]

  if (gDevices & ARCADEIT_DEVICE_SERIAL)
 800219a:	f240 13f8 	movw	r3, #504	; 0x1f8
 800219e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80021a8:	d101      	bne.n	80021ae <ArcadeIT_SPI_Port_Init+0x1fe>

  } // End if.

  return TRUE;

} // End ArcadeIT_SPI_Port_Init.
 80021aa:	2001      	movs	r0, #1
 80021ac:	bd08      	pop	{r3, pc}
    ArcadeIT_Serial_Port_String_Send(TEXT_SPI_PORT_INITED);
 80021ae:	f247 005c 	movw	r0, #28764	; 0x705c
 80021b2:	f6c0 0000 	movt	r0, #2048	; 0x800
 80021b6:	f000 f80f 	bl	80021d8 <ArcadeIT_Serial_Port_String_Send>
 80021ba:	e7f6      	b.n	80021aa <ArcadeIT_SPI_Port_Init+0x1fa>

080021bc <ArcadeIT_Serial_Port_Char_Send>:
   * RETURNS:     Nothing.
   */

  // wait until data register is empty. The status register should have the flag
  // Transmit data register empty
  while ((SYS_SERIAL_PORT->SR & SYS_SERIAL_FLAG_TXE) == RESET);
 80021bc:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 80021c0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80021ca:	d0f7      	beq.n	80021bc <ArcadeIT_Serial_Port_Char_Send>

  // send the character. We put the data into the data register so that the USART
  // start transmit it.
  SYS_SERIAL_PORT->DR = (pCharacter & (uint16_t)0x01FF);
 80021cc:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 80021d0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80021d4:	6058      	str	r0, [r3, #4]

} // End ArcadeIT_Serial_Port_Char_Send.
 80021d6:	4770      	bx	lr

080021d8 <ArcadeIT_Serial_Port_String_Send>:
// -----------------------------------------------------------------------------
void ArcadeIT_Serial_Port_String_Send
(
    char *pString   // The string to send character by character to the serial port.
)
{
 80021d8:	b510      	push	{r4, lr}
   */

  // while not NULL transmit next character.
  char lCharacter;

  while ((lCharacter = *((char*)pString++)) != 0)
 80021da:	e002      	b.n	80021e2 <ArcadeIT_Serial_Port_String_Send+0xa>
  {
    ArcadeIT_Serial_Port_Char_Send (lCharacter);
 80021dc:	f7ff ffee 	bl	80021bc <ArcadeIT_Serial_Port_Char_Send>
  while ((lCharacter = *((char*)pString++)) != 0)
 80021e0:	4620      	mov	r0, r4
 80021e2:	1c44      	adds	r4, r0, #1
 80021e4:	7800      	ldrb	r0, [r0, #0]
 80021e6:	2800      	cmp	r0, #0
 80021e8:	d1f8      	bne.n	80021dc <ArcadeIT_Serial_Port_String_Send+0x4>

  } // End while.

} // End ArcadeIT_Serial_Port_String_Send.
 80021ea:	bd10      	pop	{r4, pc}

080021ec <ArcadeIT_Serial_Port_Init>:
// -----------------------------------------------------------------------------
void ArcadeIT_Serial_Port_Init
(
    uint32_t pBaud   // Baud rate to set the serial port to.
)
{
 80021ec:	b508      	push	{r3, lr}
   */

  uint32_t lPinPosition;

  // ArcadeIT_Serial_Port_Init
  if ((RCC->AHB1ENR & RCC_AHB1Periph_GPIOA) == FALSE) RCC->AHB1ENR |= RCC_AHB1Periph_GPIOA;
 80021ee:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80021f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80021f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f8:	f013 0f01 	tst.w	r3, #1
 80021fc:	d107      	bne.n	800220e <ArcadeIT_Serial_Port_Init+0x22>
 80021fe:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002202:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002206:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002208:	f042 0201 	orr.w	r2, r2, #1
 800220c:	631a      	str	r2, [r3, #48]	; 0x30
  if ((RCC->APB1ENR & RCC_APB1Periph_USART2) == FALSE) RCC->APB1ENR |= RCC_APB1Periph_USART2;
 800220e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002212:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002218:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800221c:	d107      	bne.n	800222e <ArcadeIT_Serial_Port_Init+0x42>
 800221e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002222:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002226:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002228:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800222c:	641a      	str	r2, [r3, #64]	; 0x40
  if ((RCC->AHB1ENR & RCC_AHB1Periph_DMA1) == FALSE) RCC->AHB1ENR |= RCC_AHB1Periph_DMA1;
 800222e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002232:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002238:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800223c:	d107      	bne.n	800224e <ArcadeIT_Serial_Port_Init+0x62>
 800223e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002242:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002246:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002248:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800224c:	631a      	str	r2, [r3, #48]	; 0x30

  // Configure the pin PA2 as alternate function 7 (USART Tx).
  lPinPosition = (SYS_SERIAL_TX_PIN_NO * 2);
  SYS_SERIAL_TX_PER->MODER   &= ~GPIO_MODER_MODER2;
 800224e:	2300      	movs	r3, #0
 8002250:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800225a:	601a      	str	r2, [r3, #0]
  SYS_SERIAL_TX_PER->MODER   |= (((uint32_t)GPIO_Mode_AF) << lPinPosition);
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	f042 0220 	orr.w	r2, r2, #32
 8002262:	601a      	str	r2, [r3, #0]
  SYS_SERIAL_TX_PER->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR2;
 8002264:	689a      	ldr	r2, [r3, #8]
 8002266:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800226a:	609a      	str	r2, [r3, #8]
  SYS_SERIAL_TX_PER->OSPEEDR |= ((uint32_t)(GPIO_Speed_50MHz) << lPinPosition);
 800226c:	689a      	ldr	r2, [r3, #8]
 800226e:	f042 0220 	orr.w	r2, r2, #32
 8002272:	609a      	str	r2, [r3, #8]
  SYS_SERIAL_TX_PER->OTYPER  &= ~GPIO_OTYPER_OT_2;
 8002274:	685a      	ldr	r2, [r3, #4]
 8002276:	f022 0204 	bic.w	r2, r2, #4
 800227a:	605a      	str	r2, [r3, #4]
  SYS_SERIAL_TX_PER->OTYPER  |= (uint16_t)(GPIO_OType_PP << SYS_SERIAL_TX_PIN_NO);
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	605a      	str	r2, [r3, #4]
  SYS_SERIAL_TX_PER->PUPDR   &= ~GPIO_PUPDR_PUPDR2;
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002286:	60da      	str	r2, [r3, #12]
  SYS_SERIAL_TX_PER->PUPDR   |= (((uint32_t)GPIO_PuPd_NOPULL) << lPinPosition);
 8002288:	68da      	ldr	r2, [r3, #12]
 800228a:	60da      	str	r2, [r3, #12]
  SYS_SERIAL_TX_PER->AFR[0] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)SYS_SERIAL_TX_PIN_NO & (uint32_t)0x07) * 4));
 800228c:	6a1a      	ldr	r2, [r3, #32]
 800228e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8002292:	621a      	str	r2, [r3, #32]
  SYS_SERIAL_TX_PER->AFR[0] |=  ((uint32_t)(SYS_SERIAL_TX_AF) << ((uint32_t)((uint32_t)SYS_SERIAL_TX_PIN_NO & (uint32_t)0x07) * 4));
 8002294:	6a1a      	ldr	r2, [r3, #32]
 8002296:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800229a:	621a      	str	r2, [r3, #32]

  // Configure the pin PA3 as alternate function 7 (USART Rx).
  lPinPosition = (SYS_SERIAL_RX_PIN_NO * 2);
  SYS_SERIAL_RX_PER->MODER   &= ~GPIO_MODER_MODER3;
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80022a2:	601a      	str	r2, [r3, #0]
  SYS_SERIAL_RX_PER->MODER   |= (((uint32_t)GPIO_Mode_AF) << lPinPosition);
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022aa:	601a      	str	r2, [r3, #0]
  SYS_SERIAL_RX_PER->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR3;
 80022ac:	689a      	ldr	r2, [r3, #8]
 80022ae:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80022b2:	609a      	str	r2, [r3, #8]
  SYS_SERIAL_RX_PER->OSPEEDR |= ((uint32_t)(GPIO_Speed_50MHz) << lPinPosition);
 80022b4:	689a      	ldr	r2, [r3, #8]
 80022b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022ba:	609a      	str	r2, [r3, #8]
  SYS_SERIAL_RX_PER->OTYPER  &= ~GPIO_OTYPER_OT_3;
 80022bc:	685a      	ldr	r2, [r3, #4]
 80022be:	f022 0208 	bic.w	r2, r2, #8
 80022c2:	605a      	str	r2, [r3, #4]
  SYS_SERIAL_RX_PER->OTYPER  |= (uint16_t)(GPIO_OType_PP << SYS_SERIAL_RX_PIN_NO);
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	605a      	str	r2, [r3, #4]
  SYS_SERIAL_RX_PER->PUPDR   &= ~GPIO_PUPDR_PUPDR3;
 80022c8:	68da      	ldr	r2, [r3, #12]
 80022ca:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80022ce:	60da      	str	r2, [r3, #12]
  SYS_SERIAL_RX_PER->PUPDR   |= (((uint32_t)GPIO_PuPd_NOPULL) << lPinPosition);
 80022d0:	68da      	ldr	r2, [r3, #12]
 80022d2:	60da      	str	r2, [r3, #12]
  SYS_SERIAL_RX_PER->AFR[0] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)SYS_SERIAL_RX_PIN_NO & (uint32_t)0x07) * 4)) ;
 80022d4:	6a1a      	ldr	r2, [r3, #32]
 80022d6:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 80022da:	621a      	str	r2, [r3, #32]
  SYS_SERIAL_RX_PER->AFR[0] |= ((uint32_t)(SYS_SERIAL_RX_AF) << ((uint32_t)((uint32_t)SYS_SERIAL_RX_PIN_NO & (uint32_t)0x07) * 4));
 80022dc:	6a1a      	ldr	r2, [r3, #32]
 80022de:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 80022e2:	621a      	str	r2, [r3, #32]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
  uint32_t integerdivider = 0x00;
  uint32_t fractionaldivider = 0x00;

  // USART CR2 Configuration
  tmpreg = SYS_SERIAL_PORT->CR2;
 80022e4:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 80022e8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80022ec:	691a      	ldr	r2, [r3, #16]
 80022ee:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80022f2:	0412      	lsls	r2, r2, #16
 80022f4:	0c12      	lsrs	r2, r2, #16
  // Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
  // Set STOP[13:12] bits according to USART_StopBits value
  tmpreg |= (uint32_t)SYS_SERIAL_StopBits_1;

  // Write to USART CR2
  SYS_SERIAL_PORT->CR2 = (uint16_t)tmpreg;
 80022f6:	611a      	str	r2, [r3, #16]

  // USART CR1 Configuration
  tmpreg = SYS_SERIAL_PORT->CR1;
 80022f8:	68da      	ldr	r2, [r3, #12]
  tmpreg = (uint32_t)(SYS_SERIAL_WordLength_8b
                    | SYS_SERIAL_Parity_No
                    |(SYS_SERIAL_Mode_Rx | SYS_SERIAL_Mode_Tx));

  // Write to USART CR1
  SYS_SERIAL_PORT->CR1 = (uint16_t)tmpreg;
 80022fa:	220c      	movs	r2, #12
 80022fc:	60da      	str	r2, [r3, #12]

  // USART CR3 Configuration
  tmpreg = SYS_SERIAL_PORT->CR3;
 80022fe:	695a      	ldr	r2, [r3, #20]
 8002300:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002304:	0412      	lsls	r2, r2, #16
 8002306:	0c12      	lsrs	r2, r2, #16
  // Configure the USART HFC :
  //   Set CTSE and RTSE bits according to USART_HardwareFlowControl value
  tmpreg |= SYS_SERIAL_HardwareFlowControl_None;

  // Write to USART CR3
  SYS_SERIAL_PORT->CR3 = (uint16_t)tmpreg;
 8002308:	615a      	str	r2, [r3, #20]

  // Configure the USART Baud Rate
  apbclock = (((HSE_VALUE / PLL_M) * PLL_N) / PLL_P) >> 2; // for the ArcadeIT! should be 45MHz

  // Determine the integer part
  if ((SYS_SERIAL_PORT->CR1 & USART_CR1_OVER8) != 0)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002310:	d03b      	beq.n	800238a <ArcadeIT_Serial_Port_Init+0x19e>
  {
    // Integer part computing in case Oversampling mode is 8 Samples
    integerdivider = ((25 * apbclock) / (2 * pBaud));
 8002312:	0040      	lsls	r0, r0, #1
 8002314:	f44f 520d 	mov.w	r2, #9024	; 0x2340
 8002318:	f2c4 320e 	movt	r2, #17166	; 0x430e
 800231c:	fbb2 f2f0 	udiv	r2, r2, r0
    integerdivider = ((25 * apbclock) / (4 * pBaud));
    // 25 * 45000000 / 4 * 115200
    // 1125000000 / 460800
    // ‭2441‬
  }
  tmpreg = (integerdivider / 100) << 4;
 8002320:	f248 531f 	movw	r3, #34079	; 0x851f
 8002324:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8002328:	fba3 1302 	umull	r1, r3, r3, r2
 800232c:	095b      	lsrs	r3, r3, #5
 800232e:	0119      	lsls	r1, r3, #4
  // ‭2441 / 100 * 16
  // ‭24 * 16 (FOUND 24, we already shift this left of 4 bits to create room for fraction)
  // ‭384 (0x18 << 4 = 0x180)‬

  // Determine the fractional part
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8002330:	2064      	movs	r0, #100	; 0x64
 8002332:	fb03 2010 	mls	r0, r3, r0, r2
  // ‭2441 - 38400 / 16
  // ‭2441 - 2400
  // 41 (FOUND 41)

  // Implement the fractional part in the register
  if ((SYS_SERIAL_PORT->CR1 & USART_CR1_OVER8) != 0)
 8002336:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 800233a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002344:	d129      	bne.n	800239a <ArcadeIT_Serial_Port_Init+0x1ae>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
  }
  else // if ((USARTx->CR1 & USART_CR1_OVER8) == 0)
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8002346:	0100      	lsls	r0, r0, #4
 8002348:	3032      	adds	r0, #50	; 0x32
 800234a:	f248 531f 	movw	r3, #34079	; 0x851f
 800234e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8002352:	fba3 3000 	umull	r3, r0, r3, r0
 8002356:	f3c0 1043 	ubfx	r0, r0, #5, #4
 800235a:	4308      	orrs	r0, r1
 800235c:	b280      	uxth	r0, r0
    // mmmmmmmmm   ffff
    // 0x180     |  0x7
  }

  // Write to USART BRR register
  SYS_SERIAL_PORT->BRR = (uint16_t)tmpreg;
 800235e:	f44f 4288 	mov.w	r2, #17408	; 0x4400
 8002362:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002366:	6090      	str	r0, [r2, #8]

  // Enable the USART2
  SYS_SERIAL_PORT->CR1 |= USART_CR1_UE;
 8002368:	68d3      	ldr	r3, [r2, #12]
 800236a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800236e:	60d3      	str	r3, [r2, #12]

  ArcadeIT_Serial_Port_String_Send(RESET_DEVICE);
 8002370:	f646 7024 	movw	r0, #28452	; 0x6f24
 8002374:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002378:	f7ff ff2e 	bl	80021d8 <ArcadeIT_Serial_Port_String_Send>

  ArcadeIT_Serial_Port_String_Send(TEXT_SERIAL_PORT_INITED);
 800237c:	f247 0070 	movw	r0, #28784	; 0x7070
 8002380:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002384:	f7ff ff28 	bl	80021d8 <ArcadeIT_Serial_Port_String_Send>

} // End ArcadeIT_Serial_Port_Init.
 8002388:	bd08      	pop	{r3, pc}
    integerdivider = ((25 * apbclock) / (4 * pBaud));
 800238a:	0080      	lsls	r0, r0, #2
 800238c:	f44f 520d 	mov.w	r2, #9024	; 0x2340
 8002390:	f2c4 320e 	movt	r2, #17166	; 0x430e
 8002394:	fbb2 f2f0 	udiv	r2, r2, r0
 8002398:	e7c2      	b.n	8002320 <ArcadeIT_Serial_Port_Init+0x134>
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800239a:	00c3      	lsls	r3, r0, #3
 800239c:	3332      	adds	r3, #50	; 0x32
 800239e:	f248 501f 	movw	r0, #34079	; 0x851f
 80023a2:	f2c5 10eb 	movt	r0, #20971	; 0x51eb
 80023a6:	fba0 2303 	umull	r2, r3, r0, r3
 80023aa:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80023ae:	ea43 0001 	orr.w	r0, r3, r1
 80023b2:	e7d3      	b.n	800235c <ArcadeIT_Serial_Port_Init+0x170>

080023b4 <ArcadeIT_Status_LEDS_Init>:

// //////////////////////////////////////////////////////////////////////////////
// Functions.
// //////////////////////////////////////////////////////////////////////////////
void ArcadeIT_Status_LEDS_Init(void)
{
 80023b4:	b508      	push	{r3, lr}
 */

  uint32_t lPinPosition = 0;

  // Turn on the MCU peripheral by enabling its Clock.
  if ((RCC->AHB1ENR & RCC_AHB1Periph_GPIOH) == FALSE) RCC->AHB1ENR |= RCC_AHB1Periph_GPIOH;
 80023b6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80023ba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80023be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80023c4:	d107      	bne.n	80023d6 <ArcadeIT_Status_LEDS_Init+0x22>
 80023c6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80023ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80023ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023d4:	631a      	str	r2, [r3, #48]	; 0x30
  // level as default.
  // -----------------------
  lPinPosition = (SYS_STATUS_LED1_PIN_NO * 2); // the position is a multiple of 2

  // GPIO pin(PH2) in output
  SYS_STATUS_LED1_PER->MODER   &= ~GPIO_MODER_MODER2;
 80023d6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80023da:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80023e4:	601a      	str	r2, [r3, #0]
  SYS_STATUS_LED1_PER->MODER   |= (((uint32_t)GPIO_Mode_OUT) << lPinPosition);
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	f042 0210 	orr.w	r2, r2, #16
 80023ec:	601a      	str	r2, [r3, #0]
  SYS_STATUS_LED1_PER->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR2;
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80023f4:	609a      	str	r2, [r3, #8]
  SYS_STATUS_LED1_PER->OSPEEDR |= ((uint32_t)(GPIO_Speed_100MHz) << lPinPosition);
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80023fc:	609a      	str	r2, [r3, #8]
  SYS_STATUS_LED1_PER->OTYPER  &= ~GPIO_OTYPER_OT_2;
 80023fe:	685a      	ldr	r2, [r3, #4]
 8002400:	f022 0204 	bic.w	r2, r2, #4
 8002404:	605a      	str	r2, [r3, #4]
  SYS_STATUS_LED1_PER->OTYPER  |= (uint16_t)(GPIO_OType_PP << SYS_STATUS_LED1_PIN_NO);
 8002406:	685a      	ldr	r2, [r3, #4]
 8002408:	605a      	str	r2, [r3, #4]
  SYS_STATUS_LED1_PER->PUPDR   &= ~GPIO_PUPDR_PUPDR2;
 800240a:	68da      	ldr	r2, [r3, #12]
 800240c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002410:	60da      	str	r2, [r3, #12]
  SYS_STATUS_LED1_PER->PUPDR   |= (((uint32_t)GPIO_PuPd_DOWN) << lPinPosition);
 8002412:	68da      	ldr	r2, [r3, #12]
 8002414:	f042 0220 	orr.w	r2, r2, #32
 8002418:	60da      	str	r2, [r3, #12]

  // -----------------------
  lPinPosition = (SYS_STATUS_LED2_PIN_NO * 2); // the position is a multiple of 2

  // GPIO pin(PH3) in output
  SYS_STATUS_LED2_PER->MODER   &= ~GPIO_MODER_MODER3;
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002420:	601a      	str	r2, [r3, #0]
  SYS_STATUS_LED2_PER->MODER   |= (((uint32_t)GPIO_Mode_OUT) << lPinPosition);
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002428:	601a      	str	r2, [r3, #0]
  SYS_STATUS_LED2_PER->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR3;
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002430:	609a      	str	r2, [r3, #8]
  SYS_STATUS_LED2_PER->OSPEEDR |= ((uint32_t)(GPIO_Speed_100MHz) << lPinPosition);
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002438:	609a      	str	r2, [r3, #8]
  SYS_STATUS_LED2_PER->OTYPER  &= ~GPIO_OTYPER_OT_3;
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	f022 0208 	bic.w	r2, r2, #8
 8002440:	605a      	str	r2, [r3, #4]
  SYS_STATUS_LED2_PER->OTYPER  |= (uint16_t)(GPIO_OType_PP << SYS_STATUS_LED2_PIN_NO);
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	605a      	str	r2, [r3, #4]
  SYS_STATUS_LED2_PER->PUPDR   &= ~GPIO_PUPDR_PUPDR3;
 8002446:	68da      	ldr	r2, [r3, #12]
 8002448:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800244c:	60da      	str	r2, [r3, #12]
  SYS_STATUS_LED2_PER->PUPDR   |= (((uint32_t)GPIO_PuPd_DOWN) << lPinPosition);
 800244e:	68da      	ldr	r2, [r3, #12]
 8002450:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002454:	60da      	str	r2, [r3, #12]

  // -----------------------
  // Put LEDs line LOW.
  SYS_STATUS_LED1_PER->ODR &= ~(SYS_STATUS_LED1_PIN);
 8002456:	695a      	ldr	r2, [r3, #20]
 8002458:	f022 0204 	bic.w	r2, r2, #4
 800245c:	615a      	str	r2, [r3, #20]
  SYS_STATUS_LED2_PER->ODR &= ~(SYS_STATUS_LED2_PIN);
 800245e:	695a      	ldr	r2, [r3, #20]
 8002460:	f022 0208 	bic.w	r2, r2, #8
 8002464:	615a      	str	r2, [r3, #20]

  // Shows a message to serial port as debug
  if (gDevices & ARCADEIT_DEVICE_SERIAL)
 8002466:	f240 13f8 	movw	r3, #504	; 0x1f8
 800246a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002474:	d100      	bne.n	8002478 <ArcadeIT_Status_LEDS_Init+0xc4>
  {
    ArcadeIT_Serial_Port_String_Send(TEXT_STATUS_LEDS_INITED);

  } // End if.

} // End ArcadeIT_Status_LEDS_Init.
 8002476:	bd08      	pop	{r3, pc}
    ArcadeIT_Serial_Port_String_Send(TEXT_STATUS_LEDS_INITED);
 8002478:	f247 0088 	movw	r0, #28808	; 0x7088
 800247c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002480:	f7ff feaa 	bl	80021d8 <ArcadeIT_Serial_Port_String_Send>
} // End ArcadeIT_Status_LEDS_Init.
 8002484:	e7f7      	b.n	8002476 <ArcadeIT_Status_LEDS_Init+0xc2>

08002486 <ArcadeIT_Status_LED1_Toggle>:
  * PARAMETERS:  None.
  * RETURNS:     Nothing.
  */

  // Set LEDs line LOW or HIGH depending the current status of the LED.
  if (GPIOH->ODR & SYS_STATUS_LED1_PIN)
 8002486:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800248a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	f013 0f04 	tst.w	r3, #4
 8002494:	d108      	bne.n	80024a8 <ArcadeIT_Status_LED1_Toggle+0x22>
  {
    GPIOH->ODR &= ~(SYS_STATUS_LED1_PIN);
  }
  else
  {
    GPIOH->ODR |= SYS_STATUS_LED1_PIN;
 8002496:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800249a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800249e:	695a      	ldr	r2, [r3, #20]
 80024a0:	f042 0204 	orr.w	r2, r2, #4
 80024a4:	615a      	str	r2, [r3, #20]

  } // End if.

} // End ArcadeIT_Status_LED1_Toggle.
 80024a6:	4770      	bx	lr
    GPIOH->ODR &= ~(SYS_STATUS_LED1_PIN);
 80024a8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80024ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80024b0:	695a      	ldr	r2, [r3, #20]
 80024b2:	f022 0204 	bic.w	r2, r2, #4
 80024b6:	615a      	str	r2, [r3, #20]
 80024b8:	4770      	bx	lr

080024ba <ArcadeIT_Status_LED2_Toggle>:
  * PARAMETERS:  None.
  * RETURNS:     Nothing.
  */

  // Set LEDs line LOW or HIGH depending the current status of the LED.
  if (SYS_STATUS_LED2_PER->ODR & SYS_STATUS_LED2_PIN)
 80024ba:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80024be:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	f013 0f08 	tst.w	r3, #8
 80024c8:	d108      	bne.n	80024dc <ArcadeIT_Status_LED2_Toggle+0x22>
  {
    SYS_STATUS_LED2_PER->ODR &= ~(SYS_STATUS_LED2_PIN);
  }
  else
  {
    SYS_STATUS_LED2_PER->ODR |= SYS_STATUS_LED2_PIN;
 80024ca:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80024ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80024d2:	695a      	ldr	r2, [r3, #20]
 80024d4:	f042 0208 	orr.w	r2, r2, #8
 80024d8:	615a      	str	r2, [r3, #20]

  } // End if.

} // End ArcadeIT_Status_LED2_Toggle.
 80024da:	4770      	bx	lr
    SYS_STATUS_LED2_PER->ODR &= ~(SYS_STATUS_LED2_PIN);
 80024dc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80024e0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80024e4:	695a      	ldr	r2, [r3, #20]
 80024e6:	f022 0208 	bic.w	r2, r2, #8
 80024ea:	615a      	str	r2, [r3, #20]
 80024ec:	4770      	bx	lr

080024ee <ArcadeIT_TestPad_Set>:
  *  RCC_MCO2Div_4
  *  RCC_MCO2Div_5
  *
  */

  uint32_t lTmpReg = RCC->CFGR;
 80024ee:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80024f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80024f6:	689a      	ldr	r2, [r3, #8]
  lTmpReg  &= CFGR_MCO2_RESET_MASK;                 // Clear MCO2 and MCO2PRE[2:0] bits
 80024f8:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
  lTmpReg  |= pFrequencySystem | pFrequencyDivider; // Select MCO2 clock source and prescaler
 80024fc:	4301      	orrs	r1, r0
 80024fe:	4311      	orrs	r1, r2
  RCC->CFGR = lTmpReg;
 8002500:	6099      	str	r1, [r3, #8]

} // End ArcadeIT_TestPad_Set.
 8002502:	4770      	bx	lr

08002504 <ArcadeIT_TestPad_Init>:
void ArcadeIT_TestPad_Init
(
    uint32_t pFrequencySystem,  // What frequency source to test.
    uint32_t pFrequencyDivider  // What divider to test.
)
{
 8002504:	b508      	push	{r3, lr}
  * RETURNS:     Nothing.
  */

  uint32_t lPinPosition;

  if ((RCC->AHB1ENR & RCC_AHB1Periph_GPIOC) == FALSE) RCC->AHB1ENR |= RCC_AHB1Periph_GPIOC;
 8002506:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800250a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800250e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002510:	f013 0f04 	tst.w	r3, #4
 8002514:	d107      	bne.n	8002526 <ArcadeIT_TestPad_Init+0x22>
 8002516:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800251a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800251e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002520:	f042 0204 	orr.w	r2, r2, #4
 8002524:	631a      	str	r2, [r3, #48]	; 0x30

  // Configure pin PC9 in alternate function 0 (MCO2)
  lPinPosition = (SYS_TESTPADS_PIN_NO * 2);

  SYS_TESTPADS_PER->MODER   &= ~GPIO_MODER_MODER9;
 8002526:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800252a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002534:	601a      	str	r2, [r3, #0]
  SYS_TESTPADS_PER->MODER   |= (((uint32_t)GPIO_Mode_AF) << lPinPosition);
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800253c:	601a      	str	r2, [r3, #0]

  // Maximum frequency allowed is 100MHz, so keep it in mind when you want
  // to test 180MHz, you have to set the divider at least 2
  SYS_TESTPADS_PER->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR9;
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002544:	609a      	str	r2, [r3, #8]
  SYS_TESTPADS_PER->OSPEEDR |= ((uint32_t)(GPIO_Speed_100MHz) << lPinPosition);
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 800254c:	609a      	str	r2, [r3, #8]
  SYS_TESTPADS_PER->OTYPER  &= ~GPIO_OTYPER_OT_9;
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002554:	605a      	str	r2, [r3, #4]
  SYS_TESTPADS_PER->OTYPER  |= (uint16_t)(GPIO_OType_PP << SYS_TESTPADS_PIN_NO);
 8002556:	685a      	ldr	r2, [r3, #4]
 8002558:	605a      	str	r2, [r3, #4]
  SYS_TESTPADS_PER->PUPDR   &= ~GPIO_PUPDR_PUPDR9;
 800255a:	68da      	ldr	r2, [r3, #12]
 800255c:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002560:	60da      	str	r2, [r3, #12]
  SYS_TESTPADS_PER->PUPDR   |= (((uint32_t)GPIO_PuPd_UP) << lPinPosition);
 8002562:	68da      	ldr	r2, [r3, #12]
 8002564:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002568:	60da      	str	r2, [r3, #12]
  SYS_TESTPADS_PER->AFR[1] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)SYS_TESTPADS_PIN_NO & (uint32_t)0x07) * 4));
 800256a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800256c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002570:	625a      	str	r2, [r3, #36]	; 0x24
  SYS_TESTPADS_PER->AFR[1] |=  ((uint32_t)(SYS_TESTPADS_AF) << ((uint32_t)((uint32_t)SYS_TESTPADS_PIN_NO & (uint32_t)0x07) * 4));
 8002572:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002574:	625a      	str	r2, [r3, #36]	; 0x24

  ArcadeIT_TestPad_Set(pFrequencySystem, pFrequencyDivider);
 8002576:	f7ff ffba 	bl	80024ee <ArcadeIT_TestPad_Set>

  // Shows a message to serial port as debug
  if (gDevices & ARCADEIT_DEVICE_SERIAL)
 800257a:	f240 13f8 	movw	r3, #504	; 0x1f8
 800257e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002588:	d100      	bne.n	800258c <ArcadeIT_TestPad_Init+0x88>
    // Starts and configure the serial port.
    ArcadeIT_Serial_Port_String_Send(TEXT_TEST_PADS_INITED);

  } // End if.

} // End ArcadeIT_TestPads_Init.
 800258a:	bd08      	pop	{r3, pc}
    ArcadeIT_Serial_Port_String_Send(TEXT_TEST_PADS_INITED);
 800258c:	f247 00a0 	movw	r0, #28832	; 0x70a0
 8002590:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002594:	f7ff fe20 	bl	80021d8 <ArcadeIT_Serial_Port_String_Send>
} // End ArcadeIT_TestPads_Init.
 8002598:	e7f7      	b.n	800258a <ArcadeIT_TestPad_Init+0x86>

0800259a <get_fattime>:

// /////////////////////////////////////////////////////////////////////////////
// Shared functions.
// /////////////////////////////////////////////////////////////////////////////
DWORD get_fattime (void)
{
 800259a:	b500      	push	{lr}
 800259c:	b083      	sub	sp, #12
  rtc_time_t lTempTime = ArcadeIT_RTC_TimeDate_Get();
 800259e:	4668      	mov	r0, sp
 80025a0:	f7ff f898 	bl	80016d4 <ArcadeIT_RTC_TimeDate_Get>

  return  (  (uint32_t)(2000 + lTempTime.year - 1980) << 25)
 80025a4:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80025a8:	f103 0014 	add.w	r0, r3, #20
          | ((uint32_t)lTempTime.month << 21)
 80025ac:	f89d 3000 	ldrb.w	r3, [sp]
 80025b0:	055b      	lsls	r3, r3, #21
 80025b2:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
          | ((uint32_t)lTempTime.mday << 16)
 80025b6:	f89d 0001 	ldrb.w	r0, [sp, #1]
 80025ba:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
          | ((uint32_t)lTempTime.hour << 11)
 80025be:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80025c2:	ea43 23c0 	orr.w	r3, r3, r0, lsl #11
          | ((uint32_t)lTempTime.min << 5)
 80025c6:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80025ca:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
          | ((uint32_t)lTempTime.sec >> 1
 80025ce:	f89d 0005 	ldrb.w	r0, [sp, #5]
          );

} // end get_fattime
 80025d2:	ea43 0050 	orr.w	r0, r3, r0, lsr #1
 80025d6:	b003      	add	sp, #12
 80025d8:	f85d fb04 	ldr.w	pc, [sp], #4

080025dc <ArcadeIT_Scheduler_Task_Init>:
  PARMS:        See above.
  RETURNS:      Nothing.
  */

  uint8_t lTask = 0;
  for (lTask = 0; lTask < ARCADEIT_SCHEDULER_MAX_TASKS; lTask++)
 80025dc:	2300      	movs	r3, #0
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d815      	bhi.n	800260e <ArcadeIT_Scheduler_Task_Init+0x32>
{
 80025e2:	b410      	push	{r4}
  {
    gArcadeITTasks[lTask].current_cycle = 0;
 80025e4:	f240 6464 	movw	r4, #1636	; 0x664
 80025e8:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80025ec:	202c      	movs	r0, #44	; 0x2c
 80025ee:	fb00 f003 	mul.w	r0, r0, r3
 80025f2:	1821      	adds	r1, r4, r0
 80025f4:	2200      	movs	r2, #0
 80025f6:	604a      	str	r2, [r1, #4]
    gArcadeITTasks[lTask].cycles = 0;
 80025f8:	5022      	str	r2, [r4, r0]
    gArcadeITTasks[lTask].time_period = 0;
 80025fa:	608a      	str	r2, [r1, #8]
    gArcadeITTasks[lTask].time_current = 0;
 80025fc:	60ca      	str	r2, [r1, #12]
    gArcadeITTasks[lTask].function = NULL;
 80025fe:	610a      	str	r2, [r1, #16]
  for (lTask = 0; lTask < ARCADEIT_SCHEDULER_MAX_TASKS; lTask++)
 8002600:	3301      	adds	r3, #1
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b04      	cmp	r3, #4
 8002606:	d9ed      	bls.n	80025e4 <ArcadeIT_Scheduler_Task_Init+0x8>
  {
    //ArcadeIT_Serial_Port_String_Send(TEXT_SCHEDULER_INITED);

  } // End if.

} // End ArcadeIT_Scheduler_Task_Init.
 8002608:	f85d 4b04 	ldr.w	r4, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	4770      	bx	lr

08002610 <ArcadeIT_Scheduler_Task_Set>:
  void *pFunctionPtr,        // The pointer to the function to execute.
  void *pParameters,         // The pointer to the parameters used by the function.
  uint32_t pCycles,          // The number of time that this task has to be executed. 0 = infinite.
  uint32_t pTimePeriod       // The time period in ms to elapse before the next execution.
)
{
 8002610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002612:	9f05      	ldr	r7, [sp, #20]
  DESCRIPTION:  Setup a scheduled task.
  PARMS:        See above.
  RETURNS:      Nothing.
  */

  if (pParameters != NULL)
 8002614:	b33a      	cbz	r2, 8002666 <ArcadeIT_Scheduler_Task_Set+0x56>
 8002616:	4616      	mov	r6, r2
  {
    gArcadeITTasks[id].num_parameters = ((uint32_t*)pParameters)[PAR_1];
 8002618:	6814      	ldr	r4, [r2, #0]
 800261a:	4684      	mov	ip, r0
 800261c:	f240 6564 	movw	r5, #1636	; 0x664
 8002620:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8002624:	222c      	movs	r2, #44	; 0x2c
 8002626:	fb02 5200 	mla	r2, r2, r0, r5
 800262a:	7514      	strb	r4, [r2, #20]

    // Copy parameters.
    uint8_t lPars = 0;
    for (lPars = 0; lPars < gArcadeITTasks[id].num_parameters+1; lPars++)
 800262c:	2400      	movs	r4, #0
 800262e:	e00f      	b.n	8002650 <ArcadeIT_Scheduler_Task_Set+0x40>
    {
      gArcadeITTasks[id].parameters[lPars] = ((uint32_t*)pParameters)[lPars];
 8002630:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 8002634:	f240 6e64 	movw	lr, #1636	; 0x664
 8002638:	f2c2 0e00 	movt	lr, #8192	; 0x2000
 800263c:	eb0c 028c 	add.w	r2, ip, ip, lsl #2
 8002640:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8002644:	4422      	add	r2, r4
 8002646:	3206      	adds	r2, #6
 8002648:	f84e 5022 	str.w	r5, [lr, r2, lsl #2]
    for (lPars = 0; lPars < gArcadeITTasks[id].num_parameters+1; lPars++)
 800264c:	3401      	adds	r4, #1
 800264e:	b2e4      	uxtb	r4, r4
 8002650:	f240 6564 	movw	r5, #1636	; 0x664
 8002654:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8002658:	222c      	movs	r2, #44	; 0x2c
 800265a:	fb02 520c 	mla	r2, r2, ip, r5
 800265e:	7d12      	ldrb	r2, [r2, #20]
 8002660:	3201      	adds	r2, #1
 8002662:	4294      	cmp	r4, r2
 8002664:	dbe4      	blt.n	8002630 <ArcadeIT_Scheduler_Task_Set+0x20>

    } // End for.

  } // End if.

  gArcadeITTasks[id].current_cycle = 0;
 8002666:	f240 6464 	movw	r4, #1636	; 0x664
 800266a:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800266e:	222c      	movs	r2, #44	; 0x2c
 8002670:	fb02 f000 	mul.w	r0, r2, r0
 8002674:	1822      	adds	r2, r4, r0
 8002676:	2500      	movs	r5, #0
 8002678:	6055      	str	r5, [r2, #4]
  gArcadeITTasks[id].cycles = pCycles;
 800267a:	5023      	str	r3, [r4, r0]
  gArcadeITTasks[id].time_period = pTimePeriod;
 800267c:	6097      	str	r7, [r2, #8]
  gArcadeITTasks[id].time_current = gArcadeITTasks[id].time_period;
 800267e:	60d7      	str	r7, [r2, #12]
  gArcadeITTasks[id].function = pFunctionPtr;
 8002680:	6111      	str	r1, [r2, #16]
  gArcadeITTasks[id].execute = FALSE;
 8002682:	f882 5028 	strb.w	r5, [r2, #40]	; 0x28

} // End ArcadeIT_Scheduler_Task_Set.
 8002686:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002688 <ArcadeIT_Scheduler_Task_Unset>:
  DESCRIPTION:  Reset a scheduled task.
  PARMS:        See above.
  RETURNS:      Nothing.
  */

  gArcadeITTasks[id].current_cycle = 0;
 8002688:	f240 6164 	movw	r1, #1636	; 0x664
 800268c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8002690:	232c      	movs	r3, #44	; 0x2c
 8002692:	fb03 f000 	mul.w	r0, r3, r0
 8002696:	180a      	adds	r2, r1, r0
 8002698:	2300      	movs	r3, #0
 800269a:	6053      	str	r3, [r2, #4]
  gArcadeITTasks[id].cycles = 0;
 800269c:	500b      	str	r3, [r1, r0]
  gArcadeITTasks[id].time_period = 0;
 800269e:	6093      	str	r3, [r2, #8]
  gArcadeITTasks[id].time_current = 0;
 80026a0:	60d3      	str	r3, [r2, #12]
  gArcadeITTasks[id].function = NULL;
 80026a2:	6113      	str	r3, [r2, #16]
  gArcadeITTasks[id].execute = FALSE;
 80026a4:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28

} // End ArcadeIT_Scheduler_Task_Unset.
 80026a8:	4770      	bx	lr

080026aa <ArcadeIT_Scheduler_Update>:

// /////////////////////////////////////////////////////////////////////////////
void ArcadeIT_Scheduler_Update(void)
{
 80026aa:	b538      	push	{r3, r4, r5, lr}
  PARMS:        See above.
  RETURNS:      Nothing.
  */

  uint8_t lTask = 0;
  for (lTask = 0; lTask < ARCADEIT_SCHEDULER_MAX_TASKS; lTask++)
 80026ac:	2400      	movs	r4, #0
 80026ae:	e00a      	b.n	80026c6 <ArcadeIT_Scheduler_Update+0x1c>

            } // End if.
          }
          else
          {
            gArcadeITTasks[lTask].time_current = gArcadeITTasks[lTask].time_period;
 80026b0:	f240 6364 	movw	r3, #1636	; 0x664
 80026b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80026b8:	222c      	movs	r2, #44	; 0x2c
 80026ba:	fb02 3104 	mla	r1, r2, r4, r3
 80026be:	688b      	ldr	r3, [r1, #8]
 80026c0:	60cb      	str	r3, [r1, #12]
  for (lTask = 0; lTask < ARCADEIT_SCHEDULER_MAX_TASKS; lTask++)
 80026c2:	3401      	adds	r4, #1
 80026c4:	b2e4      	uxtb	r4, r4
 80026c6:	2c04      	cmp	r4, #4
 80026c8:	d83f      	bhi.n	800274a <ArcadeIT_Scheduler_Update+0xa0>
    if (gArcadeITTasks[lTask].function != NULL)
 80026ca:	4621      	mov	r1, r4
 80026cc:	f240 6264 	movw	r2, #1636	; 0x664
 80026d0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80026d4:	232c      	movs	r3, #44	; 0x2c
 80026d6:	fb03 2304 	mla	r3, r3, r4, r2
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0f0      	beq.n	80026c2 <ArcadeIT_Scheduler_Update+0x18>
      if (gArcadeITTasks[lTask].execute == FALSE)
 80026e0:	f240 6264 	movw	r2, #1636	; 0x664
 80026e4:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80026e8:	232c      	movs	r3, #44	; 0x2c
 80026ea:	fb03 2304 	mla	r3, r3, r4, r2
 80026ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1e5      	bne.n	80026c2 <ArcadeIT_Scheduler_Update+0x18>
        gArcadeITTasks[lTask].time_current--;
 80026f6:	4613      	mov	r3, r2
 80026f8:	222c      	movs	r2, #44	; 0x2c
 80026fa:	fb02 3204 	mla	r2, r2, r4, r3
 80026fe:	68d3      	ldr	r3, [r2, #12]
 8002700:	3b01      	subs	r3, #1
 8002702:	60d3      	str	r3, [r2, #12]
        if (gArcadeITTasks[lTask].time_current == 0)
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1dc      	bne.n	80026c2 <ArcadeIT_Scheduler_Update+0x18>
          gArcadeITTasks[lTask].execute = TRUE;
 8002708:	f240 6264 	movw	r2, #1636	; 0x664
 800270c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002710:	232c      	movs	r3, #44	; 0x2c
 8002712:	fb03 f304 	mul.w	r3, r3, r4
 8002716:	18d0      	adds	r0, r2, r3
 8002718:	2501      	movs	r5, #1
 800271a:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28
          if (gArcadeITTasks[lTask].cycles)
 800271e:	58d3      	ldr	r3, [r2, r3]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d0c5      	beq.n	80026b0 <ArcadeIT_Scheduler_Update+0x6>
            gArcadeITTasks[lTask].time_current = gArcadeITTasks[lTask].time_period;
 8002724:	f240 6264 	movw	r2, #1636	; 0x664
 8002728:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800272c:	232c      	movs	r3, #44	; 0x2c
 800272e:	fb03 f101 	mul.w	r1, r3, r1
 8002732:	6883      	ldr	r3, [r0, #8]
 8002734:	60c3      	str	r3, [r0, #12]
            gArcadeITTasks[lTask].current_cycle++;
 8002736:	6843      	ldr	r3, [r0, #4]
 8002738:	442b      	add	r3, r5
 800273a:	6043      	str	r3, [r0, #4]
            if (gArcadeITTasks[lTask].current_cycle == gArcadeITTasks[lTask].cycles)
 800273c:	5852      	ldr	r2, [r2, r1]
 800273e:	4293      	cmp	r3, r2
 8002740:	d1bf      	bne.n	80026c2 <ArcadeIT_Scheduler_Update+0x18>
              ArcadeIT_Scheduler_Task_Unset(lTask);
 8002742:	4620      	mov	r0, r4
 8002744:	f7ff ffa0 	bl	8002688 <ArcadeIT_Scheduler_Task_Unset>
 8002748:	e7bb      	b.n	80026c2 <ArcadeIT_Scheduler_Update+0x18>

    } // End if.

  } // End for.

} // End ArcadeIT_Scheduler_Update.
 800274a:	bd38      	pop	{r3, r4, r5, pc}

0800274c <ArcadeIT_Scheduler_Run>:

// /////////////////////////////////////////////////////////////////////////////
void ArcadeIT_Scheduler_Run(void)
{
 800274c:	b538      	push	{r3, r4, r5, lr}
  PARMS:        See above.
  RETURNS:      Nothing.
  */

  uint8_t lTask = 0;
  for (lTask = 0; lTask < ARCADEIT_SCHEDULER_MAX_TASKS; lTask++)
 800274e:	2400      	movs	r4, #0
 8002750:	e001      	b.n	8002756 <ArcadeIT_Scheduler_Run+0xa>
 8002752:	3401      	adds	r4, #1
 8002754:	b2e4      	uxtb	r4, r4
 8002756:	2c04      	cmp	r4, #4
 8002758:	d817      	bhi.n	800278a <ArcadeIT_Scheduler_Run+0x3e>
  {
    if (gArcadeITTasks[lTask].execute)
 800275a:	f240 6264 	movw	r2, #1636	; 0x664
 800275e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002762:	232c      	movs	r3, #44	; 0x2c
 8002764:	fb03 2304 	mla	r3, r3, r4, r2
 8002768:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0f0      	beq.n	8002752 <ArcadeIT_Scheduler_Run+0x6>
    {
        // Here we call the function set for this task.
        gArcadeITTasks[lTask].function(gArcadeITTasks[lTask].parameters);
 8002770:	4610      	mov	r0, r2
 8002772:	232c      	movs	r3, #44	; 0x2c
 8002774:	fb03 f304 	mul.w	r3, r3, r4
 8002778:	18d5      	adds	r5, r2, r3
 800277a:	692a      	ldr	r2, [r5, #16]
 800277c:	3318      	adds	r3, #24
 800277e:	4418      	add	r0, r3
 8002780:	4790      	blx	r2

        // Unmark the function.
        gArcadeITTasks[lTask].execute = FALSE;
 8002782:	2300      	movs	r3, #0
 8002784:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
 8002788:	e7e3      	b.n	8002752 <ArcadeIT_Scheduler_Run+0x6>

    } // End if.

  } // End for.

} // End ArcadeIT_Scheduler_Run.
 800278a:	bd38      	pop	{r3, r4, r5, pc}

0800278c <SD_disk_status>:
// Prototypes for unused functions
DSTATUS RAM_disk_status();
DSTATUS MMC_disk_status();
DSTATUS USB_disk_status();
DSTATUS SD_disk_status()
{
 800278c:	b508      	push	{r3, lr}
  return ArcadeIT_SDCard_Disk_Status();
 800278e:	f7ff f952 	bl	8001a36 <ArcadeIT_SDCard_Disk_Status>
}
 8002792:	bd08      	pop	{r3, pc}

08002794 <SD_disk_initialize>:

DSTATUS RAM_disk_initialize();
DSTATUS MMC_disk_initialize();
DSTATUS USB_disk_initialize();
DSTATUS SD_disk_initialize()
{
 8002794:	b508      	push	{r3, lr}
  return ArcadeIT_SDCard_Disk_Initialize();
 8002796:	f7ff f889 	bl	80018ac <ArcadeIT_SDCard_Disk_Initialize>
}
 800279a:	bd08      	pop	{r3, pc}

0800279c <SD_disk_read>:

DSTATUS RAM_disk_read(BYTE *buff, DWORD sector, UINT count);
DSTATUS MMC_disk_read(BYTE *buff, DWORD sector, UINT count);
DSTATUS USB_disk_read(BYTE *buff, DWORD sector, UINT count);
DSTATUS SD_disk_read(BYTE *buff, DWORD sector, UINT count)
{
 800279c:	b508      	push	{r3, lr}
  return ArcadeIT_SDCard_Disk_Read(buff, sector, count);
 800279e:	f7ff f950 	bl	8001a42 <ArcadeIT_SDCard_Disk_Read>
}
 80027a2:	bd08      	pop	{r3, pc}

080027a4 <SD_disk_write>:

DSTATUS RAM_disk_write(const BYTE *buff, DWORD sector, UINT count);
DSTATUS MMC_disk_write(const BYTE *buff, DWORD sector, UINT count);
DSTATUS USB_disk_write(const BYTE *buff, DWORD sector, UINT count);
DSTATUS SD_disk_write(const BYTE *buff, DWORD sector, UINT count)
{
 80027a4:	b508      	push	{r3, lr}
  return ArcadeIT_SDCard_Disk_Write((BYTE*)buff, sector, count);
 80027a6:	f7ff f98e 	bl	8001ac6 <ArcadeIT_SDCard_Disk_Write>
}
 80027aa:	bd08      	pop	{r3, pc}

080027ac <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80027ac:	b508      	push	{r3, lr}
  DSTATUS result = 0;

	switch (pdrv) {
 80027ae:	2803      	cmp	r0, #3
 80027b0:	d808      	bhi.n	80027c4 <disk_status+0x18>
 80027b2:	e8df f000 	tbb	[pc, r0]
 80027b6:	0402      	.short	0x0402
 80027b8:	0202      	.short	0x0202
	case DEV_RAM :
		//result = RAM_disk_status();

		// translate the reslut code here

		return result;
 80027ba:	2000      	movs	r0, #0
		// translate the reslut code here

		return result;
	}
	return STA_NOINIT;
}
 80027bc:	bd08      	pop	{r3, pc}
		result = SD_disk_status();
 80027be:	f7ff ffe5 	bl	800278c <SD_disk_status>
		return result;
 80027c2:	e7fb      	b.n	80027bc <disk_status+0x10>
	return STA_NOINIT;
 80027c4:	2001      	movs	r0, #1
 80027c6:	e7f9      	b.n	80027bc <disk_status+0x10>

080027c8 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80027c8:	b508      	push	{r3, lr}
  DSTATUS result = 0;

	switch (pdrv) {
 80027ca:	2803      	cmp	r0, #3
 80027cc:	d808      	bhi.n	80027e0 <disk_initialize+0x18>
 80027ce:	e8df f000 	tbb	[pc, r0]
 80027d2:	0402      	.short	0x0402
 80027d4:	0202      	.short	0x0202
	case DEV_RAM :
		//result = RAM_disk_initialize();

		// translate the reslut code here

		return result;
 80027d6:	2000      	movs	r0, #0
		// translate the reslut code here

		return result;
	}
	return STA_NOINIT;
}
 80027d8:	bd08      	pop	{r3, pc}
	    result = SD_disk_initialize();
 80027da:	f7ff ffdb 	bl	8002794 <SD_disk_initialize>
	    return result;
 80027de:	e7fb      	b.n	80027d8 <disk_initialize+0x10>
	return STA_NOINIT;
 80027e0:	2001      	movs	r0, #1
 80027e2:	e7f9      	b.n	80027d8 <disk_initialize+0x10>

080027e4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	LBA_t sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80027e4:	b510      	push	{r4, lr}
  DSTATUS result = 0;

	switch (pdrv) {
 80027e6:	2803      	cmp	r0, #3
 80027e8:	d80c      	bhi.n	8002804 <disk_read+0x20>
 80027ea:	e8df f000 	tbb	[pc, r0]
 80027ee:	0402      	.short	0x0402
 80027f0:	0202      	.short	0x0202

		//result = RAM_disk_read(buff, sector, count);

		// translate the reslut code here

		return result;
 80027f2:	2000      	movs	r0, #0

		return result;
	}

	return RES_PARERR;
}
 80027f4:	bd10      	pop	{r4, pc}
 80027f6:	4614      	mov	r4, r2
 80027f8:	4608      	mov	r0, r1
    result = SD_disk_read(buff, sector, count);
 80027fa:	461a      	mov	r2, r3
 80027fc:	4621      	mov	r1, r4
 80027fe:	f7ff ffcd 	bl	800279c <SD_disk_read>
    return result;
 8002802:	e7f7      	b.n	80027f4 <disk_read+0x10>
	return RES_PARERR;
 8002804:	2004      	movs	r0, #4
 8002806:	e7f5      	b.n	80027f4 <disk_read+0x10>

08002808 <disk_write>:
	BYTE pdrv,			/* Physical drive number to identify the drive */
	const BYTE *buff,	    /* Data to be written */
	LBA_t sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
 8002808:	b510      	push	{r4, lr}
  DSTATUS result = 0;

	switch (pdrv) {
 800280a:	2803      	cmp	r0, #3
 800280c:	d80c      	bhi.n	8002828 <disk_write+0x20>
 800280e:	e8df f000 	tbb	[pc, r0]
 8002812:	0402      	.short	0x0402
 8002814:	0202      	.short	0x0202

		//result = RAM_disk_write(buff, sector, count);

		// translate the reslut code here

		return result;
 8002816:	2000      	movs	r0, #0

		return result;
	}

	return RES_PARERR;
}
 8002818:	bd10      	pop	{r4, pc}
 800281a:	4614      	mov	r4, r2
 800281c:	4608      	mov	r0, r1
    result = SD_disk_write(buff, sector, count);
 800281e:	461a      	mov	r2, r3
 8002820:	4621      	mov	r1, r4
 8002822:	f7ff ffbf 	bl	80027a4 <SD_disk_write>
    return result;
 8002826:	e7f7      	b.n	8002818 <disk_write+0x10>
	return RES_PARERR;
 8002828:	2004      	movs	r0, #4
 800282a:	e7f5      	b.n	8002818 <disk_write+0x10>

0800282c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800282c:	b508      	push	{r3, lr}
  DSTATUS result = 0;

	switch (pdrv) {
 800282e:	2803      	cmp	r0, #3
 8002830:	d80a      	bhi.n	8002848 <disk_ioctl+0x1c>
 8002832:	e8df f000 	tbb	[pc, r0]
 8002836:	0402      	.short	0x0402
 8002838:	0202      	.short	0x0202
	case DEV_RAM :

		// Process of the command for the RAM drive

		return result;
 800283a:	2000      	movs	r0, #0

		return result;
	}

	return RES_PARERR;
}
 800283c:	bd08      	pop	{r3, pc}
 800283e:	4608      	mov	r0, r1
	  result = ArcadeIT_SDCard_Disk_Ioctl(cmd, buff);
 8002840:	4611      	mov	r1, r2
 8002842:	f7ff f993 	bl	8001b6c <ArcadeIT_SDCard_Disk_Ioctl>
		return result;
 8002846:	e7f9      	b.n	800283c <disk_ioctl+0x10>
	return RES_PARERR;
 8002848:	2004      	movs	r0, #4
 800284a:	e7f7      	b.n	800283c <disk_ioctl+0x10>

0800284c <ld_word>:

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
 800284c:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
 800284e:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 8002850:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8002854:	4770      	bx	lr

08002856 <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
 8002856:	78c2      	ldrb	r2, [r0, #3]
	rv = rv << 8 | ptr[2];
 8002858:	7883      	ldrb	r3, [r0, #2]
 800285a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	rv = rv << 8 | ptr[1];
 800285e:	7843      	ldrb	r3, [r0, #1]
 8002860:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8002864:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 8002866:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800286a:	4770      	bx	lr

0800286c <st_word>:
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 800286c:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
 800286e:	0a09      	lsrs	r1, r1, #8
 8002870:	7041      	strb	r1, [r0, #1]
}
 8002872:	4770      	bx	lr

08002874 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8002874:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002876:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800287a:	7043      	strb	r3, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 800287c:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8002880:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8002882:	0e09      	lsrs	r1, r1, #24
 8002884:	70c1      	strb	r1, [r0, #3]
}
 8002886:	4770      	bx	lr

08002888 <mem_cpy>:
static void mem_cpy (void* dst, const void* src, UINT cnt)
{
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt != 0) {
 8002888:	4613      	mov	r3, r2
 800288a:	b12a      	cbz	r2, 8002898 <mem_cpy+0x10>
		do {
			*d++ = *s++;
 800288c:	780a      	ldrb	r2, [r1, #0]
 800288e:	7002      	strb	r2, [r0, #0]
 8002890:	3001      	adds	r0, #1
 8002892:	3101      	adds	r1, #1
		} while (--cnt);
 8002894:	3b01      	subs	r3, #1
 8002896:	d1f9      	bne.n	800288c <mem_cpy+0x4>
	}
}
 8002898:	4770      	bx	lr

0800289a <mem_set>:
static void mem_set (void* dst, int val, UINT cnt)
{
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 800289a:	7001      	strb	r1, [r0, #0]
 800289c:	3001      	adds	r0, #1
	} while (--cnt);
 800289e:	3a01      	subs	r2, #1
 80028a0:	d1fb      	bne.n	800289a <mem_set>
}
 80028a2:	4770      	bx	lr

080028a4 <mem_cmp>:


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
 80028a4:	b430      	push	{r4, r5}
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
 80028a6:	1c45      	adds	r5, r0, #1
 80028a8:	7803      	ldrb	r3, [r0, #0]
 80028aa:	7808      	ldrb	r0, [r1, #0]
 80028ac:	1a1b      	subs	r3, r3, r0
	} while (--cnt && r == 0);
 80028ae:	3a01      	subs	r2, #1
 80028b0:	d004      	beq.n	80028bc <mem_cmp+0x18>
 80028b2:	1c4c      	adds	r4, r1, #1
		r = *d++ - *s++;
 80028b4:	4628      	mov	r0, r5
 80028b6:	4621      	mov	r1, r4
	} while (--cnt && r == 0);
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0f4      	beq.n	80028a6 <mem_cmp+0x2>

	return r;
}
 80028bc:	4618      	mov	r0, r3
 80028be:	bc30      	pop	{r4, r5}
 80028c0:	4770      	bx	lr

080028c2 <chk_chr>:


/* Check if chr is contained in the string */
static int chk_chr (const char* str, int chr)	/* NZ:contained, ZR:not contained */
{
	while (*str && *str != chr) str++;
 80028c2:	e000      	b.n	80028c6 <chk_chr+0x4>
 80028c4:	3001      	adds	r0, #1
 80028c6:	7803      	ldrb	r3, [r0, #0]
 80028c8:	b10b      	cbz	r3, 80028ce <chk_chr+0xc>
 80028ca:	428b      	cmp	r3, r1
 80028cc:	d1fa      	bne.n	80028c4 <chk_chr+0x2>
	return *str;
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	4770      	bx	lr

080028d2 <dbc_1st>:
	if (DbcTbl && c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;					/* 1st byte range 1 */
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;	/* 1st byte range 2 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[0]) {
 80028d2:	2880      	cmp	r0, #128	; 0x80
 80028d4:	d907      	bls.n	80028e6 <dbc_1st+0x14>
		if (c <= DbcTbl[1]) return 1;
 80028d6:	289f      	cmp	r0, #159	; 0x9f
 80028d8:	d907      	bls.n	80028ea <dbc_1st+0x18>
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
 80028da:	28df      	cmp	r0, #223	; 0xdf
 80028dc:	d907      	bls.n	80028ee <dbc_1st+0x1c>
 80028de:	28fc      	cmp	r0, #252	; 0xfc
 80028e0:	d907      	bls.n	80028f2 <dbc_1st+0x20>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 80028e2:	2000      	movs	r0, #0
 80028e4:	4770      	bx	lr
 80028e6:	2000      	movs	r0, #0
 80028e8:	4770      	bx	lr
		if (c <= DbcTbl[1]) return 1;
 80028ea:	2001      	movs	r0, #1
 80028ec:	4770      	bx	lr
	return 0;
 80028ee:	2000      	movs	r0, #0
 80028f0:	4770      	bx	lr
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
 80028f2:	2001      	movs	r0, #1
}
 80028f4:	4770      	bx	lr

080028f6 <dbc_2nd>:
		if (c <= DbcTbl[5]) return 1;					/* 2nd byte range 1 */
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;	/* 2nd byte range 2 */
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;	/* 2nd byte range 3 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[4]) {
 80028f6:	283f      	cmp	r0, #63	; 0x3f
 80028f8:	d90b      	bls.n	8002912 <dbc_2nd+0x1c>
		if (c <= DbcTbl[5]) return 1;
 80028fa:	287e      	cmp	r0, #126	; 0x7e
 80028fc:	d90b      	bls.n	8002916 <dbc_2nd+0x20>
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
 80028fe:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002902:	d102      	bne.n	800290a <dbc_2nd+0x14>
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
 8002904:	b148      	cbz	r0, 800291a <dbc_2nd+0x24>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 8002906:	2000      	movs	r0, #0
 8002908:	4770      	bx	lr
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
 800290a:	28fc      	cmp	r0, #252	; 0xfc
 800290c:	d8fa      	bhi.n	8002904 <dbc_2nd+0xe>
 800290e:	2001      	movs	r0, #1
 8002910:	4770      	bx	lr
	return 0;
 8002912:	2000      	movs	r0, #0
 8002914:	4770      	bx	lr
		if (c <= DbcTbl[5]) return 1;
 8002916:	2001      	movs	r0, #1
 8002918:	4770      	bx	lr
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
 800291a:	2001      	movs	r0, #1
}
 800291c:	4770      	bx	lr

0800291e <clst2sect>:
static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;		/* Cluster number is origin from 2 */
 800291e:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8002920:	69c3      	ldr	r3, [r0, #28]
 8002922:	3b02      	subs	r3, #2
 8002924:	428b      	cmp	r3, r1
 8002926:	d904      	bls.n	8002932 <clst2sect+0x14>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 8002928:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800292a:	8940      	ldrh	r0, [r0, #10]
 800292c:	fb01 3000 	mla	r0, r1, r0, r3
 8002930:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8002932:	2000      	movs	r0, #0
}
 8002934:	4770      	bx	lr

08002936 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 8002936:	b570      	push	{r4, r5, r6, lr}
 8002938:	4606      	mov	r6, r0
 800293a:	460d      	mov	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800293c:	f101 001a 	add.w	r0, r1, #26
 8002940:	f7ff ff84 	bl	800284c <ld_word>
	if (fs->fs_type == FS_FAT32) {
 8002944:	7833      	ldrb	r3, [r6, #0]
 8002946:	2b03      	cmp	r3, #3
 8002948:	d000      	beq.n	800294c <ld_clust+0x16>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
	}

	return cl;
}
 800294a:	bd70      	pop	{r4, r5, r6, pc}
 800294c:	4604      	mov	r4, r0
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800294e:	f105 0014 	add.w	r0, r5, #20
 8002952:	f7ff ff7b 	bl	800284c <ld_word>
 8002956:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
	return cl;
 800295a:	e7f6      	b.n	800294a <ld_clust+0x14>

0800295c <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800295c:	b570      	push	{r4, r5, r6, lr}
 800295e:	4606      	mov	r6, r0
 8002960:	460c      	mov	r4, r1
 8002962:	4615      	mov	r5, r2
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8002964:	b291      	uxth	r1, r2
 8002966:	f104 001a 	add.w	r0, r4, #26
 800296a:	f7ff ff7f 	bl	800286c <st_word>
	if (fs->fs_type == FS_FAT32) {
 800296e:	7833      	ldrb	r3, [r6, #0]
 8002970:	2b03      	cmp	r3, #3
 8002972:	d000      	beq.n	8002976 <st_clust+0x1a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
	}
}
 8002974:	bd70      	pop	{r4, r5, r6, pc}
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8002976:	0c29      	lsrs	r1, r5, #16
 8002978:	f104 0014 	add.w	r0, r4, #20
 800297c:	f7ff ff76 	bl	800286c <st_word>
}
 8002980:	e7f8      	b.n	8002974 <st_clust+0x18>

08002982 <pick_lfn>:

static int pick_lfn (	/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8002982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002986:	4607      	mov	r7, r0
 8002988:	460e      	mov	r6, r1
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800298a:	f101 001a 	add.w	r0, r1, #26
 800298e:	f7ff ff5d 	bl	800284c <ld_word>
 8002992:	bb90      	cbnz	r0, 80029fa <pick_lfn+0x78>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8002994:	7835      	ldrb	r5, [r6, #0]
 8002996:	f025 0540 	bic.w	r5, r5, #64	; 0x40
 800299a:	3d01      	subs	r5, #1
 800299c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80029a0:	eb05 0583 	add.w	r5, r5, r3, lsl #2

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80029a4:	f04f 0801 	mov.w	r8, #1
 80029a8:	2400      	movs	r4, #0
 80029aa:	e004      	b.n	80029b6 <pick_lfn+0x34>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
		if (wc != 0) {
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80029ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029b0:	4298      	cmp	r0, r3
 80029b2:	d127      	bne.n	8002a04 <pick_lfn+0x82>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80029b4:	3401      	adds	r4, #1
 80029b6:	2c0c      	cmp	r4, #12
 80029b8:	d811      	bhi.n	80029de <pick_lfn+0x5c>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80029ba:	f247 432c 	movw	r3, #29740	; 0x742c
 80029be:	f6c0 0300 	movt	r3, #2048	; 0x800
 80029c2:	5d18      	ldrb	r0, [r3, r4]
 80029c4:	4430      	add	r0, r6
 80029c6:	f7ff ff41 	bl	800284c <ld_word>
		if (wc != 0) {
 80029ca:	f1b8 0f00 	cmp.w	r8, #0
 80029ce:	d0ed      	beq.n	80029ac <pick_lfn+0x2a>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 80029d0:	2dff      	cmp	r5, #255	; 0xff
 80029d2:	d815      	bhi.n	8002a00 <pick_lfn+0x7e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80029d4:	f827 0015 	strh.w	r0, [r7, r5, lsl #1]
 80029d8:	4680      	mov	r8, r0
 80029da:	3501      	adds	r5, #1
 80029dc:	e7ea      	b.n	80029b4 <pick_lfn+0x32>
		}
	}

	if (dir[LDIR_Ord] & LLEF && wc != 0) {	/* Put terminator if it is the last LFN part and not terminated */
 80029de:	7833      	ldrb	r3, [r6, #0]
 80029e0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80029e4:	d010      	beq.n	8002a08 <pick_lfn+0x86>
 80029e6:	f1b8 0f00 	cmp.w	r8, #0
 80029ea:	d00f      	beq.n	8002a0c <pick_lfn+0x8a>
		if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 80029ec:	2dff      	cmp	r5, #255	; 0xff
 80029ee:	d80f      	bhi.n	8002a10 <pick_lfn+0x8e>
		lfnbuf[i] = 0;
 80029f0:	2300      	movs	r3, #0
 80029f2:	f827 3015 	strh.w	r3, [r7, r5, lsl #1]
	}

	return 1;		/* The part of LFN is valid */
 80029f6:	2001      	movs	r0, #1
 80029f8:	e000      	b.n	80029fc <pick_lfn+0x7a>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80029fa:	2000      	movs	r0, #0
}
 80029fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 8002a00:	2000      	movs	r0, #0
 8002a02:	e7fb      	b.n	80029fc <pick_lfn+0x7a>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8002a04:	2000      	movs	r0, #0
 8002a06:	e7f9      	b.n	80029fc <pick_lfn+0x7a>
	return 1;		/* The part of LFN is valid */
 8002a08:	2001      	movs	r0, #1
 8002a0a:	e7f7      	b.n	80029fc <pick_lfn+0x7a>
 8002a0c:	2001      	movs	r0, #1
 8002a0e:	e7f5      	b.n	80029fc <pick_lfn+0x7a>
		if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 8002a10:	2000      	movs	r0, #0
 8002a12:	e7f3      	b.n	80029fc <pick_lfn+0x7a>

08002a14 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8002a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a18:	4680      	mov	r8, r0
 8002a1a:	460f      	mov	r7, r1
 8002a1c:	4691      	mov	r9, r2
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8002a1e:	734b      	strb	r3, [r1, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8002a20:	230f      	movs	r3, #15
 8002a22:	72cb      	strb	r3, [r1, #11]
	dir[LDIR_Type] = 0;
 8002a24:	2400      	movs	r4, #0
 8002a26:	730c      	strb	r4, [r1, #12]
	st_word(dir + LDIR_FstClusLO, 0);
 8002a28:	4621      	mov	r1, r4
 8002a2a:	f107 001a 	add.w	r0, r7, #26
 8002a2e:	f7ff ff1d 	bl	800286c <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8002a32:	f109 36ff 	add.w	r6, r9, #4294967295
 8002a36:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8002a3a:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	s = wc = 0;
 8002a3e:	4625      	mov	r5, r4
 8002a40:	e002      	b.n	8002a48 <put_lfn+0x34>
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
		st_word(dir + LfnOfs[s], wc);		/* Put it */
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for following items */
	} while (++s < 13);
 8002a42:	3401      	adds	r4, #1
 8002a44:	2c0c      	cmp	r4, #12
 8002a46:	d814      	bhi.n	8002a72 <put_lfn+0x5e>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8002a48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a4c:	429d      	cmp	r5, r3
 8002a4e:	d002      	beq.n	8002a56 <put_lfn+0x42>
 8002a50:	f838 5016 	ldrh.w	r5, [r8, r6, lsl #1]
 8002a54:	3601      	adds	r6, #1
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8002a56:	f247 432c 	movw	r3, #29740	; 0x742c
 8002a5a:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002a5e:	5d18      	ldrb	r0, [r3, r4]
 8002a60:	4629      	mov	r1, r5
 8002a62:	4438      	add	r0, r7
 8002a64:	f7ff ff02 	bl	800286c <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for following items */
 8002a68:	2d00      	cmp	r5, #0
 8002a6a:	d1ea      	bne.n	8002a42 <put_lfn+0x2e>
 8002a6c:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8002a70:	e7e7      	b.n	8002a42 <put_lfn+0x2e>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8002a72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a76:	429d      	cmp	r5, r3
 8002a78:	d002      	beq.n	8002a80 <put_lfn+0x6c>
 8002a7a:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
 8002a7e:	b90b      	cbnz	r3, 8002a84 <put_lfn+0x70>
 8002a80:	f049 0940 	orr.w	r9, r9, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8002a84:	f887 9000 	strb.w	r9, [r7]
}
 8002a88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002a8c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8002a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	4607      	mov	r7, r0
 8002a92:	4615      	mov	r5, r2
 8002a94:	461c      	mov	r4, r3
	UINT i, j;
	WCHAR wc;
	DWORD sreg;


	mem_cpy(dst, src, 11);
 8002a96:	220b      	movs	r2, #11
 8002a98:	f7ff fef6 	bl	8002888 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8002a9c:	2c05      	cmp	r4, #5
 8002a9e:	d811      	bhi.n	8002ac4 <gen_numname+0x38>
		sreg = seq;
		while (*lfn) {	/* Create a CRC as hash value */
			wc = *lfn++;
			for (i = 0; i < 16; i++) {
 8002aa0:	2607      	movs	r6, #7
 8002aa2:	e01d      	b.n	8002ae0 <gen_numname+0x54>
 8002aa4:	3201      	adds	r2, #1
 8002aa6:	2a0f      	cmp	r2, #15
 8002aa8:	d80c      	bhi.n	8002ac4 <gen_numname+0x38>
				sreg = (sreg << 1) + (wc & 1);
 8002aaa:	f003 0101 	and.w	r1, r3, #1
 8002aae:	eb01 0444 	add.w	r4, r1, r4, lsl #1
				wc >>= 1;
 8002ab2:	085b      	lsrs	r3, r3, #1
				if (sreg & 0x10000) sreg ^= 0x11021;
 8002ab4:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 8002ab8:	d0f4      	beq.n	8002aa4 <gen_numname+0x18>
 8002aba:	f484 3488 	eor.w	r4, r4, #69632	; 0x11000
 8002abe:	f084 0421 	eor.w	r4, r4, #33	; 0x21
 8002ac2:	e7ef      	b.n	8002aa4 <gen_numname+0x18>
		while (*lfn) {	/* Create a CRC as hash value */
 8002ac4:	882b      	ldrh	r3, [r5, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d0ea      	beq.n	8002aa0 <gen_numname+0x14>
			wc = *lfn++;
 8002aca:	3502      	adds	r5, #2
			for (i = 0; i < 16; i++) {
 8002acc:	2200      	movs	r2, #0
 8002ace:	e7ea      	b.n	8002aa6 <gen_numname+0x1a>
	/* itoa (hexdecimal) */
	i = 7;
	do {
		c = (BYTE)((seq % 16) + '0');
		if (c > '9') c += 7;
		ns[i--] = c;
 8002ad0:	1e75      	subs	r5, r6, #1
 8002ad2:	aa02      	add	r2, sp, #8
 8002ad4:	4432      	add	r2, r6
 8002ad6:	f802 3c08 	strb.w	r3, [r2, #-8]
		seq /= 16;
	} while (seq);
 8002ada:	0924      	lsrs	r4, r4, #4
 8002adc:	d009      	beq.n	8002af2 <gen_numname+0x66>
		ns[i--] = c;
 8002ade:	462e      	mov	r6, r5
		c = (BYTE)((seq % 16) + '0');
 8002ae0:	f004 020f 	and.w	r2, r4, #15
 8002ae4:	f102 0330 	add.w	r3, r2, #48	; 0x30
		if (c > '9') c += 7;
 8002ae8:	2b39      	cmp	r3, #57	; 0x39
 8002aea:	d9f1      	bls.n	8002ad0 <gen_numname+0x44>
 8002aec:	f102 0337 	add.w	r3, r2, #55	; 0x37
 8002af0:	e7ee      	b.n	8002ad0 <gen_numname+0x44>
	ns[i] = '~';
 8002af2:	227e      	movs	r2, #126	; 0x7e
 8002af4:	ab02      	add	r3, sp, #8
 8002af6:	442b      	add	r3, r5
 8002af8:	f803 2c08 	strb.w	r2, [r3, #-8]

	/* Append the number to the SFN body */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8002afc:	e000      	b.n	8002b00 <gen_numname+0x74>
 8002afe:	3401      	adds	r4, #1
 8002b00:	42ac      	cmp	r4, r5
 8002b02:	d211      	bcs.n	8002b28 <gen_numname+0x9c>
 8002b04:	5d38      	ldrb	r0, [r7, r4]
 8002b06:	2820      	cmp	r0, #32
 8002b08:	d00e      	beq.n	8002b28 <gen_numname+0x9c>
		if (dbc_1st(dst[j])) {
 8002b0a:	f7ff fee2 	bl	80028d2 <dbc_1st>
 8002b0e:	2800      	cmp	r0, #0
 8002b10:	d0f5      	beq.n	8002afe <gen_numname+0x72>
			if (j == i - 1) break;
 8002b12:	1eb3      	subs	r3, r6, #2
 8002b14:	42a3      	cmp	r3, r4
 8002b16:	d007      	beq.n	8002b28 <gen_numname+0x9c>
			j++;
 8002b18:	3401      	adds	r4, #1
 8002b1a:	e7f0      	b.n	8002afe <gen_numname+0x72>
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	1c63      	adds	r3, r4, #1
 8002b20:	553a      	strb	r2, [r7, r4]
	} while (j < 8);
 8002b22:	2b07      	cmp	r3, #7
 8002b24:	d808      	bhi.n	8002b38 <gen_numname+0xac>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8002b26:	461c      	mov	r4, r3
 8002b28:	2d07      	cmp	r5, #7
 8002b2a:	d8f7      	bhi.n	8002b1c <gen_numname+0x90>
 8002b2c:	ab02      	add	r3, sp, #8
 8002b2e:	442b      	add	r3, r5
 8002b30:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8002b34:	3501      	adds	r5, #1
 8002b36:	e7f2      	b.n	8002b1e <gen_numname+0x92>
}
 8002b38:	b003      	add	sp, #12
 8002b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b3c <sum_sfn>:
/*-----------------------------------------------------------------------*/

static BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8002b3c:	4601      	mov	r1, r0
	BYTE sum = 0;
	UINT n = 11;
 8002b3e:	220b      	movs	r2, #11
	BYTE sum = 0;
 8002b40:	2000      	movs	r0, #0

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8002b42:	01c3      	lsls	r3, r0, #7
 8002b44:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 8002b48:	7808      	ldrb	r0, [r1, #0]
 8002b4a:	fa50 f383 	uxtab	r3, r0, r3
 8002b4e:	b2d8      	uxtb	r0, r3
 8002b50:	3101      	adds	r1, #1
	} while (--n);
 8002b52:	3a01      	subs	r2, #1
 8002b54:	d1f5      	bne.n	8002b42 <sum_sfn+0x6>
	return sum;
}
 8002b56:	4770      	bx	lr

08002b58 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 8002b58:	b5f0      	push	{r4, r5, r6, r7, lr}
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 8002b5a:	6807      	ldr	r7, [r0, #0]
	if (!tp) return vol;	/* Invalid path name? */
 8002b5c:	2f00      	cmp	r7, #0
 8002b5e:	d051      	beq.n	8002c04 <get_ldnumber+0xac>
	tt = tp = *path;
 8002b60:	463a      	mov	r2, r7
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
 8002b62:	1c54      	adds	r4, r2, #1
 8002b64:	7813      	ldrb	r3, [r2, #0]
 8002b66:	2b1f      	cmp	r3, #31
 8002b68:	d902      	bls.n	8002b70 <get_ldnumber+0x18>
 8002b6a:	4622      	mov	r2, r4
 8002b6c:	2b3a      	cmp	r3, #58	; 0x3a
 8002b6e:	d1f8      	bne.n	8002b62 <get_ldnumber+0xa>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 8002b70:	2b3a      	cmp	r3, #58	; 0x3a
 8002b72:	d007      	beq.n	8002b84 <get_ldnumber+0x2c>
		}
	}
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
 8002b74:	f240 2310 	movw	r3, #528	; 0x210
 8002b78:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b7c:	f893 e000 	ldrb.w	lr, [r3]
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
}
 8002b80:	4670      	mov	r0, lr
 8002b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 8002b84:	f897 e000 	ldrb.w	lr, [r7]
 8002b88:	f1ae 0330 	sub.w	r3, lr, #48	; 0x30
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b09      	cmp	r3, #9
 8002b90:	d808      	bhi.n	8002ba4 <get_ldnumber+0x4c>
 8002b92:	1cbb      	adds	r3, r7, #2
 8002b94:	42a3      	cmp	r3, r4
 8002b96:	d002      	beq.n	8002b9e <get_ldnumber+0x46>
 8002b98:	f04f 0e00 	mov.w	lr, #0
 8002b9c:	e004      	b.n	8002ba8 <get_ldnumber+0x50>
			i = (int)*tp - '0';	/* Get the LD number */
 8002b9e:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8002ba2:	e02a      	b.n	8002bfa <get_ldnumber+0xa2>
 8002ba4:	f04f 0e00 	mov.w	lr, #0
				sp = VolumeStr[i]; tp = *path;	/* This string volume ID and path name */
 8002ba8:	f247 433c 	movw	r3, #29756	; 0x743c
 8002bac:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002bb0:	f853 502e 	ldr.w	r5, [r3, lr, lsl #2]
 8002bb4:	4639      	mov	r1, r7
 8002bb6:	e004      	b.n	8002bc2 <get_ldnumber+0x6a>
				} while (c && (TCHAR)c == tc);
 8002bb8:	b1bb      	cbz	r3, 8002bea <get_ldnumber+0x92>
					c = *sp++; tc = *tp++;
 8002bba:	4631      	mov	r1, r6
 8002bbc:	4665      	mov	r5, ip
				} while (c && (TCHAR)c == tc);
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d113      	bne.n	8002bea <get_ldnumber+0x92>
					c = *sp++; tc = *tp++;
 8002bc2:	f105 0c01 	add.w	ip, r5, #1
 8002bc6:	782b      	ldrb	r3, [r5, #0]
 8002bc8:	1c4e      	adds	r6, r1, #1
 8002bca:	780a      	ldrb	r2, [r1, #0]
					if (IsLower(c)) c -= 0x20;
 8002bcc:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8002bd0:	b2c9      	uxtb	r1, r1
 8002bd2:	2919      	cmp	r1, #25
 8002bd4:	d801      	bhi.n	8002bda <get_ldnumber+0x82>
 8002bd6:	3b20      	subs	r3, #32
 8002bd8:	b2db      	uxtb	r3, r3
					if (IsLower(tc)) tc -= 0x20;
 8002bda:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
 8002bde:	b2c9      	uxtb	r1, r1
 8002be0:	2919      	cmp	r1, #25
 8002be2:	d8e9      	bhi.n	8002bb8 <get_ldnumber+0x60>
 8002be4:	3a20      	subs	r2, #32
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	e7e6      	b.n	8002bb8 <get_ldnumber+0x60>
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
 8002bea:	b90b      	cbnz	r3, 8002bf0 <get_ldnumber+0x98>
 8002bec:	42b4      	cmp	r4, r6
 8002bee:	d004      	beq.n	8002bfa <get_ldnumber+0xa2>
 8002bf0:	f10e 0e01 	add.w	lr, lr, #1
 8002bf4:	f1be 0f01 	cmp.w	lr, #1
 8002bf8:	ddd6      	ble.n	8002ba8 <get_ldnumber+0x50>
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8002bfa:	f1be 0f01 	cmp.w	lr, #1
 8002bfe:	dc04      	bgt.n	8002c0a <get_ldnumber+0xb2>
			*path = tt;		/* Snip the drive prefix off */
 8002c00:	6004      	str	r4, [r0, #0]
 8002c02:	e7bd      	b.n	8002b80 <get_ldnumber+0x28>
	if (!tp) return vol;	/* Invalid path name? */
 8002c04:	f04f 3eff 	mov.w	lr, #4294967295
 8002c08:	e7ba      	b.n	8002b80 <get_ldnumber+0x28>
	int i, vol = -1;
 8002c0a:	f04f 3eff 	mov.w	lr, #4294967295
 8002c0e:	e7b7      	b.n	8002b80 <get_ldnumber+0x28>

08002c10 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 8002c10:	b538      	push	{r3, r4, r5, lr}
 8002c12:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8002c14:	b1a8      	cbz	r0, 8002c42 <validate+0x32>
 8002c16:	4604      	mov	r4, r0
 8002c18:	6803      	ldr	r3, [r0, #0]
 8002c1a:	b1ab      	cbz	r3, 8002c48 <validate+0x38>
 8002c1c:	781a      	ldrb	r2, [r3, #0]
 8002c1e:	b1aa      	cbz	r2, 8002c4c <validate+0x3c>
 8002c20:	8881      	ldrh	r1, [r0, #4]
 8002c22:	88da      	ldrh	r2, [r3, #6]
 8002c24:	4291      	cmp	r1, r2
 8002c26:	d003      	beq.n	8002c30 <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 8002c28:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	602b      	str	r3, [r5, #0]
	return res;
}
 8002c2e:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8002c30:	7858      	ldrb	r0, [r3, #1]
 8002c32:	f7ff fdbb 	bl	80027ac <disk_status>
 8002c36:	f010 0f01 	tst.w	r0, #1
 8002c3a:	d10a      	bne.n	8002c52 <validate+0x42>
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8002c3c:	6823      	ldr	r3, [r4, #0]
			res = FR_OK;
 8002c3e:	2000      	movs	r0, #0
 8002c40:	e7f4      	b.n	8002c2c <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 8002c42:	2009      	movs	r0, #9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8002c44:	2300      	movs	r3, #0
 8002c46:	e7f1      	b.n	8002c2c <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 8002c48:	2009      	movs	r0, #9
 8002c4a:	e7ef      	b.n	8002c2c <validate+0x1c>
 8002c4c:	2009      	movs	r0, #9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8002c4e:	2300      	movs	r3, #0
 8002c50:	e7ec      	b.n	8002c2c <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 8002c52:	2009      	movs	r0, #9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8002c54:	2300      	movs	r3, #0
 8002c56:	e7e9      	b.n	8002c2c <validate+0x1c>

08002c58 <sync_window>:
{
 8002c58:	b538      	push	{r3, r4, r5, lr}
	if (fs->wflag) {	/* Is the disk access window dirty? */
 8002c5a:	78c3      	ldrb	r3, [r0, #3]
 8002c5c:	b90b      	cbnz	r3, 8002c62 <sync_window+0xa>
	FRESULT res = FR_OK;
 8002c5e:	2000      	movs	r0, #0
}
 8002c60:	bd38      	pop	{r3, r4, r5, pc}
 8002c62:	4604      	mov	r4, r0
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 8002c64:	f100 0538 	add.w	r5, r0, #56	; 0x38
 8002c68:	2301      	movs	r3, #1
 8002c6a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8002c6c:	4629      	mov	r1, r5
 8002c6e:	7840      	ldrb	r0, [r0, #1]
 8002c70:	f7ff fdca 	bl	8002808 <disk_write>
 8002c74:	b9a0      	cbnz	r0, 8002ca0 <sync_window+0x48>
			fs->wflag = 0;	/* Clear window dirty flag */
 8002c76:	2300      	movs	r3, #0
 8002c78:	70e3      	strb	r3, [r4, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8002c7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c7c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002c7e:	1acb      	subs	r3, r1, r3
 8002c80:	6a22      	ldr	r2, [r4, #32]
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d20e      	bcs.n	8002ca4 <sync_window+0x4c>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 8002c86:	78a3      	ldrb	r3, [r4, #2]
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d001      	beq.n	8002c90 <sync_window+0x38>
	FRESULT res = FR_OK;
 8002c8c:	2000      	movs	r0, #0
 8002c8e:	e7e7      	b.n	8002c60 <sync_window+0x8>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 8002c90:	2301      	movs	r3, #1
 8002c92:	440a      	add	r2, r1
 8002c94:	4629      	mov	r1, r5
 8002c96:	7860      	ldrb	r0, [r4, #1]
 8002c98:	f7ff fdb6 	bl	8002808 <disk_write>
	FRESULT res = FR_OK;
 8002c9c:	2000      	movs	r0, #0
 8002c9e:	e7df      	b.n	8002c60 <sync_window+0x8>
			res = FR_DISK_ERR;
 8002ca0:	2001      	movs	r0, #1
 8002ca2:	e7dd      	b.n	8002c60 <sync_window+0x8>
	FRESULT res = FR_OK;
 8002ca4:	2000      	movs	r0, #0
 8002ca6:	e7db      	b.n	8002c60 <sync_window+0x8>

08002ca8 <move_window>:
{
 8002ca8:	b570      	push	{r4, r5, r6, lr}
	if (sect != fs->winsect) {	/* Window offset changed? */
 8002caa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002cac:	428b      	cmp	r3, r1
 8002cae:	d012      	beq.n	8002cd6 <move_window+0x2e>
 8002cb0:	4604      	mov	r4, r0
 8002cb2:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Flush the window */
 8002cb4:	f7ff ffd0 	bl	8002c58 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8002cb8:	4606      	mov	r6, r0
 8002cba:	b968      	cbnz	r0, 8002cd8 <move_window+0x30>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	462a      	mov	r2, r5
 8002cc0:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8002cc4:	7860      	ldrb	r0, [r4, #1]
 8002cc6:	f7ff fd8d 	bl	80027e4 <disk_read>
 8002cca:	b110      	cbz	r0, 8002cd2 <move_window+0x2a>
				res = FR_DISK_ERR;
 8002ccc:	2601      	movs	r6, #1
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 8002cce:	f04f 35ff 	mov.w	r5, #4294967295
			fs->winsect = sect;
 8002cd2:	6365      	str	r5, [r4, #52]	; 0x34
 8002cd4:	e000      	b.n	8002cd8 <move_window+0x30>
	FRESULT res = FR_OK;
 8002cd6:	2600      	movs	r6, #0
}
 8002cd8:	4630      	mov	r0, r6
 8002cda:	bd70      	pop	{r4, r5, r6, pc}

08002cdc <check_fs>:
{
 8002cdc:	b510      	push	{r4, lr}
 8002cde:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	70c3      	strb	r3, [r0, #3]
 8002ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ce8:	6343      	str	r3, [r0, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 8002cea:	f7ff ffdd 	bl	8002ca8 <move_window>
 8002cee:	bb28      	cbnz	r0, 8002d3c <check_fs+0x60>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot signature (always here regardless of the sector size) */
 8002cf0:	f204 2036 	addw	r0, r4, #566	; 0x236
 8002cf4:	f7ff fdaa 	bl	800284c <ld_word>
 8002cf8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8002cfc:	4298      	cmp	r0, r3
 8002cfe:	d11f      	bne.n	8002d40 <check_fs+0x64>
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
 8002d00:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8002d04:	2be9      	cmp	r3, #233	; 0xe9
 8002d06:	d003      	beq.n	8002d10 <check_fs+0x34>
 8002d08:	2beb      	cmp	r3, #235	; 0xeb
 8002d0a:	d001      	beq.n	8002d10 <check_fs+0x34>
 8002d0c:	2be8      	cmp	r3, #232	; 0xe8
 8002d0e:	d119      	bne.n	8002d44 <check_fs+0x68>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 8002d10:	2203      	movs	r2, #3
 8002d12:	f247 4158 	movw	r1, #29784	; 0x7458
 8002d16:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002d1a:	f104 006e 	add.w	r0, r4, #110	; 0x6e
 8002d1e:	f7ff fdc1 	bl	80028a4 <mem_cmp>
 8002d22:	b188      	cbz	r0, 8002d48 <check_fs+0x6c>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
 8002d24:	2205      	movs	r2, #5
 8002d26:	f247 415c 	movw	r1, #29788	; 0x745c
 8002d2a:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002d2e:	f104 008a 	add.w	r0, r4, #138	; 0x8a
 8002d32:	f7ff fdb7 	bl	80028a4 <mem_cmp>
 8002d36:	b120      	cbz	r0, 8002d42 <check_fs+0x66>
	return 2;	/* Valid BS but not FAT */
 8002d38:	2002      	movs	r0, #2
 8002d3a:	e002      	b.n	8002d42 <check_fs+0x66>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 8002d3c:	2004      	movs	r0, #4
 8002d3e:	e000      	b.n	8002d42 <check_fs+0x66>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot signature (always here regardless of the sector size) */
 8002d40:	2003      	movs	r0, #3
}
 8002d42:	bd10      	pop	{r4, pc}
	return 2;	/* Valid BS but not FAT */
 8002d44:	2002      	movs	r0, #2
 8002d46:	e7fc      	b.n	8002d42 <check_fs+0x66>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 8002d48:	2000      	movs	r0, #0
 8002d4a:	e7fa      	b.n	8002d42 <check_fs+0x66>

08002d4c <find_volume>:
{
 8002d4c:	b570      	push	{r4, r5, r6, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	4606      	mov	r6, r0
 8002d52:	460d      	mov	r5, r1
	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD */
 8002d54:	2100      	movs	r1, #0
 8002d56:	f7ff ffc1 	bl	8002cdc <check_fs>
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is a FAT VBR as auto scan, not a BS or disk error */
 8002d5a:	2802      	cmp	r0, #2
 8002d5c:	d016      	beq.n	8002d8c <find_volume+0x40>
 8002d5e:	d82b      	bhi.n	8002db8 <find_volume+0x6c>
 8002d60:	b355      	cbz	r5, 8002db8 <find_volume+0x6c>
 8002d62:	2400      	movs	r4, #0
 8002d64:	e00d      	b.n	8002d82 <find_volume+0x36>
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 8002d66:	f106 0038 	add.w	r0, r6, #56	; 0x38
 8002d6a:	0123      	lsls	r3, r4, #4
 8002d6c:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 8002d70:	4418      	add	r0, r3
 8002d72:	f7ff fd70 	bl	8002856 <ld_dword>
 8002d76:	ab04      	add	r3, sp, #16
 8002d78:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002d7c:	f843 0c10 	str.w	r0, [r3, #-16]
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 8002d80:	3401      	adds	r4, #1
 8002d82:	2c03      	cmp	r4, #3
 8002d84:	d9ef      	bls.n	8002d66 <find_volume+0x1a>
	i = part ? part - 1 : 0;		/* Table index to find first */
 8002d86:	b11d      	cbz	r5, 8002d90 <find_volume+0x44>
 8002d88:	1e6c      	subs	r4, r5, #1
 8002d8a:	e00c      	b.n	8002da6 <find_volume+0x5a>
 8002d8c:	2400      	movs	r4, #0
 8002d8e:	e7f8      	b.n	8002d82 <find_volume+0x36>
 8002d90:	462c      	mov	r4, r5
 8002d92:	e008      	b.n	8002da6 <find_volume+0x5a>
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 8002d94:	4630      	mov	r0, r6
 8002d96:	f7ff ffa1 	bl	8002cdc <check_fs>
	} while (part == 0 && fmt >= 2 && ++i < 4);
 8002d9a:	b96d      	cbnz	r5, 8002db8 <find_volume+0x6c>
 8002d9c:	2801      	cmp	r0, #1
 8002d9e:	d90b      	bls.n	8002db8 <find_volume+0x6c>
 8002da0:	3401      	adds	r4, #1
 8002da2:	2c03      	cmp	r4, #3
 8002da4:	d808      	bhi.n	8002db8 <find_volume+0x6c>
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 8002da6:	ab04      	add	r3, sp, #16
 8002da8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002dac:	f853 1c10 	ldr.w	r1, [r3, #-16]
 8002db0:	2900      	cmp	r1, #0
 8002db2:	d1ef      	bne.n	8002d94 <find_volume+0x48>
 8002db4:	2003      	movs	r0, #3
 8002db6:	e7f0      	b.n	8002d9a <find_volume+0x4e>
}
 8002db8:	b004      	add	sp, #16
 8002dba:	bd70      	pop	{r4, r5, r6, pc}

08002dbc <mount_volume>:
{
 8002dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002dc0:	460f      	mov	r7, r1
 8002dc2:	4616      	mov	r6, r2
	*rfs = 0;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 8002dc8:	f7ff fec6 	bl	8002b58 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8002dcc:	1e05      	subs	r5, r0, #0
 8002dce:	f2c0 812a 	blt.w	8003026 <mount_volume+0x26a>
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 8002dd2:	f240 2314 	movw	r3, #532	; 0x214
 8002dd6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002dda:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8002dde:	2c00      	cmp	r4, #0
 8002de0:	f000 8124 	beq.w	800302c <mount_volume+0x270>
	*rfs = fs;							/* Return pointer to the filesystem object */
 8002de4:	603c      	str	r4, [r7, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8002de6:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 8002dea:	7823      	ldrb	r3, [r4, #0]
 8002dec:	b173      	cbz	r3, 8002e0c <mount_volume+0x50>
		stat = disk_status(fs->pdrv);
 8002dee:	7860      	ldrb	r0, [r4, #1]
 8002df0:	f7ff fcdc 	bl	80027ac <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8002df4:	f010 0f01 	tst.w	r0, #1
 8002df8:	d108      	bne.n	8002e0c <mount_volume+0x50>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8002dfa:	2e00      	cmp	r6, #0
 8002dfc:	f000 8118 	beq.w	8003030 <mount_volume+0x274>
 8002e00:	f010 0f04 	tst.w	r0, #4
 8002e04:	f040 8116 	bne.w	8003034 <mount_volume+0x278>
			return FR_OK;				/* The filesystem object is already valid */
 8002e08:	2000      	movs	r0, #0
 8002e0a:	e10d      	b.n	8003028 <mount_volume+0x26c>
	fs->fs_type = 0;					/* Clear the filesystem object */
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	7023      	strb	r3, [r4, #0]
	fs->pdrv = LD2PD(vol);				/* Volume hosting physical drive */
 8002e10:	b2e8      	uxtb	r0, r5
 8002e12:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 8002e14:	f7ff fcd8 	bl	80027c8 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8002e18:	f010 0f01 	tst.w	r0, #1
 8002e1c:	f040 810c 	bne.w	8003038 <mount_volume+0x27c>
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8002e20:	b11e      	cbz	r6, 8002e2a <mount_volume+0x6e>
 8002e22:	f010 0f04 	tst.w	r0, #4
 8002e26:	f040 8109 	bne.w	800303c <mount_volume+0x280>
	fmt = find_volume(fs, LD2PT(vol));
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	4620      	mov	r0, r4
 8002e2e:	f7ff ff8d 	bl	8002d4c <find_volume>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8002e32:	2804      	cmp	r0, #4
 8002e34:	f000 8104 	beq.w	8003040 <mount_volume+0x284>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8002e38:	2801      	cmp	r0, #1
 8002e3a:	f200 8103 	bhi.w	8003044 <mount_volume+0x288>
	bsect = fs->winsect;					/* Volume location */
 8002e3e:	6b67      	ldr	r7, [r4, #52]	; 0x34
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8002e40:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8002e44:	f7ff fd02 	bl	800284c <ld_word>
 8002e48:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002e4c:	f040 80fc 	bne.w	8003048 <mount_volume+0x28c>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8002e50:	f104 004e 	add.w	r0, r4, #78	; 0x4e
 8002e54:	f7ff fcfa 	bl	800284c <ld_word>
 8002e58:	4606      	mov	r6, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8002e5a:	b920      	cbnz	r0, 8002e66 <mount_volume+0xaa>
 8002e5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002e60:	f7ff fcf9 	bl	8002856 <ld_dword>
 8002e64:	4606      	mov	r6, r0
		fs->fsize = fasize;
 8002e66:	6226      	str	r6, [r4, #32]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8002e68:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 8002e6c:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8002e6e:	1e53      	subs	r3, r2, #1
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	f200 80ea 	bhi.w	800304c <mount_volume+0x290>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8002e78:	fb06 f502 	mul.w	r5, r6, r2
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8002e7c:	f894 8045 	ldrb.w	r8, [r4, #69]	; 0x45
 8002e80:	f8a4 800a 	strh.w	r8, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8002e84:	f1b8 0f00 	cmp.w	r8, #0
 8002e88:	f000 80e2 	beq.w	8003050 <mount_volume+0x294>
 8002e8c:	f108 33ff 	add.w	r3, r8, #4294967295
 8002e90:	ea18 0f03 	tst.w	r8, r3
 8002e94:	f040 80de 	bne.w	8003054 <mount_volume+0x298>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8002e98:	f104 0049 	add.w	r0, r4, #73	; 0x49
 8002e9c:	f7ff fcd6 	bl	800284c <ld_word>
 8002ea0:	4682      	mov	sl, r0
 8002ea2:	8120      	strh	r0, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8002ea4:	f010 0f0f 	tst.w	r0, #15
 8002ea8:	f040 80d6 	bne.w	8003058 <mount_volume+0x29c>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8002eac:	f104 004b 	add.w	r0, r4, #75	; 0x4b
 8002eb0:	f7ff fccc 	bl	800284c <ld_word>
 8002eb4:	4681      	mov	r9, r0
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8002eb6:	b920      	cbnz	r0, 8002ec2 <mount_volume+0x106>
 8002eb8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002ebc:	f7ff fccb 	bl	8002856 <ld_dword>
 8002ec0:	4681      	mov	r9, r0
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8002ec2:	f104 0046 	add.w	r0, r4, #70	; 0x46
 8002ec6:	f7ff fcc1 	bl	800284c <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8002eca:	4601      	mov	r1, r0
 8002ecc:	2800      	cmp	r0, #0
 8002ece:	f000 80c5 	beq.w	800305c <mount_volume+0x2a0>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8002ed2:	1942      	adds	r2, r0, r5
 8002ed4:	eb02 121a 	add.w	r2, r2, sl, lsr #4
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8002ed8:	4591      	cmp	r9, r2
 8002eda:	f0c0 80c1 	bcc.w	8003060 <mount_volume+0x2a4>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8002ede:	eba9 0302 	sub.w	r3, r9, r2
 8002ee2:	fbb3 f3f8 	udiv	r3, r3, r8
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 80bc 	beq.w	8003064 <mount_volume+0x2a8>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 8002eec:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 8002ef0:	f6c0 70ff 	movt	r0, #4095	; 0xfff
 8002ef4:	4283      	cmp	r3, r0
 8002ef6:	d910      	bls.n	8002f1a <mount_volume+0x15e>
		fmt = 0;
 8002ef8:	f04f 0900 	mov.w	r9, #0
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8002efc:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 8002f00:	4283      	cmp	r3, r0
 8002f02:	d801      	bhi.n	8002f08 <mount_volume+0x14c>
 8002f04:	f04f 0902 	mov.w	r9, #2
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8002f08:	f640 70f5 	movw	r0, #4085	; 0xff5
 8002f0c:	4283      	cmp	r3, r0
 8002f0e:	d907      	bls.n	8002f20 <mount_volume+0x164>
		if (fmt == 0) return FR_NO_FILESYSTEM;
 8002f10:	f1b9 0f00 	cmp.w	r9, #0
 8002f14:	d106      	bne.n	8002f24 <mount_volume+0x168>
 8002f16:	200d      	movs	r0, #13
 8002f18:	e086      	b.n	8003028 <mount_volume+0x26c>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 8002f1a:	f04f 0903 	mov.w	r9, #3
 8002f1e:	e7ed      	b.n	8002efc <mount_volume+0x140>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8002f20:	f04f 0901 	mov.w	r9, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8002f24:	f103 0802 	add.w	r8, r3, #2
 8002f28:	f8c4 801c 	str.w	r8, [r4, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8002f2c:	6267      	str	r7, [r4, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8002f2e:	19cb      	adds	r3, r1, r7
 8002f30:	62a3      	str	r3, [r4, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8002f32:	443a      	add	r2, r7
 8002f34:	6322      	str	r2, [r4, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8002f36:	f1b9 0f03 	cmp.w	r9, #3
 8002f3a:	d030      	beq.n	8002f9e <mount_volume+0x1e2>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8002f3c:	f1ba 0f00 	cmp.w	sl, #0
 8002f40:	f000 8096 	beq.w	8003070 <mount_volume+0x2b4>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8002f44:	442b      	add	r3, r5
 8002f46:	62e3      	str	r3, [r4, #44]	; 0x2c
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8002f48:	f1b9 0f02 	cmp.w	r9, #2
 8002f4c:	d038      	beq.n	8002fc0 <mount_volume+0x204>
 8002f4e:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 8002f52:	f008 0301 	and.w	r3, r8, #1
 8002f56:	eb03 0352 	add.w	r3, r3, r2, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8002f5a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002f5e:	ebb6 2f53 	cmp.w	r6, r3, lsr #9
 8002f62:	f0c0 8087 	bcc.w	8003074 <mount_volume+0x2b8>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8002f66:	f04f 33ff 	mov.w	r3, #4294967295
 8002f6a:	6163      	str	r3, [r4, #20]
 8002f6c:	6123      	str	r3, [r4, #16]
		fs->fsi_flag = 0x80;
 8002f6e:	2380      	movs	r3, #128	; 0x80
 8002f70:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 8002f72:	f1b9 0f03 	cmp.w	r9, #3
 8002f76:	d026      	beq.n	8002fc6 <mount_volume+0x20a>
	fs->fs_type = (BYTE)fmt;/* FAT sub-type */
 8002f78:	f884 9000 	strb.w	r9, [r4]
	fs->id = ++Fsid;		/* Volume mount ID */
 8002f7c:	f240 221c 	movw	r2, #540	; 0x21c
 8002f80:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002f84:	8813      	ldrh	r3, [r2, #0]
 8002f86:	3301      	adds	r3, #1
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	8013      	strh	r3, [r2, #0]
 8002f8c:	80e3      	strh	r3, [r4, #6]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8002f8e:	f240 2320 	movw	r3, #544	; 0x220
 8002f92:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f96:	60e3      	str	r3, [r4, #12]
	fs->cdir = 0;			/* Initialize current directory */
 8002f98:	2000      	movs	r0, #0
 8002f9a:	61a0      	str	r0, [r4, #24]
	return FR_OK;
 8002f9c:	e044      	b.n	8003028 <mount_volume+0x26c>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8002f9e:	f104 0062 	add.w	r0, r4, #98	; 0x62
 8002fa2:	f7ff fc53 	bl	800284c <ld_word>
 8002fa6:	2800      	cmp	r0, #0
 8002fa8:	d15e      	bne.n	8003068 <mount_volume+0x2ac>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8002faa:	f1ba 0f00 	cmp.w	sl, #0
 8002fae:	d15d      	bne.n	800306c <mount_volume+0x2b0>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8002fb0:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8002fb4:	f7ff fc4f 	bl	8002856 <ld_dword>
 8002fb8:	62e0      	str	r0, [r4, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8002fba:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8002fbe:	e7cc      	b.n	8002f5a <mount_volume+0x19e>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8002fc0:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8002fc4:	e7c9      	b.n	8002f5a <mount_volume+0x19e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8002fc6:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002fca:	f7ff fc3f 	bl	800284c <ld_word>
 8002fce:	2801      	cmp	r0, #1
 8002fd0:	d1d2      	bne.n	8002f78 <mount_volume+0x1bc>
			&& move_window(fs, bsect + 1) == FR_OK)
 8002fd2:	1c79      	adds	r1, r7, #1
 8002fd4:	4620      	mov	r0, r4
 8002fd6:	f7ff fe67 	bl	8002ca8 <move_window>
 8002fda:	2800      	cmp	r0, #0
 8002fdc:	d1cc      	bne.n	8002f78 <mount_volume+0x1bc>
			fs->fsi_flag = 0;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	7123      	strb	r3, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 8002fe2:	f204 2036 	addw	r0, r4, #566	; 0x236
 8002fe6:	f7ff fc31 	bl	800284c <ld_word>
 8002fea:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8002fee:	4298      	cmp	r0, r3
 8002ff0:	d1c2      	bne.n	8002f78 <mount_volume+0x1bc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8002ff2:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8002ff6:	f7ff fc2e 	bl	8002856 <ld_dword>
 8002ffa:	f245 2352 	movw	r3, #21074	; 0x5252
 8002ffe:	f2c4 1361 	movt	r3, #16737	; 0x4161
 8003002:	4298      	cmp	r0, r3
 8003004:	d1b8      	bne.n	8002f78 <mount_volume+0x1bc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8003006:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 800300a:	f7ff fc24 	bl	8002856 <ld_dword>
 800300e:	f247 2372 	movw	r3, #29298	; 0x7272
 8003012:	f2c6 1341 	movt	r3, #24897	; 0x6141
 8003016:	4298      	cmp	r0, r3
 8003018:	d1ae      	bne.n	8002f78 <mount_volume+0x1bc>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800301a:	f504 7008 	add.w	r0, r4, #544	; 0x220
 800301e:	f7ff fc1a 	bl	8002856 <ld_dword>
 8003022:	6160      	str	r0, [r4, #20]
 8003024:	e7a8      	b.n	8002f78 <mount_volume+0x1bc>
	if (vol < 0) return FR_INVALID_DRIVE;
 8003026:	200b      	movs	r0, #11
}
 8003028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 800302c:	200c      	movs	r0, #12
 800302e:	e7fb      	b.n	8003028 <mount_volume+0x26c>
			return FR_OK;				/* The filesystem object is already valid */
 8003030:	2000      	movs	r0, #0
 8003032:	e7f9      	b.n	8003028 <mount_volume+0x26c>
				return FR_WRITE_PROTECTED;
 8003034:	200a      	movs	r0, #10
 8003036:	e7f7      	b.n	8003028 <mount_volume+0x26c>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8003038:	2003      	movs	r0, #3
 800303a:	e7f5      	b.n	8003028 <mount_volume+0x26c>
		return FR_WRITE_PROTECTED;
 800303c:	200a      	movs	r0, #10
 800303e:	e7f3      	b.n	8003028 <mount_volume+0x26c>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8003040:	2001      	movs	r0, #1
 8003042:	e7f1      	b.n	8003028 <mount_volume+0x26c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8003044:	200d      	movs	r0, #13
 8003046:	e7ef      	b.n	8003028 <mount_volume+0x26c>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8003048:	200d      	movs	r0, #13
 800304a:	e7ed      	b.n	8003028 <mount_volume+0x26c>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800304c:	200d      	movs	r0, #13
 800304e:	e7eb      	b.n	8003028 <mount_volume+0x26c>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8003050:	200d      	movs	r0, #13
 8003052:	e7e9      	b.n	8003028 <mount_volume+0x26c>
 8003054:	200d      	movs	r0, #13
 8003056:	e7e7      	b.n	8003028 <mount_volume+0x26c>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8003058:	200d      	movs	r0, #13
 800305a:	e7e5      	b.n	8003028 <mount_volume+0x26c>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800305c:	200d      	movs	r0, #13
 800305e:	e7e3      	b.n	8003028 <mount_volume+0x26c>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8003060:	200d      	movs	r0, #13
 8003062:	e7e1      	b.n	8003028 <mount_volume+0x26c>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8003064:	200d      	movs	r0, #13
 8003066:	e7df      	b.n	8003028 <mount_volume+0x26c>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8003068:	200d      	movs	r0, #13
 800306a:	e7dd      	b.n	8003028 <mount_volume+0x26c>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800306c:	200d      	movs	r0, #13
 800306e:	e7db      	b.n	8003028 <mount_volume+0x26c>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8003070:	200d      	movs	r0, #13
 8003072:	e7d9      	b.n	8003028 <mount_volume+0x26c>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8003074:	200d      	movs	r0, #13
 8003076:	e7d7      	b.n	8003028 <mount_volume+0x26c>

08003078 <put_fat>:
{
 8003078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800307c:	2901      	cmp	r1, #1
 800307e:	d97a      	bls.n	8003176 <put_fat+0xfe>
 8003080:	69c3      	ldr	r3, [r0, #28]
 8003082:	428b      	cmp	r3, r1
 8003084:	d979      	bls.n	800317a <put_fat+0x102>
 8003086:	4617      	mov	r7, r2
 8003088:	460c      	mov	r4, r1
 800308a:	4606      	mov	r6, r0
		switch (fs->fs_type) {
 800308c:	7803      	ldrb	r3, [r0, #0]
 800308e:	2b02      	cmp	r3, #2
 8003090:	d043      	beq.n	800311a <put_fat+0xa2>
 8003092:	2b03      	cmp	r3, #3
 8003094:	d054      	beq.n	8003140 <put_fat+0xc8>
 8003096:	2b01      	cmp	r3, #1
 8003098:	d001      	beq.n	800309e <put_fat+0x26>
	FRESULT res = FR_INT_ERR;
 800309a:	2502      	movs	r5, #2
 800309c:	e06e      	b.n	800317c <put_fat+0x104>
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 800309e:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80030a2:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80030a4:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 80030a8:	f7ff fdfe 	bl	8002ca8 <move_window>
			if (res != FR_OK) break;
 80030ac:	4605      	mov	r5, r0
 80030ae:	2800      	cmp	r0, #0
 80030b0:	d164      	bne.n	800317c <put_fat+0x104>
			p = fs->win + bc++ % SS(fs);
 80030b2:	f106 0a38 	add.w	sl, r6, #56	; 0x38
 80030b6:	f108 0901 	add.w	r9, r8, #1
 80030ba:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Update 1st byte */
 80030be:	f014 0401 	ands.w	r4, r4, #1
 80030c2:	d01f      	beq.n	8003104 <put_fat+0x8c>
 80030c4:	f91a 3008 	ldrsb.w	r3, [sl, r8]
 80030c8:	f003 030f 	and.w	r3, r3, #15
 80030cc:	013a      	lsls	r2, r7, #4
 80030ce:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 80030d2:	4313      	orrs	r3, r2
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	f80a 3008 	strb.w	r3, [sl, r8]
			fs->wflag = 1;
 80030da:	2301      	movs	r3, #1
 80030dc:	70f3      	strb	r3, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80030de:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80030e0:	eb01 2159 	add.w	r1, r1, r9, lsr #9
 80030e4:	4630      	mov	r0, r6
 80030e6:	f7ff fddf 	bl	8002ca8 <move_window>
			if (res != FR_OK) break;
 80030ea:	4605      	mov	r5, r0
 80030ec:	2800      	cmp	r0, #0
 80030ee:	d145      	bne.n	800317c <put_fat+0x104>
			p = fs->win + bc % SS(fs);
 80030f0:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 80030f4:	b144      	cbz	r4, 8003108 <put_fat+0x90>
 80030f6:	f3c7 1207 	ubfx	r2, r7, #4, #8
 80030fa:	f80a 2009 	strb.w	r2, [sl, r9]
			fs->wflag = 1;
 80030fe:	2301      	movs	r3, #1
 8003100:	70f3      	strb	r3, [r6, #3]
			break;
 8003102:	e03b      	b.n	800317c <put_fat+0x104>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Update 1st byte */
 8003104:	b2fb      	uxtb	r3, r7
 8003106:	e7e6      	b.n	80030d6 <put_fat+0x5e>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 8003108:	f91a 2009 	ldrsb.w	r2, [sl, r9]
 800310c:	f022 020f 	bic.w	r2, r2, #15
 8003110:	f3c7 2703 	ubfx	r7, r7, #8, #4
 8003114:	433a      	orrs	r2, r7
 8003116:	b2d2      	uxtb	r2, r2
 8003118:	e7ef      	b.n	80030fa <put_fat+0x82>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800311a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800311c:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8003120:	f7ff fdc2 	bl	8002ca8 <move_window>
			if (res != FR_OK) break;
 8003124:	4605      	mov	r5, r0
 8003126:	bb48      	cbnz	r0, 800317c <put_fat+0x104>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 8003128:	f106 0038 	add.w	r0, r6, #56	; 0x38
 800312c:	0064      	lsls	r4, r4, #1
 800312e:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8003132:	b2b9      	uxth	r1, r7
 8003134:	4420      	add	r0, r4
 8003136:	f7ff fb99 	bl	800286c <st_word>
			fs->wflag = 1;
 800313a:	2301      	movs	r3, #1
 800313c:	70f3      	strb	r3, [r6, #3]
			break;
 800313e:	e01d      	b.n	800317c <put_fat+0x104>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003140:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8003142:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8003146:	f7ff fdaf 	bl	8002ca8 <move_window>
			if (res != FR_OK) break;
 800314a:	4605      	mov	r5, r0
 800314c:	b9b0      	cbnz	r0, 800317c <put_fat+0x104>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800314e:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 8003152:	f106 0338 	add.w	r3, r6, #56	; 0x38
 8003156:	00a1      	lsls	r1, r4, #2
 8003158:	f401 71fe 	and.w	r1, r1, #508	; 0x1fc
 800315c:	185c      	adds	r4, r3, r1
 800315e:	4620      	mov	r0, r4
 8003160:	f7ff fb79 	bl	8002856 <ld_dword>
 8003164:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8003168:	4339      	orrs	r1, r7
 800316a:	4620      	mov	r0, r4
 800316c:	f7ff fb82 	bl	8002874 <st_dword>
			fs->wflag = 1;
 8003170:	2301      	movs	r3, #1
 8003172:	70f3      	strb	r3, [r6, #3]
			break;
 8003174:	e002      	b.n	800317c <put_fat+0x104>
	FRESULT res = FR_INT_ERR;
 8003176:	2502      	movs	r5, #2
 8003178:	e000      	b.n	800317c <put_fat+0x104>
 800317a:	2502      	movs	r5, #2
}
 800317c:	4628      	mov	r0, r5
 800317e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003182 <get_fat>:
{
 8003182:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
 8003184:	6806      	ldr	r6, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003186:	2901      	cmp	r1, #1
 8003188:	d953      	bls.n	8003232 <get_fat+0xb0>
 800318a:	69f3      	ldr	r3, [r6, #28]
 800318c:	428b      	cmp	r3, r1
 800318e:	d952      	bls.n	8003236 <get_fat+0xb4>
 8003190:	460c      	mov	r4, r1
		switch (fs->fs_type) {
 8003192:	7833      	ldrb	r3, [r6, #0]
 8003194:	2b02      	cmp	r3, #2
 8003196:	d02b      	beq.n	80031f0 <get_fat+0x6e>
 8003198:	2b03      	cmp	r3, #3
 800319a:	d039      	beq.n	8003210 <get_fat+0x8e>
 800319c:	2b01      	cmp	r3, #1
 800319e:	d001      	beq.n	80031a4 <get_fat+0x22>
			val = 1;	/* Internal error */
 80031a0:	2001      	movs	r0, #1
 80031a2:	e047      	b.n	8003234 <get_fat+0xb2>
			bc = (UINT)clst; bc += bc / 2;
 80031a4:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80031a8:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80031aa:	eb01 2155 	add.w	r1, r1, r5, lsr #9
 80031ae:	4630      	mov	r0, r6
 80031b0:	f7ff fd7a 	bl	8002ca8 <move_window>
 80031b4:	2800      	cmp	r0, #0
 80031b6:	d140      	bne.n	800323a <get_fat+0xb8>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 80031b8:	1c6f      	adds	r7, r5, #1
 80031ba:	f3c5 0508 	ubfx	r5, r5, #0, #9
 80031be:	4435      	add	r5, r6
 80031c0:	f895 5038 	ldrb.w	r5, [r5, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80031c4:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80031c6:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 80031ca:	4630      	mov	r0, r6
 80031cc:	f7ff fd6c 	bl	8002ca8 <move_window>
 80031d0:	bbb0      	cbnz	r0, 8003240 <get_fat+0xbe>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 80031d2:	f3c7 0308 	ubfx	r3, r7, #0, #9
 80031d6:	4433      	add	r3, r6
 80031d8:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 80031dc:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 80031e0:	f014 0f01 	tst.w	r4, #1
 80031e4:	d001      	beq.n	80031ea <get_fat+0x68>
 80031e6:	0900      	lsrs	r0, r0, #4
 80031e8:	e024      	b.n	8003234 <get_fat+0xb2>
 80031ea:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80031ee:	e021      	b.n	8003234 <get_fat+0xb2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80031f0:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80031f2:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 80031f6:	4630      	mov	r0, r6
 80031f8:	f7ff fd56 	bl	8002ca8 <move_window>
 80031fc:	bb18      	cbnz	r0, 8003246 <get_fat+0xc4>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 80031fe:	f106 0038 	add.w	r0, r6, #56	; 0x38
 8003202:	0061      	lsls	r1, r4, #1
 8003204:	f401 71ff 	and.w	r1, r1, #510	; 0x1fe
 8003208:	4408      	add	r0, r1
 800320a:	f7ff fb1f 	bl	800284c <ld_word>
			break;
 800320e:	e011      	b.n	8003234 <get_fat+0xb2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003210:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8003212:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8003216:	4630      	mov	r0, r6
 8003218:	f7ff fd46 	bl	8002ca8 <move_window>
 800321c:	b9b0      	cbnz	r0, 800324c <get_fat+0xca>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 800321e:	3638      	adds	r6, #56	; 0x38
 8003220:	00a1      	lsls	r1, r4, #2
 8003222:	f401 70fe 	and.w	r0, r1, #508	; 0x1fc
 8003226:	4430      	add	r0, r6
 8003228:	f7ff fb15 	bl	8002856 <ld_dword>
 800322c:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 8003230:	e000      	b.n	8003234 <get_fat+0xb2>
		val = 1;	/* Internal error */
 8003232:	2001      	movs	r0, #1
}
 8003234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 8003236:	2001      	movs	r0, #1
 8003238:	e7fc      	b.n	8003234 <get_fat+0xb2>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800323a:	f04f 30ff 	mov.w	r0, #4294967295
 800323e:	e7f9      	b.n	8003234 <get_fat+0xb2>
 8003240:	f04f 30ff 	mov.w	r0, #4294967295
 8003244:	e7f6      	b.n	8003234 <get_fat+0xb2>
 8003246:	f04f 30ff 	mov.w	r0, #4294967295
 800324a:	e7f3      	b.n	8003234 <get_fat+0xb2>
 800324c:	f04f 30ff 	mov.w	r0, #4294967295
	return val;
 8003250:	e7f0      	b.n	8003234 <get_fat+0xb2>

08003252 <dir_sdi>:
{
 8003252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 8003256:	6807      	ldr	r7, [r0, #0]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8003258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800325c:	d23b      	bcs.n	80032d6 <dir_sdi+0x84>
 800325e:	4606      	mov	r6, r0
 8003260:	460d      	mov	r5, r1
 8003262:	f011 0f1f 	tst.w	r1, #31
 8003266:	d139      	bne.n	80032dc <dir_sdi+0x8a>
	dp->dptr = ofs;				/* Set current offset */
 8003268:	6131      	str	r1, [r6, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800326a:	6884      	ldr	r4, [r0, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800326c:	b91c      	cbnz	r4, 8003276 <dir_sdi+0x24>
 800326e:	783b      	ldrb	r3, [r7, #0]
 8003270:	2b02      	cmp	r3, #2
 8003272:	d900      	bls.n	8003276 <dir_sdi+0x24>
		clst = (DWORD)fs->dirbase;
 8003274:	6afc      	ldr	r4, [r7, #44]	; 0x2c
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 8003276:	b994      	cbnz	r4, 800329e <dir_sdi+0x4c>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 8003278:	893b      	ldrh	r3, [r7, #8]
 800327a:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 800327e:	d92f      	bls.n	80032e0 <dir_sdi+0x8e>
		dp->sect = fs->dirbase;
 8003280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003282:	61b3      	str	r3, [r6, #24]
	dp->clust = clst;					/* Current cluster# */
 8003284:	6174      	str	r4, [r6, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 8003286:	69b3      	ldr	r3, [r6, #24]
 8003288:	b393      	cbz	r3, 80032f0 <dir_sdi+0x9e>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800328a:	eb03 2355 	add.w	r3, r3, r5, lsr #9
 800328e:	61b3      	str	r3, [r6, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8003290:	3738      	adds	r7, #56	; 0x38
 8003292:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8003296:	443d      	add	r5, r7
 8003298:	61f5      	str	r5, [r6, #28]
	return FR_OK;
 800329a:	2000      	movs	r0, #0
 800329c:	e01c      	b.n	80032d8 <dir_sdi+0x86>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800329e:	f8b7 800a 	ldrh.w	r8, [r7, #10]
 80032a2:	ea4f 2848 	mov.w	r8, r8, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
 80032a6:	4545      	cmp	r5, r8
 80032a8:	d30f      	bcc.n	80032ca <dir_sdi+0x78>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80032aa:	4621      	mov	r1, r4
 80032ac:	4630      	mov	r0, r6
 80032ae:	f7ff ff68 	bl	8003182 <get_fat>
 80032b2:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80032b4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80032b8:	d014      	beq.n	80032e4 <dir_sdi+0x92>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80032ba:	2801      	cmp	r0, #1
 80032bc:	d914      	bls.n	80032e8 <dir_sdi+0x96>
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	4283      	cmp	r3, r0
 80032c2:	d913      	bls.n	80032ec <dir_sdi+0x9a>
			ofs -= csz;
 80032c4:	eba5 0508 	sub.w	r5, r5, r8
 80032c8:	e7ed      	b.n	80032a6 <dir_sdi+0x54>
		dp->sect = clst2sect(fs, clst);
 80032ca:	4621      	mov	r1, r4
 80032cc:	4638      	mov	r0, r7
 80032ce:	f7ff fb26 	bl	800291e <clst2sect>
 80032d2:	61b0      	str	r0, [r6, #24]
 80032d4:	e7d6      	b.n	8003284 <dir_sdi+0x32>
		return FR_INT_ERR;
 80032d6:	2002      	movs	r0, #2
}
 80032d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_INT_ERR;
 80032dc:	2002      	movs	r0, #2
 80032de:	e7fb      	b.n	80032d8 <dir_sdi+0x86>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 80032e0:	2002      	movs	r0, #2
 80032e2:	e7f9      	b.n	80032d8 <dir_sdi+0x86>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80032e4:	2001      	movs	r0, #1
 80032e6:	e7f7      	b.n	80032d8 <dir_sdi+0x86>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80032e8:	2002      	movs	r0, #2
 80032ea:	e7f5      	b.n	80032d8 <dir_sdi+0x86>
 80032ec:	2002      	movs	r0, #2
 80032ee:	e7f3      	b.n	80032d8 <dir_sdi+0x86>
	if (dp->sect == 0) return FR_INT_ERR;
 80032f0:	2002      	movs	r0, #2
 80032f2:	e7f1      	b.n	80032d8 <dir_sdi+0x86>

080032f4 <create_chain>:
{
 80032f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032f8:	4607      	mov	r7, r0
	FATFS *fs = obj->fs;
 80032fa:	6806      	ldr	r6, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 80032fc:	4688      	mov	r8, r1
 80032fe:	b931      	cbnz	r1, 800330e <create_chain+0x1a>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 8003300:	6935      	ldr	r5, [r6, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8003302:	b18d      	cbz	r5, 8003328 <create_chain+0x34>
 8003304:	69f3      	ldr	r3, [r6, #28]
 8003306:	42ab      	cmp	r3, r5
 8003308:	d80f      	bhi.n	800332a <create_chain+0x36>
 800330a:	2501      	movs	r5, #1
 800330c:	e00d      	b.n	800332a <create_chain+0x36>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800330e:	f7ff ff38 	bl	8003182 <get_fat>
 8003312:	4603      	mov	r3, r0
		if (cs < 2) return 1;				/* Test for insanity */
 8003314:	2801      	cmp	r0, #1
 8003316:	d967      	bls.n	80033e8 <create_chain+0xf4>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 8003318:	f1b0 3fff 	cmp.w	r0, #4294967295
 800331c:	d065      	beq.n	80033ea <create_chain+0xf6>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800331e:	69f2      	ldr	r2, [r6, #28]
 8003320:	4282      	cmp	r2, r0
 8003322:	d862      	bhi.n	80033ea <create_chain+0xf6>
		scl = clst;							/* Cluster to start to find */
 8003324:	4645      	mov	r5, r8
 8003326:	e000      	b.n	800332a <create_chain+0x36>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8003328:	2501      	movs	r5, #1
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 800332a:	6973      	ldr	r3, [r6, #20]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d05c      	beq.n	80033ea <create_chain+0xf6>
		if (scl == clst) {						/* Stretching an existing chain? */
 8003330:	4545      	cmp	r5, r8
 8003332:	d001      	beq.n	8003338 <create_chain+0x44>
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 8003334:	462c      	mov	r4, r5
 8003336:	e041      	b.n	80033bc <create_chain+0xc8>
			ncl = scl + 1;						/* Test if next cluster is free */
 8003338:	1c6c      	adds	r4, r5, #1
			if (ncl >= fs->n_fatent) ncl = 2;
 800333a:	69f3      	ldr	r3, [r6, #28]
 800333c:	42a3      	cmp	r3, r4
 800333e:	d800      	bhi.n	8003342 <create_chain+0x4e>
 8003340:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 8003342:	4621      	mov	r1, r4
 8003344:	4638      	mov	r0, r7
 8003346:	f7ff ff1c 	bl	8003182 <get_fat>
 800334a:	4603      	mov	r3, r0
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800334c:	2801      	cmp	r0, #1
 800334e:	d04c      	beq.n	80033ea <create_chain+0xf6>
 8003350:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003354:	d049      	beq.n	80033ea <create_chain+0xf6>
			if (cs != 0) {						/* Not free? */
 8003356:	b138      	cbz	r0, 8003368 <create_chain+0x74>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 8003358:	6933      	ldr	r3, [r6, #16]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 800335a:	2b01      	cmp	r3, #1
 800335c:	d9ea      	bls.n	8003334 <create_chain+0x40>
 800335e:	69f2      	ldr	r2, [r6, #28]
 8003360:	429a      	cmp	r2, r3
 8003362:	d9e7      	bls.n	8003334 <create_chain+0x40>
 8003364:	461d      	mov	r5, r3
 8003366:	e7e5      	b.n	8003334 <create_chain+0x40>
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 8003368:	2c00      	cmp	r4, #0
 800336a:	d0e3      	beq.n	8003334 <create_chain+0x40>
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 800336c:	f04f 32ff 	mov.w	r2, #4294967295
 8003370:	4621      	mov	r1, r4
 8003372:	4630      	mov	r0, r6
 8003374:	f7ff fe80 	bl	8003078 <put_fat>
		if (res == FR_OK && clst != 0) {
 8003378:	4603      	mov	r3, r0
 800337a:	b910      	cbnz	r0, 8003382 <create_chain+0x8e>
 800337c:	f1b8 0f00 	cmp.w	r8, #0
 8003380:	d124      	bne.n	80033cc <create_chain+0xd8>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8003382:	bb53      	cbnz	r3, 80033da <create_chain+0xe6>
		fs->last_clst = ncl;
 8003384:	6134      	str	r4, [r6, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8003386:	6972      	ldr	r2, [r6, #20]
 8003388:	69f3      	ldr	r3, [r6, #28]
 800338a:	3b02      	subs	r3, #2
 800338c:	429a      	cmp	r2, r3
 800338e:	d801      	bhi.n	8003394 <create_chain+0xa0>
 8003390:	3a01      	subs	r2, #1
 8003392:	6172      	str	r2, [r6, #20]
		fs->fsi_flag |= 1;
 8003394:	7933      	ldrb	r3, [r6, #4]
 8003396:	f043 0301 	orr.w	r3, r3, #1
 800339a:	7133      	strb	r3, [r6, #4]
 800339c:	4623      	mov	r3, r4
 800339e:	e024      	b.n	80033ea <create_chain+0xf6>
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 80033a0:	4621      	mov	r1, r4
 80033a2:	4638      	mov	r0, r7
 80033a4:	f7ff feed 	bl	8003182 <get_fat>
				if (cs == 0) break;				/* Found a free cluster? */
 80033a8:	4603      	mov	r3, r0
 80033aa:	2800      	cmp	r0, #0
 80033ac:	d0de      	beq.n	800336c <create_chain+0x78>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 80033ae:	2801      	cmp	r0, #1
 80033b0:	d01b      	beq.n	80033ea <create_chain+0xf6>
 80033b2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80033b6:	d018      	beq.n	80033ea <create_chain+0xf6>
				if (ncl == scl) return 0;		/* No free cluster found? */
 80033b8:	42ac      	cmp	r4, r5
 80033ba:	d01b      	beq.n	80033f4 <create_chain+0x100>
				ncl++;							/* Next cluster */
 80033bc:	3401      	adds	r4, #1
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80033be:	69f3      	ldr	r3, [r6, #28]
 80033c0:	42a3      	cmp	r3, r4
 80033c2:	d8ed      	bhi.n	80033a0 <create_chain+0xac>
					if (ncl > scl) return 0;	/* No free cluster found? */
 80033c4:	2d01      	cmp	r5, #1
 80033c6:	d913      	bls.n	80033f0 <create_chain+0xfc>
					ncl = 2;
 80033c8:	2402      	movs	r4, #2
 80033ca:	e7e9      	b.n	80033a0 <create_chain+0xac>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 80033cc:	4622      	mov	r2, r4
 80033ce:	4641      	mov	r1, r8
 80033d0:	4630      	mov	r0, r6
 80033d2:	f7ff fe51 	bl	8003078 <put_fat>
 80033d6:	4603      	mov	r3, r0
 80033d8:	e7d3      	b.n	8003382 <create_chain+0x8e>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d001      	beq.n	80033e2 <create_chain+0xee>
 80033de:	2301      	movs	r3, #1
 80033e0:	e003      	b.n	80033ea <create_chain+0xf6>
 80033e2:	f04f 33ff 	mov.w	r3, #4294967295
 80033e6:	e000      	b.n	80033ea <create_chain+0xf6>
		if (cs < 2) return 1;				/* Test for insanity */
 80033e8:	2301      	movs	r3, #1
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if (ncl > scl) return 0;	/* No free cluster found? */
 80033f0:	2300      	movs	r3, #0
 80033f2:	e7fa      	b.n	80033ea <create_chain+0xf6>
				if (ncl == scl) return 0;		/* No free cluster found? */
 80033f4:	2300      	movs	r3, #0
 80033f6:	e7f8      	b.n	80033ea <create_chain+0xf6>

080033f8 <remove_chain>:
{
 80033f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033fa:	460e      	mov	r6, r1
	FATFS *fs = obj->fs;
 80033fc:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80033fe:	2901      	cmp	r1, #1
 8003400:	d92e      	bls.n	8003460 <remove_chain+0x68>
 8003402:	4607      	mov	r7, r0
 8003404:	4611      	mov	r1, r2
 8003406:	69eb      	ldr	r3, [r5, #28]
 8003408:	42b3      	cmp	r3, r6
 800340a:	d92c      	bls.n	8003466 <remove_chain+0x6e>
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800340c:	b152      	cbz	r2, 8003424 <remove_chain+0x2c>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800340e:	f04f 32ff 	mov.w	r2, #4294967295
 8003412:	4628      	mov	r0, r5
 8003414:	f7ff fe30 	bl	8003078 <put_fat>
		if (res != FR_OK) return res;
 8003418:	4684      	mov	ip, r0
 800341a:	b118      	cbz	r0, 8003424 <remove_chain+0x2c>
 800341c:	e025      	b.n	800346a <remove_chain+0x72>
		clst = nxt;					/* Next cluster */
 800341e:	4626      	mov	r6, r4
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8003420:	42a2      	cmp	r2, r4
 8003422:	d922      	bls.n	800346a <remove_chain+0x72>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8003424:	4631      	mov	r1, r6
 8003426:	4638      	mov	r0, r7
 8003428:	f7ff feab 	bl	8003182 <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
 800342c:	4604      	mov	r4, r0
 800342e:	b1f0      	cbz	r0, 800346e <remove_chain+0x76>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8003430:	2801      	cmp	r0, #1
 8003432:	d01f      	beq.n	8003474 <remove_chain+0x7c>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8003434:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003438:	d01f      	beq.n	800347a <remove_chain+0x82>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800343a:	2200      	movs	r2, #0
 800343c:	4631      	mov	r1, r6
 800343e:	4628      	mov	r0, r5
 8003440:	f7ff fe1a 	bl	8003078 <put_fat>
			if (res != FR_OK) return res;
 8003444:	4684      	mov	ip, r0
 8003446:	b980      	cbnz	r0, 800346a <remove_chain+0x72>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8003448:	696b      	ldr	r3, [r5, #20]
 800344a:	69ea      	ldr	r2, [r5, #28]
 800344c:	1e91      	subs	r1, r2, #2
 800344e:	428b      	cmp	r3, r1
 8003450:	d2e5      	bcs.n	800341e <remove_chain+0x26>
			fs->free_clst++;
 8003452:	3301      	adds	r3, #1
 8003454:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
 8003456:	792b      	ldrb	r3, [r5, #4]
 8003458:	f043 0301 	orr.w	r3, r3, #1
 800345c:	712b      	strb	r3, [r5, #4]
 800345e:	e7de      	b.n	800341e <remove_chain+0x26>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8003460:	f04f 0c02 	mov.w	ip, #2
 8003464:	e001      	b.n	800346a <remove_chain+0x72>
 8003466:	f04f 0c02 	mov.w	ip, #2
}
 800346a:	4660      	mov	r0, ip
 800346c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return FR_OK;
 800346e:	f04f 0c00 	mov.w	ip, #0
 8003472:	e7fa      	b.n	800346a <remove_chain+0x72>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8003474:	f04f 0c02 	mov.w	ip, #2
 8003478:	e7f7      	b.n	800346a <remove_chain+0x72>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800347a:	f04f 0c01 	mov.w	ip, #1
 800347e:	e7f4      	b.n	800346a <remove_chain+0x72>

08003480 <dir_clear>:
{
 8003480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003482:	4605      	mov	r5, r0
 8003484:	460c      	mov	r4, r1
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8003486:	f7ff fbe7 	bl	8002c58 <sync_window>
 800348a:	b108      	cbz	r0, 8003490 <dir_clear+0x10>
 800348c:	2001      	movs	r0, #1
}
 800348e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8003490:	4621      	mov	r1, r4
 8003492:	4628      	mov	r0, r5
 8003494:	f7ff fa43 	bl	800291e <clst2sect>
 8003498:	4607      	mov	r7, r0
	fs->winsect = sect;				/* Set window to top of the cluster */
 800349a:	6368      	str	r0, [r5, #52]	; 0x34
	mem_set(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 800349c:	f105 0638 	add.w	r6, r5, #56	; 0x38
 80034a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034a4:	2100      	movs	r1, #0
 80034a6:	4630      	mov	r0, r6
 80034a8:	f7ff f9f7 	bl	800289a <mem_set>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 80034ac:	2400      	movs	r4, #0
 80034ae:	e000      	b.n	80034b2 <dir_clear+0x32>
 80034b0:	3401      	adds	r4, #1
 80034b2:	896b      	ldrh	r3, [r5, #10]
 80034b4:	42a3      	cmp	r3, r4
 80034b6:	d907      	bls.n	80034c8 <dir_clear+0x48>
 80034b8:	2301      	movs	r3, #1
 80034ba:	19e2      	adds	r2, r4, r7
 80034bc:	4631      	mov	r1, r6
 80034be:	7868      	ldrb	r0, [r5, #1]
 80034c0:	f7ff f9a2 	bl	8002808 <disk_write>
 80034c4:	2800      	cmp	r0, #0
 80034c6:	d0f3      	beq.n	80034b0 <dir_clear+0x30>
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 80034c8:	8968      	ldrh	r0, [r5, #10]
 80034ca:	1b00      	subs	r0, r0, r4
 80034cc:	bf18      	it	ne
 80034ce:	2001      	movne	r0, #1
 80034d0:	e7dd      	b.n	800348e <dir_clear+0xe>

080034d2 <dir_next>:
{
 80034d2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = dp->obj.fs;
 80034d6:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80034d8:	6905      	ldr	r5, [r0, #16]
 80034da:	3520      	adds	r5, #32
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 80034dc:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 80034e0:	d301      	bcc.n	80034e6 <dir_next+0x14>
 80034e2:	2300      	movs	r3, #0
 80034e4:	6183      	str	r3, [r0, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 80034e6:	6983      	ldr	r3, [r0, #24]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d047      	beq.n	800357c <dir_next+0xaa>
 80034ec:	4688      	mov	r8, r1
 80034ee:	4604      	mov	r4, r0
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80034f0:	f3c5 0708 	ubfx	r7, r5, #0, #9
 80034f4:	b93f      	cbnz	r7, 8003506 <dir_next+0x34>
		dp->sect++;				/* Next sector */
 80034f6:	3301      	adds	r3, #1
 80034f8:	6183      	str	r3, [r0, #24]
		if (dp->clust == 0) {	/* Static table */
 80034fa:	6941      	ldr	r1, [r0, #20]
 80034fc:	b979      	cbnz	r1, 800351e <dir_next+0x4c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80034fe:	8933      	ldrh	r3, [r6, #8]
 8003500:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 8003504:	d907      	bls.n	8003516 <dir_next+0x44>
	dp->dptr = ofs;						/* Current entry */
 8003506:	6125      	str	r5, [r4, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8003508:	f106 0338 	add.w	r3, r6, #56	; 0x38
 800350c:	443b      	add	r3, r7
 800350e:	61e3      	str	r3, [r4, #28]
	return FR_OK;
 8003510:	2000      	movs	r0, #0
}
 8003512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				dp->sect = 0; return FR_NO_FILE;
 8003516:	2300      	movs	r3, #0
 8003518:	6183      	str	r3, [r0, #24]
 800351a:	2004      	movs	r0, #4
 800351c:	e7f9      	b.n	8003512 <dir_next+0x40>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 800351e:	8973      	ldrh	r3, [r6, #10]
 8003520:	3b01      	subs	r3, #1
 8003522:	ea13 2355 	ands.w	r3, r3, r5, lsr #9
 8003526:	d1ee      	bne.n	8003506 <dir_next+0x34>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8003528:	f7ff fe2b 	bl	8003182 <get_fat>
 800352c:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 800352e:	2801      	cmp	r0, #1
 8003530:	d926      	bls.n	8003580 <dir_next+0xae>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003532:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003536:	d025      	beq.n	8003584 <dir_next+0xb2>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 8003538:	69f3      	ldr	r3, [r6, #28]
 800353a:	4283      	cmp	r3, r0
 800353c:	d812      	bhi.n	8003564 <dir_next+0x92>
					if (!stretch) {								/* If no stretch, report EOT */
 800353e:	f1b8 0f00 	cmp.w	r8, #0
 8003542:	d017      	beq.n	8003574 <dir_next+0xa2>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8003544:	6961      	ldr	r1, [r4, #20]
 8003546:	4620      	mov	r0, r4
 8003548:	f7ff fed4 	bl	80032f4 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800354c:	4681      	mov	r9, r0
 800354e:	b1d8      	cbz	r0, 8003588 <dir_next+0xb6>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8003550:	2801      	cmp	r0, #1
 8003552:	d01b      	beq.n	800358c <dir_next+0xba>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003554:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003558:	d01a      	beq.n	8003590 <dir_next+0xbe>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 800355a:	4601      	mov	r1, r0
 800355c:	4630      	mov	r0, r6
 800355e:	f7ff ff8f 	bl	8003480 <dir_clear>
 8003562:	b9b8      	cbnz	r0, 8003594 <dir_next+0xc2>
				dp->clust = clst;		/* Initialize data for new cluster */
 8003564:	f8c4 9014 	str.w	r9, [r4, #20]
				dp->sect = clst2sect(fs, clst);
 8003568:	4649      	mov	r1, r9
 800356a:	4630      	mov	r0, r6
 800356c:	f7ff f9d7 	bl	800291e <clst2sect>
 8003570:	61a0      	str	r0, [r4, #24]
 8003572:	e7c8      	b.n	8003506 <dir_next+0x34>
						dp->sect = 0; return FR_NO_FILE;
 8003574:	2300      	movs	r3, #0
 8003576:	61a3      	str	r3, [r4, #24]
 8003578:	2004      	movs	r0, #4
 800357a:	e7ca      	b.n	8003512 <dir_next+0x40>
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 800357c:	2004      	movs	r0, #4
 800357e:	e7c8      	b.n	8003512 <dir_next+0x40>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8003580:	2002      	movs	r0, #2
 8003582:	e7c6      	b.n	8003512 <dir_next+0x40>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003584:	2001      	movs	r0, #1
 8003586:	e7c4      	b.n	8003512 <dir_next+0x40>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003588:	2007      	movs	r0, #7
 800358a:	e7c2      	b.n	8003512 <dir_next+0x40>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800358c:	2002      	movs	r0, #2
 800358e:	e7c0      	b.n	8003512 <dir_next+0x40>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003590:	2001      	movs	r0, #1
 8003592:	e7be      	b.n	8003512 <dir_next+0x40>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 8003594:	2001      	movs	r0, #1
 8003596:	e7bc      	b.n	8003512 <dir_next+0x40>

08003598 <dir_alloc>:
{
 8003598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800359a:	4604      	mov	r4, r0
 800359c:	460f      	mov	r7, r1
	FATFS *fs = dp->obj.fs;
 800359e:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 80035a0:	2100      	movs	r1, #0
 80035a2:	f7ff fe56 	bl	8003252 <dir_sdi>
	if (res == FR_OK) {
 80035a6:	4603      	mov	r3, r0
 80035a8:	b9c0      	cbnz	r0, 80035dc <dir_alloc+0x44>
		n = 0;
 80035aa:	2500      	movs	r5, #0
 80035ac:	e008      	b.n	80035c0 <dir_alloc+0x28>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80035ae:	3501      	adds	r5, #1
 80035b0:	42bd      	cmp	r5, r7
 80035b2:	d013      	beq.n	80035dc <dir_alloc+0x44>
			res = dir_next(dp, 1);
 80035b4:	2101      	movs	r1, #1
 80035b6:	4620      	mov	r0, r4
 80035b8:	f7ff ff8b 	bl	80034d2 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80035bc:	4603      	mov	r3, r0
 80035be:	b968      	cbnz	r0, 80035dc <dir_alloc+0x44>
			res = move_window(fs, dp->sect);
 80035c0:	69a1      	ldr	r1, [r4, #24]
 80035c2:	4630      	mov	r0, r6
 80035c4:	f7ff fb70 	bl	8002ca8 <move_window>
			if (res != FR_OK) break;
 80035c8:	4603      	mov	r3, r0
 80035ca:	b938      	cbnz	r0, 80035dc <dir_alloc+0x44>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80035cc:	69e2      	ldr	r2, [r4, #28]
 80035ce:	7812      	ldrb	r2, [r2, #0]
 80035d0:	2ae5      	cmp	r2, #229	; 0xe5
 80035d2:	d0ec      	beq.n	80035ae <dir_alloc+0x16>
 80035d4:	2a00      	cmp	r2, #0
 80035d6:	d0ea      	beq.n	80035ae <dir_alloc+0x16>
				n = 0;					/* Not a blank entry. Restart to search */
 80035d8:	2500      	movs	r5, #0
 80035da:	e7eb      	b.n	80035b4 <dir_alloc+0x1c>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80035dc:	2b04      	cmp	r3, #4
 80035de:	d001      	beq.n	80035e4 <dir_alloc+0x4c>
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80035e4:	2307      	movs	r3, #7
 80035e6:	e7fb      	b.n	80035e0 <dir_alloc+0x48>

080035e8 <dir_read>:
{
 80035e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035ec:	4604      	mov	r4, r0
 80035ee:	4688      	mov	r8, r1
	FATFS *fs = dp->obj.fs;
 80035f0:	6807      	ldr	r7, [r0, #0]
	BYTE ord = 0xFF, sum = 0xFF;
 80035f2:	f04f 09ff 	mov.w	r9, #255	; 0xff
 80035f6:	464e      	mov	r6, r9
	FRESULT res = FR_NO_FILE;
 80035f8:	2504      	movs	r5, #4
	while (dp->sect) {
 80035fa:	e02e      	b.n	800365a <dir_read+0x72>
				if (attr == AM_LFN) {			/* An LFN entry is found */
 80035fc:	2b0f      	cmp	r3, #15
 80035fe:	d119      	bne.n	8003634 <dir_read+0x4c>
					if (b & LLEF) {			/* Is it start of an LFN sequence? */
 8003600:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003604:	d006      	beq.n	8003614 <dir_read+0x2c>
						sum = dp->dir[LDIR_Chksum];
 8003606:	f891 900d 	ldrb.w	r9, [r1, #13]
						b &= (BYTE)~LLEF; ord = b;
 800360a:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
						dp->blk_ofs = dp->dptr;
 800360e:	6923      	ldr	r3, [r4, #16]
 8003610:	62e3      	str	r3, [r4, #44]	; 0x2c
						b &= (BYTE)~LLEF; ord = b;
 8003612:	4616      	mov	r6, r2
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8003614:	42b2      	cmp	r2, r6
 8003616:	d001      	beq.n	800361c <dir_read+0x34>
 8003618:	26ff      	movs	r6, #255	; 0xff
 800361a:	e018      	b.n	800364e <dir_read+0x66>
 800361c:	7b4b      	ldrb	r3, [r1, #13]
 800361e:	454b      	cmp	r3, r9
 8003620:	d001      	beq.n	8003626 <dir_read+0x3e>
 8003622:	26ff      	movs	r6, #255	; 0xff
 8003624:	e013      	b.n	800364e <dir_read+0x66>
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	f7ff f9ab 	bl	8002982 <pick_lfn>
 800362c:	b388      	cbz	r0, 8003692 <dir_read+0xaa>
 800362e:	3e01      	subs	r6, #1
 8003630:	b2f6      	uxtb	r6, r6
 8003632:	e00c      	b.n	800364e <dir_read+0x66>
					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8003634:	b926      	cbnz	r6, 8003640 <dir_read+0x58>
 8003636:	4608      	mov	r0, r1
 8003638:	f7ff fa80 	bl	8002b3c <sum_sfn>
 800363c:	4548      	cmp	r0, r9
 800363e:	d02b      	beq.n	8003698 <dir_read+0xb0>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8003640:	f04f 33ff 	mov.w	r3, #4294967295
 8003644:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003646:	e027      	b.n	8003698 <dir_read+0xb0>
				ord = 0xFF;
 8003648:	26ff      	movs	r6, #255	; 0xff
 800364a:	e000      	b.n	800364e <dir_read+0x66>
 800364c:	26ff      	movs	r6, #255	; 0xff
		res = dir_next(dp, 0);		/* Next entry */
 800364e:	2100      	movs	r1, #0
 8003650:	4620      	mov	r0, r4
 8003652:	f7ff ff3e 	bl	80034d2 <dir_next>
		if (res != FR_OK) break;
 8003656:	4605      	mov	r5, r0
 8003658:	b9f0      	cbnz	r0, 8003698 <dir_read+0xb0>
	while (dp->sect) {
 800365a:	69a1      	ldr	r1, [r4, #24]
 800365c:	b1e1      	cbz	r1, 8003698 <dir_read+0xb0>
		res = move_window(fs, dp->sect);
 800365e:	4638      	mov	r0, r7
 8003660:	f7ff fb22 	bl	8002ca8 <move_window>
		if (res != FR_OK) break;
 8003664:	4605      	mov	r5, r0
 8003666:	b9b8      	cbnz	r0, 8003698 <dir_read+0xb0>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
 8003668:	69e1      	ldr	r1, [r4, #28]
 800366a:	780a      	ldrb	r2, [r1, #0]
		if (b == 0) {
 800366c:	b19a      	cbz	r2, 8003696 <dir_read+0xae>
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800366e:	7acb      	ldrb	r3, [r1, #11]
 8003670:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003674:	71a3      	strb	r3, [r4, #6]
			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8003676:	2ae5      	cmp	r2, #229	; 0xe5
 8003678:	d0e6      	beq.n	8003648 <dir_read+0x60>
 800367a:	2a2e      	cmp	r2, #46	; 0x2e
 800367c:	d0e6      	beq.n	800364c <dir_read+0x64>
 800367e:	f023 0020 	bic.w	r0, r3, #32
 8003682:	2808      	cmp	r0, #8
 8003684:	bf14      	ite	ne
 8003686:	2000      	movne	r0, #0
 8003688:	2001      	moveq	r0, #1
 800368a:	4540      	cmp	r0, r8
 800368c:	d0b6      	beq.n	80035fc <dir_read+0x14>
				ord = 0xFF;
 800368e:	26ff      	movs	r6, #255	; 0xff
 8003690:	e7dd      	b.n	800364e <dir_read+0x66>
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8003692:	26ff      	movs	r6, #255	; 0xff
 8003694:	e7db      	b.n	800364e <dir_read+0x66>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8003696:	2504      	movs	r5, #4
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8003698:	b10d      	cbz	r5, 800369e <dir_read+0xb6>
 800369a:	2300      	movs	r3, #0
 800369c:	61a3      	str	r3, [r4, #24]
}
 800369e:	4628      	mov	r0, r5
 80036a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080036a4 <cmp_lfn>:
{
 80036a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036a8:	4681      	mov	r9, r0
 80036aa:	460f      	mov	r7, r1
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80036ac:	f101 001a 	add.w	r0, r1, #26
 80036b0:	f7ff f8cc 	bl	800284c <ld_word>
 80036b4:	bbd0      	cbnz	r0, 800372c <cmp_lfn+0x88>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80036b6:	783d      	ldrb	r5, [r7, #0]
 80036b8:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 80036bc:	3d01      	subs	r5, #1
 80036be:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80036c2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80036c6:	f04f 0801 	mov.w	r8, #1
 80036ca:	2400      	movs	r4, #0
 80036cc:	e004      	b.n	80036d8 <cmp_lfn+0x34>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80036ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036d2:	4298      	cmp	r0, r3
 80036d4:	d131      	bne.n	800373a <cmp_lfn+0x96>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80036d6:	3401      	adds	r4, #1
 80036d8:	2c0c      	cmp	r4, #12
 80036da:	d81b      	bhi.n	8003714 <cmp_lfn+0x70>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80036dc:	f247 432c 	movw	r3, #29740	; 0x742c
 80036e0:	f6c0 0300 	movt	r3, #2048	; 0x800
 80036e4:	5d18      	ldrb	r0, [r3, r4]
 80036e6:	4438      	add	r0, r7
 80036e8:	f7ff f8b0 	bl	800284c <ld_word>
 80036ec:	4606      	mov	r6, r0
		if (wc != 0) {
 80036ee:	f1b8 0f00 	cmp.w	r8, #0
 80036f2:	d0ec      	beq.n	80036ce <cmp_lfn+0x2a>
			if (i >= FF_MAX_LFN + 1 || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80036f4:	2dff      	cmp	r5, #255	; 0xff
 80036f6:	d81c      	bhi.n	8003732 <cmp_lfn+0x8e>
 80036f8:	f001 faeb 	bl	8004cd2 <ff_wtoupper>
 80036fc:	4680      	mov	r8, r0
 80036fe:	f105 0a01 	add.w	sl, r5, #1
 8003702:	f839 0015 	ldrh.w	r0, [r9, r5, lsl #1]
 8003706:	f001 fae4 	bl	8004cd2 <ff_wtoupper>
 800370a:	4580      	cmp	r8, r0
 800370c:	d113      	bne.n	8003736 <cmp_lfn+0x92>
			wc = uc;
 800370e:	46b0      	mov	r8, r6
			if (i >= FF_MAX_LFN + 1 || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8003710:	4655      	mov	r5, sl
 8003712:	e7e0      	b.n	80036d6 <cmp_lfn+0x32>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8003714:	783b      	ldrb	r3, [r7, #0]
 8003716:	f013 0f40 	tst.w	r3, #64	; 0x40
 800371a:	d010      	beq.n	800373e <cmp_lfn+0x9a>
 800371c:	f1b8 0f00 	cmp.w	r8, #0
 8003720:	d00f      	beq.n	8003742 <cmp_lfn+0x9e>
 8003722:	f839 3015 	ldrh.w	r3, [r9, r5, lsl #1]
 8003726:	b973      	cbnz	r3, 8003746 <cmp_lfn+0xa2>
	return 1;		/* The part of LFN matched */
 8003728:	2001      	movs	r0, #1
 800372a:	e000      	b.n	800372e <cmp_lfn+0x8a>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800372c:	2000      	movs	r0, #0
}
 800372e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return 0;					/* Not matched */
 8003732:	2000      	movs	r0, #0
 8003734:	e7fb      	b.n	800372e <cmp_lfn+0x8a>
 8003736:	2000      	movs	r0, #0
 8003738:	e7f9      	b.n	800372e <cmp_lfn+0x8a>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800373a:	2000      	movs	r0, #0
 800373c:	e7f7      	b.n	800372e <cmp_lfn+0x8a>
	return 1;		/* The part of LFN matched */
 800373e:	2001      	movs	r0, #1
 8003740:	e7f5      	b.n	800372e <cmp_lfn+0x8a>
 8003742:	2001      	movs	r0, #1
 8003744:	e7f3      	b.n	800372e <cmp_lfn+0x8a>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8003746:	2000      	movs	r0, #0
 8003748:	e7f1      	b.n	800372e <cmp_lfn+0x8a>

0800374a <dir_find>:
{
 800374a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800374e:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8003750:	f8d0 8000 	ldr.w	r8, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003754:	2100      	movs	r1, #0
 8003756:	f7ff fd7c 	bl	8003252 <dir_sdi>
	if (res != FR_OK) return res;
 800375a:	4606      	mov	r6, r0
 800375c:	2800      	cmp	r0, #0
 800375e:	d164      	bne.n	800382a <dir_find+0xe0>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8003760:	f04f 33ff 	mov.w	r3, #4294967295
 8003764:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003766:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800376a:	464f      	mov	r7, r9
 800376c:	e00a      	b.n	8003784 <dir_find+0x3a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800376e:	f04f 33ff 	mov.w	r3, #4294967295
 8003772:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003774:	27ff      	movs	r7, #255	; 0xff
		res = dir_next(dp, 0);	/* Next entry */
 8003776:	2100      	movs	r1, #0
 8003778:	4620      	mov	r0, r4
 800377a:	f7ff feaa 	bl	80034d2 <dir_next>
	} while (res == FR_OK);
 800377e:	4606      	mov	r6, r0
 8003780:	2800      	cmp	r0, #0
 8003782:	d152      	bne.n	800382a <dir_find+0xe0>
		res = move_window(fs, dp->sect);
 8003784:	69a1      	ldr	r1, [r4, #24]
 8003786:	4640      	mov	r0, r8
 8003788:	f7ff fa8e 	bl	8002ca8 <move_window>
		if (res != FR_OK) break;
 800378c:	4606      	mov	r6, r0
 800378e:	2800      	cmp	r0, #0
 8003790:	d14b      	bne.n	800382a <dir_find+0xe0>
		c = dp->dir[DIR_Name];
 8003792:	69e5      	ldr	r5, [r4, #28]
 8003794:	782b      	ldrb	r3, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003796:	2b00      	cmp	r3, #0
 8003798:	d046      	beq.n	8003828 <dir_find+0xde>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800379a:	7ae9      	ldrb	r1, [r5, #11]
 800379c:	f001 023f 	and.w	r2, r1, #63	; 0x3f
 80037a0:	71a2      	strb	r2, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80037a2:	2be5      	cmp	r3, #229	; 0xe5
 80037a4:	d0e3      	beq.n	800376e <dir_find+0x24>
 80037a6:	f011 0f08 	tst.w	r1, #8
 80037aa:	d001      	beq.n	80037b0 <dir_find+0x66>
 80037ac:	2a0f      	cmp	r2, #15
 80037ae:	d1de      	bne.n	800376e <dir_find+0x24>
			if (a == AM_LFN) {			/* An LFN entry is found */
 80037b0:	2a0f      	cmp	r2, #15
 80037b2:	d016      	beq.n	80037e2 <dir_find+0x98>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80037b4:	b927      	cbnz	r7, 80037c0 <dir_find+0x76>
 80037b6:	4628      	mov	r0, r5
 80037b8:	f7ff f9c0 	bl	8002b3c <sum_sfn>
 80037bc:	4548      	cmp	r0, r9
 80037be:	d034      	beq.n	800382a <dir_find+0xe0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80037c0:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 80037c4:	f013 0f01 	tst.w	r3, #1
 80037c8:	d106      	bne.n	80037d8 <dir_find+0x8e>
 80037ca:	220b      	movs	r2, #11
 80037cc:	f104 0120 	add.w	r1, r4, #32
 80037d0:	4628      	mov	r0, r5
 80037d2:	f7ff f867 	bl	80028a4 <mem_cmp>
 80037d6:	b340      	cbz	r0, 800382a <dir_find+0xe0>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80037d8:	f04f 33ff 	mov.w	r3, #4294967295
 80037dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80037de:	27ff      	movs	r7, #255	; 0xff
 80037e0:	e7c9      	b.n	8003776 <dir_find+0x2c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80037e2:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
 80037e6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80037ea:	d1c4      	bne.n	8003776 <dir_find+0x2c>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80037ec:	f013 0f40 	tst.w	r3, #64	; 0x40
 80037f0:	d006      	beq.n	8003800 <dir_find+0xb6>
						sum = dp->dir[LDIR_Chksum];
 80037f2:	f895 900d 	ldrb.w	r9, [r5, #13]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80037f6:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80037fa:	6922      	ldr	r2, [r4, #16]
 80037fc:	62e2      	str	r2, [r4, #44]	; 0x2c
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80037fe:	461f      	mov	r7, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8003800:	42bb      	cmp	r3, r7
 8003802:	d001      	beq.n	8003808 <dir_find+0xbe>
 8003804:	27ff      	movs	r7, #255	; 0xff
 8003806:	e7b6      	b.n	8003776 <dir_find+0x2c>
 8003808:	7b6b      	ldrb	r3, [r5, #13]
 800380a:	454b      	cmp	r3, r9
 800380c:	d001      	beq.n	8003812 <dir_find+0xc8>
 800380e:	27ff      	movs	r7, #255	; 0xff
 8003810:	e7b1      	b.n	8003776 <dir_find+0x2c>
 8003812:	4629      	mov	r1, r5
 8003814:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8003818:	f7ff ff44 	bl	80036a4 <cmp_lfn>
 800381c:	b110      	cbz	r0, 8003824 <dir_find+0xda>
 800381e:	3f01      	subs	r7, #1
 8003820:	b2ff      	uxtb	r7, r7
 8003822:	e7a8      	b.n	8003776 <dir_find+0x2c>
 8003824:	27ff      	movs	r7, #255	; 0xff
 8003826:	e7a6      	b.n	8003776 <dir_find+0x2c>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003828:	2604      	movs	r6, #4
}
 800382a:	4630      	mov	r0, r6
 800382c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003830 <dir_register>:
{
 8003830:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003834:	b085      	sub	sp, #20
	FATFS *fs = dp->obj.fs;
 8003836:	6806      	ldr	r6, [r0, #0]
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8003838:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 800383c:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 8003840:	f040 8090 	bne.w	8003964 <dir_register+0x134>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8003844:	2400      	movs	r4, #0
 8003846:	e000      	b.n	800384a <dir_register+0x1a>
 8003848:	3401      	adds	r4, #1
 800384a:	68f3      	ldr	r3, [r6, #12]
 800384c:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1f9      	bne.n	8003848 <dir_register+0x18>
 8003854:	4605      	mov	r5, r0
	mem_cpy(sn, dp->fn, 12);
 8003856:	f100 0720 	add.w	r7, r0, #32
 800385a:	220c      	movs	r2, #12
 800385c:	4639      	mov	r1, r7
 800385e:	a801      	add	r0, sp, #4
 8003860:	f7ff f812 	bl	8002888 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8003864:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8003868:	f013 0f01 	tst.w	r3, #1
 800386c:	d01f      	beq.n	80038ae <dir_register+0x7e>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800386e:	2340      	movs	r3, #64	; 0x40
 8003870:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
		for (n = 1; n < 100; n++) {
 8003874:	f04f 0801 	mov.w	r8, #1
 8003878:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
 800387c:	d80d      	bhi.n	800389a <dir_register+0x6a>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800387e:	4643      	mov	r3, r8
 8003880:	68f2      	ldr	r2, [r6, #12]
 8003882:	a901      	add	r1, sp, #4
 8003884:	4638      	mov	r0, r7
 8003886:	f7ff f901 	bl	8002a8c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800388a:	4628      	mov	r0, r5
 800388c:	f7ff ff5d 	bl	800374a <dir_find>
			if (res != FR_OK) break;
 8003890:	4681      	mov	r9, r0
 8003892:	b910      	cbnz	r0, 800389a <dir_register+0x6a>
		for (n = 1; n < 100; n++) {
 8003894:	f108 0801 	add.w	r8, r8, #1
 8003898:	e7ee      	b.n	8003878 <dir_register+0x48>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800389a:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
 800389e:	d067      	beq.n	8003970 <dir_register+0x140>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80038a0:	f1b9 0f04 	cmp.w	r9, #4
 80038a4:	d160      	bne.n	8003968 <dir_register+0x138>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80038a6:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80038aa:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80038ae:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80038b2:	f013 0f02 	tst.w	r3, #2
 80038b6:	d02d      	beq.n	8003914 <dir_register+0xe4>
 80038b8:	340c      	adds	r4, #12
 80038ba:	f64e 434f 	movw	r3, #60495	; 0xec4f
 80038be:	f6c4 63c4 	movt	r3, #20164	; 0x4ec4
 80038c2:	fba3 3404 	umull	r3, r4, r3, r4
 80038c6:	08a4      	lsrs	r4, r4, #2
 80038c8:	3401      	adds	r4, #1
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80038ca:	4621      	mov	r1, r4
 80038cc:	4628      	mov	r0, r5
 80038ce:	f7ff fe63 	bl	8003598 <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80038d2:	4681      	mov	r9, r0
 80038d4:	b908      	cbnz	r0, 80038da <dir_register+0xaa>
 80038d6:	3c01      	subs	r4, #1
 80038d8:	d11e      	bne.n	8003918 <dir_register+0xe8>
	if (res == FR_OK) {
 80038da:	f1b9 0f00 	cmp.w	r9, #0
 80038de:	d143      	bne.n	8003968 <dir_register+0x138>
		res = move_window(fs, dp->sect);
 80038e0:	69a9      	ldr	r1, [r5, #24]
 80038e2:	4630      	mov	r0, r6
 80038e4:	f7ff f9e0 	bl	8002ca8 <move_window>
		if (res == FR_OK) {
 80038e8:	4681      	mov	r9, r0
 80038ea:	2800      	cmp	r0, #0
 80038ec:	d13c      	bne.n	8003968 <dir_register+0x138>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80038ee:	2220      	movs	r2, #32
 80038f0:	2100      	movs	r1, #0
 80038f2:	69e8      	ldr	r0, [r5, #28]
 80038f4:	f7fe ffd1 	bl	800289a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80038f8:	220b      	movs	r2, #11
 80038fa:	4639      	mov	r1, r7
 80038fc:	69e8      	ldr	r0, [r5, #28]
 80038fe:	f7fe ffc3 	bl	8002888 <mem_cpy>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8003902:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 8003906:	69ea      	ldr	r2, [r5, #28]
 8003908:	f003 0318 	and.w	r3, r3, #24
 800390c:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
 800390e:	2301      	movs	r3, #1
 8003910:	70f3      	strb	r3, [r6, #3]
 8003912:	e029      	b.n	8003968 <dir_register+0x138>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8003914:	2401      	movs	r4, #1
 8003916:	e7d8      	b.n	80038ca <dir_register+0x9a>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8003918:	6929      	ldr	r1, [r5, #16]
 800391a:	eba1 1144 	sub.w	r1, r1, r4, lsl #5
 800391e:	4628      	mov	r0, r5
 8003920:	f7ff fc97 	bl	8003252 <dir_sdi>
		if (res == FR_OK) {
 8003924:	4681      	mov	r9, r0
 8003926:	2800      	cmp	r0, #0
 8003928:	d1d7      	bne.n	80038da <dir_register+0xaa>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800392a:	4638      	mov	r0, r7
 800392c:	f7ff f906 	bl	8002b3c <sum_sfn>
 8003930:	4680      	mov	r8, r0
				res = move_window(fs, dp->sect);
 8003932:	69a9      	ldr	r1, [r5, #24]
 8003934:	4630      	mov	r0, r6
 8003936:	f7ff f9b7 	bl	8002ca8 <move_window>
				if (res != FR_OK) break;
 800393a:	4681      	mov	r9, r0
 800393c:	2800      	cmp	r0, #0
 800393e:	d1cc      	bne.n	80038da <dir_register+0xaa>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8003940:	4643      	mov	r3, r8
 8003942:	b2e2      	uxtb	r2, r4
 8003944:	69e9      	ldr	r1, [r5, #28]
 8003946:	68f0      	ldr	r0, [r6, #12]
 8003948:	f7ff f864 	bl	8002a14 <put_lfn>
				fs->wflag = 1;
 800394c:	2301      	movs	r3, #1
 800394e:	70f3      	strb	r3, [r6, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8003950:	2100      	movs	r1, #0
 8003952:	4628      	mov	r0, r5
 8003954:	f7ff fdbd 	bl	80034d2 <dir_next>
			} while (res == FR_OK && --nent);
 8003958:	4681      	mov	r9, r0
 800395a:	2800      	cmp	r0, #0
 800395c:	d1bd      	bne.n	80038da <dir_register+0xaa>
 800395e:	3c01      	subs	r4, #1
 8003960:	d1e7      	bne.n	8003932 <dir_register+0x102>
 8003962:	e7ba      	b.n	80038da <dir_register+0xaa>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8003964:	f04f 0906 	mov.w	r9, #6
}
 8003968:	4648      	mov	r0, r9
 800396a:	b005      	add	sp, #20
 800396c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8003970:	f04f 0907 	mov.w	r9, #7
 8003974:	e7f8      	b.n	8003968 <dir_register+0x138>

08003976 <tchar2uni>:
{
 8003976:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003978:	4606      	mov	r6, r0
	const TCHAR *p = *str;
 800397a:	6805      	ldr	r5, [r0, #0]
	wc = (BYTE)*p++;			/* Get a byte */
 800397c:	1c6f      	adds	r7, r5, #1
 800397e:	7828      	ldrb	r0, [r5, #0]
 8003980:	b284      	uxth	r4, r0
	if (dbc_1st((BYTE)wc)) {	/* Is it a DBC 1st byte? */
 8003982:	f7fe ffa6 	bl	80028d2 <dbc_1st>
 8003986:	b140      	cbz	r0, 800399a <tchar2uni+0x24>
		b = (BYTE)*p++;			/* Get 2nd byte */
 8003988:	1caf      	adds	r7, r5, #2
 800398a:	786d      	ldrb	r5, [r5, #1]
		if (!dbc_2nd(b)) return 0xFFFFFFFF;	/* Invalid code? */
 800398c:	4628      	mov	r0, r5
 800398e:	f7fe ffb2 	bl	80028f6 <dbc_2nd>
 8003992:	b188      	cbz	r0, 80039b8 <tchar2uni+0x42>
		wc = (wc << 8) + b;		/* Make a DBC */
 8003994:	eb05 2404 	add.w	r4, r5, r4, lsl #8
 8003998:	b2a4      	uxth	r4, r4
	if (wc != 0) {
 800399a:	b914      	cbnz	r4, 80039a2 <tchar2uni+0x2c>
	uc = wc;
 800399c:	4620      	mov	r0, r4
	*str = p;	/* Next read pointer */
 800399e:	6037      	str	r7, [r6, #0]
}
 80039a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wc = ff_oem2uni(wc, CODEPAGE);	/* ANSI/OEM ==> Unicode */
 80039a2:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 80039a6:	4620      	mov	r0, r4
 80039a8:	f001 f967 	bl	8004c7a <ff_oem2uni>
		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
 80039ac:	4604      	mov	r4, r0
 80039ae:	2800      	cmp	r0, #0
 80039b0:	d1f4      	bne.n	800399c <tchar2uni+0x26>
 80039b2:	f04f 30ff 	mov.w	r0, #4294967295
 80039b6:	e7f3      	b.n	80039a0 <tchar2uni+0x2a>
		if (!dbc_2nd(b)) return 0xFFFFFFFF;	/* Invalid code? */
 80039b8:	f04f 30ff 	mov.w	r0, #4294967295
 80039bc:	e7f0      	b.n	80039a0 <tchar2uni+0x2a>

080039be <create_name>:
{
 80039be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039c2:	b085      	sub	sp, #20
 80039c4:	4607      	mov	r7, r0
 80039c6:	4689      	mov	r9, r1
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
 80039c8:	680b      	ldr	r3, [r1, #0]
 80039ca:	9303      	str	r3, [sp, #12]
 80039cc:	6803      	ldr	r3, [r0, #0]
 80039ce:	68dd      	ldr	r5, [r3, #12]
 80039d0:	2400      	movs	r4, #0
 80039d2:	e00e      	b.n	80039f2 <create_name+0x34>
		wc = (WCHAR)uc;
 80039d4:	b286      	uxth	r6, r0
		if (wc < ' ' || wc == '/' || wc == '\\') break;	/* Break if end of the path or a separator is found */
 80039d6:	2e1f      	cmp	r6, #31
 80039d8:	d925      	bls.n	8003a26 <create_name+0x68>
 80039da:	2e2f      	cmp	r6, #47	; 0x2f
 80039dc:	d023      	beq.n	8003a26 <create_name+0x68>
 80039de:	2e5c      	cmp	r6, #92	; 0x5c
 80039e0:	d021      	beq.n	8003a26 <create_name+0x68>
		if (wc < 0x80 && chk_chr("\"*:<>\?|\x7F", wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80039e2:	2e7f      	cmp	r6, #127	; 0x7f
 80039e4:	d914      	bls.n	8003a10 <create_name+0x52>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80039e6:	2cfe      	cmp	r4, #254	; 0xfe
 80039e8:	f200 8134 	bhi.w	8003c54 <create_name+0x296>
		lfn[di++] = wc;					/* Store the Unicode character */
 80039ec:	f825 6014 	strh.w	r6, [r5, r4, lsl #1]
 80039f0:	3401      	adds	r4, #1
		uc = tchar2uni(&p);			/* Get a character */
 80039f2:	a803      	add	r0, sp, #12
 80039f4:	f7ff ffbf 	bl	8003976 <tchar2uni>
		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
 80039f8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80039fc:	f000 8128 	beq.w	8003c50 <create_name+0x292>
		if (uc >= 0x10000) lfn[di++] = (WCHAR)(uc >> 16);	/* Store high surrogate if needed */
 8003a00:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8003a04:	d3e6      	bcc.n	80039d4 <create_name+0x16>
 8003a06:	0c03      	lsrs	r3, r0, #16
 8003a08:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
 8003a0c:	3401      	adds	r4, #1
 8003a0e:	e7e1      	b.n	80039d4 <create_name+0x16>
		if (wc < 0x80 && chk_chr("\"*:<>\?|\x7F", wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8003a10:	4631      	mov	r1, r6
 8003a12:	f247 4064 	movw	r0, #29796	; 0x7464
 8003a16:	f6c0 0000 	movt	r0, #2048	; 0x800
 8003a1a:	f7fe ff52 	bl	80028c2 <chk_chr>
 8003a1e:	2800      	cmp	r0, #0
 8003a20:	d0e1      	beq.n	80039e6 <create_name+0x28>
 8003a22:	2006      	movs	r0, #6
 8003a24:	e0c1      	b.n	8003baa <create_name+0x1ec>
	if (wc < ' ') {				/* End of path? */
 8003a26:	2e1f      	cmp	r6, #31
 8003a28:	d804      	bhi.n	8003a34 <create_name+0x76>
		cf = NS_LAST;			/* Set last segment flag */
 8003a2a:	f04f 0804 	mov.w	r8, #4
 8003a2e:	e009      	b.n	8003a44 <create_name+0x86>
		while (*p == '/' || *p == '\\') p++;	/* Skip duplicated separators if exist */
 8003a30:	3301      	adds	r3, #1
 8003a32:	9303      	str	r3, [sp, #12]
 8003a34:	9b03      	ldr	r3, [sp, #12]
 8003a36:	781a      	ldrb	r2, [r3, #0]
 8003a38:	2a2f      	cmp	r2, #47	; 0x2f
 8003a3a:	d0f9      	beq.n	8003a30 <create_name+0x72>
 8003a3c:	2a5c      	cmp	r2, #92	; 0x5c
 8003a3e:	d0f7      	beq.n	8003a30 <create_name+0x72>
		cf = 0;					/* Next segment follows */
 8003a40:	f04f 0800 	mov.w	r8, #0
	*path = p;					/* Return pointer to the next segment */
 8003a44:	9b03      	ldr	r3, [sp, #12]
 8003a46:	f8c9 3000 	str.w	r3, [r9]
	if ((di == 1 && lfn[di - 1] == '.') ||
 8003a4a:	2c01      	cmp	r4, #1
 8003a4c:	d010      	beq.n	8003a70 <create_name+0xb2>
 8003a4e:	2c02      	cmp	r4, #2
 8003a50:	d12c      	bne.n	8003aac <create_name+0xee>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 8003a52:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 8003a56:	3b01      	subs	r3, #1
 8003a58:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 8003a5c:	2b2e      	cmp	r3, #46	; 0x2e
 8003a5e:	d125      	bne.n	8003aac <create_name+0xee>
 8003a60:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 8003a64:	3b02      	subs	r3, #2
 8003a66:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 8003a6a:	2b2e      	cmp	r3, #46	; 0x2e
 8003a6c:	d11e      	bne.n	8003aac <create_name+0xee>
 8003a6e:	e006      	b.n	8003a7e <create_name+0xc0>
	if ((di == 1 && lfn[di - 1] == '.') ||
 8003a70:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 8003a74:	3b01      	subs	r3, #1
 8003a76:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 8003a7a:	2b2e      	cmp	r3, #46	; 0x2e
 8003a7c:	d1e7      	bne.n	8003a4e <create_name+0x90>
		lfn[di] = 0;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
		for (i = 0; i < 11; i++) {		/* Create dot name for SFN entry */
 8003a84:	e004      	b.n	8003a90 <create_name+0xd2>
			dp->fn[i] = (i < di) ? '.' : ' ';
 8003a86:	2120      	movs	r1, #32
 8003a88:	18fa      	adds	r2, r7, r3
 8003a8a:	f882 1020 	strb.w	r1, [r2, #32]
		for (i = 0; i < 11; i++) {		/* Create dot name for SFN entry */
 8003a8e:	3301      	adds	r3, #1
 8003a90:	2b0a      	cmp	r3, #10
 8003a92:	d803      	bhi.n	8003a9c <create_name+0xde>
			dp->fn[i] = (i < di) ? '.' : ' ';
 8003a94:	42a3      	cmp	r3, r4
 8003a96:	d2f6      	bcs.n	8003a86 <create_name+0xc8>
 8003a98:	212e      	movs	r1, #46	; 0x2e
 8003a9a:	e7f5      	b.n	8003a88 <create_name+0xca>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 8003a9c:	443b      	add	r3, r7
 8003a9e:	f048 0820 	orr.w	r8, r8, #32
 8003aa2:	f883 8020 	strb.w	r8, [r3, #32]
		return FR_OK;
 8003aa6:	2000      	movs	r0, #0
 8003aa8:	e07f      	b.n	8003baa <create_name+0x1ec>
		di--;
 8003aaa:	3c01      	subs	r4, #1
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8003aac:	b144      	cbz	r4, 8003ac0 <create_name+0x102>
		wc = lfn[di - 1];
 8003aae:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
		if (wc != ' ' && wc != '.') break;
 8003ab8:	2b20      	cmp	r3, #32
 8003aba:	d0f6      	beq.n	8003aaa <create_name+0xec>
 8003abc:	2b2e      	cmp	r3, #46	; 0x2e
 8003abe:	d0f4      	beq.n	8003aaa <create_name+0xec>
	lfn[di] = 0;							/* LFN is created into the working buffer */
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
 8003ac6:	2c00      	cmp	r4, #0
 8003ac8:	f000 80c6 	beq.w	8003c58 <create_name+0x29a>
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
 8003acc:	461e      	mov	r6, r3
 8003ace:	e000      	b.n	8003ad2 <create_name+0x114>
 8003ad0:	3601      	adds	r6, #1
 8003ad2:	f835 3016 	ldrh.w	r3, [r5, r6, lsl #1]
 8003ad6:	2b20      	cmp	r3, #32
 8003ad8:	d0fa      	beq.n	8003ad0 <create_name+0x112>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
 8003ada:	b90e      	cbnz	r6, 8003ae0 <create_name+0x122>
 8003adc:	2b2e      	cmp	r3, #46	; 0x2e
 8003ade:	d103      	bne.n	8003ae8 <create_name+0x12a>
 8003ae0:	f048 0803 	orr.w	r8, r8, #3
 8003ae4:	e000      	b.n	8003ae8 <create_name+0x12a>
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
 8003ae6:	3c01      	subs	r4, #1
 8003ae8:	b134      	cbz	r4, 8003af8 <create_name+0x13a>
 8003aea:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 8003aee:	3b01      	subs	r3, #1
 8003af0:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 8003af4:	2b2e      	cmp	r3, #46	; 0x2e
 8003af6:	d1f6      	bne.n	8003ae6 <create_name+0x128>
	mem_set(dp->fn, ' ', 11);
 8003af8:	220b      	movs	r2, #11
 8003afa:	2120      	movs	r1, #32
 8003afc:	1878      	adds	r0, r7, r1
 8003afe:	f7fe fecc 	bl	800289a <mem_set>
	i = b = 0; ni = 8;
 8003b02:	f04f 0b08 	mov.w	fp, #8
 8003b06:	2300      	movs	r3, #0
 8003b08:	9301      	str	r3, [sp, #4]
 8003b0a:	469a      	mov	sl, r3
		wc = lfn[si++];					/* Get an LFN character */
 8003b0c:	f106 0901 	add.w	r9, r6, #1
 8003b10:	f835 6016 	ldrh.w	r6, [r5, r6, lsl #1]
		if (wc == 0) break;				/* Break on end of the LFN */
 8003b14:	b346      	cbz	r6, 8003b68 <create_name+0x1aa>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
 8003b16:	2e20      	cmp	r6, #32
 8003b18:	d019      	beq.n	8003b4e <create_name+0x190>
 8003b1a:	2e2e      	cmp	r6, #46	; 0x2e
 8003b1c:	d015      	beq.n	8003b4a <create_name+0x18c>
		if (i >= ni || si == di) {		/* End of field? */
 8003b1e:	9b01      	ldr	r3, [sp, #4]
 8003b20:	455b      	cmp	r3, fp
 8003b22:	d218      	bcs.n	8003b56 <create_name+0x198>
 8003b24:	454c      	cmp	r4, r9
 8003b26:	d016      	beq.n	8003b56 <create_name+0x198>
		if (wc >= 0x80) {	/* Is this a non-ASCII character? */
 8003b28:	2e7f      	cmp	r6, #127	; 0x7f
 8003b2a:	d84e      	bhi.n	8003bca <create_name+0x20c>
		if (wc >= 0x100) {				/* Is this a DBC? */
 8003b2c:	2eff      	cmp	r6, #255	; 0xff
 8003b2e:	d95d      	bls.n	8003bec <create_name+0x22e>
			if (i >= ni - 1) {			/* Field overflow? */
 8003b30:	f10b 33ff 	add.w	r3, fp, #4294967295
 8003b34:	9a01      	ldr	r2, [sp, #4]
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d952      	bls.n	8003be0 <create_name+0x222>
			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
 8003b3a:	9901      	ldr	r1, [sp, #4]
 8003b3c:	1c4b      	adds	r3, r1, #1
 8003b3e:	f3c6 2207 	ubfx	r2, r6, #8, #8
 8003b42:	1879      	adds	r1, r7, r1
 8003b44:	f881 2020 	strb.w	r2, [r1, #32]
 8003b48:	e055      	b.n	8003bf6 <create_name+0x238>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
 8003b4a:	454c      	cmp	r4, r9
 8003b4c:	d0e7      	beq.n	8003b1e <create_name+0x160>
			cf |= NS_LOSS | NS_LFN;
 8003b4e:	f048 0803 	orr.w	r8, r8, #3
		wc = lfn[si++];					/* Get an LFN character */
 8003b52:	464e      	mov	r6, r9
			continue;
 8003b54:	e7da      	b.n	8003b0c <create_name+0x14e>
			if (ni == 11) {				/* Name extension overflow? */
 8003b56:	f1bb 0f0b 	cmp.w	fp, #11
 8003b5a:	d029      	beq.n	8003bb0 <create_name+0x1f2>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
 8003b5c:	454c      	cmp	r4, r9
 8003b5e:	d001      	beq.n	8003b64 <create_name+0x1a6>
 8003b60:	f048 0803 	orr.w	r8, r8, #3
			if (si > di) break;						/* No name extension? */
 8003b64:	454c      	cmp	r4, r9
 8003b66:	d226      	bcs.n	8003bb6 <create_name+0x1f8>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8003b68:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003b6c:	2be5      	cmp	r3, #229	; 0xe5
 8003b6e:	d066      	beq.n	8003c3e <create_name+0x280>
	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
 8003b70:	f1bb 0f08 	cmp.w	fp, #8
 8003b74:	d067      	beq.n	8003c46 <create_name+0x288>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
 8003b76:	f00a 030c 	and.w	r3, sl, #12
 8003b7a:	2b0c      	cmp	r3, #12
 8003b7c:	d003      	beq.n	8003b86 <create_name+0x1c8>
 8003b7e:	f00a 0303 	and.w	r3, sl, #3
 8003b82:	2b03      	cmp	r3, #3
 8003b84:	d101      	bne.n	8003b8a <create_name+0x1cc>
 8003b86:	f048 0802 	orr.w	r8, r8, #2
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
 8003b8a:	f018 0f02 	tst.w	r8, #2
 8003b8e:	d109      	bne.n	8003ba4 <create_name+0x1e6>
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
 8003b90:	f01a 0f01 	tst.w	sl, #1
 8003b94:	d001      	beq.n	8003b9a <create_name+0x1dc>
 8003b96:	f048 0810 	orr.w	r8, r8, #16
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
 8003b9a:	f01a 0f04 	tst.w	sl, #4
 8003b9e:	d001      	beq.n	8003ba4 <create_name+0x1e6>
 8003ba0:	f048 0808 	orr.w	r8, r8, #8
	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
 8003ba4:	f887 802b 	strb.w	r8, [r7, #43]	; 0x2b
	return FR_OK;
 8003ba8:	2000      	movs	r0, #0
}
 8003baa:	b005      	add	sp, #20
 8003bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				cf |= NS_LOSS | NS_LFN;
 8003bb0:	f048 0803 	orr.w	r8, r8, #3
				break;
 8003bb4:	e7d8      	b.n	8003b68 <create_name+0x1aa>
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
 8003bb6:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8003bba:	fa5f fa8a 	uxtb.w	sl, sl
 8003bbe:	4626      	mov	r6, r4
 8003bc0:	f04f 0b0b 	mov.w	fp, #11
 8003bc4:	2308      	movs	r3, #8
 8003bc6:	9301      	str	r3, [sp, #4]
			continue;
 8003bc8:	e7a0      	b.n	8003b0c <create_name+0x14e>
			cf |= NS_LFN;	/* LFN entry needs to be created */
 8003bca:	f048 0802 	orr.w	r8, r8, #2
			wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Upper convert ==> ANSI/OEM code */
 8003bce:	4630      	mov	r0, r6
 8003bd0:	f001 f87f 	bl	8004cd2 <ff_wtoupper>
 8003bd4:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8003bd8:	f001 f81c 	bl	8004c14 <ff_uni2oem>
 8003bdc:	4606      	mov	r6, r0
 8003bde:	e7a5      	b.n	8003b2c <create_name+0x16e>
				cf |= NS_LOSS | NS_LFN;
 8003be0:	f048 0803 	orr.w	r8, r8, #3
		wc = lfn[si++];					/* Get an LFN character */
 8003be4:	464e      	mov	r6, r9
				i = ni; continue;		/* Next field */
 8003be6:	f8cd b004 	str.w	fp, [sp, #4]
 8003bea:	e78f      	b.n	8003b0c <create_name+0x14e>
			if (wc == 0 || chk_chr("+,;=[]", wc)) {	/* Replace illegal characters for SFN if needed */
 8003bec:	b956      	cbnz	r6, 8003c04 <create_name+0x246>
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8003bee:	f048 0803 	orr.w	r8, r8, #3
 8003bf2:	9b01      	ldr	r3, [sp, #4]
 8003bf4:	265f      	movs	r6, #95	; 0x5f
		dp->fn[i++] = (BYTE)wc;
 8003bf6:	1c5a      	adds	r2, r3, #1
 8003bf8:	9201      	str	r2, [sp, #4]
 8003bfa:	443b      	add	r3, r7
 8003bfc:	f883 6020 	strb.w	r6, [r3, #32]
		wc = lfn[si++];					/* Get an LFN character */
 8003c00:	464e      	mov	r6, r9
 8003c02:	e783      	b.n	8003b0c <create_name+0x14e>
			if (wc == 0 || chk_chr("+,;=[]", wc)) {	/* Replace illegal characters for SFN if needed */
 8003c04:	4631      	mov	r1, r6
 8003c06:	f247 4070 	movw	r0, #29808	; 0x7470
 8003c0a:	f6c0 0000 	movt	r0, #2048	; 0x800
 8003c0e:	f7fe fe58 	bl	80028c2 <chk_chr>
 8003c12:	2800      	cmp	r0, #0
 8003c14:	d1eb      	bne.n	8003bee <create_name+0x230>
				if (IsUpper(wc)) {		/* ASCII upper case? */
 8003c16:	f1a6 0341 	sub.w	r3, r6, #65	; 0x41
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	2b19      	cmp	r3, #25
 8003c1e:	d801      	bhi.n	8003c24 <create_name+0x266>
					b |= 2;
 8003c20:	f04a 0a02 	orr.w	sl, sl, #2
				if (IsLower(wc)) {		/* ASCII lower case? */
 8003c24:	f1a6 0361 	sub.w	r3, r6, #97	; 0x61
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	2b19      	cmp	r3, #25
 8003c2c:	d805      	bhi.n	8003c3a <create_name+0x27c>
					b |= 1; wc -= 0x20;
 8003c2e:	f04a 0a01 	orr.w	sl, sl, #1
 8003c32:	3e20      	subs	r6, #32
 8003c34:	b2b6      	uxth	r6, r6
 8003c36:	9b01      	ldr	r3, [sp, #4]
 8003c38:	e7dd      	b.n	8003bf6 <create_name+0x238>
 8003c3a:	9b01      	ldr	r3, [sp, #4]
 8003c3c:	e7db      	b.n	8003bf6 <create_name+0x238>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8003c3e:	2305      	movs	r3, #5
 8003c40:	f887 3020 	strb.w	r3, [r7, #32]
 8003c44:	e794      	b.n	8003b70 <create_name+0x1b2>
	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
 8003c46:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8003c4a:	fa5f fa8a 	uxtb.w	sl, sl
 8003c4e:	e792      	b.n	8003b76 <create_name+0x1b8>
		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
 8003c50:	2006      	movs	r0, #6
 8003c52:	e7aa      	b.n	8003baa <create_name+0x1ec>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8003c54:	2006      	movs	r0, #6
 8003c56:	e7a8      	b.n	8003baa <create_name+0x1ec>
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
 8003c58:	2006      	movs	r0, #6
 8003c5a:	e7a6      	b.n	8003baa <create_name+0x1ec>

08003c5c <follow_path>:
{
 8003c5c:	b570      	push	{r4, r5, r6, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	4604      	mov	r4, r0
 8003c62:	9101      	str	r1, [sp, #4]
	FATFS *fs = dp->obj.fs;
 8003c64:	6805      	ldr	r5, [r0, #0]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8003c66:	780b      	ldrb	r3, [r1, #0]
 8003c68:	2b2f      	cmp	r3, #47	; 0x2f
 8003c6a:	d006      	beq.n	8003c7a <follow_path+0x1e>
 8003c6c:	2b5c      	cmp	r3, #92	; 0x5c
 8003c6e:	d004      	beq.n	8003c7a <follow_path+0x1e>
		dp->obj.sclust = fs->cdir;				/* Start from current directory */
 8003c70:	69ab      	ldr	r3, [r5, #24]
 8003c72:	6083      	str	r3, [r0, #8]
 8003c74:	e009      	b.n	8003c8a <follow_path+0x2e>
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8003c76:	3301      	adds	r3, #1
 8003c78:	9301      	str	r3, [sp, #4]
 8003c7a:	9b01      	ldr	r3, [sp, #4]
 8003c7c:	781a      	ldrb	r2, [r3, #0]
 8003c7e:	2a2f      	cmp	r2, #47	; 0x2f
 8003c80:	d0f9      	beq.n	8003c76 <follow_path+0x1a>
 8003c82:	2a5c      	cmp	r2, #92	; 0x5c
 8003c84:	d0f7      	beq.n	8003c76 <follow_path+0x1a>
		dp->obj.sclust = 0;					/* Start from root directory */
 8003c86:	2300      	movs	r3, #0
 8003c88:	60a3      	str	r3, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8003c8a:	9b01      	ldr	r3, [sp, #4]
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	2b1f      	cmp	r3, #31
 8003c90:	d81e      	bhi.n	8003cd0 <follow_path+0x74>
		dp->fn[NSFLAG] = NS_NONAME;
 8003c92:	2380      	movs	r3, #128	; 0x80
 8003c94:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
		res = dir_sdi(dp, 0);
 8003c98:	2100      	movs	r1, #0
 8003c9a:	4620      	mov	r0, r4
 8003c9c:	f7ff fad9 	bl	8003252 <dir_sdi>
 8003ca0:	4606      	mov	r6, r0
 8003ca2:	e02d      	b.n	8003d00 <follow_path+0xa4>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8003ca4:	f013 0f04 	tst.w	r3, #4
 8003ca8:	d02f      	beq.n	8003d0a <follow_path+0xae>
			res = dir_find(dp);				/* Find an object with the segment name */
 8003caa:	4606      	mov	r6, r0
 8003cac:	e028      	b.n	8003d00 <follow_path+0xa4>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8003cae:	f013 0f04 	tst.w	r3, #4
 8003cb2:	d12c      	bne.n	8003d0e <follow_path+0xb2>
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8003cb4:	79a3      	ldrb	r3, [r4, #6]
 8003cb6:	f013 0f10 	tst.w	r3, #16
 8003cba:	d02a      	beq.n	8003d12 <follow_path+0xb6>
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8003cbc:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8003cc0:	6923      	ldr	r3, [r4, #16]
 8003cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cc6:	4419      	add	r1, r3
 8003cc8:	4628      	mov	r0, r5
 8003cca:	f7fe fe34 	bl	8002936 <ld_clust>
 8003cce:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8003cd0:	a901      	add	r1, sp, #4
 8003cd2:	4620      	mov	r0, r4
 8003cd4:	f7ff fe73 	bl	80039be <create_name>
			if (res != FR_OK) break;
 8003cd8:	4606      	mov	r6, r0
 8003cda:	b988      	cbnz	r0, 8003d00 <follow_path+0xa4>
			res = dir_find(dp);				/* Find an object with the segment name */
 8003cdc:	4620      	mov	r0, r4
 8003cde:	f7ff fd34 	bl	800374a <dir_find>
			ns = dp->fn[NSFLAG];
 8003ce2:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
			if (res != FR_OK) {				/* Failed to find the object */
 8003ce6:	2800      	cmp	r0, #0
 8003ce8:	d0e1      	beq.n	8003cae <follow_path+0x52>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8003cea:	2804      	cmp	r0, #4
 8003cec:	d10b      	bne.n	8003d06 <follow_path+0xaa>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8003cee:	f013 0f20 	tst.w	r3, #32
 8003cf2:	d0d7      	beq.n	8003ca4 <follow_path+0x48>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8003cf4:	f013 0f04 	tst.w	r3, #4
 8003cf8:	d0ea      	beq.n	8003cd0 <follow_path+0x74>
						dp->fn[NSFLAG] = NS_NONAME;
 8003cfa:	2380      	movs	r3, #128	; 0x80
 8003cfc:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
}
 8003d00:	4630      	mov	r0, r6
 8003d02:	b002      	add	sp, #8
 8003d04:	bd70      	pop	{r4, r5, r6, pc}
			res = dir_find(dp);				/* Find an object with the segment name */
 8003d06:	4606      	mov	r6, r0
 8003d08:	e7fa      	b.n	8003d00 <follow_path+0xa4>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8003d0a:	2605      	movs	r6, #5
 8003d0c:	e7f8      	b.n	8003d00 <follow_path+0xa4>
			res = dir_find(dp);				/* Find an object with the segment name */
 8003d0e:	4606      	mov	r6, r0
 8003d10:	e7f6      	b.n	8003d00 <follow_path+0xa4>
				res = FR_NO_PATH; break;
 8003d12:	2605      	movs	r6, #5
 8003d14:	e7f4      	b.n	8003d00 <follow_path+0xa4>

08003d16 <sync_fs>:
{
 8003d16:	b570      	push	{r4, r5, r6, lr}
 8003d18:	4604      	mov	r4, r0
	res = sync_window(fs);
 8003d1a:	f7fe ff9d 	bl	8002c58 <sync_window>
	if (res == FR_OK) {
 8003d1e:	4605      	mov	r5, r0
 8003d20:	b948      	cbnz	r0, 8003d36 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 8003d22:	7823      	ldrb	r3, [r4, #0]
 8003d24:	2b03      	cmp	r3, #3
 8003d26:	d008      	beq.n	8003d3a <sync_fs+0x24>
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8003d28:	2200      	movs	r2, #0
 8003d2a:	4611      	mov	r1, r2
 8003d2c:	7860      	ldrb	r0, [r4, #1]
 8003d2e:	f7fe fd7d 	bl	800282c <disk_ioctl>
 8003d32:	b100      	cbz	r0, 8003d36 <sync_fs+0x20>
 8003d34:	2501      	movs	r5, #1
}
 8003d36:	4628      	mov	r0, r5
 8003d38:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 8003d3a:	7923      	ldrb	r3, [r4, #4]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d1f3      	bne.n	8003d28 <sync_fs+0x12>
			mem_set(fs->win, 0, sizeof fs->win);
 8003d40:	f104 0638 	add.w	r6, r4, #56	; 0x38
 8003d44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d48:	2100      	movs	r1, #0
 8003d4a:	4630      	mov	r0, r6
 8003d4c:	f7fe fda5 	bl	800289a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8003d50:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8003d54:	f204 2036 	addw	r0, r4, #566	; 0x236
 8003d58:	f7fe fd88 	bl	800286c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8003d5c:	f245 2152 	movw	r1, #21074	; 0x5252
 8003d60:	f2c4 1161 	movt	r1, #16737	; 0x4161
 8003d64:	4630      	mov	r0, r6
 8003d66:	f7fe fd85 	bl	8002874 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8003d6a:	f247 2172 	movw	r1, #29298	; 0x7272
 8003d6e:	f2c6 1141 	movt	r1, #24897	; 0x6141
 8003d72:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8003d76:	f7fe fd7d 	bl	8002874 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003d7a:	6961      	ldr	r1, [r4, #20]
 8003d7c:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8003d80:	f7fe fd78 	bl	8002874 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8003d84:	6921      	ldr	r1, [r4, #16]
 8003d86:	f504 7009 	add.w	r0, r4, #548	; 0x224
 8003d8a:	f7fe fd73 	bl	8002874 <st_dword>
			fs->winsect = fs->volbase + 1;
 8003d8e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003d90:	3201      	adds	r2, #1
 8003d92:	6362      	str	r2, [r4, #52]	; 0x34
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8003d94:	2301      	movs	r3, #1
 8003d96:	4631      	mov	r1, r6
 8003d98:	7860      	ldrb	r0, [r4, #1]
 8003d9a:	f7fe fd35 	bl	8002808 <disk_write>
			fs->fsi_flag = 0;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	7123      	strb	r3, [r4, #4]
 8003da2:	e7c1      	b.n	8003d28 <sync_fs+0x12>

08003da4 <create_partition>:
	BYTE drv,			/* Physical drive number */
	const LBA_t plst[],	/* Partition list */
	UINT sys,			/* System ID (for only MBR, temp setting) and bit8:GPT */
	BYTE* buf			/* Working buffer for a sector */
)
{
 8003da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003da8:	b085      	sub	sp, #20
 8003daa:	9000      	str	r0, [sp, #0]
 8003dac:	9101      	str	r1, [sp, #4]
 8003dae:	4693      	mov	fp, r2
 8003db0:	4699      	mov	r9, r3
	LBA_t sz_drv;
	DWORD sz_drv32, s_lba32, n_lba32;
	BYTE *pte, hd, n_hd, sc, n_sc;

	/* Get drive size */
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 8003db2:	aa03      	add	r2, sp, #12
 8003db4:	2101      	movs	r1, #1
 8003db6:	f7fe fd39 	bl	800282c <disk_ioctl>
 8003dba:	2800      	cmp	r0, #0
 8003dbc:	f040 8081 	bne.w	8003ec2 <create_partition+0x11e>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;

	} else
#endif
	{					/* Create partitions in MBR */
		sz_drv32 = (DWORD)sz_drv;
 8003dc0:	f8dd 800c 	ldr.w	r8, [sp, #12]
		n_sc = N_SEC_TRACK;		/* Determine drive CHS without any consideration of the drive geometry */
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
 8003dc4:	2408      	movs	r4, #8
 8003dc6:	b12c      	cbz	r4, 8003dd4 <create_partition+0x30>
 8003dc8:	fbb8 f2f4 	udiv	r2, r8, r4
 8003dcc:	f64f 433e 	movw	r3, #64574	; 0xfc3e
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d824      	bhi.n	8003e1e <create_partition+0x7a>
		if (n_hd == 0) n_hd = 255;	/* Number of heads needs to be <256 */
 8003dd4:	b904      	cbnz	r4, 8003dd8 <create_partition+0x34>
 8003dd6:	24ff      	movs	r4, #255	; 0xff

		mem_set(buf, 0, FF_MAX_SS);	/* Clear MBR */
 8003dd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ddc:	2100      	movs	r1, #0
 8003dde:	4648      	mov	r0, r9
 8003de0:	f7fe fd5b 	bl	800289a <mem_set>
		pte = buf + MBR_Table;	/* Partition table in the MBR */
 8003de4:	f509 76df 	add.w	r6, r9, #446	; 0x1be
		for (i = 0, s_lba32 = n_sc; i < 4 && s_lba32 != 0 && s_lba32 < sz_drv32; i++, s_lba32 += n_lba32) {
 8003de8:	253f      	movs	r5, #63	; 0x3f
 8003dea:	f04f 0a00 	mov.w	sl, #0
 8003dee:	f1ba 0f03 	cmp.w	sl, #3
 8003df2:	d802      	bhi.n	8003dfa <create_partition+0x56>
 8003df4:	b10d      	cbz	r5, 8003dfa <create_partition+0x56>
 8003df6:	4545      	cmp	r5, r8
 8003df8:	d314      	bcc.n	8003e24 <create_partition+0x80>
			pte[PTE_EdCyl] = (BYTE)cy;

			pte += SZ_PTE;		/* Next entry */
		}

		st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8003dfa:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8003dfe:	f509 70ff 	add.w	r0, r9, #510	; 0x1fe
 8003e02:	f7fe fd33 	bl	800286c <st_word>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8003e06:	2301      	movs	r3, #1
 8003e08:	2200      	movs	r2, #0
 8003e0a:	4649      	mov	r1, r9
 8003e0c:	9800      	ldr	r0, [sp, #0]
 8003e0e:	f7fe fcfb 	bl	8002808 <disk_write>
 8003e12:	2800      	cmp	r0, #0
 8003e14:	d057      	beq.n	8003ec6 <create_partition+0x122>
 8003e16:	2001      	movs	r0, #1
	}

	return FR_OK;
}
 8003e18:	b005      	add	sp, #20
 8003e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
 8003e1e:	0064      	lsls	r4, r4, #1
 8003e20:	b2e4      	uxtb	r4, r4
 8003e22:	e7d0      	b.n	8003dc6 <create_partition+0x22>
			n_lba32 = (DWORD)plst[i];	/* Get partition size */
 8003e24:	9b01      	ldr	r3, [sp, #4]
 8003e26:	f853 702a 	ldr.w	r7, [r3, sl, lsl #2]
			if (n_lba32 <= 100) n_lba32 = (n_lba32 == 100) ? sz_drv32 : sz_drv32 / 100 * n_lba32;	/* Size in percentage? */
 8003e2a:	2f64      	cmp	r7, #100	; 0x64
 8003e2c:	d805      	bhi.n	8003e3a <create_partition+0x96>
 8003e2e:	d046      	beq.n	8003ebe <create_partition+0x11a>
 8003e30:	2364      	movs	r3, #100	; 0x64
 8003e32:	fbb8 f3f3 	udiv	r3, r8, r3
 8003e36:	fb03 f707 	mul.w	r7, r3, r7
			if (s_lba32 + n_lba32 > sz_drv32 || s_lba32 + n_lba32 < s_lba32) n_lba32 = sz_drv32 - s_lba32;	/* Clip at drive size */
 8003e3a:	19eb      	adds	r3, r5, r7
 8003e3c:	4543      	cmp	r3, r8
 8003e3e:	d801      	bhi.n	8003e44 <create_partition+0xa0>
 8003e40:	42ab      	cmp	r3, r5
 8003e42:	d201      	bcs.n	8003e48 <create_partition+0xa4>
 8003e44:	eba8 0705 	sub.w	r7, r8, r5
			if (n_lba32 == 0) break;	/* End of table or no sector to allocate? */
 8003e48:	2f00      	cmp	r7, #0
 8003e4a:	d0d6      	beq.n	8003dfa <create_partition+0x56>
			st_dword(pte + PTE_StLba, s_lba32);		/* Start LBA */
 8003e4c:	4629      	mov	r1, r5
 8003e4e:	f106 0008 	add.w	r0, r6, #8
 8003e52:	f7fe fd0f 	bl	8002874 <st_dword>
			st_dword(pte + PTE_SizLba, n_lba32);	/* Number of sectors */
 8003e56:	4639      	mov	r1, r7
 8003e58:	f106 000c 	add.w	r0, r6, #12
 8003e5c:	f7fe fd0a 	bl	8002874 <st_dword>
			pte[PTE_System] = (BYTE)sys;			/* System type */
 8003e60:	f886 b004 	strb.w	fp, [r6, #4]
			cy = (UINT)(s_lba32 / n_sc / n_hd);		/* Start cylinder */
 8003e64:	223f      	movs	r2, #63	; 0x3f
 8003e66:	fbb5 f3f2 	udiv	r3, r5, r2
 8003e6a:	fbb3 f1f4 	udiv	r1, r3, r4
			hd = (BYTE)(s_lba32 / n_sc % n_hd);		/* Start head */
 8003e6e:	fb04 3011 	mls	r0, r4, r1, r3
			sc = (BYTE)(s_lba32 % n_sc + 1);		/* Start sector */
 8003e72:	ebc3 1383 	rsb	r3, r3, r3, lsl #6
 8003e76:	1aeb      	subs	r3, r5, r3
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	b2db      	uxtb	r3, r3
			pte[PTE_StHead] = hd;
 8003e7e:	7070      	strb	r0, [r6, #1]
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 8003e80:	0888      	lsrs	r0, r1, #2
 8003e82:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 8003e86:	4303      	orrs	r3, r0
 8003e88:	70b3      	strb	r3, [r6, #2]
			pte[PTE_StCyl] = (BYTE)cy;
 8003e8a:	70f1      	strb	r1, [r6, #3]
			cy = (UINT)((s_lba32 + n_lba32 - 1) / n_sc / n_hd);	/* End cylinder */
 8003e8c:	443d      	add	r5, r7
 8003e8e:	1e6b      	subs	r3, r5, #1
 8003e90:	fbb3 f2f2 	udiv	r2, r3, r2
 8003e94:	fbb2 f1f4 	udiv	r1, r2, r4
			hd = (BYTE)((s_lba32 + n_lba32 - 1) / n_sc % n_hd);	/* End head */
 8003e98:	fb04 2011 	mls	r0, r4, r1, r2
			sc = (BYTE)((s_lba32 + n_lba32 - 1) % n_sc + 1);	/* End sector */
 8003e9c:	ebc2 1282 	rsb	r2, r2, r2, lsl #6
 8003ea0:	1a9b      	subs	r3, r3, r2
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	b2db      	uxtb	r3, r3
			pte[PTE_EdHead] = hd;
 8003ea8:	7170      	strb	r0, [r6, #5]
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 8003eaa:	088a      	lsrs	r2, r1, #2
 8003eac:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	71b3      	strb	r3, [r6, #6]
			pte[PTE_EdCyl] = (BYTE)cy;
 8003eb4:	71f1      	strb	r1, [r6, #7]
			pte += SZ_PTE;		/* Next entry */
 8003eb6:	3610      	adds	r6, #16
		for (i = 0, s_lba32 = n_sc; i < 4 && s_lba32 != 0 && s_lba32 < sz_drv32; i++, s_lba32 += n_lba32) {
 8003eb8:	f10a 0a01 	add.w	sl, sl, #1
 8003ebc:	e797      	b.n	8003dee <create_partition+0x4a>
			if (n_lba32 <= 100) n_lba32 = (n_lba32 == 100) ? sz_drv32 : sz_drv32 / 100 * n_lba32;	/* Size in percentage? */
 8003ebe:	4647      	mov	r7, r8
 8003ec0:	e7bb      	b.n	8003e3a <create_partition+0x96>
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 8003ec2:	2001      	movs	r0, #1
 8003ec4:	e7a8      	b.n	8003e18 <create_partition+0x74>
	return FR_OK;
 8003ec6:	2000      	movs	r0, #0
 8003ec8:	e7a6      	b.n	8003e18 <create_partition+0x74>

08003eca <f_mount>:
{
 8003eca:	b510      	push	{r4, lr}
 8003ecc:	b084      	sub	sp, #16
 8003ece:	9001      	str	r0, [sp, #4]
 8003ed0:	9100      	str	r1, [sp, #0]
 8003ed2:	4614      	mov	r4, r2
	const TCHAR *rp = path;
 8003ed4:	a804      	add	r0, sp, #16
 8003ed6:	f840 1d04 	str.w	r1, [r0, #-4]!
	vol = get_ldnumber(&rp);
 8003eda:	f7fe fe3d 	bl	8002b58 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8003ede:	2800      	cmp	r0, #0
 8003ee0:	db1d      	blt.n	8003f1e <f_mount+0x54>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8003ee2:	f240 2314 	movw	r3, #532	; 0x214
 8003ee6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003eea:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	if (cfs) {
 8003eee:	b10b      	cbz	r3, 8003ef4 <f_mount+0x2a>
		cfs->fs_type = 0;				/* Clear old fs object */
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	701a      	strb	r2, [r3, #0]
	if (fs) {
 8003ef4:	9b01      	ldr	r3, [sp, #4]
 8003ef6:	b10b      	cbz	r3, 8003efc <f_mount+0x32>
		fs->fs_type = 0;				/* Clear new fs object */
 8003ef8:	2200      	movs	r2, #0
 8003efa:	701a      	strb	r2, [r3, #0]
	FatFs[vol] = fs;					/* Register new fs object */
 8003efc:	f240 2314 	movw	r3, #532	; 0x214
 8003f00:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003f04:	9a01      	ldr	r2, [sp, #4]
 8003f06:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 8003f0a:	b914      	cbnz	r4, 8003f12 <f_mount+0x48>
 8003f0c:	2000      	movs	r0, #0
}
 8003f0e:	b004      	add	sp, #16
 8003f10:	bd10      	pop	{r4, pc}
	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 8003f12:	2200      	movs	r2, #0
 8003f14:	a901      	add	r1, sp, #4
 8003f16:	4668      	mov	r0, sp
 8003f18:	f7fe ff50 	bl	8002dbc <mount_volume>
	LEAVE_FF(fs, res);
 8003f1c:	e7f7      	b.n	8003f0e <f_mount+0x44>
	if (vol < 0) return FR_INVALID_DRIVE;
 8003f1e:	200b      	movs	r0, #11
 8003f20:	e7f5      	b.n	8003f0e <f_mount+0x44>

08003f22 <f_open>:
{
 8003f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f26:	b090      	sub	sp, #64	; 0x40
 8003f28:	9101      	str	r1, [sp, #4]
	if (!fp) return FR_INVALID_OBJECT;
 8003f2a:	2800      	cmp	r0, #0
 8003f2c:	f000 80e7 	beq.w	80040fe <f_open+0x1dc>
 8003f30:	4605      	mov	r5, r0
 8003f32:	4616      	mov	r6, r2
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 8003f34:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = mount_volume(&path, &fs, mode);
 8003f38:	463a      	mov	r2, r7
 8003f3a:	a902      	add	r1, sp, #8
 8003f3c:	a801      	add	r0, sp, #4
 8003f3e:	f7fe ff3d 	bl	8002dbc <mount_volume>
	if (res == FR_OK) {
 8003f42:	4604      	mov	r4, r0
 8003f44:	b130      	cbz	r0, 8003f54 <f_open+0x32>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8003f46:	b10c      	cbz	r4, 8003f4c <f_open+0x2a>
 8003f48:	2300      	movs	r3, #0
 8003f4a:	602b      	str	r3, [r5, #0]
}
 8003f4c:	4620      	mov	r0, r4
 8003f4e:	b010      	add	sp, #64	; 0x40
 8003f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		dj.obj.fs = fs;
 8003f54:	9b02      	ldr	r3, [sp, #8]
 8003f56:	9303      	str	r3, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8003f58:	9901      	ldr	r1, [sp, #4]
 8003f5a:	a803      	add	r0, sp, #12
 8003f5c:	f7ff fe7e 	bl	8003c5c <follow_path>
		if (res == FR_OK) {
 8003f60:	4604      	mov	r4, r0
 8003f62:	b918      	cbnz	r0, 8003f6c <f_open+0x4a>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8003f64:	f99d 3037 	ldrsb.w	r3, [sp, #55]	; 0x37
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	db40      	blt.n	8003fee <f_open+0xcc>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8003f6c:	f016 0f1c 	tst.w	r6, #28
 8003f70:	d04e      	beq.n	8004010 <f_open+0xee>
			if (res != FR_OK) {					/* No file, create new */
 8003f72:	2c00      	cmp	r4, #0
 8003f74:	d042      	beq.n	8003ffc <f_open+0xda>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8003f76:	2c04      	cmp	r4, #4
 8003f78:	d03b      	beq.n	8003ff2 <f_open+0xd0>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8003f7a:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 8003f7e:	2c00      	cmp	r4, #0
 8003f80:	d155      	bne.n	800402e <f_open+0x10c>
 8003f82:	f017 0f08 	tst.w	r7, #8
 8003f86:	d052      	beq.n	800402e <f_open+0x10c>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8003f88:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8003f8a:	4631      	mov	r1, r6
 8003f8c:	9802      	ldr	r0, [sp, #8]
 8003f8e:	f7fe fcd2 	bl	8002936 <ld_clust>
 8003f92:	4680      	mov	r8, r0
					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
 8003f94:	f7fe fb01 	bl	800259a <get_fattime>
 8003f98:	4601      	mov	r1, r0
 8003f9a:	f106 000e 	add.w	r0, r6, #14
 8003f9e:	f7fe fc69 	bl	8002874 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8003fa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fa4:	2220      	movs	r2, #32
 8003fa6:	72da      	strb	r2, [r3, #11]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8003fa8:	2200      	movs	r2, #0
 8003faa:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003fac:	9802      	ldr	r0, [sp, #8]
 8003fae:	f7fe fcd5 	bl	800295c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003fb6:	301c      	adds	r0, #28
 8003fb8:	f7fe fc5c 	bl	8002874 <st_dword>
					fs->wflag = 1;
 8003fbc:	9b02      	ldr	r3, [sp, #8]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	70da      	strb	r2, [r3, #3]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 8003fc2:	f1b8 0f00 	cmp.w	r8, #0
 8003fc6:	d032      	beq.n	800402e <f_open+0x10c>
						sc = fs->winsect;
 8003fc8:	9b02      	ldr	r3, [sp, #8]
 8003fca:	6b5e      	ldr	r6, [r3, #52]	; 0x34
						res = remove_chain(&dj.obj, cl, 0);
 8003fcc:	2200      	movs	r2, #0
 8003fce:	4641      	mov	r1, r8
 8003fd0:	a803      	add	r0, sp, #12
 8003fd2:	f7ff fa11 	bl	80033f8 <remove_chain>
						if (res == FR_OK) {
 8003fd6:	4604      	mov	r4, r0
 8003fd8:	bb48      	cbnz	r0, 800402e <f_open+0x10c>
							res = move_window(fs, sc);
 8003fda:	4631      	mov	r1, r6
 8003fdc:	9802      	ldr	r0, [sp, #8]
 8003fde:	f7fe fe63 	bl	8002ca8 <move_window>
 8003fe2:	4604      	mov	r4, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8003fe4:	f108 33ff 	add.w	r3, r8, #4294967295
 8003fe8:	9a02      	ldr	r2, [sp, #8]
 8003fea:	6113      	str	r3, [r2, #16]
 8003fec:	e01f      	b.n	800402e <f_open+0x10c>
				res = FR_INVALID_NAME;
 8003fee:	2406      	movs	r4, #6
 8003ff0:	e7bc      	b.n	8003f6c <f_open+0x4a>
					res = dir_register(&dj);
 8003ff2:	a803      	add	r0, sp, #12
 8003ff4:	f7ff fc1c 	bl	8003830 <dir_register>
 8003ff8:	4604      	mov	r4, r0
 8003ffa:	e7be      	b.n	8003f7a <f_open+0x58>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8003ffc:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8004000:	f013 0f11 	tst.w	r3, #17
 8004004:	d112      	bne.n	800402c <f_open+0x10a>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8004006:	f016 0f04 	tst.w	r6, #4
 800400a:	d0b8      	beq.n	8003f7e <f_open+0x5c>
 800400c:	2408      	movs	r4, #8
 800400e:	e00e      	b.n	800402e <f_open+0x10c>
			if (res == FR_OK) {					/* Is the object exsiting? */
 8004010:	b96c      	cbnz	r4, 800402e <f_open+0x10c>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 8004012:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8004016:	f013 0f10 	tst.w	r3, #16
 800401a:	d140      	bne.n	800409e <f_open+0x17c>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 800401c:	f016 0f02 	tst.w	r6, #2
 8004020:	d005      	beq.n	800402e <f_open+0x10c>
 8004022:	f013 0f01 	tst.w	r3, #1
 8004026:	d002      	beq.n	800402e <f_open+0x10c>
						res = FR_DENIED;
 8004028:	2407      	movs	r4, #7
 800402a:	e00b      	b.n	8004044 <f_open+0x122>
					res = FR_DENIED;
 800402c:	2407      	movs	r4, #7
		if (res == FR_OK) {
 800402e:	b94c      	cbnz	r4, 8004044 <f_open+0x122>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 8004030:	f017 0f08 	tst.w	r7, #8
 8004034:	d001      	beq.n	800403a <f_open+0x118>
 8004036:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800403a:	9b02      	ldr	r3, [sp, #8]
 800403c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800403e:	622b      	str	r3, [r5, #32]
			fp->dir_ptr = dj.dir;
 8004040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004042:	626b      	str	r3, [r5, #36]	; 0x24
		if (res == FR_OK) {
 8004044:	2c00      	cmp	r4, #0
 8004046:	f47f af7e 	bne.w	8003f46 <f_open+0x24>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800404a:	9e02      	ldr	r6, [sp, #8]
 800404c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8004050:	4641      	mov	r1, r8
 8004052:	4630      	mov	r0, r6
 8004054:	f7fe fc6f 	bl	8002936 <ld_clust>
 8004058:	60a8      	str	r0, [r5, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800405a:	f108 001c 	add.w	r0, r8, #28
 800405e:	f7fe fbfa 	bl	8002856 <ld_dword>
 8004062:	60e8      	str	r0, [r5, #12]
			fp->obj.fs = fs;	 	/* Validate the file object */
 8004064:	602e      	str	r6, [r5, #0]
			fp->obj.id = fs->id;
 8004066:	88f3      	ldrh	r3, [r6, #6]
 8004068:	80ab      	strh	r3, [r5, #4]
			fp->flag = mode;		/* Set file access mode */
 800406a:	742f      	strb	r7, [r5, #16]
			fp->err = 0;			/* Clear error flag */
 800406c:	2100      	movs	r1, #0
 800406e:	7469      	strb	r1, [r5, #17]
			fp->sect = 0;			/* Invalidate current data sector */
 8004070:	61e9      	str	r1, [r5, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8004072:	6169      	str	r1, [r5, #20]
			mem_set(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 8004074:	f105 0828 	add.w	r8, r5, #40	; 0x28
 8004078:	f44f 7200 	mov.w	r2, #512	; 0x200
 800407c:	4640      	mov	r0, r8
 800407e:	f7fe fc0c 	bl	800289a <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8004082:	f017 0f20 	tst.w	r7, #32
 8004086:	f43f af5e 	beq.w	8003f46 <f_open+0x24>
 800408a:	68ee      	ldr	r6, [r5, #12]
 800408c:	2e00      	cmp	r6, #0
 800408e:	f43f af5a 	beq.w	8003f46 <f_open+0x24>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8004092:	616e      	str	r6, [r5, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8004094:	9b02      	ldr	r3, [sp, #8]
 8004096:	895f      	ldrh	r7, [r3, #10]
 8004098:	027f      	lsls	r7, r7, #9
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800409a:	68a9      	ldr	r1, [r5, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800409c:	e005      	b.n	80040aa <f_open+0x188>
					res = FR_NO_FILE;
 800409e:	2404      	movs	r4, #4
 80040a0:	e7d0      	b.n	8004044 <f_open+0x122>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80040a2:	f1b1 3fff 	cmp.w	r1, #4294967295
 80040a6:	d00b      	beq.n	80040c0 <f_open+0x19e>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80040a8:	1bf6      	subs	r6, r6, r7
 80040aa:	b95c      	cbnz	r4, 80040c4 <f_open+0x1a2>
 80040ac:	42be      	cmp	r6, r7
 80040ae:	d909      	bls.n	80040c4 <f_open+0x1a2>
					clst = get_fat(&fp->obj, clst);
 80040b0:	4628      	mov	r0, r5
 80040b2:	f7ff f866 	bl	8003182 <get_fat>
 80040b6:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 80040b8:	2801      	cmp	r0, #1
 80040ba:	d8f2      	bhi.n	80040a2 <f_open+0x180>
 80040bc:	2402      	movs	r4, #2
 80040be:	e7f0      	b.n	80040a2 <f_open+0x180>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80040c0:	2401      	movs	r4, #1
 80040c2:	e7f1      	b.n	80040a8 <f_open+0x186>
				fp->clust = clst;
 80040c4:	61a9      	str	r1, [r5, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80040c6:	2c00      	cmp	r4, #0
 80040c8:	f47f af3d 	bne.w	8003f46 <f_open+0x24>
 80040cc:	f3c6 0308 	ubfx	r3, r6, #0, #9
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f43f af38 	beq.w	8003f46 <f_open+0x24>
					sc = clst2sect(fs, clst);
 80040d6:	9f02      	ldr	r7, [sp, #8]
 80040d8:	4638      	mov	r0, r7
 80040da:	f7fe fc20 	bl	800291e <clst2sect>
					if (sc == 0) {
 80040de:	b908      	cbnz	r0, 80040e4 <f_open+0x1c2>
						res = FR_INT_ERR;
 80040e0:	2402      	movs	r4, #2
 80040e2:	e731      	b.n	8003f48 <f_open+0x26>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80040e4:	eb00 2256 	add.w	r2, r0, r6, lsr #9
 80040e8:	61ea      	str	r2, [r5, #28]
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	4641      	mov	r1, r8
 80040ee:	7878      	ldrb	r0, [r7, #1]
 80040f0:	f7fe fb78 	bl	80027e4 <disk_read>
 80040f4:	2800      	cmp	r0, #0
 80040f6:	f43f af26 	beq.w	8003f46 <f_open+0x24>
 80040fa:	2401      	movs	r4, #1
 80040fc:	e724      	b.n	8003f48 <f_open+0x26>
	if (!fp) return FR_INVALID_OBJECT;
 80040fe:	2409      	movs	r4, #9
 8004100:	e724      	b.n	8003f4c <f_open+0x2a>

08004102 <f_write>:
{
 8004102:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004106:	b085      	sub	sp, #20
 8004108:	4604      	mov	r4, r0
 800410a:	4688      	mov	r8, r1
 800410c:	4615      	mov	r5, r2
 800410e:	4699      	mov	r9, r3
	*bw = 0;	/* Clear write byte counter */
 8004110:	2300      	movs	r3, #0
 8004112:	f8c9 3000 	str.w	r3, [r9]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8004116:	9000      	str	r0, [sp, #0]
 8004118:	a903      	add	r1, sp, #12
 800411a:	f7fe fd79 	bl	8002c10 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800411e:	4607      	mov	r7, r0
 8004120:	2800      	cmp	r0, #0
 8004122:	f040 80b3 	bne.w	800428c <f_write+0x18a>
 8004126:	7c67      	ldrb	r7, [r4, #17]
 8004128:	2f00      	cmp	r7, #0
 800412a:	f040 80af 	bne.w	800428c <f_write+0x18a>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800412e:	7c23      	ldrb	r3, [r4, #16]
 8004130:	f013 0f02 	tst.w	r3, #2
 8004134:	f000 80c0 	beq.w	80042b8 <f_write+0x1b6>
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8004138:	6963      	ldr	r3, [r4, #20]
 800413a:	42eb      	cmn	r3, r5
 800413c:	d365      	bcc.n	800420a <f_write+0x108>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800413e:	43dd      	mvns	r5, r3
 8004140:	e063      	b.n	800420a <f_write+0x108>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8004142:	2100      	movs	r1, #0
 8004144:	9800      	ldr	r0, [sp, #0]
 8004146:	f7ff f8d5 	bl	80032f4 <create_chain>
 800414a:	e070      	b.n	800422e <f_write+0x12c>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800414c:	69a1      	ldr	r1, [r4, #24]
 800414e:	9800      	ldr	r0, [sp, #0]
 8004150:	f7ff f8d0 	bl	80032f4 <create_chain>
 8004154:	e06b      	b.n	800422e <f_write+0x12c>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8004156:	2702      	movs	r7, #2
 8004158:	7467      	strb	r7, [r4, #17]
 800415a:	e097      	b.n	800428c <f_write+0x18a>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800415c:	2701      	movs	r7, #1
 800415e:	7467      	strb	r7, [r4, #17]
 8004160:	e094      	b.n	800428c <f_write+0x18a>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004162:	2301      	movs	r3, #1
 8004164:	69e2      	ldr	r2, [r4, #28]
 8004166:	f104 0128 	add.w	r1, r4, #40	; 0x28
 800416a:	9803      	ldr	r0, [sp, #12]
 800416c:	7840      	ldrb	r0, [r0, #1]
 800416e:	f7fe fb4b 	bl	8002808 <disk_write>
 8004172:	b920      	cbnz	r0, 800417e <f_write+0x7c>
				fp->flag &= (BYTE)~FA_DIRTY;
 8004174:	7c23      	ldrb	r3, [r4, #16]
 8004176:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800417a:	7423      	strb	r3, [r4, #16]
 800417c:	e066      	b.n	800424c <f_write+0x14a>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800417e:	2701      	movs	r7, #1
 8004180:	7467      	strb	r7, [r4, #17]
 8004182:	e083      	b.n	800428c <f_write+0x18a>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8004184:	2702      	movs	r7, #2
 8004186:	7467      	strb	r7, [r4, #17]
 8004188:	e080      	b.n	800428c <f_write+0x18a>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800418a:	69e1      	ldr	r1, [r4, #28]
 800418c:	eba1 010a 	sub.w	r1, r1, sl
 8004190:	4559      	cmp	r1, fp
 8004192:	d302      	bcc.n	800419a <f_write+0x98>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8004194:	ea4f 264b 	mov.w	r6, fp, lsl #9
				continue;
 8004198:	e028      	b.n	80041ec <f_write+0xea>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800419a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800419e:	eb08 2141 	add.w	r1, r8, r1, lsl #9
 80041a2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80041a6:	f7fe fb6f 	bl	8002888 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80041aa:	7c23      	ldrb	r3, [r4, #16]
 80041ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041b0:	7423      	strb	r3, [r4, #16]
 80041b2:	e7ef      	b.n	8004194 <f_write+0x92>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80041b4:	69e3      	ldr	r3, [r4, #28]
 80041b6:	4553      	cmp	r3, sl
 80041b8:	d003      	beq.n	80041c2 <f_write+0xc0>
				fp->fptr < fp->obj.objsize &&
 80041ba:	6962      	ldr	r2, [r4, #20]
 80041bc:	68e3      	ldr	r3, [r4, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80041be:	429a      	cmp	r2, r3
 80041c0:	d368      	bcc.n	8004294 <f_write+0x192>
			fp->sect = sect;
 80041c2:	f8c4 a01c 	str.w	sl, [r4, #28]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 80041c6:	6963      	ldr	r3, [r4, #20]
 80041c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041cc:	f5c3 7600 	rsb	r6, r3, #512	; 0x200
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80041d0:	42b5      	cmp	r5, r6
 80041d2:	d200      	bcs.n	80041d6 <f_write+0xd4>
 80041d4:	462e      	mov	r6, r5
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80041d6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80041da:	4632      	mov	r2, r6
 80041dc:	4641      	mov	r1, r8
 80041de:	4418      	add	r0, r3
 80041e0:	f7fe fb52 	bl	8002888 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80041e4:	7c23      	ldrb	r3, [r4, #16]
 80041e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80041ea:	7423      	strb	r3, [r4, #16]
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
 80041ec:	1bad      	subs	r5, r5, r6
 80041ee:	f8d9 3000 	ldr.w	r3, [r9]
 80041f2:	4433      	add	r3, r6
 80041f4:	f8c9 3000 	str.w	r3, [r9]
 80041f8:	44b0      	add	r8, r6
 80041fa:	6963      	ldr	r3, [r4, #20]
 80041fc:	441e      	add	r6, r3
 80041fe:	6166      	str	r6, [r4, #20]
 8004200:	68e3      	ldr	r3, [r4, #12]
 8004202:	429e      	cmp	r6, r3
 8004204:	bf38      	it	cc
 8004206:	461e      	movcc	r6, r3
 8004208:	60e6      	str	r6, [r4, #12]
	for ( ;  btw;							/* Repeat until all data written */
 800420a:	2d00      	cmp	r5, #0
 800420c:	d04f      	beq.n	80042ae <f_write+0x1ac>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800420e:	6963      	ldr	r3, [r4, #20]
 8004210:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004214:	2a00      	cmp	r2, #0
 8004216:	d1d6      	bne.n	80041c6 <f_write+0xc4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8004218:	9a03      	ldr	r2, [sp, #12]
 800421a:	8956      	ldrh	r6, [r2, #10]
 800421c:	3e01      	subs	r6, #1
			if (csect == 0) {				/* On the cluster boundary? */
 800421e:	ea16 2653 	ands.w	r6, r6, r3, lsr #9
 8004222:	d10f      	bne.n	8004244 <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8004224:	2b00      	cmp	r3, #0
 8004226:	d191      	bne.n	800414c <f_write+0x4a>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8004228:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 800422a:	2800      	cmp	r0, #0
 800422c:	d089      	beq.n	8004142 <f_write+0x40>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800422e:	2800      	cmp	r0, #0
 8004230:	d03d      	beq.n	80042ae <f_write+0x1ac>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8004232:	2801      	cmp	r0, #1
 8004234:	d08f      	beq.n	8004156 <f_write+0x54>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8004236:	f1b0 3fff 	cmp.w	r0, #4294967295
 800423a:	d08f      	beq.n	800415c <f_write+0x5a>
				fp->clust = clst;			/* Update current cluster */
 800423c:	61a0      	str	r0, [r4, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800423e:	68a3      	ldr	r3, [r4, #8]
 8004240:	b903      	cbnz	r3, 8004244 <f_write+0x142>
 8004242:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8004244:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8004248:	2b00      	cmp	r3, #0
 800424a:	db8a      	blt.n	8004162 <f_write+0x60>
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 800424c:	9b03      	ldr	r3, [sp, #12]
 800424e:	9301      	str	r3, [sp, #4]
 8004250:	69a1      	ldr	r1, [r4, #24]
 8004252:	4618      	mov	r0, r3
 8004254:	f7fe fb63 	bl	800291e <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8004258:	4682      	mov	sl, r0
 800425a:	2800      	cmp	r0, #0
 800425c:	d092      	beq.n	8004184 <f_write+0x82>
			sect += csect;
 800425e:	44b2      	add	sl, r6
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 8004260:	ea5f 2b55 	movs.w	fp, r5, lsr #9
 8004264:	d0a6      	beq.n	80041b4 <f_write+0xb2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8004266:	eb06 030b 	add.w	r3, r6, fp
 800426a:	9a01      	ldr	r2, [sp, #4]
 800426c:	8952      	ldrh	r2, [r2, #10]
 800426e:	4293      	cmp	r3, r2
 8004270:	d901      	bls.n	8004276 <f_write+0x174>
					cc = fs->csize - csect;
 8004272:	eba2 0b06 	sub.w	fp, r2, r6
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004276:	465b      	mov	r3, fp
 8004278:	4652      	mov	r2, sl
 800427a:	4641      	mov	r1, r8
 800427c:	9801      	ldr	r0, [sp, #4]
 800427e:	7840      	ldrb	r0, [r0, #1]
 8004280:	f7fe fac2 	bl	8002808 <disk_write>
 8004284:	2800      	cmp	r0, #0
 8004286:	d080      	beq.n	800418a <f_write+0x88>
 8004288:	2701      	movs	r7, #1
 800428a:	7467      	strb	r7, [r4, #17]
}
 800428c:	4638      	mov	r0, r7
 800428e:	b005      	add	sp, #20
 8004290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 8004294:	2301      	movs	r3, #1
 8004296:	4652      	mov	r2, sl
 8004298:	f104 0128 	add.w	r1, r4, #40	; 0x28
 800429c:	9801      	ldr	r0, [sp, #4]
 800429e:	7840      	ldrb	r0, [r0, #1]
 80042a0:	f7fe faa0 	bl	80027e4 <disk_read>
				fp->fptr < fp->obj.objsize &&
 80042a4:	2800      	cmp	r0, #0
 80042a6:	d08c      	beq.n	80041c2 <f_write+0xc0>
					ABORT(fs, FR_DISK_ERR);
 80042a8:	2701      	movs	r7, #1
 80042aa:	7467      	strb	r7, [r4, #17]
 80042ac:	e7ee      	b.n	800428c <f_write+0x18a>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80042ae:	7c23      	ldrb	r3, [r4, #16]
 80042b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042b4:	7423      	strb	r3, [r4, #16]
	LEAVE_FF(fs, FR_OK);
 80042b6:	e7e9      	b.n	800428c <f_write+0x18a>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80042b8:	2707      	movs	r7, #7
 80042ba:	e7e7      	b.n	800428c <f_write+0x18a>

080042bc <f_sync>:
{
 80042bc:	b570      	push	{r4, r5, r6, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80042c2:	a901      	add	r1, sp, #4
 80042c4:	f7fe fca4 	bl	8002c10 <validate>
	if (res == FR_OK) {
 80042c8:	4603      	mov	r3, r0
 80042ca:	b978      	cbnz	r0, 80042ec <f_sync+0x30>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80042cc:	7c22      	ldrb	r2, [r4, #16]
 80042ce:	f012 0f40 	tst.w	r2, #64	; 0x40
 80042d2:	d00b      	beq.n	80042ec <f_sync+0x30>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80042d4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80042d8:	d10b      	bne.n	80042f2 <f_sync+0x36>
			tm = GET_FATTIME();				/* Modified time */
 80042da:	f7fe f95e 	bl	800259a <get_fattime>
 80042de:	4606      	mov	r6, r0
				res = move_window(fs, fp->dir_sect);
 80042e0:	6a21      	ldr	r1, [r4, #32]
 80042e2:	9801      	ldr	r0, [sp, #4]
 80042e4:	f7fe fce0 	bl	8002ca8 <move_window>
				if (res == FR_OK) {
 80042e8:	4603      	mov	r3, r0
 80042ea:	b180      	cbz	r0, 800430e <f_sync+0x52>
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	b002      	add	sp, #8
 80042f0:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80042f2:	2301      	movs	r3, #1
 80042f4:	69e2      	ldr	r2, [r4, #28]
 80042f6:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80042fa:	9801      	ldr	r0, [sp, #4]
 80042fc:	7840      	ldrb	r0, [r0, #1]
 80042fe:	f7fe fa83 	bl	8002808 <disk_write>
 8004302:	bb48      	cbnz	r0, 8004358 <f_sync+0x9c>
				fp->flag &= (BYTE)~FA_DIRTY;
 8004304:	7c23      	ldrb	r3, [r4, #16]
 8004306:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800430a:	7423      	strb	r3, [r4, #16]
 800430c:	e7e5      	b.n	80042da <f_sync+0x1e>
					dir = fp->dir_ptr;
 800430e:	6a65      	ldr	r5, [r4, #36]	; 0x24
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 8004310:	7aeb      	ldrb	r3, [r5, #11]
 8004312:	f043 0320 	orr.w	r3, r3, #32
 8004316:	72eb      	strb	r3, [r5, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 8004318:	68a2      	ldr	r2, [r4, #8]
 800431a:	4629      	mov	r1, r5
 800431c:	6820      	ldr	r0, [r4, #0]
 800431e:	f7fe fb1d 	bl	800295c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8004322:	68e1      	ldr	r1, [r4, #12]
 8004324:	f105 001c 	add.w	r0, r5, #28
 8004328:	f7fe faa4 	bl	8002874 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800432c:	4631      	mov	r1, r6
 800432e:	f105 0016 	add.w	r0, r5, #22
 8004332:	f7fe fa9f 	bl	8002874 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8004336:	2100      	movs	r1, #0
 8004338:	f105 0012 	add.w	r0, r5, #18
 800433c:	f7fe fa96 	bl	800286c <st_word>
					fs->wflag = 1;
 8004340:	9b01      	ldr	r3, [sp, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8004346:	9801      	ldr	r0, [sp, #4]
 8004348:	f7ff fce5 	bl	8003d16 <sync_fs>
 800434c:	4603      	mov	r3, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 800434e:	7c22      	ldrb	r2, [r4, #16]
 8004350:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004354:	7422      	strb	r2, [r4, #16]
 8004356:	e7c9      	b.n	80042ec <f_sync+0x30>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8004358:	2301      	movs	r3, #1
 800435a:	e7c7      	b.n	80042ec <f_sync+0x30>

0800435c <f_close>:
{
 800435c:	b510      	push	{r4, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	4604      	mov	r4, r0
	res = f_sync(fp);					/* Flush cached data */
 8004362:	f7ff ffab 	bl	80042bc <f_sync>
	if (res == FR_OK)
 8004366:	4603      	mov	r3, r0
 8004368:	b110      	cbz	r0, 8004370 <f_close+0x14>
}
 800436a:	4618      	mov	r0, r3
 800436c:	b002      	add	sp, #8
 800436e:	bd10      	pop	{r4, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8004370:	a901      	add	r1, sp, #4
 8004372:	4620      	mov	r0, r4
 8004374:	f7fe fc4c 	bl	8002c10 <validate>
		if (res == FR_OK) {
 8004378:	4603      	mov	r3, r0
 800437a:	2800      	cmp	r0, #0
 800437c:	d1f5      	bne.n	800436a <f_close+0xe>
			fp->obj.fs = 0;	/* Invalidate file object */
 800437e:	2200      	movs	r2, #0
 8004380:	6022      	str	r2, [r4, #0]
 8004382:	e7f2      	b.n	800436a <f_close+0xe>

08004384 <f_chdrive>:
{
 8004384:	b500      	push	{lr}
 8004386:	b083      	sub	sp, #12
 8004388:	ab02      	add	r3, sp, #8
 800438a:	f843 0d04 	str.w	r0, [r3, #-4]!
	vol = get_ldnumber(&path);
 800438e:	4618      	mov	r0, r3
 8004390:	f7fe fbe2 	bl	8002b58 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8004394:	2800      	cmp	r0, #0
 8004396:	db08      	blt.n	80043aa <f_chdrive+0x26>
	CurrVol = (BYTE)vol;	/* Set it as current volume */
 8004398:	f240 2310 	movw	r3, #528	; 0x210
 800439c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80043a0:	7018      	strb	r0, [r3, #0]
	return FR_OK;
 80043a2:	2000      	movs	r0, #0
}
 80043a4:	b003      	add	sp, #12
 80043a6:	f85d fb04 	ldr.w	pc, [sp], #4
	if (vol < 0) return FR_INVALID_DRIVE;
 80043aa:	200b      	movs	r0, #11
 80043ac:	e7fa      	b.n	80043a4 <f_chdrive+0x20>

080043ae <f_getfree>:
{
 80043ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043b2:	b088      	sub	sp, #32
 80043b4:	9001      	str	r0, [sp, #4]
 80043b6:	4689      	mov	r9, r1
 80043b8:	4614      	mov	r4, r2
	res = mount_volume(&path, &fs, 0);
 80043ba:	2200      	movs	r2, #0
 80043bc:	a907      	add	r1, sp, #28
 80043be:	a801      	add	r0, sp, #4
 80043c0:	f7fe fcfc 	bl	8002dbc <mount_volume>
	if (res == FR_OK) {
 80043c4:	4607      	mov	r7, r0
 80043c6:	2800      	cmp	r0, #0
 80043c8:	d156      	bne.n	8004478 <f_getfree+0xca>
		*fatfs = fs;				/* Return ptr to the fs object */
 80043ca:	9b07      	ldr	r3, [sp, #28]
 80043cc:	6023      	str	r3, [r4, #0]
		if (fs->free_clst <= fs->n_fatent - 2) {
 80043ce:	695a      	ldr	r2, [r3, #20]
 80043d0:	69dd      	ldr	r5, [r3, #28]
 80043d2:	1ea9      	subs	r1, r5, #2
 80043d4:	428a      	cmp	r2, r1
 80043d6:	d907      	bls.n	80043e8 <f_getfree+0x3a>
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Scan bit field FAT entries */
 80043d8:	781a      	ldrb	r2, [r3, #0]
 80043da:	2a01      	cmp	r2, #1
 80043dc:	d007      	beq.n	80043ee <f_getfree+0x40>
					sect = fs->fatbase;		/* Top of the FAT */
 80043de:	f8d3 8028 	ldr.w	r8, [r3, #40]	; 0x28
					i = 0;					/* Offset in the sector */
 80043e2:	2400      	movs	r4, #0
			nfree = 0;
 80043e4:	4626      	mov	r6, r4
 80043e6:	e02f      	b.n	8004448 <f_getfree+0x9a>
			*nclst = fs->free_clst;
 80043e8:	f8c9 2000 	str.w	r2, [r9]
 80043ec:	e044      	b.n	8004478 <f_getfree+0xca>
				clst = 2; obj.fs = fs;
 80043ee:	9303      	str	r3, [sp, #12]
 80043f0:	2402      	movs	r4, #2
			nfree = 0;
 80043f2:	2600      	movs	r6, #0
 80043f4:	e004      	b.n	8004400 <f_getfree+0x52>
				} while (++clst < fs->n_fatent);
 80043f6:	3401      	adds	r4, #1
 80043f8:	9b07      	ldr	r3, [sp, #28]
 80043fa:	69db      	ldr	r3, [r3, #28]
 80043fc:	42a3      	cmp	r3, r4
 80043fe:	d933      	bls.n	8004468 <f_getfree+0xba>
					stat = get_fat(&obj, clst);
 8004400:	4621      	mov	r1, r4
 8004402:	a803      	add	r0, sp, #12
 8004404:	f7fe febd 	bl	8003182 <get_fat>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8004408:	f1b0 3fff 	cmp.w	r0, #4294967295
 800440c:	d02b      	beq.n	8004466 <f_getfree+0xb8>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800440e:	2801      	cmp	r0, #1
 8004410:	d036      	beq.n	8004480 <f_getfree+0xd2>
					if (stat == 0) nfree++;
 8004412:	2800      	cmp	r0, #0
 8004414:	d1ef      	bne.n	80043f6 <f_getfree+0x48>
 8004416:	3601      	adds	r6, #1
 8004418:	e7ed      	b.n	80043f6 <f_getfree+0x48>
							res = move_window(fs, sect++);
 800441a:	f108 0a01 	add.w	sl, r8, #1
 800441e:	4641      	mov	r1, r8
 8004420:	9807      	ldr	r0, [sp, #28]
 8004422:	f7fe fc41 	bl	8002ca8 <move_window>
							if (res != FR_OK) break;
 8004426:	4607      	mov	r7, r0
 8004428:	b9f0      	cbnz	r0, 8004468 <f_getfree+0xba>
							res = move_window(fs, sect++);
 800442a:	46d0      	mov	r8, sl
 800442c:	e00e      	b.n	800444c <f_getfree+0x9e>
							if (ld_word(fs->win + i) == 0) nfree++;
 800442e:	3038      	adds	r0, #56	; 0x38
 8004430:	4420      	add	r0, r4
 8004432:	f7fe fa0b 	bl	800284c <ld_word>
 8004436:	b900      	cbnz	r0, 800443a <f_getfree+0x8c>
 8004438:	3601      	adds	r6, #1
							i += 2;
 800443a:	3402      	adds	r4, #2
 800443c:	e000      	b.n	8004440 <f_getfree+0x92>
							i += 4;
 800443e:	3404      	adds	r4, #4
						i %= SS(fs);
 8004440:	f3c4 0408 	ubfx	r4, r4, #0, #9
					} while (--clst);
 8004444:	3d01      	subs	r5, #1
 8004446:	d00f      	beq.n	8004468 <f_getfree+0xba>
						if (i == 0) {
 8004448:	2c00      	cmp	r4, #0
 800444a:	d0e6      	beq.n	800441a <f_getfree+0x6c>
						if (fs->fs_type == FS_FAT16) {
 800444c:	9807      	ldr	r0, [sp, #28]
 800444e:	7803      	ldrb	r3, [r0, #0]
 8004450:	2b02      	cmp	r3, #2
 8004452:	d0ec      	beq.n	800442e <f_getfree+0x80>
							if ((ld_dword(fs->win + i) & 0x0FFFFFFF) == 0) nfree++;
 8004454:	3038      	adds	r0, #56	; 0x38
 8004456:	4420      	add	r0, r4
 8004458:	f7fe f9fd 	bl	8002856 <ld_dword>
 800445c:	f030 4370 	bics.w	r3, r0, #4026531840	; 0xf0000000
 8004460:	d1ed      	bne.n	800443e <f_getfree+0x90>
 8004462:	3601      	adds	r6, #1
 8004464:	e7eb      	b.n	800443e <f_getfree+0x90>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8004466:	2701      	movs	r7, #1
			*nclst = nfree;			/* Return the free clusters */
 8004468:	f8c9 6000 	str.w	r6, [r9]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800446c:	9b07      	ldr	r3, [sp, #28]
 800446e:	615e      	str	r6, [r3, #20]
			fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
 8004470:	791a      	ldrb	r2, [r3, #4]
 8004472:	f042 0201 	orr.w	r2, r2, #1
 8004476:	711a      	strb	r2, [r3, #4]
}
 8004478:	4638      	mov	r0, r7
 800447a:	b008      	add	sp, #32
 800447c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (stat == 1) { res = FR_INT_ERR; break; }
 8004480:	2702      	movs	r7, #2
 8004482:	e7f1      	b.n	8004468 <f_getfree+0xba>

08004484 <f_setlabel>:
{
 8004484:	b530      	push	{r4, r5, lr}
 8004486:	b097      	sub	sp, #92	; 0x5c
 8004488:	9001      	str	r0, [sp, #4]
	res = mount_volume(&label, &fs, FA_WRITE);
 800448a:	2202      	movs	r2, #2
 800448c:	a908      	add	r1, sp, #32
 800448e:	a801      	add	r0, sp, #4
 8004490:	f7fe fc94 	bl	8002dbc <mount_volume>
	if (res != FR_OK) LEAVE_FF(fs, res);
 8004494:	4605      	mov	r5, r0
 8004496:	b110      	cbz	r0, 800449e <f_setlabel+0x1a>
}
 8004498:	4628      	mov	r0, r5
 800449a:	b017      	add	sp, #92	; 0x5c
 800449c:	bd30      	pop	{r4, r5, pc}
		mem_set(dirvn, ' ', 11);
 800449e:	220b      	movs	r2, #11
 80044a0:	2120      	movs	r1, #32
 80044a2:	a802      	add	r0, sp, #8
 80044a4:	f7fe f9f9 	bl	800289a <mem_set>
		di = 0;
 80044a8:	2400      	movs	r4, #0
		while ((UINT)*label >= ' ') {	/* Create volume label */
 80044aa:	e006      	b.n	80044ba <f_setlabel+0x36>
			if (wc == 0 || chk_chr(badchr + 0, (int)wc) || di >= (UINT)((wc >= 0x100) ? 10 : 11)) {	/* Reject invalid characters for volume label */
 80044ac:	230b      	movs	r3, #11
 80044ae:	e023      	b.n	80044f8 <f_setlabel+0x74>
			dirvn[di++] = (BYTE)wc;
 80044b0:	ab16      	add	r3, sp, #88	; 0x58
 80044b2:	4423      	add	r3, r4
 80044b4:	f803 5c50 	strb.w	r5, [r3, #-80]
 80044b8:	3401      	adds	r4, #1
		while ((UINT)*label >= ' ') {	/* Create volume label */
 80044ba:	9b01      	ldr	r3, [sp, #4]
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	2b1f      	cmp	r3, #31
 80044c0:	d926      	bls.n	8004510 <f_setlabel+0x8c>
			dc = tchar2uni(&label);
 80044c2:	a801      	add	r0, sp, #4
 80044c4:	f7ff fa57 	bl	8003976 <tchar2uni>
			wc = (dc < 0x10000) ? ff_uni2oem(ff_wtoupper(dc), CODEPAGE) : 0;
 80044c8:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80044cc:	d272      	bcs.n	80045b4 <f_setlabel+0x130>
 80044ce:	f000 fc00 	bl	8004cd2 <ff_wtoupper>
 80044d2:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 80044d6:	f000 fb9d 	bl	8004c14 <ff_uni2oem>
			if (wc == 0 || chk_chr(badchr + 0, (int)wc) || di >= (UINT)((wc >= 0x100) ? 10 : 11)) {	/* Reject invalid characters for volume label */
 80044da:	4605      	mov	r5, r0
 80044dc:	2800      	cmp	r0, #0
 80044de:	d06b      	beq.n	80045b8 <f_setlabel+0x134>
 80044e0:	4601      	mov	r1, r0
 80044e2:	f247 4044 	movw	r0, #29764	; 0x7444
 80044e6:	f6c0 0000 	movt	r0, #2048	; 0x800
 80044ea:	f7fe f9ea 	bl	80028c2 <chk_chr>
 80044ee:	2800      	cmp	r0, #0
 80044f0:	d164      	bne.n	80045bc <f_setlabel+0x138>
 80044f2:	2dff      	cmp	r5, #255	; 0xff
 80044f4:	d9da      	bls.n	80044ac <f_setlabel+0x28>
 80044f6:	230a      	movs	r3, #10
 80044f8:	42a3      	cmp	r3, r4
 80044fa:	d961      	bls.n	80045c0 <f_setlabel+0x13c>
			if (wc >= 0x100) dirvn[di++] = (BYTE)(wc >> 8);
 80044fc:	2dff      	cmp	r5, #255	; 0xff
 80044fe:	d9d7      	bls.n	80044b0 <f_setlabel+0x2c>
 8004500:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8004504:	aa16      	add	r2, sp, #88	; 0x58
 8004506:	4422      	add	r2, r4
 8004508:	f802 3c50 	strb.w	r3, [r2, #-80]
 800450c:	3401      	adds	r4, #1
 800450e:	e7cf      	b.n	80044b0 <f_setlabel+0x2c>
		if (dirvn[0] == DDEM) LEAVE_FF(fs, FR_INVALID_NAME);	/* Reject illegal name (heading DDEM) */
 8004510:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8004514:	2be5      	cmp	r3, #229	; 0xe5
 8004516:	d102      	bne.n	800451e <f_setlabel+0x9a>
 8004518:	2506      	movs	r5, #6
 800451a:	e7bd      	b.n	8004498 <f_setlabel+0x14>
		while (di && dirvn[di - 1] == ' ') di--;				/* Snip trailing spaces */
 800451c:	461c      	mov	r4, r3
 800451e:	b134      	cbz	r4, 800452e <f_setlabel+0xaa>
 8004520:	1e63      	subs	r3, r4, #1
 8004522:	aa16      	add	r2, sp, #88	; 0x58
 8004524:	441a      	add	r2, r3
 8004526:	f812 2c50 	ldrb.w	r2, [r2, #-80]
 800452a:	2a20      	cmp	r2, #32
 800452c:	d0f6      	beq.n	800451c <f_setlabel+0x98>
	dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
 800452e:	9b08      	ldr	r3, [sp, #32]
 8004530:	9309      	str	r3, [sp, #36]	; 0x24
 8004532:	2100      	movs	r1, #0
 8004534:	910b      	str	r1, [sp, #44]	; 0x2c
	res = dir_sdi(&dj, 0);
 8004536:	a809      	add	r0, sp, #36	; 0x24
 8004538:	f7fe fe8b 	bl	8003252 <dir_sdi>
	if (res == FR_OK) {
 800453c:	4605      	mov	r5, r0
 800453e:	2800      	cmp	r0, #0
 8004540:	d1aa      	bne.n	8004498 <f_setlabel+0x14>
		res = DIR_READ_LABEL(&dj);	/* Get volume label entry */
 8004542:	2101      	movs	r1, #1
 8004544:	a809      	add	r0, sp, #36	; 0x24
 8004546:	f7ff f84f 	bl	80035e8 <dir_read>
		if (res == FR_OK) {
 800454a:	b988      	cbnz	r0, 8004570 <f_setlabel+0xec>
				if (di != 0) {
 800454c:	b954      	cbnz	r4, 8004564 <f_setlabel+0xe0>
					dj.dir[DIR_Name] = DDEM;	/* Remove the volume label */
 800454e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004550:	22e5      	movs	r2, #229	; 0xe5
 8004552:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8004554:	9b08      	ldr	r3, [sp, #32]
 8004556:	2201      	movs	r2, #1
 8004558:	70da      	strb	r2, [r3, #3]
			res = sync_fs(fs);
 800455a:	9808      	ldr	r0, [sp, #32]
 800455c:	f7ff fbdb 	bl	8003d16 <sync_fs>
 8004560:	4605      	mov	r5, r0
 8004562:	e799      	b.n	8004498 <f_setlabel+0x14>
					mem_cpy(dj.dir, dirvn, 11);	/* Change the volume label */
 8004564:	220b      	movs	r2, #11
 8004566:	a902      	add	r1, sp, #8
 8004568:	9810      	ldr	r0, [sp, #64]	; 0x40
 800456a:	f7fe f98d 	bl	8002888 <mem_cpy>
 800456e:	e7f1      	b.n	8004554 <f_setlabel+0xd0>
			if (res == FR_NO_FILE) {
 8004570:	2804      	cmp	r0, #4
 8004572:	d001      	beq.n	8004578 <f_setlabel+0xf4>
		res = DIR_READ_LABEL(&dj);	/* Get volume label entry */
 8004574:	4605      	mov	r5, r0
 8004576:	e78f      	b.n	8004498 <f_setlabel+0x14>
				if (di != 0) {	/* Create a volume label entry */
 8004578:	2c00      	cmp	r4, #0
 800457a:	d08d      	beq.n	8004498 <f_setlabel+0x14>
					res = dir_alloc(&dj, 1);	/* Allocate an entry */
 800457c:	2101      	movs	r1, #1
 800457e:	a809      	add	r0, sp, #36	; 0x24
 8004580:	f7ff f80a 	bl	8003598 <dir_alloc>
					if (res == FR_OK) {
 8004584:	4605      	mov	r5, r0
 8004586:	2800      	cmp	r0, #0
 8004588:	d186      	bne.n	8004498 <f_setlabel+0x14>
						mem_set(dj.dir, 0, SZDIRE);	/* Clean the entry */
 800458a:	2220      	movs	r2, #32
 800458c:	2100      	movs	r1, #0
 800458e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8004590:	f7fe f983 	bl	800289a <mem_set>
							dj.dir[DIR_Attr] = AM_VOL;		/* Create volume label entry */
 8004594:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004596:	2208      	movs	r2, #8
 8004598:	72da      	strb	r2, [r3, #11]
							mem_cpy(dj.dir, dirvn, 11);
 800459a:	220b      	movs	r2, #11
 800459c:	a902      	add	r1, sp, #8
 800459e:	9810      	ldr	r0, [sp, #64]	; 0x40
 80045a0:	f7fe f972 	bl	8002888 <mem_cpy>
						fs->wflag = 1;
 80045a4:	9b08      	ldr	r3, [sp, #32]
 80045a6:	2201      	movs	r2, #1
 80045a8:	70da      	strb	r2, [r3, #3]
						res = sync_fs(fs);
 80045aa:	9808      	ldr	r0, [sp, #32]
 80045ac:	f7ff fbb3 	bl	8003d16 <sync_fs>
 80045b0:	4605      	mov	r5, r0
 80045b2:	e771      	b.n	8004498 <f_setlabel+0x14>
				LEAVE_FF(fs, FR_INVALID_NAME);
 80045b4:	2506      	movs	r5, #6
 80045b6:	e76f      	b.n	8004498 <f_setlabel+0x14>
 80045b8:	2506      	movs	r5, #6
 80045ba:	e76d      	b.n	8004498 <f_setlabel+0x14>
 80045bc:	2506      	movs	r5, #6
 80045be:	e76b      	b.n	8004498 <f_setlabel+0x14>
 80045c0:	2506      	movs	r5, #6
 80045c2:	e769      	b.n	8004498 <f_setlabel+0x14>

080045c4 <f_mkfs>:
	const TCHAR* path,		/* Logical drive number */
	const MKFS_PARM* opt,	/* Format options */
	void* work,				/* Pointer to working buffer (null: use heap memory) */
	UINT len				/* Size of working buffer [byte] */
)
{
 80045c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045c8:	b08f      	sub	sp, #60	; 0x3c
 80045ca:	ac0e      	add	r4, sp, #56	; 0x38
 80045cc:	f844 0d14 	str.w	r0, [r4, #-20]!
 80045d0:	460d      	mov	r5, r1
 80045d2:	9200      	str	r2, [sp, #0]
 80045d4:	461e      	mov	r6, r3
	DSTATUS ds;
	FRESULT fr;


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 80045d6:	4620      	mov	r0, r4
 80045d8:	f7fe fabe 	bl	8002b58 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80045dc:	2800      	cmp	r0, #0
 80045de:	f2c0 82f4 	blt.w	8004bca <f_mkfs+0x606>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the fs object if mounted */
 80045e2:	f240 2314 	movw	r3, #532	; 0x214
 80045e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80045ea:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80045ee:	b10b      	cbz	r3, 80045f4 <f_mkfs+0x30>
 80045f0:	2200      	movs	r2, #0
 80045f2:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);			/* Physical drive */
 80045f4:	b2c4      	uxtb	r4, r0
	ipart = LD2PT(vol);			/* Partition (0:create as new, 1..:get from partition table) */
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
 80045f6:	b35d      	cbz	r5, 8004650 <f_mkfs+0x8c>

	/* Get physical drive status (sz_drv, sz_blk, ss) */
	ds = disk_initialize(pdrv);
 80045f8:	4620      	mov	r0, r4
 80045fa:	f7fe f8e5 	bl	80027c8 <disk_initialize>
	if (ds & STA_NOINIT) return FR_NOT_READY;
 80045fe:	f010 0f01 	tst.w	r0, #1
 8004602:	f040 82e4 	bne.w	8004bce <f_mkfs+0x60a>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
 8004606:	f010 0f04 	tst.w	r0, #4
 800460a:	f040 82e5 	bne.w	8004bd8 <f_mkfs+0x614>
	sz_blk = opt->align;
 800460e:	686b      	ldr	r3, [r5, #4]
 8004610:	930d      	str	r3, [sp, #52]	; 0x34
	if (sz_blk == 0 && disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK) sz_blk = 1;
 8004612:	b313      	cbz	r3, 800465a <f_mkfs+0x96>
 	if (sz_blk == 0 || sz_blk > 0x8000 || (sz_blk & (sz_blk - 1))) sz_blk = 1;
 8004614:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004616:	1e53      	subs	r3, r2, #1
 8004618:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800461c:	d201      	bcs.n	8004622 <f_mkfs+0x5e>
 800461e:	421a      	tst	r2, r3
 8004620:	d001      	beq.n	8004626 <f_mkfs+0x62>
 8004622:	2301      	movs	r3, #1
 8004624:	930d      	str	r3, [sp, #52]	; 0x34
	if (ss > FF_MAX_SS || ss < FF_MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = FF_MAX_SS;
#endif
	/* Options for FAT sub-type and FAT parameters */
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
 8004626:	f895 a000 	ldrb.w	sl, [r5]
	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
 800462a:	786f      	ldrb	r7, [r5, #1]
 800462c:	1e7b      	subs	r3, r7, #1
 800462e:	b2db      	uxtb	r3, r3
 8004630:	2b01      	cmp	r3, #1
 8004632:	d900      	bls.n	8004636 <f_mkfs+0x72>
 8004634:	2701      	movs	r7, #1
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
 8004636:	f8d5 9008 	ldr.w	r9, [r5, #8]
 800463a:	f109 33ff 	add.w	r3, r9, #4294967295
 800463e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004642:	d214      	bcs.n	800466e <f_mkfs+0xaa>
 8004644:	f019 0f0f 	tst.w	r9, #15
 8004648:	d013      	beq.n	8004672 <f_mkfs+0xae>
 800464a:	f44f 7900 	mov.w	r9, #512	; 0x200
 800464e:	e010      	b.n	8004672 <f_mkfs+0xae>
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
 8004650:	f247 4598 	movw	r5, #29848	; 0x7498
 8004654:	f6c0 0500 	movt	r5, #2048	; 0x800
 8004658:	e7ce      	b.n	80045f8 <f_mkfs+0x34>
	if (sz_blk == 0 && disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK) sz_blk = 1;
 800465a:	aa0d      	add	r2, sp, #52	; 0x34
 800465c:	2103      	movs	r1, #3
 800465e:	4620      	mov	r0, r4
 8004660:	f7fe f8e4 	bl	800282c <disk_ioctl>
 8004664:	2800      	cmp	r0, #0
 8004666:	d0d5      	beq.n	8004614 <f_mkfs+0x50>
 8004668:	2301      	movs	r3, #1
 800466a:	930d      	str	r3, [sp, #52]	; 0x34
 800466c:	e7d2      	b.n	8004614 <f_mkfs+0x50>
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
 800466e:	f44f 7900 	mov.w	r9, #512	; 0x200
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
 8004672:	68ed      	ldr	r5, [r5, #12]
 8004674:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
 8004678:	d804      	bhi.n	8004684 <f_mkfs+0xc0>
 800467a:	1e6b      	subs	r3, r5, #1
 800467c:	421d      	tst	r5, r3
 800467e:	d002      	beq.n	8004686 <f_mkfs+0xc2>
 8004680:	2500      	movs	r5, #0
 8004682:	e000      	b.n	8004686 <f_mkfs+0xc2>
 8004684:	2500      	movs	r5, #0
	sz_au /= ss;	/* Byte --> Sector */
 8004686:	0a6d      	lsrs	r5, r5, #9

	/* Get working buffer */
	sz_buf = len / ss;		/* Size of working buffer [sector] */
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
 8004688:	0a73      	lsrs	r3, r6, #9
 800468a:	9301      	str	r3, [sp, #4]
 800468c:	f000 82a6 	beq.w	8004bdc <f_mkfs+0x618>
	buf = (BYTE*)work;		/* Working buffer */
#if FF_USE_LFN == 3
	if (!buf) buf = ff_memalloc(sz_buf * ss);	/* Use heap memory for working buffer */
#endif
	if (!buf) return FR_NOT_ENOUGH_CORE;
 8004690:	9b00      	ldr	r3, [sp, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	f000 82a4 	beq.w	8004be0 <f_mkfs+0x61c>

	/* Determine where the volume to be located (b_vol, sz_vol) */
	b_vol = sz_vol = 0;
 8004698:	aa0e      	add	r2, sp, #56	; 0x38
 800469a:	2300      	movs	r3, #0
 800469c:	f842 3d08 	str.w	r3, [r2, #-8]!
			if (ipart > 4 || pte[PTE_System] == 0) LEAVE_MKFS(FR_MKFS_ABORTED);	/* No partition? */
			b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
			sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
		}
	} else {	/* The volume is associated with a physical drive */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 80046a0:	2101      	movs	r1, #1
 80046a2:	4620      	mov	r0, r4
 80046a4:	f7fe f8c2 	bl	800282c <disk_ioctl>
 80046a8:	2800      	cmp	r0, #0
 80046aa:	f040 829b 	bne.w	8004be4 <f_mkfs+0x620>
		if (!(fsopt & FM_SFD)) {	/* To be partitioned? */
 80046ae:	f01a 0308 	ands.w	r3, sl, #8
 80046b2:	9303      	str	r3, [sp, #12]
 80046b4:	d107      	bne.n	80046c6 <f_mkfs+0x102>
				fsopt |= 0x80;		/* Partitioning is in GPT */
				b_vol = GPT_ALIGN / ss; sz_vol -= b_vol + GPT_ITEMS * SZ_GPTE / ss + 1;	/* Estimated partition offset and size */
			} else
#endif
			{	/* Partitioning is in MBR */
				if (sz_vol > N_SEC_TRACK) {
 80046b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80046b8:	2b3f      	cmp	r3, #63	; 0x3f
 80046ba:	d97d      	bls.n	80047b8 <f_mkfs+0x1f4>
					b_vol = N_SEC_TRACK; sz_vol -= b_vol;	/* Estimated partition offset and size */
 80046bc:	3b3f      	subs	r3, #63	; 0x3f
 80046be:	930c      	str	r3, [sp, #48]	; 0x30
 80046c0:	233f      	movs	r3, #63	; 0x3f
 80046c2:	9302      	str	r3, [sp, #8]
 80046c4:	e001      	b.n	80046ca <f_mkfs+0x106>
	b_vol = sz_vol = 0;
 80046c6:	2300      	movs	r3, #0
 80046c8:	9302      	str	r3, [sp, #8]
				}
			}
		}
	}
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128s */
 80046ca:	980c      	ldr	r0, [sp, #48]	; 0x30
 80046cc:	287f      	cmp	r0, #127	; 0x7f
 80046ce:	f240 828b 	bls.w	8004be8 <f_mkfs+0x624>
			}
		}
#if FF_LBA64
		if (sz_vol >= 0x100000000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too large volume for FAT/FAT32 */
#endif
		if (sz_au > 128) sz_au = 128;	/* Invalid AU for FAT/FAT32? */
 80046d2:	2d80      	cmp	r5, #128	; 0x80
 80046d4:	d900      	bls.n	80046d8 <f_mkfs+0x114>
 80046d6:	2580      	movs	r5, #128	; 0x80
		if (fsopt & FM_FAT32) {	/* FAT32 possible? */
 80046d8:	f01a 0c02 	ands.w	ip, sl, #2
 80046dc:	d002      	beq.n	80046e4 <f_mkfs+0x120>
			if (!(fsopt & FM_FAT)) {	/* no-FAT? */
 80046de:	f01a 0f01 	tst.w	sl, #1
 80046e2:	d06c      	beq.n	80047be <f_mkfs+0x1fa>
				fsty = FS_FAT32; break;
			}
		}
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
 80046e4:	f01a 0f01 	tst.w	sl, #1
 80046e8:	f000 8280 	beq.w	8004bec <f_mkfs+0x628>
		fsty = FS_FAT16;
 80046ec:	f04f 0802 	mov.w	r8, #2
 80046f0:	9404      	str	r4, [sp, #16]
 80046f2:	9605      	str	r6, [sp, #20]
#endif	/* FF_FS_EXFAT */
	{	/* Create an FAT/FAT32 volume */
		do {
			pau = sz_au;
			/* Pre-determine number of clusters and FAT sub-type */
			if (fsty == FS_FAT32) {	/* FAT32 volume */
 80046f4:	f1b8 0f03 	cmp.w	r8, #3
 80046f8:	d06a      	beq.n	80047d0 <f_mkfs+0x20c>
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
				sz_rsv = 32;	/* Number of reserved sectors */
				sz_dir = 0;		/* No static directory */
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
			} else {				/* FAT volume */
				if (pau == 0) {	/* au auto-selection */
 80046fa:	2d00      	cmp	r5, #0
 80046fc:	f000 8094 	beq.w	8004828 <f_mkfs+0x264>
 8004700:	46aa      	mov	sl, r5
					n = (DWORD)sz_vol / 0x1000;	/* Volume size in unit of 4KS */
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
				}
				n_clst = (DWORD)sz_vol / pau;
 8004702:	fbb0 f3fa 	udiv	r3, r0, sl
				if (n_clst > MAX_FAT12) {
 8004706:	f640 72f5 	movw	r2, #4085	; 0xff5
 800470a:	4293      	cmp	r3, r2
 800470c:	f240 80a0 	bls.w	8004850 <f_mkfs+0x28c>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8004710:	f103 0b02 	add.w	fp, r3, #2
 8004714:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
				} else {
					fsty = FS_FAT12;
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8004718:	f20b 1bff 	addw	fp, fp, #511	; 0x1ff
 800471c:	ea4f 2b5b 	mov.w	fp, fp, lsr #9
				sz_rsv = 1;						/* Number of reserved sectors */
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root dir size [sector] */
 8004720:	f3c9 1616 	ubfx	r6, r9, #4, #23
				sz_rsv = 1;						/* Number of reserved sectors */
 8004724:	2101      	movs	r1, #1
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8004726:	9b02      	ldr	r3, [sp, #8]
 8004728:	185c      	adds	r4, r3, r1
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
 800472a:	fb07 420b 	mla	r2, r7, fp, r4
 800472e:	4432      	add	r2, r6

			/* Align data area to erase block boundary (for flash memory media) */
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 8004730:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 8004734:	eb0e 0302 	add.w	r3, lr, r2
 8004738:	3b01      	subs	r3, #1
 800473a:	f1ce 0e00 	rsb	lr, lr, #0
 800473e:	ea03 030e 	and.w	r3, r3, lr
 8004742:	1a9b      	subs	r3, r3, r2
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
 8004744:	f1b8 0f03 	cmp.w	r8, #3
 8004748:	f000 808d 	beq.w	8004866 <f_mkfs+0x2a2>
				sz_rsv += n; b_fat += n;
			} else {					/* FAT: Expand FAT */
				if (n % n_fat) {	/* Adjust fractional error if needed */
 800474c:	fbb3 fef7 	udiv	lr, r3, r7
 8004750:	fb07 3e1e 	mls	lr, r7, lr, r3
 8004754:	f1be 0f00 	cmp.w	lr, #0
 8004758:	d002      	beq.n	8004760 <f_mkfs+0x19c>
					n--; sz_rsv++; b_fat++;
 800475a:	3b01      	subs	r3, #1
 800475c:	3101      	adds	r1, #1
 800475e:	3401      	adds	r4, #1
				}
				sz_fat += n / n_fat;
 8004760:	fbb3 f3f7 	udiv	r3, r3, r7
 8004764:	449b      	add	fp, r3
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
 8004766:	eb02 120a 	add.w	r2, r2, sl, lsl #4
 800476a:	9b02      	ldr	r3, [sp, #8]
 800476c:	1ad2      	subs	r2, r2, r3
 800476e:	4290      	cmp	r0, r2
 8004770:	f0c0 8240 	bcc.w	8004bf4 <f_mkfs+0x630>
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
 8004774:	1a43      	subs	r3, r0, r1
 8004776:	fb07 331b 	mls	r3, r7, fp, r3
 800477a:	1b9b      	subs	r3, r3, r6
 800477c:	fbb3 f3fa 	udiv	r3, r3, sl
			if (fsty == FS_FAT32) {
 8004780:	f1b8 0f03 	cmp.w	r8, #3
 8004784:	d072      	beq.n	800486c <f_mkfs+0x2a8>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32? */
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
					LEAVE_MKFS(FR_MKFS_ABORTED);
				}
			}
			if (fsty == FS_FAT16) {
 8004786:	f1b8 0f02 	cmp.w	r8, #2
 800478a:	f040 808a 	bne.w	80048a2 <f_mkfs+0x2de>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800478e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8004792:	4293      	cmp	r3, r2
 8004794:	d977      	bls.n	8004886 <f_mkfs+0x2c2>
					if (sz_au == 0 && (pau * 2) <= 64) {
 8004796:	b91d      	cbnz	r5, 80047a0 <f_mkfs+0x1dc>
 8004798:	ea4f 034a 	mov.w	r3, sl, lsl #1
 800479c:	2b40      	cmp	r3, #64	; 0x40
 800479e:	d913      	bls.n	80047c8 <f_mkfs+0x204>
						sz_au = pau * 2; continue;		/* Adjust cluster size and retry */
					}
					if ((fsopt & FM_FAT32)) {
 80047a0:	f1bc 0f00 	cmp.w	ip, #0
 80047a4:	d112      	bne.n	80047cc <f_mkfs+0x208>
						fsty = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
					}
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80047a6:	2d00      	cmp	r5, #0
 80047a8:	f040 8228 	bne.w	8004bfc <f_mkfs+0x638>
 80047ac:	ea4f 054a 	mov.w	r5, sl, lsl #1
 80047b0:	2d80      	cmp	r5, #128	; 0x80
 80047b2:	d99f      	bls.n	80046f4 <f_mkfs+0x130>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 80047b4:	230e      	movs	r3, #14
 80047b6:	e20b      	b.n	8004bd0 <f_mkfs+0x60c>
	b_vol = sz_vol = 0;
 80047b8:	2300      	movs	r3, #0
 80047ba:	9302      	str	r3, [sp, #8]
 80047bc:	e785      	b.n	80046ca <f_mkfs+0x106>
				fsty = FS_FAT32; break;
 80047be:	f04f 0803 	mov.w	r8, #3
 80047c2:	9404      	str	r4, [sp, #16]
 80047c4:	9605      	str	r6, [sp, #20]
 80047c6:	e795      	b.n	80046f4 <f_mkfs+0x130>
						sz_au = pau * 2; continue;		/* Adjust cluster size and retry */
 80047c8:	461d      	mov	r5, r3
 80047ca:	e793      	b.n	80046f4 <f_mkfs+0x130>
						fsty = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 80047cc:	f04f 0803 	mov.w	r8, #3
				if (pau == 0) {	/* AU auto-selection */
 80047d0:	b1bd      	cbz	r5, 8004802 <f_mkfs+0x23e>
 80047d2:	46aa      	mov	sl, r5
				n_clst = (DWORD)sz_vol / pau;	/* Number of clusters */
 80047d4:	fbb0 f3fa 	udiv	r3, r0, sl
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 80047d8:	f103 0b02 	add.w	fp, r3, #2
 80047dc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80047e0:	f20b 1bff 	addw	fp, fp, #511	; 0x1ff
 80047e4:	ea4f 2b5b 	mov.w	fp, fp, lsr #9
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 80047e8:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 80047ec:	3bf6      	subs	r3, #246	; 0xf6
 80047ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047f2:	f6c0 72fe 	movt	r2, #4094	; 0xffe
 80047f6:	4293      	cmp	r3, r2
 80047f8:	f200 81fa 	bhi.w	8004bf0 <f_mkfs+0x62c>
				sz_dir = 0;		/* No static directory */
 80047fc:	2600      	movs	r6, #0
				sz_rsv = 32;	/* Number of reserved sectors */
 80047fe:	2120      	movs	r1, #32
 8004800:	e791      	b.n	8004726 <f_mkfs+0x162>
					n = (DWORD)sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8004802:	0c41      	lsrs	r1, r0, #17
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8004804:	2200      	movs	r2, #0
 8004806:	f04f 0a01 	mov.w	sl, #1
 800480a:	e002      	b.n	8004812 <f_mkfs+0x24e>
 800480c:	3201      	adds	r2, #1
 800480e:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8004812:	f247 4388 	movw	r3, #29832	; 0x7488
 8004816:	f6c0 0300 	movt	r3, #2048	; 0x800
 800481a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d0d8      	beq.n	80047d4 <f_mkfs+0x210>
 8004822:	428b      	cmp	r3, r1
 8004824:	d9f2      	bls.n	800480c <f_mkfs+0x248>
 8004826:	e7d5      	b.n	80047d4 <f_mkfs+0x210>
					n = (DWORD)sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8004828:	0b01      	lsrs	r1, r0, #12
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800482a:	2200      	movs	r2, #0
 800482c:	f04f 0a01 	mov.w	sl, #1
 8004830:	e002      	b.n	8004838 <f_mkfs+0x274>
 8004832:	3201      	adds	r2, #1
 8004834:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8004838:	f247 4378 	movw	r3, #29816	; 0x7478
 800483c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8004840:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004844:	2b00      	cmp	r3, #0
 8004846:	f43f af5c 	beq.w	8004702 <f_mkfs+0x13e>
 800484a:	428b      	cmp	r3, r1
 800484c:	d9f1      	bls.n	8004832 <f_mkfs+0x26e>
 800484e:	e758      	b.n	8004702 <f_mkfs+0x13e>
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8004850:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 8004854:	f10b 0b01 	add.w	fp, fp, #1
 8004858:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 800485c:	f10b 0b03 	add.w	fp, fp, #3
					fsty = FS_FAT12;
 8004860:	f04f 0801 	mov.w	r8, #1
 8004864:	e758      	b.n	8004718 <f_mkfs+0x154>
				sz_rsv += n; b_fat += n;
 8004866:	4419      	add	r1, r3
 8004868:	441c      	add	r4, r3
 800486a:	e77c      	b.n	8004766 <f_mkfs+0x1a2>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32? */
 800486c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8004870:	4293      	cmp	r3, r2
 8004872:	d888      	bhi.n	8004786 <f_mkfs+0x1c2>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8004874:	2d00      	cmp	r5, #0
 8004876:	f040 81bf 	bne.w	8004bf8 <f_mkfs+0x634>
 800487a:	ea5f 055a 	movs.w	r5, sl, lsr #1
 800487e:	f47f af39 	bne.w	80046f4 <f_mkfs+0x130>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 8004882:	230e      	movs	r3, #14
 8004884:	e1a4      	b.n	8004bd0 <f_mkfs+0x60c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8004886:	f640 72f5 	movw	r2, #4085	; 0xff5
 800488a:	4293      	cmp	r3, r2
 800488c:	d809      	bhi.n	80048a2 <f_mkfs+0x2de>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800488e:	2d00      	cmp	r5, #0
 8004890:	f040 81b6 	bne.w	8004c00 <f_mkfs+0x63c>
 8004894:	ea4f 054a 	mov.w	r5, sl, lsl #1
 8004898:	2d80      	cmp	r5, #128	; 0x80
 800489a:	f67f af2b 	bls.w	80046f4 <f_mkfs+0x130>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 800489e:	230e      	movs	r3, #14
 80048a0:	e196      	b.n	8004bd0 <f_mkfs+0x60c>
 80048a2:	9406      	str	r4, [sp, #24]
 80048a4:	9107      	str	r1, [sp, #28]
 80048a6:	9608      	str	r6, [sp, #32]
 80048a8:	9c04      	ldr	r4, [sp, #16]
 80048aa:	461a      	mov	r2, r3
 80048ac:	9304      	str	r3, [sp, #16]
 80048ae:	9e05      	ldr	r6, [sp, #20]
				}
			}
			if (fsty == FS_FAT12 && n_clst > MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters for FAT12 */
 80048b0:	f1b8 0f01 	cmp.w	r8, #1
 80048b4:	d104      	bne.n	80048c0 <f_mkfs+0x2fc>
 80048b6:	f640 73f5 	movw	r3, #4085	; 0xff5
 80048ba:	429a      	cmp	r2, r3
 80048bc:	f200 81a2 	bhi.w	8004c04 <f_mkfs+0x640>
#if FF_USE_TRIM
		lba[0] = b_vol; lba[1] = b_vol + sz_vol - 1;	/* Inform storage device that the volume area may be erased */
		disk_ioctl(pdrv, CTRL_TRIM, lba);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 80048c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048c4:	2100      	movs	r1, #0
 80048c6:	9d00      	ldr	r5, [sp, #0]
 80048c8:	4628      	mov	r0, r5
 80048ca:	f7fd ffe6 	bl	800289a <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 80048ce:	220b      	movs	r2, #11
 80048d0:	f247 41a8 	movw	r1, #29864	; 0x74a8
 80048d4:	f6c0 0100 	movt	r1, #2048	; 0x800
 80048d8:	4628      	mov	r0, r5
 80048da:	f7fd ffd5 	bl	8002888 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 80048de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80048e2:	f105 000b 	add.w	r0, r5, #11
 80048e6:	f7fd ffc1 	bl	800286c <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 80048ea:	f885 a00d 	strb.w	sl, [r5, #13]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 80048ee:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80048f2:	f105 000e 	add.w	r0, r5, #14
 80048f6:	f7fd ffb9 	bl	800286c <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
 80048fa:	742f      	strb	r7, [r5, #16]
		st_word(buf + BPB_RootEntCnt, (WORD)((fsty == FS_FAT32) ? 0 : n_root));	/* Number of root directory entries */
 80048fc:	f105 0011 	add.w	r0, r5, #17
 8004900:	f1b8 0f03 	cmp.w	r8, #3
 8004904:	f000 8091 	beq.w	8004a2a <f_mkfs+0x466>
 8004908:	fa1f f189 	uxth.w	r1, r9
 800490c:	f7fd ffae 	bl	800286c <st_word>
		if (sz_vol < 0x10000) {
 8004910:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004912:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8004916:	f080 808a 	bcs.w	8004a2e <f_mkfs+0x46a>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800491a:	b289      	uxth	r1, r1
 800491c:	9b00      	ldr	r3, [sp, #0]
 800491e:	f103 0013 	add.w	r0, r3, #19
 8004922:	f7fd ffa3 	bl	800286c <st_word>
		} else {
			st_dword(buf + BPB_TotSec32, (DWORD)sz_vol);	/* Volume size in 32-bit LBA */
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8004926:	23f8      	movs	r3, #248	; 0xf8
 8004928:	9d00      	ldr	r5, [sp, #0]
 800492a:	756b      	strb	r3, [r5, #21]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800492c:	213f      	movs	r1, #63	; 0x3f
 800492e:	f105 0018 	add.w	r0, r5, #24
 8004932:	f7fd ff9b 	bl	800286c <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8004936:	21ff      	movs	r1, #255	; 0xff
 8004938:	f105 001a 	add.w	r0, r5, #26
 800493c:	f7fd ff96 	bl	800286c <st_word>
		st_dword(buf + BPB_HiddSec, (DWORD)b_vol);		/* Volume offset in the physical drive [sector] */
 8004940:	9902      	ldr	r1, [sp, #8]
 8004942:	f105 001c 	add.w	r0, r5, #28
 8004946:	f7fd ff95 	bl	8002874 <st_dword>
		if (fsty == FS_FAT32) {
 800494a:	f1b8 0f03 	cmp.w	r8, #3
 800494e:	d074      	beq.n	8004a3a <f_mkfs+0x476>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8004950:	f7fd fe23 	bl	800259a <get_fattime>
 8004954:	4601      	mov	r1, r0
 8004956:	9d00      	ldr	r5, [sp, #0]
 8004958:	f105 0027 	add.w	r0, r5, #39	; 0x27
 800495c:	f7fd ff8a 	bl	8002874 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8004960:	fa1f f18b 	uxth.w	r1, fp
 8004964:	f105 0016 	add.w	r0, r5, #22
 8004968:	f7fd ff80 	bl	800286c <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800496c:	2380      	movs	r3, #128	; 0x80
 800496e:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8004972:	2329      	movs	r3, #41	; 0x29
 8004974:	4628      	mov	r0, r5
 8004976:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800497a:	2213      	movs	r2, #19
 800497c:	f247 41c8 	movw	r1, #29896	; 0x74c8
 8004980:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004984:	302b      	adds	r0, #43	; 0x2b
 8004986:	f7fd ff7f 	bl	8002888 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800498a:	9b00      	ldr	r3, [sp, #0]
 800498c:	f503 75ff 	add.w	r5, r3, #510	; 0x1fe
 8004990:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004994:	4628      	mov	r0, r5
 8004996:	f7fd ff69 	bl	800286c <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 800499a:	2301      	movs	r3, #1
 800499c:	9a02      	ldr	r2, [sp, #8]
 800499e:	9900      	ldr	r1, [sp, #0]
 80049a0:	4620      	mov	r0, r4
 80049a2:	f7fd ff31 	bl	8002808 <disk_write>
 80049a6:	2800      	cmp	r0, #0
 80049a8:	f040 812e 	bne.w	8004c08 <f_mkfs+0x644>

		/* Create FSINFO record if needed */
		if (fsty == FS_FAT32) {
 80049ac:	f1b8 0f03 	cmp.w	r8, #3
 80049b0:	d06f      	beq.n	8004a92 <f_mkfs+0x4ce>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
		}

		/* Initialize FAT area */
		mem_set(buf, 0, sz_buf * ss);
 80049b2:	f426 72ff 	bic.w	r2, r6, #510	; 0x1fe
 80049b6:	f022 0201 	bic.w	r2, r2, #1
 80049ba:	2100      	movs	r1, #0
 80049bc:	9800      	ldr	r0, [sp, #0]
 80049be:	f7fd ff6c 	bl	800289a <mem_set>
		sect = b_fat;		/* FAT start sector */
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 80049c2:	f04f 0900 	mov.w	r9, #0
 80049c6:	f8cd b008 	str.w	fp, [sp, #8]
 80049ca:	f8cd a010 	str.w	sl, [sp, #16]
 80049ce:	f8dd a018 	ldr.w	sl, [sp, #24]
 80049d2:	f8dd b004 	ldr.w	fp, [sp, #4]
 80049d6:	45b9      	cmp	r9, r7
 80049d8:	f080 80b4 	bcs.w	8004b44 <f_mkfs+0x580>
			if (fsty == FS_FAT32) {
 80049dc:	f1b8 0f03 	cmp.w	r8, #3
 80049e0:	f000 8099 	beq.w	8004b16 <f_mkfs+0x552>
				st_dword(buf + 0, 0xFFFFFFF8);	/* FAT[0] */
				st_dword(buf + 4, 0xFFFFFFFF);	/* FAT[1] */
				st_dword(buf + 8, 0x0FFFFFFF);	/* FAT[2] (root directory) */
			} else {
				st_dword(buf + 0, (fsty == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FAT[1] */
 80049e4:	f1b8 0f01 	cmp.w	r8, #1
 80049e8:	f000 80a7 	beq.w	8004b3a <f_mkfs+0x576>
 80049ec:	f06f 0107 	mvn.w	r1, #7
 80049f0:	9800      	ldr	r0, [sp, #0]
 80049f2:	f7fd ff3f 	bl	8002874 <st_dword>
 80049f6:	9e02      	ldr	r6, [sp, #8]
			}
			nsect = sz_fat;		/* Number of FAT sectors */
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 80049f8:	4635      	mov	r5, r6
 80049fa:	455e      	cmp	r6, fp
 80049fc:	bf28      	it	cs
 80049fe:	465d      	movcs	r5, fp
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8004a00:	462b      	mov	r3, r5
 8004a02:	4652      	mov	r2, sl
 8004a04:	9900      	ldr	r1, [sp, #0]
 8004a06:	4620      	mov	r0, r4
 8004a08:	f7fd fefe 	bl	8002808 <disk_write>
 8004a0c:	2800      	cmp	r0, #0
 8004a0e:	f040 80fd 	bne.w	8004c0c <f_mkfs+0x648>
				mem_set(buf, 0, ss);	/* Rest of FAT all are cleared */
 8004a12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a16:	2100      	movs	r1, #0
 8004a18:	9800      	ldr	r0, [sp, #0]
 8004a1a:	f7fd ff3e 	bl	800289a <mem_set>
				sect += n; nsect -= n;
 8004a1e:	44aa      	add	sl, r5
			} while (nsect);
 8004a20:	1b76      	subs	r6, r6, r5
 8004a22:	d1e9      	bne.n	80049f8 <f_mkfs+0x434>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 8004a24:	f109 0901 	add.w	r9, r9, #1
 8004a28:	e7d5      	b.n	80049d6 <f_mkfs+0x412>
		st_word(buf + BPB_RootEntCnt, (WORD)((fsty == FS_FAT32) ? 0 : n_root));	/* Number of root directory entries */
 8004a2a:	2100      	movs	r1, #0
 8004a2c:	e76e      	b.n	800490c <f_mkfs+0x348>
			st_dword(buf + BPB_TotSec32, (DWORD)sz_vol);	/* Volume size in 32-bit LBA */
 8004a2e:	9b00      	ldr	r3, [sp, #0]
 8004a30:	f103 0020 	add.w	r0, r3, #32
 8004a34:	f7fd ff1e 	bl	8002874 <st_dword>
 8004a38:	e775      	b.n	8004926 <f_mkfs+0x362>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8004a3a:	f7fd fdae 	bl	800259a <get_fattime>
 8004a3e:	4601      	mov	r1, r0
 8004a40:	9d00      	ldr	r5, [sp, #0]
 8004a42:	f105 0043 	add.w	r0, r5, #67	; 0x43
 8004a46:	f7fd ff15 	bl	8002874 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8004a4a:	4659      	mov	r1, fp
 8004a4c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8004a50:	f7fd ff10 	bl	8002874 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8004a54:	2102      	movs	r1, #2
 8004a56:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 8004a5a:	f7fd ff0b 	bl	8002874 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8004a5e:	2101      	movs	r1, #1
 8004a60:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8004a64:	f7fd ff02 	bl	800286c <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8004a68:	2106      	movs	r1, #6
 8004a6a:	f105 0032 	add.w	r0, r5, #50	; 0x32
 8004a6e:	f7fd fefd 	bl	800286c <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8004a72:	2380      	movs	r3, #128	; 0x80
 8004a74:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8004a78:	2329      	movs	r3, #41	; 0x29
 8004a7a:	4628      	mov	r0, r5
 8004a7c:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8004a80:	2213      	movs	r2, #19
 8004a82:	f247 41b4 	movw	r1, #29876	; 0x74b4
 8004a86:	f6c0 0100 	movt	r1, #2048	; 0x800
 8004a8a:	3047      	adds	r0, #71	; 0x47
 8004a8c:	f7fd fefc 	bl	8002888 <mem_cpy>
 8004a90:	e77b      	b.n	800498a <f_mkfs+0x3c6>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8004a92:	2301      	movs	r3, #1
 8004a94:	9a02      	ldr	r2, [sp, #8]
 8004a96:	3206      	adds	r2, #6
 8004a98:	f8dd 9000 	ldr.w	r9, [sp]
 8004a9c:	4649      	mov	r1, r9
 8004a9e:	4620      	mov	r0, r4
 8004aa0:	f7fd feb2 	bl	8002808 <disk_write>
			mem_set(buf, 0, ss);
 8004aa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	4648      	mov	r0, r9
 8004aac:	f7fd fef5 	bl	800289a <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8004ab0:	f245 2152 	movw	r1, #21074	; 0x5252
 8004ab4:	f2c4 1161 	movt	r1, #16737	; 0x4161
 8004ab8:	4648      	mov	r0, r9
 8004aba:	f7fd fedb 	bl	8002874 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8004abe:	f247 2172 	movw	r1, #29298	; 0x7272
 8004ac2:	f2c6 1141 	movt	r1, #24897	; 0x6141
 8004ac6:	f8cd 9000 	str.w	r9, [sp]
 8004aca:	f509 70f2 	add.w	r0, r9, #484	; 0x1e4
 8004ace:	f7fd fed1 	bl	8002874 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8004ad2:	9904      	ldr	r1, [sp, #16]
 8004ad4:	3901      	subs	r1, #1
 8004ad6:	9b00      	ldr	r3, [sp, #0]
 8004ad8:	f503 70f4 	add.w	r0, r3, #488	; 0x1e8
 8004adc:	f7fd feca 	bl	8002874 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8004ae0:	2102      	movs	r1, #2
 8004ae2:	9b00      	ldr	r3, [sp, #0]
 8004ae4:	f503 70f6 	add.w	r0, r3, #492	; 0x1ec
 8004ae8:	f7fd fec4 	bl	8002874 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8004aec:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004af0:	4628      	mov	r0, r5
 8004af2:	f7fd febb 	bl	800286c <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8004af6:	2301      	movs	r3, #1
 8004af8:	9d02      	ldr	r5, [sp, #8]
 8004afa:	1dea      	adds	r2, r5, #7
 8004afc:	f8dd 9000 	ldr.w	r9, [sp]
 8004b00:	4649      	mov	r1, r9
 8004b02:	4620      	mov	r0, r4
 8004b04:	f7fd fe80 	bl	8002808 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8004b08:	2301      	movs	r3, #1
 8004b0a:	18ea      	adds	r2, r5, r3
 8004b0c:	4649      	mov	r1, r9
 8004b0e:	4620      	mov	r0, r4
 8004b10:	f7fd fe7a 	bl	8002808 <disk_write>
 8004b14:	e74d      	b.n	80049b2 <f_mkfs+0x3ee>
				st_dword(buf + 0, 0xFFFFFFF8);	/* FAT[0] */
 8004b16:	f06f 0107 	mvn.w	r1, #7
 8004b1a:	9d00      	ldr	r5, [sp, #0]
 8004b1c:	4628      	mov	r0, r5
 8004b1e:	f7fd fea9 	bl	8002874 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* FAT[1] */
 8004b22:	f04f 31ff 	mov.w	r1, #4294967295
 8004b26:	1d28      	adds	r0, r5, #4
 8004b28:	f7fd fea4 	bl	8002874 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* FAT[2] (root directory) */
 8004b2c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8004b30:	f105 0008 	add.w	r0, r5, #8
 8004b34:	f7fd fe9e 	bl	8002874 <st_dword>
 8004b38:	e75d      	b.n	80049f6 <f_mkfs+0x432>
				st_dword(buf + 0, (fsty == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FAT[1] */
 8004b3a:	f64f 71f8 	movw	r1, #65528	; 0xfff8
 8004b3e:	f2c0 01ff 	movt	r1, #255	; 0xff
 8004b42:	e755      	b.n	80049f0 <f_mkfs+0x42c>
 8004b44:	f8cd a018 	str.w	sl, [sp, #24]
 8004b48:	f8dd a010 	ldr.w	sl, [sp, #16]
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fsty == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8004b4c:	f1b8 0f03 	cmp.w	r8, #3
 8004b50:	d030      	beq.n	8004bb4 <f_mkfs+0x5f0>
 8004b52:	9f06      	ldr	r7, [sp, #24]
 8004b54:	9e08      	ldr	r6, [sp, #32]
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8004b56:	9b01      	ldr	r3, [sp, #4]
 8004b58:	42b3      	cmp	r3, r6
 8004b5a:	bf28      	it	cs
 8004b5c:	4633      	movcs	r3, r6
 8004b5e:	461d      	mov	r5, r3
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8004b60:	463a      	mov	r2, r7
 8004b62:	9900      	ldr	r1, [sp, #0]
 8004b64:	4620      	mov	r0, r4
 8004b66:	f7fd fe4f 	bl	8002808 <disk_write>
 8004b6a:	2800      	cmp	r0, #0
 8004b6c:	d150      	bne.n	8004c10 <f_mkfs+0x64c>
			sect += n; nsect -= n;
 8004b6e:	442f      	add	r7, r5
		} while (nsect);
 8004b70:	1b76      	subs	r6, r6, r5
 8004b72:	d1f0      	bne.n	8004b56 <f_mkfs+0x592>

	/* Determine system ID in the MBR partition table */
	if (FF_FS_EXFAT && fsty == FS_EXFAT) {
		sys = 0x07;			/* exFAT */
	} else {
		if (fsty == FS_FAT32) {
 8004b74:	f1b8 0f03 	cmp.w	r8, #3
 8004b78:	d01f      	beq.n	8004bba <f_mkfs+0x5f6>
			sys = 0x0C;		/* FAT32X */
		} else {
			if (sz_vol >= 0x10000) {
 8004b7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b80:	d21d      	bcs.n	8004bbe <f_mkfs+0x5fa>
				sys = 0x06;	/* FAT12/16 (large) */
			} else {
				sys = (fsty == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 : FAT12 */
 8004b82:	f1b8 0f02 	cmp.w	r8, #2
 8004b86:	d11c      	bne.n	8004bc2 <f_mkfs+0x5fe>
 8004b88:	2204      	movs	r2, #4
			if (disk_read(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Read the MBR */
			buf[MBR_Table + (ipart - 1) * SZ_PTE + PTE_System] = sys;			/* Set system ID */
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it back to the MBR */
		}
	} else {								/* Volume as a new single partition */
		if (!(fsopt & FM_SFD)) {	/* Create partition table if not in SFD */
 8004b8a:	9b03      	ldr	r3, [sp, #12]
 8004b8c:	b953      	cbnz	r3, 8004ba4 <f_mkfs+0x5e0>
			lba[0] = sz_vol, lba[1] = 0;
 8004b8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b90:	930a      	str	r3, [sp, #40]	; 0x28
 8004b92:	2300      	movs	r3, #0
 8004b94:	930b      	str	r3, [sp, #44]	; 0x2c
			fr = create_partition(pdrv, lba, sys, buf);
 8004b96:	9b00      	ldr	r3, [sp, #0]
 8004b98:	a90a      	add	r1, sp, #40	; 0x28
 8004b9a:	4620      	mov	r0, r4
 8004b9c:	f7ff f902 	bl	8003da4 <create_partition>
			if (fr != FR_OK) LEAVE_MKFS(fr);
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	b9a8      	cbnz	r0, 8004bd0 <f_mkfs+0x60c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	4611      	mov	r1, r2
 8004ba8:	4620      	mov	r0, r4
 8004baa:	f7fd fe3f 	bl	800282c <disk_ioctl>
 8004bae:	b950      	cbnz	r0, 8004bc6 <f_mkfs+0x602>

	LEAVE_MKFS(FR_OK);
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	e00d      	b.n	8004bd0 <f_mkfs+0x60c>
		nsect = (fsty == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8004bb4:	4656      	mov	r6, sl
 8004bb6:	9f06      	ldr	r7, [sp, #24]
 8004bb8:	e7cd      	b.n	8004b56 <f_mkfs+0x592>
			sys = 0x0C;		/* FAT32X */
 8004bba:	220c      	movs	r2, #12
 8004bbc:	e7e5      	b.n	8004b8a <f_mkfs+0x5c6>
				sys = 0x06;	/* FAT12/16 (large) */
 8004bbe:	2206      	movs	r2, #6
 8004bc0:	e7e3      	b.n	8004b8a <f_mkfs+0x5c6>
				sys = (fsty == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 : FAT12 */
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	e7e1      	b.n	8004b8a <f_mkfs+0x5c6>
	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e002      	b.n	8004bd0 <f_mkfs+0x60c>
	if (vol < 0) return FR_INVALID_DRIVE;
 8004bca:	230b      	movs	r3, #11
 8004bcc:	e000      	b.n	8004bd0 <f_mkfs+0x60c>
	if (ds & STA_NOINIT) return FR_NOT_READY;
 8004bce:	2303      	movs	r3, #3
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	b00f      	add	sp, #60	; 0x3c
 8004bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
 8004bd8:	230a      	movs	r3, #10
 8004bda:	e7f9      	b.n	8004bd0 <f_mkfs+0x60c>
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
 8004bdc:	2311      	movs	r3, #17
 8004bde:	e7f7      	b.n	8004bd0 <f_mkfs+0x60c>
	if (!buf) return FR_NOT_ENOUGH_CORE;
 8004be0:	2311      	movs	r3, #17
 8004be2:	e7f5      	b.n	8004bd0 <f_mkfs+0x60c>
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8004be4:	2301      	movs	r3, #1
 8004be6:	e7f3      	b.n	8004bd0 <f_mkfs+0x60c>
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128s */
 8004be8:	230e      	movs	r3, #14
 8004bea:	e7f1      	b.n	8004bd0 <f_mkfs+0x60c>
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
 8004bec:	2313      	movs	r3, #19
 8004bee:	e7ef      	b.n	8004bd0 <f_mkfs+0x60c>
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 8004bf0:	230e      	movs	r3, #14
 8004bf2:	e7ed      	b.n	8004bd0 <f_mkfs+0x60c>
			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
 8004bf4:	230e      	movs	r3, #14
 8004bf6:	e7eb      	b.n	8004bd0 <f_mkfs+0x60c>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 8004bf8:	230e      	movs	r3, #14
 8004bfa:	e7e9      	b.n	8004bd0 <f_mkfs+0x60c>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 8004bfc:	230e      	movs	r3, #14
 8004bfe:	e7e7      	b.n	8004bd0 <f_mkfs+0x60c>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 8004c00:	230e      	movs	r3, #14
 8004c02:	e7e5      	b.n	8004bd0 <f_mkfs+0x60c>
			if (fsty == FS_FAT12 && n_clst > MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters for FAT12 */
 8004c04:	230e      	movs	r3, #14
 8004c06:	e7e3      	b.n	8004bd0 <f_mkfs+0x60c>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e7e1      	b.n	8004bd0 <f_mkfs+0x60c>
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e7df      	b.n	8004bd0 <f_mkfs+0x60c>
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 8004c10:	2301      	movs	r3, #1
 8004c12:	e7dd      	b.n	8004bd0 <f_mkfs+0x60c>

08004c14 <ff_uni2oem>:
	const WCHAR *p;
	WCHAR c = 0, uc;
	UINT i = 0, n, li, hi;


	if (uni < 0x80) {	/* ASCII? */
 8004c14:	287f      	cmp	r0, #127	; 0x7f
 8004c16:	d907      	bls.n	8004c28 <ff_uni2oem+0x14>
		c = (WCHAR)uni;

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
 8004c18:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8004c1c:	d229      	bcs.n	8004c72 <ff_uni2oem+0x5e>
 8004c1e:	f5b1 7f69 	cmp.w	r1, #932	; 0x3a4
 8004c22:	d003      	beq.n	8004c2c <ff_uni2oem+0x18>
	WCHAR c = 0, uc;
 8004c24:	2000      	movs	r0, #0
			if (n != 0) c = p[i * 2 + 1];
		}
	}

	return c;
}
 8004c26:	4770      	bx	lr
		c = (WCHAR)uni;
 8004c28:	b280      	uxth	r0, r0
 8004c2a:	4770      	bx	lr
{
 8004c2c:	b430      	push	{r4, r5}
			uc = (WCHAR)uni;
 8004c2e:	b280      	uxth	r0, r0
			hi = sizeof CVTBL(uni2oem, FF_CODE_PAGE) / 4 - 1;
 8004c30:	f641 45dd 	movw	r5, #7389	; 0x1cdd
			li = 0;
 8004c34:	2400      	movs	r4, #0
			for (n = 16; n; n--) {
 8004c36:	2110      	movs	r1, #16
	UINT i = 0, n, li, hi;
 8004c38:	4623      	mov	r3, r4
			for (n = 16; n; n--) {
 8004c3a:	e001      	b.n	8004c40 <ff_uni2oem+0x2c>
					hi = i;
 8004c3c:	461d      	mov	r5, r3
			for (n = 16; n; n--) {
 8004c3e:	3901      	subs	r1, #1
 8004c40:	b169      	cbz	r1, 8004c5e <ff_uni2oem+0x4a>
				i = li + (hi - li) / 2;
 8004c42:	1b2b      	subs	r3, r5, r4
 8004c44:	eb04 0353 	add.w	r3, r4, r3, lsr #1
				if (uc == p[i * 2]) break;
 8004c48:	f64e 3214 	movw	r2, #60180	; 0xeb14
 8004c4c:	f6c0 0200 	movt	r2, #2048	; 0x800
 8004c50:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8004c54:	4282      	cmp	r2, r0
 8004c56:	d002      	beq.n	8004c5e <ff_uni2oem+0x4a>
				if (uc > p[i * 2]) {
 8004c58:	d2f0      	bcs.n	8004c3c <ff_uni2oem+0x28>
					li = i;
 8004c5a:	461c      	mov	r4, r3
 8004c5c:	e7ef      	b.n	8004c3e <ff_uni2oem+0x2a>
			if (n != 0) c = p[i * 2 + 1];
 8004c5e:	b151      	cbz	r1, 8004c76 <ff_uni2oem+0x62>
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	3302      	adds	r3, #2
 8004c64:	f64e 3214 	movw	r2, #60180	; 0xeb14
 8004c68:	f6c0 0200 	movt	r2, #2048	; 0x800
 8004c6c:	5a98      	ldrh	r0, [r3, r2]
}
 8004c6e:	bc30      	pop	{r4, r5}
 8004c70:	4770      	bx	lr
	WCHAR c = 0, uc;
 8004c72:	2000      	movs	r0, #0
 8004c74:	4770      	bx	lr
 8004c76:	2000      	movs	r0, #0
 8004c78:	e7f9      	b.n	8004c6e <ff_uni2oem+0x5a>

08004c7a <ff_oem2uni>:
	const WCHAR *p;
	WCHAR c = 0;
	UINT i = 0, n, li, hi;


	if (oem < 0x80) {	/* ASCII? */
 8004c7a:	287f      	cmp	r0, #127	; 0x7f
 8004c7c:	d928      	bls.n	8004cd0 <ff_oem2uni+0x56>
		c = oem;

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it valid code page? */
 8004c7e:	f5b1 7f69 	cmp.w	r1, #932	; 0x3a4
 8004c82:	d012      	beq.n	8004caa <ff_oem2uni+0x30>
	WCHAR c = 0;
 8004c84:	2000      	movs	r0, #0
 8004c86:	4770      	bx	lr
				i = li + (hi - li) / 2;
				if (oem == p[i * 2]) break;
				if (oem > p[i * 2]) {
					li = i;
				} else {
					hi = i;
 8004c88:	461d      	mov	r5, r3
			for (n = 16; n; n--) {
 8004c8a:	3901      	subs	r1, #1
 8004c8c:	b1a1      	cbz	r1, 8004cb8 <ff_oem2uni+0x3e>
				i = li + (hi - li) / 2;
 8004c8e:	1b2b      	subs	r3, r5, r4
 8004c90:	eb04 0353 	add.w	r3, r4, r3, lsr #1
				if (oem == p[i * 2]) break;
 8004c94:	f247 729c 	movw	r2, #30620	; 0x779c
 8004c98:	f6c0 0200 	movt	r2, #2048	; 0x800
 8004c9c:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8004ca0:	4282      	cmp	r2, r0
 8004ca2:	d009      	beq.n	8004cb8 <ff_oem2uni+0x3e>
				if (oem > p[i * 2]) {
 8004ca4:	d2f0      	bcs.n	8004c88 <ff_oem2uni+0xe>
					li = i;
 8004ca6:	461c      	mov	r4, r3
 8004ca8:	e7ef      	b.n	8004c8a <ff_oem2uni+0x10>
{
 8004caa:	b430      	push	{r4, r5}
			hi = sizeof CVTBL(oem2uni, FF_CODE_PAGE) / 4 - 1;
 8004cac:	f641 45dd 	movw	r5, #7389	; 0x1cdd
			li = 0;
 8004cb0:	2400      	movs	r4, #0
			for (n = 16; n; n--) {
 8004cb2:	2110      	movs	r1, #16
	UINT i = 0, n, li, hi;
 8004cb4:	4623      	mov	r3, r4
 8004cb6:	e7e9      	b.n	8004c8c <ff_oem2uni+0x12>
				}
			}
			if (n != 0) c = p[i * 2 + 1];
 8004cb8:	b141      	cbz	r1, 8004ccc <ff_oem2uni+0x52>
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	3302      	adds	r3, #2
 8004cbe:	f247 729c 	movw	r2, #30620	; 0x779c
 8004cc2:	f6c0 0200 	movt	r2, #2048	; 0x800
 8004cc6:	5a98      	ldrh	r0, [r3, r2]
		}
	}

	return c;
}
 8004cc8:	bc30      	pop	{r4, r5}
 8004cca:	4770      	bx	lr
	WCHAR c = 0;
 8004ccc:	2000      	movs	r0, #0
 8004cce:	e7fb      	b.n	8004cc8 <ff_oem2uni+0x4e>
}
 8004cd0:	4770      	bx	lr

08004cd2 <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
 8004cd2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8004cd6:	d24b      	bcs.n	8004d70 <ff_wtoupper+0x9e>
{
 8004cd8:	b4f0      	push	{r4, r5, r6, r7}
		uc = (WORD)uni;
 8004cda:	b287      	uxth	r7, r0
		p = uc < 0x1000 ? cvt1 : cvt2;
 8004cdc:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 8004ce0:	d204      	bcs.n	8004cec <ff_wtoupper+0x1a>
 8004ce2:	f247 43ec 	movw	r3, #29932	; 0x74ec
 8004ce6:	f6c0 0300 	movt	r3, #2048	; 0x800
 8004cea:	e005      	b.n	8004cf8 <ff_wtoupper+0x26>
 8004cec:	f247 63e0 	movw	r3, #30432	; 0x76e0
 8004cf0:	f6c0 0300 	movt	r3, #2048	; 0x800
 8004cf4:	e000      	b.n	8004cf8 <ff_wtoupper+0x26>
		for (;;) {
			bc = *p++;								/* Get the block base */
			if (bc == 0 || uc < bc) break;			/* Not matched? */
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8004cf6:	4633      	mov	r3, r6
			bc = *p++;								/* Get the block base */
 8004cf8:	881a      	ldrh	r2, [r3, #0]
			if (bc == 0 || uc < bc) break;			/* Not matched? */
 8004cfa:	b1d2      	cbz	r2, 8004d32 <ff_wtoupper+0x60>
 8004cfc:	4297      	cmp	r7, r2
 8004cfe:	d318      	bcc.n	8004d32 <ff_wtoupper+0x60>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8004d00:	1d1e      	adds	r6, r3, #4
 8004d02:	885b      	ldrh	r3, [r3, #2]
 8004d04:	0a19      	lsrs	r1, r3, #8
 8004d06:	b2db      	uxtb	r3, r3
			if (uc < bc + nc) {	/* In the block? */
 8004d08:	b284      	uxth	r4, r0
 8004d0a:	189d      	adds	r5, r3, r2
 8004d0c:	42ac      	cmp	r4, r5
 8004d0e:	db04      	blt.n	8004d1a <ff_wtoupper+0x48>
				case 7: uc -= 80; break;			/* Shift -80 */
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
 8004d10:	2900      	cmp	r1, #0
 8004d12:	d1f0      	bne.n	8004cf6 <ff_wtoupper+0x24>
 8004d14:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8004d18:	e7ee      	b.n	8004cf8 <ff_wtoupper+0x26>
				switch (cmd) {
 8004d1a:	2908      	cmp	r1, #8
 8004d1c:	d809      	bhi.n	8004d32 <ff_wtoupper+0x60>
 8004d1e:	e8df f001 	tbb	[pc, r1]
 8004d22:	0b05      	.short	0x0b05
 8004d24:	1a171411 	.word	0x1a171411
 8004d28:	201d      	.short	0x201d
 8004d2a:	23          	.byte	0x23
 8004d2b:	00          	.byte	0x00
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
 8004d2c:	1aa4      	subs	r4, r4, r2
 8004d2e:	f836 7014 	ldrh.w	r7, [r6, r4, lsl #1]
		}
		uni = uc;
 8004d32:	4638      	mov	r0, r7
	}

	return uni;
}
 8004d34:	bcf0      	pop	{r4, r5, r6, r7}
 8004d36:	4770      	bx	lr
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
 8004d38:	1aba      	subs	r2, r7, r2
 8004d3a:	f002 0301 	and.w	r3, r2, #1
 8004d3e:	1aff      	subs	r7, r7, r3
 8004d40:	b2bf      	uxth	r7, r7
 8004d42:	e7f6      	b.n	8004d32 <ff_wtoupper+0x60>
				case 2: uc -= 16; break;			/* Shift -16 */
 8004d44:	3f10      	subs	r7, #16
 8004d46:	b2bf      	uxth	r7, r7
 8004d48:	e7f3      	b.n	8004d32 <ff_wtoupper+0x60>
				case 3:	uc -= 32; break;			/* Shift -32 */
 8004d4a:	3f20      	subs	r7, #32
 8004d4c:	b2bf      	uxth	r7, r7
 8004d4e:	e7f0      	b.n	8004d32 <ff_wtoupper+0x60>
				case 4:	uc -= 48; break;			/* Shift -48 */
 8004d50:	3f30      	subs	r7, #48	; 0x30
 8004d52:	b2bf      	uxth	r7, r7
 8004d54:	e7ed      	b.n	8004d32 <ff_wtoupper+0x60>
				case 5:	uc -= 26; break;			/* Shift -26 */
 8004d56:	3f1a      	subs	r7, #26
 8004d58:	b2bf      	uxth	r7, r7
 8004d5a:	e7ea      	b.n	8004d32 <ff_wtoupper+0x60>
				case 6:	uc += 8; break;				/* Shift +8 */
 8004d5c:	3708      	adds	r7, #8
 8004d5e:	b2bf      	uxth	r7, r7
 8004d60:	e7e7      	b.n	8004d32 <ff_wtoupper+0x60>
				case 7: uc -= 80; break;			/* Shift -80 */
 8004d62:	3f50      	subs	r7, #80	; 0x50
 8004d64:	b2bf      	uxth	r7, r7
 8004d66:	e7e4      	b.n	8004d32 <ff_wtoupper+0x60>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
 8004d68:	f5a7 57e3 	sub.w	r7, r7, #7264	; 0x1c60
 8004d6c:	b2bf      	uxth	r7, r7
 8004d6e:	e7e0      	b.n	8004d32 <ff_wtoupper+0x60>
}
 8004d70:	4770      	bx	lr
	...

08004d74 <__errno>:
 8004d74:	4b01      	ldr	r3, [pc, #4]	; (8004d7c <__errno+0x8>)
 8004d76:	6818      	ldr	r0, [r3, #0]
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	20000008 	.word	0x20000008

08004d80 <__libc_init_array>:
 8004d80:	b570      	push	{r4, r5, r6, lr}
 8004d82:	4e0d      	ldr	r6, [pc, #52]	; (8004db8 <__libc_init_array+0x38>)
 8004d84:	4c0d      	ldr	r4, [pc, #52]	; (8004dbc <__libc_init_array+0x3c>)
 8004d86:	1ba4      	subs	r4, r4, r6
 8004d88:	10a4      	asrs	r4, r4, #2
 8004d8a:	2500      	movs	r5, #0
 8004d8c:	42a5      	cmp	r5, r4
 8004d8e:	d109      	bne.n	8004da4 <__libc_init_array+0x24>
 8004d90:	4e0b      	ldr	r6, [pc, #44]	; (8004dc0 <__libc_init_array+0x40>)
 8004d92:	4c0c      	ldr	r4, [pc, #48]	; (8004dc4 <__libc_init_array+0x44>)
 8004d94:	f002 f866 	bl	8006e64 <_init>
 8004d98:	1ba4      	subs	r4, r4, r6
 8004d9a:	10a4      	asrs	r4, r4, #2
 8004d9c:	2500      	movs	r5, #0
 8004d9e:	42a5      	cmp	r5, r4
 8004da0:	d105      	bne.n	8004dae <__libc_init_array+0x2e>
 8004da2:	bd70      	pop	{r4, r5, r6, pc}
 8004da4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004da8:	4798      	blx	r3
 8004daa:	3501      	adds	r5, #1
 8004dac:	e7ee      	b.n	8004d8c <__libc_init_array+0xc>
 8004dae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004db2:	4798      	blx	r3
 8004db4:	3501      	adds	r5, #1
 8004db6:	e7f2      	b.n	8004d9e <__libc_init_array+0x1e>
 8004db8:	080160e8 	.word	0x080160e8
 8004dbc:	080160e8 	.word	0x080160e8
 8004dc0:	080160e8 	.word	0x080160e8
 8004dc4:	080160ec 	.word	0x080160ec

08004dc8 <__ascii_mbtowc>:
 8004dc8:	b082      	sub	sp, #8
 8004dca:	b901      	cbnz	r1, 8004dce <__ascii_mbtowc+0x6>
 8004dcc:	a901      	add	r1, sp, #4
 8004dce:	b142      	cbz	r2, 8004de2 <__ascii_mbtowc+0x1a>
 8004dd0:	b14b      	cbz	r3, 8004de6 <__ascii_mbtowc+0x1e>
 8004dd2:	7813      	ldrb	r3, [r2, #0]
 8004dd4:	600b      	str	r3, [r1, #0]
 8004dd6:	7812      	ldrb	r2, [r2, #0]
 8004dd8:	1c10      	adds	r0, r2, #0
 8004dda:	bf18      	it	ne
 8004ddc:	2001      	movne	r0, #1
 8004dde:	b002      	add	sp, #8
 8004de0:	4770      	bx	lr
 8004de2:	4610      	mov	r0, r2
 8004de4:	e7fb      	b.n	8004dde <__ascii_mbtowc+0x16>
 8004de6:	f06f 0001 	mvn.w	r0, #1
 8004dea:	e7f8      	b.n	8004dde <__ascii_mbtowc+0x16>

08004dec <memset>:
 8004dec:	4402      	add	r2, r0
 8004dee:	4603      	mov	r3, r0
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d100      	bne.n	8004df6 <memset+0xa>
 8004df4:	4770      	bx	lr
 8004df6:	f803 1b01 	strb.w	r1, [r3], #1
 8004dfa:	e7f9      	b.n	8004df0 <memset+0x4>

08004dfc <__cvt>:
 8004dfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e00:	ec55 4b10 	vmov	r4, r5, d0
 8004e04:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004e06:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004e0a:	2d00      	cmp	r5, #0
 8004e0c:	460e      	mov	r6, r1
 8004e0e:	4691      	mov	r9, r2
 8004e10:	4619      	mov	r1, r3
 8004e12:	bfb8      	it	lt
 8004e14:	4622      	movlt	r2, r4
 8004e16:	462b      	mov	r3, r5
 8004e18:	f027 0720 	bic.w	r7, r7, #32
 8004e1c:	bfbb      	ittet	lt
 8004e1e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004e22:	461d      	movlt	r5, r3
 8004e24:	2300      	movge	r3, #0
 8004e26:	232d      	movlt	r3, #45	; 0x2d
 8004e28:	bfb8      	it	lt
 8004e2a:	4614      	movlt	r4, r2
 8004e2c:	2f46      	cmp	r7, #70	; 0x46
 8004e2e:	700b      	strb	r3, [r1, #0]
 8004e30:	d004      	beq.n	8004e3c <__cvt+0x40>
 8004e32:	2f45      	cmp	r7, #69	; 0x45
 8004e34:	d100      	bne.n	8004e38 <__cvt+0x3c>
 8004e36:	3601      	adds	r6, #1
 8004e38:	2102      	movs	r1, #2
 8004e3a:	e000      	b.n	8004e3e <__cvt+0x42>
 8004e3c:	2103      	movs	r1, #3
 8004e3e:	ab03      	add	r3, sp, #12
 8004e40:	9301      	str	r3, [sp, #4]
 8004e42:	ab02      	add	r3, sp, #8
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	4632      	mov	r2, r6
 8004e48:	4653      	mov	r3, sl
 8004e4a:	ec45 4b10 	vmov	d0, r4, r5
 8004e4e:	f000 fcf3 	bl	8005838 <_dtoa_r>
 8004e52:	2f47      	cmp	r7, #71	; 0x47
 8004e54:	4680      	mov	r8, r0
 8004e56:	d102      	bne.n	8004e5e <__cvt+0x62>
 8004e58:	f019 0f01 	tst.w	r9, #1
 8004e5c:	d026      	beq.n	8004eac <__cvt+0xb0>
 8004e5e:	2f46      	cmp	r7, #70	; 0x46
 8004e60:	eb08 0906 	add.w	r9, r8, r6
 8004e64:	d111      	bne.n	8004e8a <__cvt+0x8e>
 8004e66:	f898 3000 	ldrb.w	r3, [r8]
 8004e6a:	2b30      	cmp	r3, #48	; 0x30
 8004e6c:	d10a      	bne.n	8004e84 <__cvt+0x88>
 8004e6e:	2200      	movs	r2, #0
 8004e70:	2300      	movs	r3, #0
 8004e72:	4620      	mov	r0, r4
 8004e74:	4629      	mov	r1, r5
 8004e76:	f7fb fe3f 	bl	8000af8 <__aeabi_dcmpeq>
 8004e7a:	b918      	cbnz	r0, 8004e84 <__cvt+0x88>
 8004e7c:	f1c6 0601 	rsb	r6, r6, #1
 8004e80:	f8ca 6000 	str.w	r6, [sl]
 8004e84:	f8da 3000 	ldr.w	r3, [sl]
 8004e88:	4499      	add	r9, r3
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	4620      	mov	r0, r4
 8004e90:	4629      	mov	r1, r5
 8004e92:	f7fb fe31 	bl	8000af8 <__aeabi_dcmpeq>
 8004e96:	b938      	cbnz	r0, 8004ea8 <__cvt+0xac>
 8004e98:	2230      	movs	r2, #48	; 0x30
 8004e9a:	9b03      	ldr	r3, [sp, #12]
 8004e9c:	454b      	cmp	r3, r9
 8004e9e:	d205      	bcs.n	8004eac <__cvt+0xb0>
 8004ea0:	1c59      	adds	r1, r3, #1
 8004ea2:	9103      	str	r1, [sp, #12]
 8004ea4:	701a      	strb	r2, [r3, #0]
 8004ea6:	e7f8      	b.n	8004e9a <__cvt+0x9e>
 8004ea8:	f8cd 900c 	str.w	r9, [sp, #12]
 8004eac:	9b03      	ldr	r3, [sp, #12]
 8004eae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004eb0:	eba3 0308 	sub.w	r3, r3, r8
 8004eb4:	4640      	mov	r0, r8
 8004eb6:	6013      	str	r3, [r2, #0]
 8004eb8:	b004      	add	sp, #16
 8004eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004ebe <__exponent>:
 8004ebe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ec0:	2900      	cmp	r1, #0
 8004ec2:	4604      	mov	r4, r0
 8004ec4:	bfba      	itte	lt
 8004ec6:	4249      	neglt	r1, r1
 8004ec8:	232d      	movlt	r3, #45	; 0x2d
 8004eca:	232b      	movge	r3, #43	; 0x2b
 8004ecc:	2909      	cmp	r1, #9
 8004ece:	f804 2b02 	strb.w	r2, [r4], #2
 8004ed2:	7043      	strb	r3, [r0, #1]
 8004ed4:	dd20      	ble.n	8004f18 <__exponent+0x5a>
 8004ed6:	f10d 0307 	add.w	r3, sp, #7
 8004eda:	461f      	mov	r7, r3
 8004edc:	260a      	movs	r6, #10
 8004ede:	fb91 f5f6 	sdiv	r5, r1, r6
 8004ee2:	fb06 1115 	mls	r1, r6, r5, r1
 8004ee6:	3130      	adds	r1, #48	; 0x30
 8004ee8:	2d09      	cmp	r5, #9
 8004eea:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004eee:	f103 32ff 	add.w	r2, r3, #4294967295
 8004ef2:	4629      	mov	r1, r5
 8004ef4:	dc09      	bgt.n	8004f0a <__exponent+0x4c>
 8004ef6:	3130      	adds	r1, #48	; 0x30
 8004ef8:	3b02      	subs	r3, #2
 8004efa:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004efe:	42bb      	cmp	r3, r7
 8004f00:	4622      	mov	r2, r4
 8004f02:	d304      	bcc.n	8004f0e <__exponent+0x50>
 8004f04:	1a10      	subs	r0, r2, r0
 8004f06:	b003      	add	sp, #12
 8004f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	e7e7      	b.n	8004ede <__exponent+0x20>
 8004f0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f12:	f804 2b01 	strb.w	r2, [r4], #1
 8004f16:	e7f2      	b.n	8004efe <__exponent+0x40>
 8004f18:	2330      	movs	r3, #48	; 0x30
 8004f1a:	4419      	add	r1, r3
 8004f1c:	7083      	strb	r3, [r0, #2]
 8004f1e:	1d02      	adds	r2, r0, #4
 8004f20:	70c1      	strb	r1, [r0, #3]
 8004f22:	e7ef      	b.n	8004f04 <__exponent+0x46>

08004f24 <_printf_float>:
 8004f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f28:	b08d      	sub	sp, #52	; 0x34
 8004f2a:	460c      	mov	r4, r1
 8004f2c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004f30:	4616      	mov	r6, r2
 8004f32:	461f      	mov	r7, r3
 8004f34:	4605      	mov	r5, r0
 8004f36:	f001 fa37 	bl	80063a8 <_localeconv_r>
 8004f3a:	6803      	ldr	r3, [r0, #0]
 8004f3c:	9304      	str	r3, [sp, #16]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7fb f95e 	bl	8000200 <strlen>
 8004f44:	2300      	movs	r3, #0
 8004f46:	930a      	str	r3, [sp, #40]	; 0x28
 8004f48:	f8d8 3000 	ldr.w	r3, [r8]
 8004f4c:	9005      	str	r0, [sp, #20]
 8004f4e:	3307      	adds	r3, #7
 8004f50:	f023 0307 	bic.w	r3, r3, #7
 8004f54:	f103 0208 	add.w	r2, r3, #8
 8004f58:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004f5c:	f8d4 b000 	ldr.w	fp, [r4]
 8004f60:	f8c8 2000 	str.w	r2, [r8]
 8004f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f68:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004f6c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004f70:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004f74:	9307      	str	r3, [sp, #28]
 8004f76:	f8cd 8018 	str.w	r8, [sp, #24]
 8004f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f7e:	4ba7      	ldr	r3, [pc, #668]	; (800521c <_printf_float+0x2f8>)
 8004f80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f84:	f7fb fdea 	bl	8000b5c <__aeabi_dcmpun>
 8004f88:	bb70      	cbnz	r0, 8004fe8 <_printf_float+0xc4>
 8004f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f8e:	4ba3      	ldr	r3, [pc, #652]	; (800521c <_printf_float+0x2f8>)
 8004f90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f94:	f7fb fdc4 	bl	8000b20 <__aeabi_dcmple>
 8004f98:	bb30      	cbnz	r0, 8004fe8 <_printf_float+0xc4>
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	4640      	mov	r0, r8
 8004fa0:	4649      	mov	r1, r9
 8004fa2:	f7fb fdb3 	bl	8000b0c <__aeabi_dcmplt>
 8004fa6:	b110      	cbz	r0, 8004fae <_printf_float+0x8a>
 8004fa8:	232d      	movs	r3, #45	; 0x2d
 8004faa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fae:	4a9c      	ldr	r2, [pc, #624]	; (8005220 <_printf_float+0x2fc>)
 8004fb0:	4b9c      	ldr	r3, [pc, #624]	; (8005224 <_printf_float+0x300>)
 8004fb2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004fb6:	bf8c      	ite	hi
 8004fb8:	4690      	movhi	r8, r2
 8004fba:	4698      	movls	r8, r3
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	f02b 0204 	bic.w	r2, fp, #4
 8004fc2:	6123      	str	r3, [r4, #16]
 8004fc4:	6022      	str	r2, [r4, #0]
 8004fc6:	f04f 0900 	mov.w	r9, #0
 8004fca:	9700      	str	r7, [sp, #0]
 8004fcc:	4633      	mov	r3, r6
 8004fce:	aa0b      	add	r2, sp, #44	; 0x2c
 8004fd0:	4621      	mov	r1, r4
 8004fd2:	4628      	mov	r0, r5
 8004fd4:	f000 f9e6 	bl	80053a4 <_printf_common>
 8004fd8:	3001      	adds	r0, #1
 8004fda:	f040 808d 	bne.w	80050f8 <_printf_float+0x1d4>
 8004fde:	f04f 30ff 	mov.w	r0, #4294967295
 8004fe2:	b00d      	add	sp, #52	; 0x34
 8004fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fe8:	4642      	mov	r2, r8
 8004fea:	464b      	mov	r3, r9
 8004fec:	4640      	mov	r0, r8
 8004fee:	4649      	mov	r1, r9
 8004ff0:	f7fb fdb4 	bl	8000b5c <__aeabi_dcmpun>
 8004ff4:	b110      	cbz	r0, 8004ffc <_printf_float+0xd8>
 8004ff6:	4a8c      	ldr	r2, [pc, #560]	; (8005228 <_printf_float+0x304>)
 8004ff8:	4b8c      	ldr	r3, [pc, #560]	; (800522c <_printf_float+0x308>)
 8004ffa:	e7da      	b.n	8004fb2 <_printf_float+0x8e>
 8004ffc:	6861      	ldr	r1, [r4, #4]
 8004ffe:	1c4b      	adds	r3, r1, #1
 8005000:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8005004:	a80a      	add	r0, sp, #40	; 0x28
 8005006:	d13e      	bne.n	8005086 <_printf_float+0x162>
 8005008:	2306      	movs	r3, #6
 800500a:	6063      	str	r3, [r4, #4]
 800500c:	2300      	movs	r3, #0
 800500e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005012:	ab09      	add	r3, sp, #36	; 0x24
 8005014:	9300      	str	r3, [sp, #0]
 8005016:	ec49 8b10 	vmov	d0, r8, r9
 800501a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800501e:	6022      	str	r2, [r4, #0]
 8005020:	f8cd a004 	str.w	sl, [sp, #4]
 8005024:	6861      	ldr	r1, [r4, #4]
 8005026:	4628      	mov	r0, r5
 8005028:	f7ff fee8 	bl	8004dfc <__cvt>
 800502c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8005030:	2b47      	cmp	r3, #71	; 0x47
 8005032:	4680      	mov	r8, r0
 8005034:	d109      	bne.n	800504a <_printf_float+0x126>
 8005036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005038:	1cd8      	adds	r0, r3, #3
 800503a:	db02      	blt.n	8005042 <_printf_float+0x11e>
 800503c:	6862      	ldr	r2, [r4, #4]
 800503e:	4293      	cmp	r3, r2
 8005040:	dd47      	ble.n	80050d2 <_printf_float+0x1ae>
 8005042:	f1aa 0a02 	sub.w	sl, sl, #2
 8005046:	fa5f fa8a 	uxtb.w	sl, sl
 800504a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800504e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005050:	d824      	bhi.n	800509c <_printf_float+0x178>
 8005052:	3901      	subs	r1, #1
 8005054:	4652      	mov	r2, sl
 8005056:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800505a:	9109      	str	r1, [sp, #36]	; 0x24
 800505c:	f7ff ff2f 	bl	8004ebe <__exponent>
 8005060:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005062:	1813      	adds	r3, r2, r0
 8005064:	2a01      	cmp	r2, #1
 8005066:	4681      	mov	r9, r0
 8005068:	6123      	str	r3, [r4, #16]
 800506a:	dc02      	bgt.n	8005072 <_printf_float+0x14e>
 800506c:	6822      	ldr	r2, [r4, #0]
 800506e:	07d1      	lsls	r1, r2, #31
 8005070:	d501      	bpl.n	8005076 <_printf_float+0x152>
 8005072:	3301      	adds	r3, #1
 8005074:	6123      	str	r3, [r4, #16]
 8005076:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800507a:	2b00      	cmp	r3, #0
 800507c:	d0a5      	beq.n	8004fca <_printf_float+0xa6>
 800507e:	232d      	movs	r3, #45	; 0x2d
 8005080:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005084:	e7a1      	b.n	8004fca <_printf_float+0xa6>
 8005086:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800508a:	f000 8177 	beq.w	800537c <_printf_float+0x458>
 800508e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005092:	d1bb      	bne.n	800500c <_printf_float+0xe8>
 8005094:	2900      	cmp	r1, #0
 8005096:	d1b9      	bne.n	800500c <_printf_float+0xe8>
 8005098:	2301      	movs	r3, #1
 800509a:	e7b6      	b.n	800500a <_printf_float+0xe6>
 800509c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80050a0:	d119      	bne.n	80050d6 <_printf_float+0x1b2>
 80050a2:	2900      	cmp	r1, #0
 80050a4:	6863      	ldr	r3, [r4, #4]
 80050a6:	dd0c      	ble.n	80050c2 <_printf_float+0x19e>
 80050a8:	6121      	str	r1, [r4, #16]
 80050aa:	b913      	cbnz	r3, 80050b2 <_printf_float+0x18e>
 80050ac:	6822      	ldr	r2, [r4, #0]
 80050ae:	07d2      	lsls	r2, r2, #31
 80050b0:	d502      	bpl.n	80050b8 <_printf_float+0x194>
 80050b2:	3301      	adds	r3, #1
 80050b4:	440b      	add	r3, r1
 80050b6:	6123      	str	r3, [r4, #16]
 80050b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050ba:	65a3      	str	r3, [r4, #88]	; 0x58
 80050bc:	f04f 0900 	mov.w	r9, #0
 80050c0:	e7d9      	b.n	8005076 <_printf_float+0x152>
 80050c2:	b913      	cbnz	r3, 80050ca <_printf_float+0x1a6>
 80050c4:	6822      	ldr	r2, [r4, #0]
 80050c6:	07d0      	lsls	r0, r2, #31
 80050c8:	d501      	bpl.n	80050ce <_printf_float+0x1aa>
 80050ca:	3302      	adds	r3, #2
 80050cc:	e7f3      	b.n	80050b6 <_printf_float+0x192>
 80050ce:	2301      	movs	r3, #1
 80050d0:	e7f1      	b.n	80050b6 <_printf_float+0x192>
 80050d2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80050d6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80050da:	4293      	cmp	r3, r2
 80050dc:	db05      	blt.n	80050ea <_printf_float+0x1c6>
 80050de:	6822      	ldr	r2, [r4, #0]
 80050e0:	6123      	str	r3, [r4, #16]
 80050e2:	07d1      	lsls	r1, r2, #31
 80050e4:	d5e8      	bpl.n	80050b8 <_printf_float+0x194>
 80050e6:	3301      	adds	r3, #1
 80050e8:	e7e5      	b.n	80050b6 <_printf_float+0x192>
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	bfd4      	ite	le
 80050ee:	f1c3 0302 	rsble	r3, r3, #2
 80050f2:	2301      	movgt	r3, #1
 80050f4:	4413      	add	r3, r2
 80050f6:	e7de      	b.n	80050b6 <_printf_float+0x192>
 80050f8:	6823      	ldr	r3, [r4, #0]
 80050fa:	055a      	lsls	r2, r3, #21
 80050fc:	d407      	bmi.n	800510e <_printf_float+0x1ea>
 80050fe:	6923      	ldr	r3, [r4, #16]
 8005100:	4642      	mov	r2, r8
 8005102:	4631      	mov	r1, r6
 8005104:	4628      	mov	r0, r5
 8005106:	47b8      	blx	r7
 8005108:	3001      	adds	r0, #1
 800510a:	d12b      	bne.n	8005164 <_printf_float+0x240>
 800510c:	e767      	b.n	8004fde <_printf_float+0xba>
 800510e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005112:	f240 80dc 	bls.w	80052ce <_printf_float+0x3aa>
 8005116:	2200      	movs	r2, #0
 8005118:	2300      	movs	r3, #0
 800511a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800511e:	f7fb fceb 	bl	8000af8 <__aeabi_dcmpeq>
 8005122:	2800      	cmp	r0, #0
 8005124:	d033      	beq.n	800518e <_printf_float+0x26a>
 8005126:	2301      	movs	r3, #1
 8005128:	4a41      	ldr	r2, [pc, #260]	; (8005230 <_printf_float+0x30c>)
 800512a:	4631      	mov	r1, r6
 800512c:	4628      	mov	r0, r5
 800512e:	47b8      	blx	r7
 8005130:	3001      	adds	r0, #1
 8005132:	f43f af54 	beq.w	8004fde <_printf_float+0xba>
 8005136:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800513a:	429a      	cmp	r2, r3
 800513c:	db02      	blt.n	8005144 <_printf_float+0x220>
 800513e:	6823      	ldr	r3, [r4, #0]
 8005140:	07d8      	lsls	r0, r3, #31
 8005142:	d50f      	bpl.n	8005164 <_printf_float+0x240>
 8005144:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005148:	4631      	mov	r1, r6
 800514a:	4628      	mov	r0, r5
 800514c:	47b8      	blx	r7
 800514e:	3001      	adds	r0, #1
 8005150:	f43f af45 	beq.w	8004fde <_printf_float+0xba>
 8005154:	f04f 0800 	mov.w	r8, #0
 8005158:	f104 091a 	add.w	r9, r4, #26
 800515c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800515e:	3b01      	subs	r3, #1
 8005160:	4543      	cmp	r3, r8
 8005162:	dc09      	bgt.n	8005178 <_printf_float+0x254>
 8005164:	6823      	ldr	r3, [r4, #0]
 8005166:	079b      	lsls	r3, r3, #30
 8005168:	f100 8103 	bmi.w	8005372 <_printf_float+0x44e>
 800516c:	68e0      	ldr	r0, [r4, #12]
 800516e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005170:	4298      	cmp	r0, r3
 8005172:	bfb8      	it	lt
 8005174:	4618      	movlt	r0, r3
 8005176:	e734      	b.n	8004fe2 <_printf_float+0xbe>
 8005178:	2301      	movs	r3, #1
 800517a:	464a      	mov	r2, r9
 800517c:	4631      	mov	r1, r6
 800517e:	4628      	mov	r0, r5
 8005180:	47b8      	blx	r7
 8005182:	3001      	adds	r0, #1
 8005184:	f43f af2b 	beq.w	8004fde <_printf_float+0xba>
 8005188:	f108 0801 	add.w	r8, r8, #1
 800518c:	e7e6      	b.n	800515c <_printf_float+0x238>
 800518e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005190:	2b00      	cmp	r3, #0
 8005192:	dc2b      	bgt.n	80051ec <_printf_float+0x2c8>
 8005194:	2301      	movs	r3, #1
 8005196:	4a26      	ldr	r2, [pc, #152]	; (8005230 <_printf_float+0x30c>)
 8005198:	4631      	mov	r1, r6
 800519a:	4628      	mov	r0, r5
 800519c:	47b8      	blx	r7
 800519e:	3001      	adds	r0, #1
 80051a0:	f43f af1d 	beq.w	8004fde <_printf_float+0xba>
 80051a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051a6:	b923      	cbnz	r3, 80051b2 <_printf_float+0x28e>
 80051a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051aa:	b913      	cbnz	r3, 80051b2 <_printf_float+0x28e>
 80051ac:	6823      	ldr	r3, [r4, #0]
 80051ae:	07d9      	lsls	r1, r3, #31
 80051b0:	d5d8      	bpl.n	8005164 <_printf_float+0x240>
 80051b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051b6:	4631      	mov	r1, r6
 80051b8:	4628      	mov	r0, r5
 80051ba:	47b8      	blx	r7
 80051bc:	3001      	adds	r0, #1
 80051be:	f43f af0e 	beq.w	8004fde <_printf_float+0xba>
 80051c2:	f04f 0900 	mov.w	r9, #0
 80051c6:	f104 0a1a 	add.w	sl, r4, #26
 80051ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051cc:	425b      	negs	r3, r3
 80051ce:	454b      	cmp	r3, r9
 80051d0:	dc01      	bgt.n	80051d6 <_printf_float+0x2b2>
 80051d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051d4:	e794      	b.n	8005100 <_printf_float+0x1dc>
 80051d6:	2301      	movs	r3, #1
 80051d8:	4652      	mov	r2, sl
 80051da:	4631      	mov	r1, r6
 80051dc:	4628      	mov	r0, r5
 80051de:	47b8      	blx	r7
 80051e0:	3001      	adds	r0, #1
 80051e2:	f43f aefc 	beq.w	8004fde <_printf_float+0xba>
 80051e6:	f109 0901 	add.w	r9, r9, #1
 80051ea:	e7ee      	b.n	80051ca <_printf_float+0x2a6>
 80051ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80051ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80051f0:	429a      	cmp	r2, r3
 80051f2:	bfa8      	it	ge
 80051f4:	461a      	movge	r2, r3
 80051f6:	2a00      	cmp	r2, #0
 80051f8:	4691      	mov	r9, r2
 80051fa:	dd07      	ble.n	800520c <_printf_float+0x2e8>
 80051fc:	4613      	mov	r3, r2
 80051fe:	4631      	mov	r1, r6
 8005200:	4642      	mov	r2, r8
 8005202:	4628      	mov	r0, r5
 8005204:	47b8      	blx	r7
 8005206:	3001      	adds	r0, #1
 8005208:	f43f aee9 	beq.w	8004fde <_printf_float+0xba>
 800520c:	f104 031a 	add.w	r3, r4, #26
 8005210:	f04f 0b00 	mov.w	fp, #0
 8005214:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005218:	9306      	str	r3, [sp, #24]
 800521a:	e015      	b.n	8005248 <_printf_float+0x324>
 800521c:	7fefffff 	.word	0x7fefffff
 8005220:	08015e9a 	.word	0x08015e9a
 8005224:	08015e96 	.word	0x08015e96
 8005228:	08015ea2 	.word	0x08015ea2
 800522c:	08015e9e 	.word	0x08015e9e
 8005230:	08015ea6 	.word	0x08015ea6
 8005234:	2301      	movs	r3, #1
 8005236:	9a06      	ldr	r2, [sp, #24]
 8005238:	4631      	mov	r1, r6
 800523a:	4628      	mov	r0, r5
 800523c:	47b8      	blx	r7
 800523e:	3001      	adds	r0, #1
 8005240:	f43f aecd 	beq.w	8004fde <_printf_float+0xba>
 8005244:	f10b 0b01 	add.w	fp, fp, #1
 8005248:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800524c:	ebaa 0309 	sub.w	r3, sl, r9
 8005250:	455b      	cmp	r3, fp
 8005252:	dcef      	bgt.n	8005234 <_printf_float+0x310>
 8005254:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005258:	429a      	cmp	r2, r3
 800525a:	44d0      	add	r8, sl
 800525c:	db15      	blt.n	800528a <_printf_float+0x366>
 800525e:	6823      	ldr	r3, [r4, #0]
 8005260:	07da      	lsls	r2, r3, #31
 8005262:	d412      	bmi.n	800528a <_printf_float+0x366>
 8005264:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005266:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005268:	eba3 020a 	sub.w	r2, r3, sl
 800526c:	eba3 0a01 	sub.w	sl, r3, r1
 8005270:	4592      	cmp	sl, r2
 8005272:	bfa8      	it	ge
 8005274:	4692      	movge	sl, r2
 8005276:	f1ba 0f00 	cmp.w	sl, #0
 800527a:	dc0e      	bgt.n	800529a <_printf_float+0x376>
 800527c:	f04f 0800 	mov.w	r8, #0
 8005280:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005284:	f104 091a 	add.w	r9, r4, #26
 8005288:	e019      	b.n	80052be <_printf_float+0x39a>
 800528a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800528e:	4631      	mov	r1, r6
 8005290:	4628      	mov	r0, r5
 8005292:	47b8      	blx	r7
 8005294:	3001      	adds	r0, #1
 8005296:	d1e5      	bne.n	8005264 <_printf_float+0x340>
 8005298:	e6a1      	b.n	8004fde <_printf_float+0xba>
 800529a:	4653      	mov	r3, sl
 800529c:	4642      	mov	r2, r8
 800529e:	4631      	mov	r1, r6
 80052a0:	4628      	mov	r0, r5
 80052a2:	47b8      	blx	r7
 80052a4:	3001      	adds	r0, #1
 80052a6:	d1e9      	bne.n	800527c <_printf_float+0x358>
 80052a8:	e699      	b.n	8004fde <_printf_float+0xba>
 80052aa:	2301      	movs	r3, #1
 80052ac:	464a      	mov	r2, r9
 80052ae:	4631      	mov	r1, r6
 80052b0:	4628      	mov	r0, r5
 80052b2:	47b8      	blx	r7
 80052b4:	3001      	adds	r0, #1
 80052b6:	f43f ae92 	beq.w	8004fde <_printf_float+0xba>
 80052ba:	f108 0801 	add.w	r8, r8, #1
 80052be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052c2:	1a9b      	subs	r3, r3, r2
 80052c4:	eba3 030a 	sub.w	r3, r3, sl
 80052c8:	4543      	cmp	r3, r8
 80052ca:	dcee      	bgt.n	80052aa <_printf_float+0x386>
 80052cc:	e74a      	b.n	8005164 <_printf_float+0x240>
 80052ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80052d0:	2a01      	cmp	r2, #1
 80052d2:	dc01      	bgt.n	80052d8 <_printf_float+0x3b4>
 80052d4:	07db      	lsls	r3, r3, #31
 80052d6:	d53a      	bpl.n	800534e <_printf_float+0x42a>
 80052d8:	2301      	movs	r3, #1
 80052da:	4642      	mov	r2, r8
 80052dc:	4631      	mov	r1, r6
 80052de:	4628      	mov	r0, r5
 80052e0:	47b8      	blx	r7
 80052e2:	3001      	adds	r0, #1
 80052e4:	f43f ae7b 	beq.w	8004fde <_printf_float+0xba>
 80052e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052ec:	4631      	mov	r1, r6
 80052ee:	4628      	mov	r0, r5
 80052f0:	47b8      	blx	r7
 80052f2:	3001      	adds	r0, #1
 80052f4:	f108 0801 	add.w	r8, r8, #1
 80052f8:	f43f ae71 	beq.w	8004fde <_printf_float+0xba>
 80052fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052fe:	2200      	movs	r2, #0
 8005300:	f103 3aff 	add.w	sl, r3, #4294967295
 8005304:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005308:	2300      	movs	r3, #0
 800530a:	f7fb fbf5 	bl	8000af8 <__aeabi_dcmpeq>
 800530e:	b9c8      	cbnz	r0, 8005344 <_printf_float+0x420>
 8005310:	4653      	mov	r3, sl
 8005312:	4642      	mov	r2, r8
 8005314:	4631      	mov	r1, r6
 8005316:	4628      	mov	r0, r5
 8005318:	47b8      	blx	r7
 800531a:	3001      	adds	r0, #1
 800531c:	d10e      	bne.n	800533c <_printf_float+0x418>
 800531e:	e65e      	b.n	8004fde <_printf_float+0xba>
 8005320:	2301      	movs	r3, #1
 8005322:	4652      	mov	r2, sl
 8005324:	4631      	mov	r1, r6
 8005326:	4628      	mov	r0, r5
 8005328:	47b8      	blx	r7
 800532a:	3001      	adds	r0, #1
 800532c:	f43f ae57 	beq.w	8004fde <_printf_float+0xba>
 8005330:	f108 0801 	add.w	r8, r8, #1
 8005334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005336:	3b01      	subs	r3, #1
 8005338:	4543      	cmp	r3, r8
 800533a:	dcf1      	bgt.n	8005320 <_printf_float+0x3fc>
 800533c:	464b      	mov	r3, r9
 800533e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005342:	e6de      	b.n	8005102 <_printf_float+0x1de>
 8005344:	f04f 0800 	mov.w	r8, #0
 8005348:	f104 0a1a 	add.w	sl, r4, #26
 800534c:	e7f2      	b.n	8005334 <_printf_float+0x410>
 800534e:	2301      	movs	r3, #1
 8005350:	e7df      	b.n	8005312 <_printf_float+0x3ee>
 8005352:	2301      	movs	r3, #1
 8005354:	464a      	mov	r2, r9
 8005356:	4631      	mov	r1, r6
 8005358:	4628      	mov	r0, r5
 800535a:	47b8      	blx	r7
 800535c:	3001      	adds	r0, #1
 800535e:	f43f ae3e 	beq.w	8004fde <_printf_float+0xba>
 8005362:	f108 0801 	add.w	r8, r8, #1
 8005366:	68e3      	ldr	r3, [r4, #12]
 8005368:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800536a:	1a9b      	subs	r3, r3, r2
 800536c:	4543      	cmp	r3, r8
 800536e:	dcf0      	bgt.n	8005352 <_printf_float+0x42e>
 8005370:	e6fc      	b.n	800516c <_printf_float+0x248>
 8005372:	f04f 0800 	mov.w	r8, #0
 8005376:	f104 0919 	add.w	r9, r4, #25
 800537a:	e7f4      	b.n	8005366 <_printf_float+0x442>
 800537c:	2900      	cmp	r1, #0
 800537e:	f43f ae8b 	beq.w	8005098 <_printf_float+0x174>
 8005382:	2300      	movs	r3, #0
 8005384:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005388:	ab09      	add	r3, sp, #36	; 0x24
 800538a:	9300      	str	r3, [sp, #0]
 800538c:	ec49 8b10 	vmov	d0, r8, r9
 8005390:	6022      	str	r2, [r4, #0]
 8005392:	f8cd a004 	str.w	sl, [sp, #4]
 8005396:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800539a:	4628      	mov	r0, r5
 800539c:	f7ff fd2e 	bl	8004dfc <__cvt>
 80053a0:	4680      	mov	r8, r0
 80053a2:	e648      	b.n	8005036 <_printf_float+0x112>

080053a4 <_printf_common>:
 80053a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053a8:	4691      	mov	r9, r2
 80053aa:	461f      	mov	r7, r3
 80053ac:	688a      	ldr	r2, [r1, #8]
 80053ae:	690b      	ldr	r3, [r1, #16]
 80053b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053b4:	4293      	cmp	r3, r2
 80053b6:	bfb8      	it	lt
 80053b8:	4613      	movlt	r3, r2
 80053ba:	f8c9 3000 	str.w	r3, [r9]
 80053be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053c2:	4606      	mov	r6, r0
 80053c4:	460c      	mov	r4, r1
 80053c6:	b112      	cbz	r2, 80053ce <_printf_common+0x2a>
 80053c8:	3301      	adds	r3, #1
 80053ca:	f8c9 3000 	str.w	r3, [r9]
 80053ce:	6823      	ldr	r3, [r4, #0]
 80053d0:	0699      	lsls	r1, r3, #26
 80053d2:	bf42      	ittt	mi
 80053d4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80053d8:	3302      	addmi	r3, #2
 80053da:	f8c9 3000 	strmi.w	r3, [r9]
 80053de:	6825      	ldr	r5, [r4, #0]
 80053e0:	f015 0506 	ands.w	r5, r5, #6
 80053e4:	d107      	bne.n	80053f6 <_printf_common+0x52>
 80053e6:	f104 0a19 	add.w	sl, r4, #25
 80053ea:	68e3      	ldr	r3, [r4, #12]
 80053ec:	f8d9 2000 	ldr.w	r2, [r9]
 80053f0:	1a9b      	subs	r3, r3, r2
 80053f2:	42ab      	cmp	r3, r5
 80053f4:	dc28      	bgt.n	8005448 <_printf_common+0xa4>
 80053f6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80053fa:	6822      	ldr	r2, [r4, #0]
 80053fc:	3300      	adds	r3, #0
 80053fe:	bf18      	it	ne
 8005400:	2301      	movne	r3, #1
 8005402:	0692      	lsls	r2, r2, #26
 8005404:	d42d      	bmi.n	8005462 <_printf_common+0xbe>
 8005406:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800540a:	4639      	mov	r1, r7
 800540c:	4630      	mov	r0, r6
 800540e:	47c0      	blx	r8
 8005410:	3001      	adds	r0, #1
 8005412:	d020      	beq.n	8005456 <_printf_common+0xb2>
 8005414:	6823      	ldr	r3, [r4, #0]
 8005416:	68e5      	ldr	r5, [r4, #12]
 8005418:	f8d9 2000 	ldr.w	r2, [r9]
 800541c:	f003 0306 	and.w	r3, r3, #6
 8005420:	2b04      	cmp	r3, #4
 8005422:	bf08      	it	eq
 8005424:	1aad      	subeq	r5, r5, r2
 8005426:	68a3      	ldr	r3, [r4, #8]
 8005428:	6922      	ldr	r2, [r4, #16]
 800542a:	bf0c      	ite	eq
 800542c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005430:	2500      	movne	r5, #0
 8005432:	4293      	cmp	r3, r2
 8005434:	bfc4      	itt	gt
 8005436:	1a9b      	subgt	r3, r3, r2
 8005438:	18ed      	addgt	r5, r5, r3
 800543a:	f04f 0900 	mov.w	r9, #0
 800543e:	341a      	adds	r4, #26
 8005440:	454d      	cmp	r5, r9
 8005442:	d11a      	bne.n	800547a <_printf_common+0xd6>
 8005444:	2000      	movs	r0, #0
 8005446:	e008      	b.n	800545a <_printf_common+0xb6>
 8005448:	2301      	movs	r3, #1
 800544a:	4652      	mov	r2, sl
 800544c:	4639      	mov	r1, r7
 800544e:	4630      	mov	r0, r6
 8005450:	47c0      	blx	r8
 8005452:	3001      	adds	r0, #1
 8005454:	d103      	bne.n	800545e <_printf_common+0xba>
 8005456:	f04f 30ff 	mov.w	r0, #4294967295
 800545a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800545e:	3501      	adds	r5, #1
 8005460:	e7c3      	b.n	80053ea <_printf_common+0x46>
 8005462:	18e1      	adds	r1, r4, r3
 8005464:	1c5a      	adds	r2, r3, #1
 8005466:	2030      	movs	r0, #48	; 0x30
 8005468:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800546c:	4422      	add	r2, r4
 800546e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005472:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005476:	3302      	adds	r3, #2
 8005478:	e7c5      	b.n	8005406 <_printf_common+0x62>
 800547a:	2301      	movs	r3, #1
 800547c:	4622      	mov	r2, r4
 800547e:	4639      	mov	r1, r7
 8005480:	4630      	mov	r0, r6
 8005482:	47c0      	blx	r8
 8005484:	3001      	adds	r0, #1
 8005486:	d0e6      	beq.n	8005456 <_printf_common+0xb2>
 8005488:	f109 0901 	add.w	r9, r9, #1
 800548c:	e7d8      	b.n	8005440 <_printf_common+0x9c>
	...

08005490 <_printf_i>:
 8005490:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005494:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005498:	460c      	mov	r4, r1
 800549a:	7e09      	ldrb	r1, [r1, #24]
 800549c:	b085      	sub	sp, #20
 800549e:	296e      	cmp	r1, #110	; 0x6e
 80054a0:	4617      	mov	r7, r2
 80054a2:	4606      	mov	r6, r0
 80054a4:	4698      	mov	r8, r3
 80054a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80054a8:	f000 80b3 	beq.w	8005612 <_printf_i+0x182>
 80054ac:	d822      	bhi.n	80054f4 <_printf_i+0x64>
 80054ae:	2963      	cmp	r1, #99	; 0x63
 80054b0:	d036      	beq.n	8005520 <_printf_i+0x90>
 80054b2:	d80a      	bhi.n	80054ca <_printf_i+0x3a>
 80054b4:	2900      	cmp	r1, #0
 80054b6:	f000 80b9 	beq.w	800562c <_printf_i+0x19c>
 80054ba:	2958      	cmp	r1, #88	; 0x58
 80054bc:	f000 8083 	beq.w	80055c6 <_printf_i+0x136>
 80054c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054c4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80054c8:	e032      	b.n	8005530 <_printf_i+0xa0>
 80054ca:	2964      	cmp	r1, #100	; 0x64
 80054cc:	d001      	beq.n	80054d2 <_printf_i+0x42>
 80054ce:	2969      	cmp	r1, #105	; 0x69
 80054d0:	d1f6      	bne.n	80054c0 <_printf_i+0x30>
 80054d2:	6820      	ldr	r0, [r4, #0]
 80054d4:	6813      	ldr	r3, [r2, #0]
 80054d6:	0605      	lsls	r5, r0, #24
 80054d8:	f103 0104 	add.w	r1, r3, #4
 80054dc:	d52a      	bpl.n	8005534 <_printf_i+0xa4>
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	6011      	str	r1, [r2, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	da03      	bge.n	80054ee <_printf_i+0x5e>
 80054e6:	222d      	movs	r2, #45	; 0x2d
 80054e8:	425b      	negs	r3, r3
 80054ea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80054ee:	486f      	ldr	r0, [pc, #444]	; (80056ac <_printf_i+0x21c>)
 80054f0:	220a      	movs	r2, #10
 80054f2:	e039      	b.n	8005568 <_printf_i+0xd8>
 80054f4:	2973      	cmp	r1, #115	; 0x73
 80054f6:	f000 809d 	beq.w	8005634 <_printf_i+0x1a4>
 80054fa:	d808      	bhi.n	800550e <_printf_i+0x7e>
 80054fc:	296f      	cmp	r1, #111	; 0x6f
 80054fe:	d020      	beq.n	8005542 <_printf_i+0xb2>
 8005500:	2970      	cmp	r1, #112	; 0x70
 8005502:	d1dd      	bne.n	80054c0 <_printf_i+0x30>
 8005504:	6823      	ldr	r3, [r4, #0]
 8005506:	f043 0320 	orr.w	r3, r3, #32
 800550a:	6023      	str	r3, [r4, #0]
 800550c:	e003      	b.n	8005516 <_printf_i+0x86>
 800550e:	2975      	cmp	r1, #117	; 0x75
 8005510:	d017      	beq.n	8005542 <_printf_i+0xb2>
 8005512:	2978      	cmp	r1, #120	; 0x78
 8005514:	d1d4      	bne.n	80054c0 <_printf_i+0x30>
 8005516:	2378      	movs	r3, #120	; 0x78
 8005518:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800551c:	4864      	ldr	r0, [pc, #400]	; (80056b0 <_printf_i+0x220>)
 800551e:	e055      	b.n	80055cc <_printf_i+0x13c>
 8005520:	6813      	ldr	r3, [r2, #0]
 8005522:	1d19      	adds	r1, r3, #4
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	6011      	str	r1, [r2, #0]
 8005528:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800552c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005530:	2301      	movs	r3, #1
 8005532:	e08c      	b.n	800564e <_printf_i+0x1be>
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	6011      	str	r1, [r2, #0]
 8005538:	f010 0f40 	tst.w	r0, #64	; 0x40
 800553c:	bf18      	it	ne
 800553e:	b21b      	sxthne	r3, r3
 8005540:	e7cf      	b.n	80054e2 <_printf_i+0x52>
 8005542:	6813      	ldr	r3, [r2, #0]
 8005544:	6825      	ldr	r5, [r4, #0]
 8005546:	1d18      	adds	r0, r3, #4
 8005548:	6010      	str	r0, [r2, #0]
 800554a:	0628      	lsls	r0, r5, #24
 800554c:	d501      	bpl.n	8005552 <_printf_i+0xc2>
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	e002      	b.n	8005558 <_printf_i+0xc8>
 8005552:	0668      	lsls	r0, r5, #25
 8005554:	d5fb      	bpl.n	800554e <_printf_i+0xbe>
 8005556:	881b      	ldrh	r3, [r3, #0]
 8005558:	4854      	ldr	r0, [pc, #336]	; (80056ac <_printf_i+0x21c>)
 800555a:	296f      	cmp	r1, #111	; 0x6f
 800555c:	bf14      	ite	ne
 800555e:	220a      	movne	r2, #10
 8005560:	2208      	moveq	r2, #8
 8005562:	2100      	movs	r1, #0
 8005564:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005568:	6865      	ldr	r5, [r4, #4]
 800556a:	60a5      	str	r5, [r4, #8]
 800556c:	2d00      	cmp	r5, #0
 800556e:	f2c0 8095 	blt.w	800569c <_printf_i+0x20c>
 8005572:	6821      	ldr	r1, [r4, #0]
 8005574:	f021 0104 	bic.w	r1, r1, #4
 8005578:	6021      	str	r1, [r4, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d13d      	bne.n	80055fa <_printf_i+0x16a>
 800557e:	2d00      	cmp	r5, #0
 8005580:	f040 808e 	bne.w	80056a0 <_printf_i+0x210>
 8005584:	4665      	mov	r5, ip
 8005586:	2a08      	cmp	r2, #8
 8005588:	d10b      	bne.n	80055a2 <_printf_i+0x112>
 800558a:	6823      	ldr	r3, [r4, #0]
 800558c:	07db      	lsls	r3, r3, #31
 800558e:	d508      	bpl.n	80055a2 <_printf_i+0x112>
 8005590:	6923      	ldr	r3, [r4, #16]
 8005592:	6862      	ldr	r2, [r4, #4]
 8005594:	429a      	cmp	r2, r3
 8005596:	bfde      	ittt	le
 8005598:	2330      	movle	r3, #48	; 0x30
 800559a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800559e:	f105 35ff 	addle.w	r5, r5, #4294967295
 80055a2:	ebac 0305 	sub.w	r3, ip, r5
 80055a6:	6123      	str	r3, [r4, #16]
 80055a8:	f8cd 8000 	str.w	r8, [sp]
 80055ac:	463b      	mov	r3, r7
 80055ae:	aa03      	add	r2, sp, #12
 80055b0:	4621      	mov	r1, r4
 80055b2:	4630      	mov	r0, r6
 80055b4:	f7ff fef6 	bl	80053a4 <_printf_common>
 80055b8:	3001      	adds	r0, #1
 80055ba:	d14d      	bne.n	8005658 <_printf_i+0x1c8>
 80055bc:	f04f 30ff 	mov.w	r0, #4294967295
 80055c0:	b005      	add	sp, #20
 80055c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80055c6:	4839      	ldr	r0, [pc, #228]	; (80056ac <_printf_i+0x21c>)
 80055c8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80055cc:	6813      	ldr	r3, [r2, #0]
 80055ce:	6821      	ldr	r1, [r4, #0]
 80055d0:	1d1d      	adds	r5, r3, #4
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6015      	str	r5, [r2, #0]
 80055d6:	060a      	lsls	r2, r1, #24
 80055d8:	d50b      	bpl.n	80055f2 <_printf_i+0x162>
 80055da:	07ca      	lsls	r2, r1, #31
 80055dc:	bf44      	itt	mi
 80055de:	f041 0120 	orrmi.w	r1, r1, #32
 80055e2:	6021      	strmi	r1, [r4, #0]
 80055e4:	b91b      	cbnz	r3, 80055ee <_printf_i+0x15e>
 80055e6:	6822      	ldr	r2, [r4, #0]
 80055e8:	f022 0220 	bic.w	r2, r2, #32
 80055ec:	6022      	str	r2, [r4, #0]
 80055ee:	2210      	movs	r2, #16
 80055f0:	e7b7      	b.n	8005562 <_printf_i+0xd2>
 80055f2:	064d      	lsls	r5, r1, #25
 80055f4:	bf48      	it	mi
 80055f6:	b29b      	uxthmi	r3, r3
 80055f8:	e7ef      	b.n	80055da <_printf_i+0x14a>
 80055fa:	4665      	mov	r5, ip
 80055fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8005600:	fb02 3311 	mls	r3, r2, r1, r3
 8005604:	5cc3      	ldrb	r3, [r0, r3]
 8005606:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800560a:	460b      	mov	r3, r1
 800560c:	2900      	cmp	r1, #0
 800560e:	d1f5      	bne.n	80055fc <_printf_i+0x16c>
 8005610:	e7b9      	b.n	8005586 <_printf_i+0xf6>
 8005612:	6813      	ldr	r3, [r2, #0]
 8005614:	6825      	ldr	r5, [r4, #0]
 8005616:	6961      	ldr	r1, [r4, #20]
 8005618:	1d18      	adds	r0, r3, #4
 800561a:	6010      	str	r0, [r2, #0]
 800561c:	0628      	lsls	r0, r5, #24
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	d501      	bpl.n	8005626 <_printf_i+0x196>
 8005622:	6019      	str	r1, [r3, #0]
 8005624:	e002      	b.n	800562c <_printf_i+0x19c>
 8005626:	066a      	lsls	r2, r5, #25
 8005628:	d5fb      	bpl.n	8005622 <_printf_i+0x192>
 800562a:	8019      	strh	r1, [r3, #0]
 800562c:	2300      	movs	r3, #0
 800562e:	6123      	str	r3, [r4, #16]
 8005630:	4665      	mov	r5, ip
 8005632:	e7b9      	b.n	80055a8 <_printf_i+0x118>
 8005634:	6813      	ldr	r3, [r2, #0]
 8005636:	1d19      	adds	r1, r3, #4
 8005638:	6011      	str	r1, [r2, #0]
 800563a:	681d      	ldr	r5, [r3, #0]
 800563c:	6862      	ldr	r2, [r4, #4]
 800563e:	2100      	movs	r1, #0
 8005640:	4628      	mov	r0, r5
 8005642:	f7fa fde5 	bl	8000210 <memchr>
 8005646:	b108      	cbz	r0, 800564c <_printf_i+0x1bc>
 8005648:	1b40      	subs	r0, r0, r5
 800564a:	6060      	str	r0, [r4, #4]
 800564c:	6863      	ldr	r3, [r4, #4]
 800564e:	6123      	str	r3, [r4, #16]
 8005650:	2300      	movs	r3, #0
 8005652:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005656:	e7a7      	b.n	80055a8 <_printf_i+0x118>
 8005658:	6923      	ldr	r3, [r4, #16]
 800565a:	462a      	mov	r2, r5
 800565c:	4639      	mov	r1, r7
 800565e:	4630      	mov	r0, r6
 8005660:	47c0      	blx	r8
 8005662:	3001      	adds	r0, #1
 8005664:	d0aa      	beq.n	80055bc <_printf_i+0x12c>
 8005666:	6823      	ldr	r3, [r4, #0]
 8005668:	079b      	lsls	r3, r3, #30
 800566a:	d413      	bmi.n	8005694 <_printf_i+0x204>
 800566c:	68e0      	ldr	r0, [r4, #12]
 800566e:	9b03      	ldr	r3, [sp, #12]
 8005670:	4298      	cmp	r0, r3
 8005672:	bfb8      	it	lt
 8005674:	4618      	movlt	r0, r3
 8005676:	e7a3      	b.n	80055c0 <_printf_i+0x130>
 8005678:	2301      	movs	r3, #1
 800567a:	464a      	mov	r2, r9
 800567c:	4639      	mov	r1, r7
 800567e:	4630      	mov	r0, r6
 8005680:	47c0      	blx	r8
 8005682:	3001      	adds	r0, #1
 8005684:	d09a      	beq.n	80055bc <_printf_i+0x12c>
 8005686:	3501      	adds	r5, #1
 8005688:	68e3      	ldr	r3, [r4, #12]
 800568a:	9a03      	ldr	r2, [sp, #12]
 800568c:	1a9b      	subs	r3, r3, r2
 800568e:	42ab      	cmp	r3, r5
 8005690:	dcf2      	bgt.n	8005678 <_printf_i+0x1e8>
 8005692:	e7eb      	b.n	800566c <_printf_i+0x1dc>
 8005694:	2500      	movs	r5, #0
 8005696:	f104 0919 	add.w	r9, r4, #25
 800569a:	e7f5      	b.n	8005688 <_printf_i+0x1f8>
 800569c:	2b00      	cmp	r3, #0
 800569e:	d1ac      	bne.n	80055fa <_printf_i+0x16a>
 80056a0:	7803      	ldrb	r3, [r0, #0]
 80056a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056a6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056aa:	e76c      	b.n	8005586 <_printf_i+0xf6>
 80056ac:	08015ea8 	.word	0x08015ea8
 80056b0:	08015eb9 	.word	0x08015eb9

080056b4 <siprintf>:
 80056b4:	b40e      	push	{r1, r2, r3}
 80056b6:	b500      	push	{lr}
 80056b8:	b09c      	sub	sp, #112	; 0x70
 80056ba:	ab1d      	add	r3, sp, #116	; 0x74
 80056bc:	9002      	str	r0, [sp, #8]
 80056be:	9006      	str	r0, [sp, #24]
 80056c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80056c4:	4809      	ldr	r0, [pc, #36]	; (80056ec <siprintf+0x38>)
 80056c6:	9107      	str	r1, [sp, #28]
 80056c8:	9104      	str	r1, [sp, #16]
 80056ca:	4909      	ldr	r1, [pc, #36]	; (80056f0 <siprintf+0x3c>)
 80056cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80056d0:	9105      	str	r1, [sp, #20]
 80056d2:	6800      	ldr	r0, [r0, #0]
 80056d4:	9301      	str	r3, [sp, #4]
 80056d6:	a902      	add	r1, sp, #8
 80056d8:	f001 fa72 	bl	8006bc0 <_svfiprintf_r>
 80056dc:	9b02      	ldr	r3, [sp, #8]
 80056de:	2200      	movs	r2, #0
 80056e0:	701a      	strb	r2, [r3, #0]
 80056e2:	b01c      	add	sp, #112	; 0x70
 80056e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80056e8:	b003      	add	sp, #12
 80056ea:	4770      	bx	lr
 80056ec:	20000008 	.word	0x20000008
 80056f0:	ffff0208 	.word	0xffff0208

080056f4 <strcpy>:
 80056f4:	4603      	mov	r3, r0
 80056f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056fa:	f803 2b01 	strb.w	r2, [r3], #1
 80056fe:	2a00      	cmp	r2, #0
 8005700:	d1f9      	bne.n	80056f6 <strcpy+0x2>
 8005702:	4770      	bx	lr

08005704 <__ascii_wctomb>:
 8005704:	b149      	cbz	r1, 800571a <__ascii_wctomb+0x16>
 8005706:	2aff      	cmp	r2, #255	; 0xff
 8005708:	bf85      	ittet	hi
 800570a:	238a      	movhi	r3, #138	; 0x8a
 800570c:	6003      	strhi	r3, [r0, #0]
 800570e:	700a      	strbls	r2, [r1, #0]
 8005710:	f04f 30ff 	movhi.w	r0, #4294967295
 8005714:	bf98      	it	ls
 8005716:	2001      	movls	r0, #1
 8005718:	4770      	bx	lr
 800571a:	4608      	mov	r0, r1
 800571c:	4770      	bx	lr

0800571e <quorem>:
 800571e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005722:	6903      	ldr	r3, [r0, #16]
 8005724:	690c      	ldr	r4, [r1, #16]
 8005726:	42a3      	cmp	r3, r4
 8005728:	4680      	mov	r8, r0
 800572a:	f2c0 8082 	blt.w	8005832 <quorem+0x114>
 800572e:	3c01      	subs	r4, #1
 8005730:	f101 0714 	add.w	r7, r1, #20
 8005734:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005738:	f100 0614 	add.w	r6, r0, #20
 800573c:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005740:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005744:	eb06 030c 	add.w	r3, r6, ip
 8005748:	3501      	adds	r5, #1
 800574a:	eb07 090c 	add.w	r9, r7, ip
 800574e:	9301      	str	r3, [sp, #4]
 8005750:	fbb0 f5f5 	udiv	r5, r0, r5
 8005754:	b395      	cbz	r5, 80057bc <quorem+0x9e>
 8005756:	f04f 0a00 	mov.w	sl, #0
 800575a:	4638      	mov	r0, r7
 800575c:	46b6      	mov	lr, r6
 800575e:	46d3      	mov	fp, sl
 8005760:	f850 2b04 	ldr.w	r2, [r0], #4
 8005764:	b293      	uxth	r3, r2
 8005766:	fb05 a303 	mla	r3, r5, r3, sl
 800576a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800576e:	b29b      	uxth	r3, r3
 8005770:	ebab 0303 	sub.w	r3, fp, r3
 8005774:	0c12      	lsrs	r2, r2, #16
 8005776:	f8de b000 	ldr.w	fp, [lr]
 800577a:	fb05 a202 	mla	r2, r5, r2, sl
 800577e:	fa13 f38b 	uxtah	r3, r3, fp
 8005782:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005786:	fa1f fb82 	uxth.w	fp, r2
 800578a:	f8de 2000 	ldr.w	r2, [lr]
 800578e:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005792:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005796:	b29b      	uxth	r3, r3
 8005798:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800579c:	4581      	cmp	r9, r0
 800579e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80057a2:	f84e 3b04 	str.w	r3, [lr], #4
 80057a6:	d2db      	bcs.n	8005760 <quorem+0x42>
 80057a8:	f856 300c 	ldr.w	r3, [r6, ip]
 80057ac:	b933      	cbnz	r3, 80057bc <quorem+0x9e>
 80057ae:	9b01      	ldr	r3, [sp, #4]
 80057b0:	3b04      	subs	r3, #4
 80057b2:	429e      	cmp	r6, r3
 80057b4:	461a      	mov	r2, r3
 80057b6:	d330      	bcc.n	800581a <quorem+0xfc>
 80057b8:	f8c8 4010 	str.w	r4, [r8, #16]
 80057bc:	4640      	mov	r0, r8
 80057be:	f001 f829 	bl	8006814 <__mcmp>
 80057c2:	2800      	cmp	r0, #0
 80057c4:	db25      	blt.n	8005812 <quorem+0xf4>
 80057c6:	3501      	adds	r5, #1
 80057c8:	4630      	mov	r0, r6
 80057ca:	f04f 0c00 	mov.w	ip, #0
 80057ce:	f857 2b04 	ldr.w	r2, [r7], #4
 80057d2:	f8d0 e000 	ldr.w	lr, [r0]
 80057d6:	b293      	uxth	r3, r2
 80057d8:	ebac 0303 	sub.w	r3, ip, r3
 80057dc:	0c12      	lsrs	r2, r2, #16
 80057de:	fa13 f38e 	uxtah	r3, r3, lr
 80057e2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80057e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80057f0:	45b9      	cmp	r9, r7
 80057f2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80057f6:	f840 3b04 	str.w	r3, [r0], #4
 80057fa:	d2e8      	bcs.n	80057ce <quorem+0xb0>
 80057fc:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005800:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005804:	b92a      	cbnz	r2, 8005812 <quorem+0xf4>
 8005806:	3b04      	subs	r3, #4
 8005808:	429e      	cmp	r6, r3
 800580a:	461a      	mov	r2, r3
 800580c:	d30b      	bcc.n	8005826 <quorem+0x108>
 800580e:	f8c8 4010 	str.w	r4, [r8, #16]
 8005812:	4628      	mov	r0, r5
 8005814:	b003      	add	sp, #12
 8005816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800581a:	6812      	ldr	r2, [r2, #0]
 800581c:	3b04      	subs	r3, #4
 800581e:	2a00      	cmp	r2, #0
 8005820:	d1ca      	bne.n	80057b8 <quorem+0x9a>
 8005822:	3c01      	subs	r4, #1
 8005824:	e7c5      	b.n	80057b2 <quorem+0x94>
 8005826:	6812      	ldr	r2, [r2, #0]
 8005828:	3b04      	subs	r3, #4
 800582a:	2a00      	cmp	r2, #0
 800582c:	d1ef      	bne.n	800580e <quorem+0xf0>
 800582e:	3c01      	subs	r4, #1
 8005830:	e7ea      	b.n	8005808 <quorem+0xea>
 8005832:	2000      	movs	r0, #0
 8005834:	e7ee      	b.n	8005814 <quorem+0xf6>
	...

08005838 <_dtoa_r>:
 8005838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800583c:	ec57 6b10 	vmov	r6, r7, d0
 8005840:	b097      	sub	sp, #92	; 0x5c
 8005842:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005844:	9106      	str	r1, [sp, #24]
 8005846:	4604      	mov	r4, r0
 8005848:	920b      	str	r2, [sp, #44]	; 0x2c
 800584a:	9312      	str	r3, [sp, #72]	; 0x48
 800584c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005850:	e9cd 6700 	strd	r6, r7, [sp]
 8005854:	b93d      	cbnz	r5, 8005866 <_dtoa_r+0x2e>
 8005856:	2010      	movs	r0, #16
 8005858:	f000 fdb4 	bl	80063c4 <malloc>
 800585c:	6260      	str	r0, [r4, #36]	; 0x24
 800585e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005862:	6005      	str	r5, [r0, #0]
 8005864:	60c5      	str	r5, [r0, #12]
 8005866:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005868:	6819      	ldr	r1, [r3, #0]
 800586a:	b151      	cbz	r1, 8005882 <_dtoa_r+0x4a>
 800586c:	685a      	ldr	r2, [r3, #4]
 800586e:	604a      	str	r2, [r1, #4]
 8005870:	2301      	movs	r3, #1
 8005872:	4093      	lsls	r3, r2
 8005874:	608b      	str	r3, [r1, #8]
 8005876:	4620      	mov	r0, r4
 8005878:	f000 fdeb 	bl	8006452 <_Bfree>
 800587c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800587e:	2200      	movs	r2, #0
 8005880:	601a      	str	r2, [r3, #0]
 8005882:	1e3b      	subs	r3, r7, #0
 8005884:	bfbb      	ittet	lt
 8005886:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800588a:	9301      	strlt	r3, [sp, #4]
 800588c:	2300      	movge	r3, #0
 800588e:	2201      	movlt	r2, #1
 8005890:	bfac      	ite	ge
 8005892:	f8c8 3000 	strge.w	r3, [r8]
 8005896:	f8c8 2000 	strlt.w	r2, [r8]
 800589a:	4baf      	ldr	r3, [pc, #700]	; (8005b58 <_dtoa_r+0x320>)
 800589c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80058a0:	ea33 0308 	bics.w	r3, r3, r8
 80058a4:	d114      	bne.n	80058d0 <_dtoa_r+0x98>
 80058a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80058a8:	f242 730f 	movw	r3, #9999	; 0x270f
 80058ac:	6013      	str	r3, [r2, #0]
 80058ae:	9b00      	ldr	r3, [sp, #0]
 80058b0:	b923      	cbnz	r3, 80058bc <_dtoa_r+0x84>
 80058b2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80058b6:	2800      	cmp	r0, #0
 80058b8:	f000 8542 	beq.w	8006340 <_dtoa_r+0xb08>
 80058bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80058be:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8005b6c <_dtoa_r+0x334>
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f000 8544 	beq.w	8006350 <_dtoa_r+0xb18>
 80058c8:	f10b 0303 	add.w	r3, fp, #3
 80058cc:	f000 bd3e 	b.w	800634c <_dtoa_r+0xb14>
 80058d0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80058d4:	2200      	movs	r2, #0
 80058d6:	2300      	movs	r3, #0
 80058d8:	4630      	mov	r0, r6
 80058da:	4639      	mov	r1, r7
 80058dc:	f7fb f90c 	bl	8000af8 <__aeabi_dcmpeq>
 80058e0:	4681      	mov	r9, r0
 80058e2:	b168      	cbz	r0, 8005900 <_dtoa_r+0xc8>
 80058e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80058e6:	2301      	movs	r3, #1
 80058e8:	6013      	str	r3, [r2, #0]
 80058ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f000 8524 	beq.w	800633a <_dtoa_r+0xb02>
 80058f2:	4b9a      	ldr	r3, [pc, #616]	; (8005b5c <_dtoa_r+0x324>)
 80058f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80058f6:	f103 3bff 	add.w	fp, r3, #4294967295
 80058fa:	6013      	str	r3, [r2, #0]
 80058fc:	f000 bd28 	b.w	8006350 <_dtoa_r+0xb18>
 8005900:	aa14      	add	r2, sp, #80	; 0x50
 8005902:	a915      	add	r1, sp, #84	; 0x54
 8005904:	ec47 6b10 	vmov	d0, r6, r7
 8005908:	4620      	mov	r0, r4
 800590a:	f000 fffa 	bl	8006902 <__d2b>
 800590e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005912:	9004      	str	r0, [sp, #16]
 8005914:	2d00      	cmp	r5, #0
 8005916:	d07c      	beq.n	8005a12 <_dtoa_r+0x1da>
 8005918:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800591c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005920:	46b2      	mov	sl, r6
 8005922:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8005926:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800592a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800592e:	2200      	movs	r2, #0
 8005930:	4b8b      	ldr	r3, [pc, #556]	; (8005b60 <_dtoa_r+0x328>)
 8005932:	4650      	mov	r0, sl
 8005934:	4659      	mov	r1, fp
 8005936:	f7fa fcbf 	bl	80002b8 <__aeabi_dsub>
 800593a:	a381      	add	r3, pc, #516	; (adr r3, 8005b40 <_dtoa_r+0x308>)
 800593c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005940:	f7fa fe72 	bl	8000628 <__aeabi_dmul>
 8005944:	a380      	add	r3, pc, #512	; (adr r3, 8005b48 <_dtoa_r+0x310>)
 8005946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594a:	f7fa fcb7 	bl	80002bc <__adddf3>
 800594e:	4606      	mov	r6, r0
 8005950:	4628      	mov	r0, r5
 8005952:	460f      	mov	r7, r1
 8005954:	f7fa fdfe 	bl	8000554 <__aeabi_i2d>
 8005958:	a37d      	add	r3, pc, #500	; (adr r3, 8005b50 <_dtoa_r+0x318>)
 800595a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595e:	f7fa fe63 	bl	8000628 <__aeabi_dmul>
 8005962:	4602      	mov	r2, r0
 8005964:	460b      	mov	r3, r1
 8005966:	4630      	mov	r0, r6
 8005968:	4639      	mov	r1, r7
 800596a:	f7fa fca7 	bl	80002bc <__adddf3>
 800596e:	4606      	mov	r6, r0
 8005970:	460f      	mov	r7, r1
 8005972:	f7fb f909 	bl	8000b88 <__aeabi_d2iz>
 8005976:	2200      	movs	r2, #0
 8005978:	4682      	mov	sl, r0
 800597a:	2300      	movs	r3, #0
 800597c:	4630      	mov	r0, r6
 800597e:	4639      	mov	r1, r7
 8005980:	f7fb f8c4 	bl	8000b0c <__aeabi_dcmplt>
 8005984:	b148      	cbz	r0, 800599a <_dtoa_r+0x162>
 8005986:	4650      	mov	r0, sl
 8005988:	f7fa fde4 	bl	8000554 <__aeabi_i2d>
 800598c:	4632      	mov	r2, r6
 800598e:	463b      	mov	r3, r7
 8005990:	f7fb f8b2 	bl	8000af8 <__aeabi_dcmpeq>
 8005994:	b908      	cbnz	r0, 800599a <_dtoa_r+0x162>
 8005996:	f10a 3aff 	add.w	sl, sl, #4294967295
 800599a:	f1ba 0f16 	cmp.w	sl, #22
 800599e:	d859      	bhi.n	8005a54 <_dtoa_r+0x21c>
 80059a0:	4970      	ldr	r1, [pc, #448]	; (8005b64 <_dtoa_r+0x32c>)
 80059a2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80059a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80059aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80059ae:	f7fb f8cb 	bl	8000b48 <__aeabi_dcmpgt>
 80059b2:	2800      	cmp	r0, #0
 80059b4:	d050      	beq.n	8005a58 <_dtoa_r+0x220>
 80059b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80059ba:	2300      	movs	r3, #0
 80059bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80059be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80059c0:	1b5d      	subs	r5, r3, r5
 80059c2:	f1b5 0801 	subs.w	r8, r5, #1
 80059c6:	bf49      	itett	mi
 80059c8:	f1c5 0301 	rsbmi	r3, r5, #1
 80059cc:	2300      	movpl	r3, #0
 80059ce:	9305      	strmi	r3, [sp, #20]
 80059d0:	f04f 0800 	movmi.w	r8, #0
 80059d4:	bf58      	it	pl
 80059d6:	9305      	strpl	r3, [sp, #20]
 80059d8:	f1ba 0f00 	cmp.w	sl, #0
 80059dc:	db3e      	blt.n	8005a5c <_dtoa_r+0x224>
 80059de:	2300      	movs	r3, #0
 80059e0:	44d0      	add	r8, sl
 80059e2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80059e6:	9307      	str	r3, [sp, #28]
 80059e8:	9b06      	ldr	r3, [sp, #24]
 80059ea:	2b09      	cmp	r3, #9
 80059ec:	f200 8090 	bhi.w	8005b10 <_dtoa_r+0x2d8>
 80059f0:	2b05      	cmp	r3, #5
 80059f2:	bfc4      	itt	gt
 80059f4:	3b04      	subgt	r3, #4
 80059f6:	9306      	strgt	r3, [sp, #24]
 80059f8:	9b06      	ldr	r3, [sp, #24]
 80059fa:	f1a3 0302 	sub.w	r3, r3, #2
 80059fe:	bfcc      	ite	gt
 8005a00:	2500      	movgt	r5, #0
 8005a02:	2501      	movle	r5, #1
 8005a04:	2b03      	cmp	r3, #3
 8005a06:	f200 808f 	bhi.w	8005b28 <_dtoa_r+0x2f0>
 8005a0a:	e8df f003 	tbb	[pc, r3]
 8005a0e:	7f7d      	.short	0x7f7d
 8005a10:	7131      	.short	0x7131
 8005a12:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8005a16:	441d      	add	r5, r3
 8005a18:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005a1c:	2820      	cmp	r0, #32
 8005a1e:	dd13      	ble.n	8005a48 <_dtoa_r+0x210>
 8005a20:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005a24:	9b00      	ldr	r3, [sp, #0]
 8005a26:	fa08 f800 	lsl.w	r8, r8, r0
 8005a2a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005a2e:	fa23 f000 	lsr.w	r0, r3, r0
 8005a32:	ea48 0000 	orr.w	r0, r8, r0
 8005a36:	f7fa fd7d 	bl	8000534 <__aeabi_ui2d>
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	4682      	mov	sl, r0
 8005a3e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8005a42:	3d01      	subs	r5, #1
 8005a44:	9313      	str	r3, [sp, #76]	; 0x4c
 8005a46:	e772      	b.n	800592e <_dtoa_r+0xf6>
 8005a48:	9b00      	ldr	r3, [sp, #0]
 8005a4a:	f1c0 0020 	rsb	r0, r0, #32
 8005a4e:	fa03 f000 	lsl.w	r0, r3, r0
 8005a52:	e7f0      	b.n	8005a36 <_dtoa_r+0x1fe>
 8005a54:	2301      	movs	r3, #1
 8005a56:	e7b1      	b.n	80059bc <_dtoa_r+0x184>
 8005a58:	900f      	str	r0, [sp, #60]	; 0x3c
 8005a5a:	e7b0      	b.n	80059be <_dtoa_r+0x186>
 8005a5c:	9b05      	ldr	r3, [sp, #20]
 8005a5e:	eba3 030a 	sub.w	r3, r3, sl
 8005a62:	9305      	str	r3, [sp, #20]
 8005a64:	f1ca 0300 	rsb	r3, sl, #0
 8005a68:	9307      	str	r3, [sp, #28]
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	930e      	str	r3, [sp, #56]	; 0x38
 8005a6e:	e7bb      	b.n	80059e8 <_dtoa_r+0x1b0>
 8005a70:	2301      	movs	r3, #1
 8005a72:	930a      	str	r3, [sp, #40]	; 0x28
 8005a74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	dd59      	ble.n	8005b2e <_dtoa_r+0x2f6>
 8005a7a:	9302      	str	r3, [sp, #8]
 8005a7c:	4699      	mov	r9, r3
 8005a7e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005a80:	2200      	movs	r2, #0
 8005a82:	6072      	str	r2, [r6, #4]
 8005a84:	2204      	movs	r2, #4
 8005a86:	f102 0014 	add.w	r0, r2, #20
 8005a8a:	4298      	cmp	r0, r3
 8005a8c:	6871      	ldr	r1, [r6, #4]
 8005a8e:	d953      	bls.n	8005b38 <_dtoa_r+0x300>
 8005a90:	4620      	mov	r0, r4
 8005a92:	f000 fcaa 	bl	80063ea <_Balloc>
 8005a96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a98:	6030      	str	r0, [r6, #0]
 8005a9a:	f1b9 0f0e 	cmp.w	r9, #14
 8005a9e:	f8d3 b000 	ldr.w	fp, [r3]
 8005aa2:	f200 80e6 	bhi.w	8005c72 <_dtoa_r+0x43a>
 8005aa6:	2d00      	cmp	r5, #0
 8005aa8:	f000 80e3 	beq.w	8005c72 <_dtoa_r+0x43a>
 8005aac:	ed9d 7b00 	vldr	d7, [sp]
 8005ab0:	f1ba 0f00 	cmp.w	sl, #0
 8005ab4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005ab8:	dd74      	ble.n	8005ba4 <_dtoa_r+0x36c>
 8005aba:	4a2a      	ldr	r2, [pc, #168]	; (8005b64 <_dtoa_r+0x32c>)
 8005abc:	f00a 030f 	and.w	r3, sl, #15
 8005ac0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005ac4:	ed93 7b00 	vldr	d7, [r3]
 8005ac8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005acc:	06f0      	lsls	r0, r6, #27
 8005ace:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005ad2:	d565      	bpl.n	8005ba0 <_dtoa_r+0x368>
 8005ad4:	4b24      	ldr	r3, [pc, #144]	; (8005b68 <_dtoa_r+0x330>)
 8005ad6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005ada:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005ade:	f7fa fecd 	bl	800087c <__aeabi_ddiv>
 8005ae2:	e9cd 0100 	strd	r0, r1, [sp]
 8005ae6:	f006 060f 	and.w	r6, r6, #15
 8005aea:	2503      	movs	r5, #3
 8005aec:	4f1e      	ldr	r7, [pc, #120]	; (8005b68 <_dtoa_r+0x330>)
 8005aee:	e04c      	b.n	8005b8a <_dtoa_r+0x352>
 8005af0:	2301      	movs	r3, #1
 8005af2:	930a      	str	r3, [sp, #40]	; 0x28
 8005af4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005af6:	4453      	add	r3, sl
 8005af8:	f103 0901 	add.w	r9, r3, #1
 8005afc:	9302      	str	r3, [sp, #8]
 8005afe:	464b      	mov	r3, r9
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	bfb8      	it	lt
 8005b04:	2301      	movlt	r3, #1
 8005b06:	e7ba      	b.n	8005a7e <_dtoa_r+0x246>
 8005b08:	2300      	movs	r3, #0
 8005b0a:	e7b2      	b.n	8005a72 <_dtoa_r+0x23a>
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	e7f0      	b.n	8005af2 <_dtoa_r+0x2ba>
 8005b10:	2501      	movs	r5, #1
 8005b12:	2300      	movs	r3, #0
 8005b14:	9306      	str	r3, [sp, #24]
 8005b16:	950a      	str	r5, [sp, #40]	; 0x28
 8005b18:	f04f 33ff 	mov.w	r3, #4294967295
 8005b1c:	9302      	str	r3, [sp, #8]
 8005b1e:	4699      	mov	r9, r3
 8005b20:	2200      	movs	r2, #0
 8005b22:	2312      	movs	r3, #18
 8005b24:	920b      	str	r2, [sp, #44]	; 0x2c
 8005b26:	e7aa      	b.n	8005a7e <_dtoa_r+0x246>
 8005b28:	2301      	movs	r3, #1
 8005b2a:	930a      	str	r3, [sp, #40]	; 0x28
 8005b2c:	e7f4      	b.n	8005b18 <_dtoa_r+0x2e0>
 8005b2e:	2301      	movs	r3, #1
 8005b30:	9302      	str	r3, [sp, #8]
 8005b32:	4699      	mov	r9, r3
 8005b34:	461a      	mov	r2, r3
 8005b36:	e7f5      	b.n	8005b24 <_dtoa_r+0x2ec>
 8005b38:	3101      	adds	r1, #1
 8005b3a:	6071      	str	r1, [r6, #4]
 8005b3c:	0052      	lsls	r2, r2, #1
 8005b3e:	e7a2      	b.n	8005a86 <_dtoa_r+0x24e>
 8005b40:	636f4361 	.word	0x636f4361
 8005b44:	3fd287a7 	.word	0x3fd287a7
 8005b48:	8b60c8b3 	.word	0x8b60c8b3
 8005b4c:	3fc68a28 	.word	0x3fc68a28
 8005b50:	509f79fb 	.word	0x509f79fb
 8005b54:	3fd34413 	.word	0x3fd34413
 8005b58:	7ff00000 	.word	0x7ff00000
 8005b5c:	08015ea7 	.word	0x08015ea7
 8005b60:	3ff80000 	.word	0x3ff80000
 8005b64:	08016000 	.word	0x08016000
 8005b68:	08015fd8 	.word	0x08015fd8
 8005b6c:	08015fd4 	.word	0x08015fd4
 8005b70:	07f1      	lsls	r1, r6, #31
 8005b72:	d508      	bpl.n	8005b86 <_dtoa_r+0x34e>
 8005b74:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005b78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b7c:	f7fa fd54 	bl	8000628 <__aeabi_dmul>
 8005b80:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005b84:	3501      	adds	r5, #1
 8005b86:	1076      	asrs	r6, r6, #1
 8005b88:	3708      	adds	r7, #8
 8005b8a:	2e00      	cmp	r6, #0
 8005b8c:	d1f0      	bne.n	8005b70 <_dtoa_r+0x338>
 8005b8e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005b92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b96:	f7fa fe71 	bl	800087c <__aeabi_ddiv>
 8005b9a:	e9cd 0100 	strd	r0, r1, [sp]
 8005b9e:	e01a      	b.n	8005bd6 <_dtoa_r+0x39e>
 8005ba0:	2502      	movs	r5, #2
 8005ba2:	e7a3      	b.n	8005aec <_dtoa_r+0x2b4>
 8005ba4:	f000 80a0 	beq.w	8005ce8 <_dtoa_r+0x4b0>
 8005ba8:	f1ca 0600 	rsb	r6, sl, #0
 8005bac:	4b9f      	ldr	r3, [pc, #636]	; (8005e2c <_dtoa_r+0x5f4>)
 8005bae:	4fa0      	ldr	r7, [pc, #640]	; (8005e30 <_dtoa_r+0x5f8>)
 8005bb0:	f006 020f 	and.w	r2, r6, #15
 8005bb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bbc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005bc0:	f7fa fd32 	bl	8000628 <__aeabi_dmul>
 8005bc4:	e9cd 0100 	strd	r0, r1, [sp]
 8005bc8:	1136      	asrs	r6, r6, #4
 8005bca:	2300      	movs	r3, #0
 8005bcc:	2502      	movs	r5, #2
 8005bce:	2e00      	cmp	r6, #0
 8005bd0:	d17f      	bne.n	8005cd2 <_dtoa_r+0x49a>
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d1e1      	bne.n	8005b9a <_dtoa_r+0x362>
 8005bd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	f000 8087 	beq.w	8005cec <_dtoa_r+0x4b4>
 8005bde:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005be2:	2200      	movs	r2, #0
 8005be4:	4b93      	ldr	r3, [pc, #588]	; (8005e34 <_dtoa_r+0x5fc>)
 8005be6:	4630      	mov	r0, r6
 8005be8:	4639      	mov	r1, r7
 8005bea:	f7fa ff8f 	bl	8000b0c <__aeabi_dcmplt>
 8005bee:	2800      	cmp	r0, #0
 8005bf0:	d07c      	beq.n	8005cec <_dtoa_r+0x4b4>
 8005bf2:	f1b9 0f00 	cmp.w	r9, #0
 8005bf6:	d079      	beq.n	8005cec <_dtoa_r+0x4b4>
 8005bf8:	9b02      	ldr	r3, [sp, #8]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	dd35      	ble.n	8005c6a <_dtoa_r+0x432>
 8005bfe:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005c02:	9308      	str	r3, [sp, #32]
 8005c04:	4639      	mov	r1, r7
 8005c06:	2200      	movs	r2, #0
 8005c08:	4b8b      	ldr	r3, [pc, #556]	; (8005e38 <_dtoa_r+0x600>)
 8005c0a:	4630      	mov	r0, r6
 8005c0c:	f7fa fd0c 	bl	8000628 <__aeabi_dmul>
 8005c10:	e9cd 0100 	strd	r0, r1, [sp]
 8005c14:	9f02      	ldr	r7, [sp, #8]
 8005c16:	3501      	adds	r5, #1
 8005c18:	4628      	mov	r0, r5
 8005c1a:	f7fa fc9b 	bl	8000554 <__aeabi_i2d>
 8005c1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c22:	f7fa fd01 	bl	8000628 <__aeabi_dmul>
 8005c26:	2200      	movs	r2, #0
 8005c28:	4b84      	ldr	r3, [pc, #528]	; (8005e3c <_dtoa_r+0x604>)
 8005c2a:	f7fa fb47 	bl	80002bc <__adddf3>
 8005c2e:	4605      	mov	r5, r0
 8005c30:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005c34:	2f00      	cmp	r7, #0
 8005c36:	d15d      	bne.n	8005cf4 <_dtoa_r+0x4bc>
 8005c38:	2200      	movs	r2, #0
 8005c3a:	4b81      	ldr	r3, [pc, #516]	; (8005e40 <_dtoa_r+0x608>)
 8005c3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c40:	f7fa fb3a 	bl	80002b8 <__aeabi_dsub>
 8005c44:	462a      	mov	r2, r5
 8005c46:	4633      	mov	r3, r6
 8005c48:	e9cd 0100 	strd	r0, r1, [sp]
 8005c4c:	f7fa ff7c 	bl	8000b48 <__aeabi_dcmpgt>
 8005c50:	2800      	cmp	r0, #0
 8005c52:	f040 8288 	bne.w	8006166 <_dtoa_r+0x92e>
 8005c56:	462a      	mov	r2, r5
 8005c58:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005c5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c60:	f7fa ff54 	bl	8000b0c <__aeabi_dcmplt>
 8005c64:	2800      	cmp	r0, #0
 8005c66:	f040 827c 	bne.w	8006162 <_dtoa_r+0x92a>
 8005c6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005c6e:	e9cd 2300 	strd	r2, r3, [sp]
 8005c72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f2c0 8150 	blt.w	8005f1a <_dtoa_r+0x6e2>
 8005c7a:	f1ba 0f0e 	cmp.w	sl, #14
 8005c7e:	f300 814c 	bgt.w	8005f1a <_dtoa_r+0x6e2>
 8005c82:	4b6a      	ldr	r3, [pc, #424]	; (8005e2c <_dtoa_r+0x5f4>)
 8005c84:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005c88:	ed93 7b00 	vldr	d7, [r3]
 8005c8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005c94:	f280 80d8 	bge.w	8005e48 <_dtoa_r+0x610>
 8005c98:	f1b9 0f00 	cmp.w	r9, #0
 8005c9c:	f300 80d4 	bgt.w	8005e48 <_dtoa_r+0x610>
 8005ca0:	f040 825e 	bne.w	8006160 <_dtoa_r+0x928>
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	4b66      	ldr	r3, [pc, #408]	; (8005e40 <_dtoa_r+0x608>)
 8005ca8:	ec51 0b17 	vmov	r0, r1, d7
 8005cac:	f7fa fcbc 	bl	8000628 <__aeabi_dmul>
 8005cb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005cb4:	f7fa ff3e 	bl	8000b34 <__aeabi_dcmpge>
 8005cb8:	464f      	mov	r7, r9
 8005cba:	464e      	mov	r6, r9
 8005cbc:	2800      	cmp	r0, #0
 8005cbe:	f040 8234 	bne.w	800612a <_dtoa_r+0x8f2>
 8005cc2:	2331      	movs	r3, #49	; 0x31
 8005cc4:	f10b 0501 	add.w	r5, fp, #1
 8005cc8:	f88b 3000 	strb.w	r3, [fp]
 8005ccc:	f10a 0a01 	add.w	sl, sl, #1
 8005cd0:	e22f      	b.n	8006132 <_dtoa_r+0x8fa>
 8005cd2:	07f2      	lsls	r2, r6, #31
 8005cd4:	d505      	bpl.n	8005ce2 <_dtoa_r+0x4aa>
 8005cd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cda:	f7fa fca5 	bl	8000628 <__aeabi_dmul>
 8005cde:	3501      	adds	r5, #1
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	1076      	asrs	r6, r6, #1
 8005ce4:	3708      	adds	r7, #8
 8005ce6:	e772      	b.n	8005bce <_dtoa_r+0x396>
 8005ce8:	2502      	movs	r5, #2
 8005cea:	e774      	b.n	8005bd6 <_dtoa_r+0x39e>
 8005cec:	f8cd a020 	str.w	sl, [sp, #32]
 8005cf0:	464f      	mov	r7, r9
 8005cf2:	e791      	b.n	8005c18 <_dtoa_r+0x3e0>
 8005cf4:	4b4d      	ldr	r3, [pc, #308]	; (8005e2c <_dtoa_r+0x5f4>)
 8005cf6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005cfa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005cfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d047      	beq.n	8005d94 <_dtoa_r+0x55c>
 8005d04:	4602      	mov	r2, r0
 8005d06:	460b      	mov	r3, r1
 8005d08:	2000      	movs	r0, #0
 8005d0a:	494e      	ldr	r1, [pc, #312]	; (8005e44 <_dtoa_r+0x60c>)
 8005d0c:	f7fa fdb6 	bl	800087c <__aeabi_ddiv>
 8005d10:	462a      	mov	r2, r5
 8005d12:	4633      	mov	r3, r6
 8005d14:	f7fa fad0 	bl	80002b8 <__aeabi_dsub>
 8005d18:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005d1c:	465d      	mov	r5, fp
 8005d1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d22:	f7fa ff31 	bl	8000b88 <__aeabi_d2iz>
 8005d26:	4606      	mov	r6, r0
 8005d28:	f7fa fc14 	bl	8000554 <__aeabi_i2d>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	460b      	mov	r3, r1
 8005d30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d34:	f7fa fac0 	bl	80002b8 <__aeabi_dsub>
 8005d38:	3630      	adds	r6, #48	; 0x30
 8005d3a:	f805 6b01 	strb.w	r6, [r5], #1
 8005d3e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005d42:	e9cd 0100 	strd	r0, r1, [sp]
 8005d46:	f7fa fee1 	bl	8000b0c <__aeabi_dcmplt>
 8005d4a:	2800      	cmp	r0, #0
 8005d4c:	d163      	bne.n	8005e16 <_dtoa_r+0x5de>
 8005d4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d52:	2000      	movs	r0, #0
 8005d54:	4937      	ldr	r1, [pc, #220]	; (8005e34 <_dtoa_r+0x5fc>)
 8005d56:	f7fa faaf 	bl	80002b8 <__aeabi_dsub>
 8005d5a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005d5e:	f7fa fed5 	bl	8000b0c <__aeabi_dcmplt>
 8005d62:	2800      	cmp	r0, #0
 8005d64:	f040 80b7 	bne.w	8005ed6 <_dtoa_r+0x69e>
 8005d68:	eba5 030b 	sub.w	r3, r5, fp
 8005d6c:	429f      	cmp	r7, r3
 8005d6e:	f77f af7c 	ble.w	8005c6a <_dtoa_r+0x432>
 8005d72:	2200      	movs	r2, #0
 8005d74:	4b30      	ldr	r3, [pc, #192]	; (8005e38 <_dtoa_r+0x600>)
 8005d76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d7a:	f7fa fc55 	bl	8000628 <__aeabi_dmul>
 8005d7e:	2200      	movs	r2, #0
 8005d80:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005d84:	4b2c      	ldr	r3, [pc, #176]	; (8005e38 <_dtoa_r+0x600>)
 8005d86:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d8a:	f7fa fc4d 	bl	8000628 <__aeabi_dmul>
 8005d8e:	e9cd 0100 	strd	r0, r1, [sp]
 8005d92:	e7c4      	b.n	8005d1e <_dtoa_r+0x4e6>
 8005d94:	462a      	mov	r2, r5
 8005d96:	4633      	mov	r3, r6
 8005d98:	f7fa fc46 	bl	8000628 <__aeabi_dmul>
 8005d9c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005da0:	eb0b 0507 	add.w	r5, fp, r7
 8005da4:	465e      	mov	r6, fp
 8005da6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005daa:	f7fa feed 	bl	8000b88 <__aeabi_d2iz>
 8005dae:	4607      	mov	r7, r0
 8005db0:	f7fa fbd0 	bl	8000554 <__aeabi_i2d>
 8005db4:	3730      	adds	r7, #48	; 0x30
 8005db6:	4602      	mov	r2, r0
 8005db8:	460b      	mov	r3, r1
 8005dba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005dbe:	f7fa fa7b 	bl	80002b8 <__aeabi_dsub>
 8005dc2:	f806 7b01 	strb.w	r7, [r6], #1
 8005dc6:	42ae      	cmp	r6, r5
 8005dc8:	e9cd 0100 	strd	r0, r1, [sp]
 8005dcc:	f04f 0200 	mov.w	r2, #0
 8005dd0:	d126      	bne.n	8005e20 <_dtoa_r+0x5e8>
 8005dd2:	4b1c      	ldr	r3, [pc, #112]	; (8005e44 <_dtoa_r+0x60c>)
 8005dd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005dd8:	f7fa fa70 	bl	80002bc <__adddf3>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	460b      	mov	r3, r1
 8005de0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005de4:	f7fa feb0 	bl	8000b48 <__aeabi_dcmpgt>
 8005de8:	2800      	cmp	r0, #0
 8005dea:	d174      	bne.n	8005ed6 <_dtoa_r+0x69e>
 8005dec:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005df0:	2000      	movs	r0, #0
 8005df2:	4914      	ldr	r1, [pc, #80]	; (8005e44 <_dtoa_r+0x60c>)
 8005df4:	f7fa fa60 	bl	80002b8 <__aeabi_dsub>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e00:	f7fa fe84 	bl	8000b0c <__aeabi_dcmplt>
 8005e04:	2800      	cmp	r0, #0
 8005e06:	f43f af30 	beq.w	8005c6a <_dtoa_r+0x432>
 8005e0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005e0e:	2b30      	cmp	r3, #48	; 0x30
 8005e10:	f105 32ff 	add.w	r2, r5, #4294967295
 8005e14:	d002      	beq.n	8005e1c <_dtoa_r+0x5e4>
 8005e16:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005e1a:	e04a      	b.n	8005eb2 <_dtoa_r+0x67a>
 8005e1c:	4615      	mov	r5, r2
 8005e1e:	e7f4      	b.n	8005e0a <_dtoa_r+0x5d2>
 8005e20:	4b05      	ldr	r3, [pc, #20]	; (8005e38 <_dtoa_r+0x600>)
 8005e22:	f7fa fc01 	bl	8000628 <__aeabi_dmul>
 8005e26:	e9cd 0100 	strd	r0, r1, [sp]
 8005e2a:	e7bc      	b.n	8005da6 <_dtoa_r+0x56e>
 8005e2c:	08016000 	.word	0x08016000
 8005e30:	08015fd8 	.word	0x08015fd8
 8005e34:	3ff00000 	.word	0x3ff00000
 8005e38:	40240000 	.word	0x40240000
 8005e3c:	401c0000 	.word	0x401c0000
 8005e40:	40140000 	.word	0x40140000
 8005e44:	3fe00000 	.word	0x3fe00000
 8005e48:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005e4c:	465d      	mov	r5, fp
 8005e4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e52:	4630      	mov	r0, r6
 8005e54:	4639      	mov	r1, r7
 8005e56:	f7fa fd11 	bl	800087c <__aeabi_ddiv>
 8005e5a:	f7fa fe95 	bl	8000b88 <__aeabi_d2iz>
 8005e5e:	4680      	mov	r8, r0
 8005e60:	f7fa fb78 	bl	8000554 <__aeabi_i2d>
 8005e64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e68:	f7fa fbde 	bl	8000628 <__aeabi_dmul>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	460b      	mov	r3, r1
 8005e70:	4630      	mov	r0, r6
 8005e72:	4639      	mov	r1, r7
 8005e74:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005e78:	f7fa fa1e 	bl	80002b8 <__aeabi_dsub>
 8005e7c:	f805 6b01 	strb.w	r6, [r5], #1
 8005e80:	eba5 060b 	sub.w	r6, r5, fp
 8005e84:	45b1      	cmp	r9, r6
 8005e86:	4602      	mov	r2, r0
 8005e88:	460b      	mov	r3, r1
 8005e8a:	d139      	bne.n	8005f00 <_dtoa_r+0x6c8>
 8005e8c:	f7fa fa16 	bl	80002bc <__adddf3>
 8005e90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e94:	4606      	mov	r6, r0
 8005e96:	460f      	mov	r7, r1
 8005e98:	f7fa fe56 	bl	8000b48 <__aeabi_dcmpgt>
 8005e9c:	b9c8      	cbnz	r0, 8005ed2 <_dtoa_r+0x69a>
 8005e9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ea2:	4630      	mov	r0, r6
 8005ea4:	4639      	mov	r1, r7
 8005ea6:	f7fa fe27 	bl	8000af8 <__aeabi_dcmpeq>
 8005eaa:	b110      	cbz	r0, 8005eb2 <_dtoa_r+0x67a>
 8005eac:	f018 0f01 	tst.w	r8, #1
 8005eb0:	d10f      	bne.n	8005ed2 <_dtoa_r+0x69a>
 8005eb2:	9904      	ldr	r1, [sp, #16]
 8005eb4:	4620      	mov	r0, r4
 8005eb6:	f000 facc 	bl	8006452 <_Bfree>
 8005eba:	2300      	movs	r3, #0
 8005ebc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005ebe:	702b      	strb	r3, [r5, #0]
 8005ec0:	f10a 0301 	add.w	r3, sl, #1
 8005ec4:	6013      	str	r3, [r2, #0]
 8005ec6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	f000 8241 	beq.w	8006350 <_dtoa_r+0xb18>
 8005ece:	601d      	str	r5, [r3, #0]
 8005ed0:	e23e      	b.n	8006350 <_dtoa_r+0xb18>
 8005ed2:	f8cd a020 	str.w	sl, [sp, #32]
 8005ed6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005eda:	2a39      	cmp	r2, #57	; 0x39
 8005edc:	f105 33ff 	add.w	r3, r5, #4294967295
 8005ee0:	d108      	bne.n	8005ef4 <_dtoa_r+0x6bc>
 8005ee2:	459b      	cmp	fp, r3
 8005ee4:	d10a      	bne.n	8005efc <_dtoa_r+0x6c4>
 8005ee6:	9b08      	ldr	r3, [sp, #32]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	9308      	str	r3, [sp, #32]
 8005eec:	2330      	movs	r3, #48	; 0x30
 8005eee:	f88b 3000 	strb.w	r3, [fp]
 8005ef2:	465b      	mov	r3, fp
 8005ef4:	781a      	ldrb	r2, [r3, #0]
 8005ef6:	3201      	adds	r2, #1
 8005ef8:	701a      	strb	r2, [r3, #0]
 8005efa:	e78c      	b.n	8005e16 <_dtoa_r+0x5de>
 8005efc:	461d      	mov	r5, r3
 8005efe:	e7ea      	b.n	8005ed6 <_dtoa_r+0x69e>
 8005f00:	2200      	movs	r2, #0
 8005f02:	4b9b      	ldr	r3, [pc, #620]	; (8006170 <_dtoa_r+0x938>)
 8005f04:	f7fa fb90 	bl	8000628 <__aeabi_dmul>
 8005f08:	2200      	movs	r2, #0
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	4606      	mov	r6, r0
 8005f0e:	460f      	mov	r7, r1
 8005f10:	f7fa fdf2 	bl	8000af8 <__aeabi_dcmpeq>
 8005f14:	2800      	cmp	r0, #0
 8005f16:	d09a      	beq.n	8005e4e <_dtoa_r+0x616>
 8005f18:	e7cb      	b.n	8005eb2 <_dtoa_r+0x67a>
 8005f1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f1c:	2a00      	cmp	r2, #0
 8005f1e:	f000 808b 	beq.w	8006038 <_dtoa_r+0x800>
 8005f22:	9a06      	ldr	r2, [sp, #24]
 8005f24:	2a01      	cmp	r2, #1
 8005f26:	dc6e      	bgt.n	8006006 <_dtoa_r+0x7ce>
 8005f28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005f2a:	2a00      	cmp	r2, #0
 8005f2c:	d067      	beq.n	8005ffe <_dtoa_r+0x7c6>
 8005f2e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005f32:	9f07      	ldr	r7, [sp, #28]
 8005f34:	9d05      	ldr	r5, [sp, #20]
 8005f36:	9a05      	ldr	r2, [sp, #20]
 8005f38:	2101      	movs	r1, #1
 8005f3a:	441a      	add	r2, r3
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	9205      	str	r2, [sp, #20]
 8005f40:	4498      	add	r8, r3
 8005f42:	f000 fb26 	bl	8006592 <__i2b>
 8005f46:	4606      	mov	r6, r0
 8005f48:	2d00      	cmp	r5, #0
 8005f4a:	dd0c      	ble.n	8005f66 <_dtoa_r+0x72e>
 8005f4c:	f1b8 0f00 	cmp.w	r8, #0
 8005f50:	dd09      	ble.n	8005f66 <_dtoa_r+0x72e>
 8005f52:	4545      	cmp	r5, r8
 8005f54:	9a05      	ldr	r2, [sp, #20]
 8005f56:	462b      	mov	r3, r5
 8005f58:	bfa8      	it	ge
 8005f5a:	4643      	movge	r3, r8
 8005f5c:	1ad2      	subs	r2, r2, r3
 8005f5e:	9205      	str	r2, [sp, #20]
 8005f60:	1aed      	subs	r5, r5, r3
 8005f62:	eba8 0803 	sub.w	r8, r8, r3
 8005f66:	9b07      	ldr	r3, [sp, #28]
 8005f68:	b1eb      	cbz	r3, 8005fa6 <_dtoa_r+0x76e>
 8005f6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d067      	beq.n	8006040 <_dtoa_r+0x808>
 8005f70:	b18f      	cbz	r7, 8005f96 <_dtoa_r+0x75e>
 8005f72:	4631      	mov	r1, r6
 8005f74:	463a      	mov	r2, r7
 8005f76:	4620      	mov	r0, r4
 8005f78:	f000 fbaa 	bl	80066d0 <__pow5mult>
 8005f7c:	9a04      	ldr	r2, [sp, #16]
 8005f7e:	4601      	mov	r1, r0
 8005f80:	4606      	mov	r6, r0
 8005f82:	4620      	mov	r0, r4
 8005f84:	f000 fb0e 	bl	80065a4 <__multiply>
 8005f88:	9904      	ldr	r1, [sp, #16]
 8005f8a:	9008      	str	r0, [sp, #32]
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	f000 fa60 	bl	8006452 <_Bfree>
 8005f92:	9b08      	ldr	r3, [sp, #32]
 8005f94:	9304      	str	r3, [sp, #16]
 8005f96:	9b07      	ldr	r3, [sp, #28]
 8005f98:	1bda      	subs	r2, r3, r7
 8005f9a:	d004      	beq.n	8005fa6 <_dtoa_r+0x76e>
 8005f9c:	9904      	ldr	r1, [sp, #16]
 8005f9e:	4620      	mov	r0, r4
 8005fa0:	f000 fb96 	bl	80066d0 <__pow5mult>
 8005fa4:	9004      	str	r0, [sp, #16]
 8005fa6:	2101      	movs	r1, #1
 8005fa8:	4620      	mov	r0, r4
 8005faa:	f000 faf2 	bl	8006592 <__i2b>
 8005fae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fb0:	4607      	mov	r7, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	f000 81d0 	beq.w	8006358 <_dtoa_r+0xb20>
 8005fb8:	461a      	mov	r2, r3
 8005fba:	4601      	mov	r1, r0
 8005fbc:	4620      	mov	r0, r4
 8005fbe:	f000 fb87 	bl	80066d0 <__pow5mult>
 8005fc2:	9b06      	ldr	r3, [sp, #24]
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	4607      	mov	r7, r0
 8005fc8:	dc40      	bgt.n	800604c <_dtoa_r+0x814>
 8005fca:	9b00      	ldr	r3, [sp, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d139      	bne.n	8006044 <_dtoa_r+0x80c>
 8005fd0:	9b01      	ldr	r3, [sp, #4]
 8005fd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d136      	bne.n	8006048 <_dtoa_r+0x810>
 8005fda:	9b01      	ldr	r3, [sp, #4]
 8005fdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005fe0:	0d1b      	lsrs	r3, r3, #20
 8005fe2:	051b      	lsls	r3, r3, #20
 8005fe4:	b12b      	cbz	r3, 8005ff2 <_dtoa_r+0x7ba>
 8005fe6:	9b05      	ldr	r3, [sp, #20]
 8005fe8:	3301      	adds	r3, #1
 8005fea:	9305      	str	r3, [sp, #20]
 8005fec:	f108 0801 	add.w	r8, r8, #1
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	9307      	str	r3, [sp, #28]
 8005ff4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d12a      	bne.n	8006050 <_dtoa_r+0x818>
 8005ffa:	2001      	movs	r0, #1
 8005ffc:	e030      	b.n	8006060 <_dtoa_r+0x828>
 8005ffe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006000:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006004:	e795      	b.n	8005f32 <_dtoa_r+0x6fa>
 8006006:	9b07      	ldr	r3, [sp, #28]
 8006008:	f109 37ff 	add.w	r7, r9, #4294967295
 800600c:	42bb      	cmp	r3, r7
 800600e:	bfbf      	itttt	lt
 8006010:	9b07      	ldrlt	r3, [sp, #28]
 8006012:	9707      	strlt	r7, [sp, #28]
 8006014:	1afa      	sublt	r2, r7, r3
 8006016:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006018:	bfbb      	ittet	lt
 800601a:	189b      	addlt	r3, r3, r2
 800601c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800601e:	1bdf      	subge	r7, r3, r7
 8006020:	2700      	movlt	r7, #0
 8006022:	f1b9 0f00 	cmp.w	r9, #0
 8006026:	bfb5      	itete	lt
 8006028:	9b05      	ldrlt	r3, [sp, #20]
 800602a:	9d05      	ldrge	r5, [sp, #20]
 800602c:	eba3 0509 	sublt.w	r5, r3, r9
 8006030:	464b      	movge	r3, r9
 8006032:	bfb8      	it	lt
 8006034:	2300      	movlt	r3, #0
 8006036:	e77e      	b.n	8005f36 <_dtoa_r+0x6fe>
 8006038:	9f07      	ldr	r7, [sp, #28]
 800603a:	9d05      	ldr	r5, [sp, #20]
 800603c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800603e:	e783      	b.n	8005f48 <_dtoa_r+0x710>
 8006040:	9a07      	ldr	r2, [sp, #28]
 8006042:	e7ab      	b.n	8005f9c <_dtoa_r+0x764>
 8006044:	2300      	movs	r3, #0
 8006046:	e7d4      	b.n	8005ff2 <_dtoa_r+0x7ba>
 8006048:	9b00      	ldr	r3, [sp, #0]
 800604a:	e7d2      	b.n	8005ff2 <_dtoa_r+0x7ba>
 800604c:	2300      	movs	r3, #0
 800604e:	9307      	str	r3, [sp, #28]
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8006056:	6918      	ldr	r0, [r3, #16]
 8006058:	f000 fa4d 	bl	80064f6 <__hi0bits>
 800605c:	f1c0 0020 	rsb	r0, r0, #32
 8006060:	4440      	add	r0, r8
 8006062:	f010 001f 	ands.w	r0, r0, #31
 8006066:	d047      	beq.n	80060f8 <_dtoa_r+0x8c0>
 8006068:	f1c0 0320 	rsb	r3, r0, #32
 800606c:	2b04      	cmp	r3, #4
 800606e:	dd3b      	ble.n	80060e8 <_dtoa_r+0x8b0>
 8006070:	9b05      	ldr	r3, [sp, #20]
 8006072:	f1c0 001c 	rsb	r0, r0, #28
 8006076:	4403      	add	r3, r0
 8006078:	9305      	str	r3, [sp, #20]
 800607a:	4405      	add	r5, r0
 800607c:	4480      	add	r8, r0
 800607e:	9b05      	ldr	r3, [sp, #20]
 8006080:	2b00      	cmp	r3, #0
 8006082:	dd05      	ble.n	8006090 <_dtoa_r+0x858>
 8006084:	461a      	mov	r2, r3
 8006086:	9904      	ldr	r1, [sp, #16]
 8006088:	4620      	mov	r0, r4
 800608a:	f000 fb6f 	bl	800676c <__lshift>
 800608e:	9004      	str	r0, [sp, #16]
 8006090:	f1b8 0f00 	cmp.w	r8, #0
 8006094:	dd05      	ble.n	80060a2 <_dtoa_r+0x86a>
 8006096:	4639      	mov	r1, r7
 8006098:	4642      	mov	r2, r8
 800609a:	4620      	mov	r0, r4
 800609c:	f000 fb66 	bl	800676c <__lshift>
 80060a0:	4607      	mov	r7, r0
 80060a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80060a4:	b353      	cbz	r3, 80060fc <_dtoa_r+0x8c4>
 80060a6:	4639      	mov	r1, r7
 80060a8:	9804      	ldr	r0, [sp, #16]
 80060aa:	f000 fbb3 	bl	8006814 <__mcmp>
 80060ae:	2800      	cmp	r0, #0
 80060b0:	da24      	bge.n	80060fc <_dtoa_r+0x8c4>
 80060b2:	2300      	movs	r3, #0
 80060b4:	220a      	movs	r2, #10
 80060b6:	9904      	ldr	r1, [sp, #16]
 80060b8:	4620      	mov	r0, r4
 80060ba:	f000 f9e1 	bl	8006480 <__multadd>
 80060be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060c0:	9004      	str	r0, [sp, #16]
 80060c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	f000 814d 	beq.w	8006366 <_dtoa_r+0xb2e>
 80060cc:	2300      	movs	r3, #0
 80060ce:	4631      	mov	r1, r6
 80060d0:	220a      	movs	r2, #10
 80060d2:	4620      	mov	r0, r4
 80060d4:	f000 f9d4 	bl	8006480 <__multadd>
 80060d8:	9b02      	ldr	r3, [sp, #8]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	4606      	mov	r6, r0
 80060de:	dc4f      	bgt.n	8006180 <_dtoa_r+0x948>
 80060e0:	9b06      	ldr	r3, [sp, #24]
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	dd4c      	ble.n	8006180 <_dtoa_r+0x948>
 80060e6:	e011      	b.n	800610c <_dtoa_r+0x8d4>
 80060e8:	d0c9      	beq.n	800607e <_dtoa_r+0x846>
 80060ea:	9a05      	ldr	r2, [sp, #20]
 80060ec:	331c      	adds	r3, #28
 80060ee:	441a      	add	r2, r3
 80060f0:	9205      	str	r2, [sp, #20]
 80060f2:	441d      	add	r5, r3
 80060f4:	4498      	add	r8, r3
 80060f6:	e7c2      	b.n	800607e <_dtoa_r+0x846>
 80060f8:	4603      	mov	r3, r0
 80060fa:	e7f6      	b.n	80060ea <_dtoa_r+0x8b2>
 80060fc:	f1b9 0f00 	cmp.w	r9, #0
 8006100:	dc38      	bgt.n	8006174 <_dtoa_r+0x93c>
 8006102:	9b06      	ldr	r3, [sp, #24]
 8006104:	2b02      	cmp	r3, #2
 8006106:	dd35      	ble.n	8006174 <_dtoa_r+0x93c>
 8006108:	f8cd 9008 	str.w	r9, [sp, #8]
 800610c:	9b02      	ldr	r3, [sp, #8]
 800610e:	b963      	cbnz	r3, 800612a <_dtoa_r+0x8f2>
 8006110:	4639      	mov	r1, r7
 8006112:	2205      	movs	r2, #5
 8006114:	4620      	mov	r0, r4
 8006116:	f000 f9b3 	bl	8006480 <__multadd>
 800611a:	4601      	mov	r1, r0
 800611c:	4607      	mov	r7, r0
 800611e:	9804      	ldr	r0, [sp, #16]
 8006120:	f000 fb78 	bl	8006814 <__mcmp>
 8006124:	2800      	cmp	r0, #0
 8006126:	f73f adcc 	bgt.w	8005cc2 <_dtoa_r+0x48a>
 800612a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800612c:	465d      	mov	r5, fp
 800612e:	ea6f 0a03 	mvn.w	sl, r3
 8006132:	f04f 0900 	mov.w	r9, #0
 8006136:	4639      	mov	r1, r7
 8006138:	4620      	mov	r0, r4
 800613a:	f000 f98a 	bl	8006452 <_Bfree>
 800613e:	2e00      	cmp	r6, #0
 8006140:	f43f aeb7 	beq.w	8005eb2 <_dtoa_r+0x67a>
 8006144:	f1b9 0f00 	cmp.w	r9, #0
 8006148:	d005      	beq.n	8006156 <_dtoa_r+0x91e>
 800614a:	45b1      	cmp	r9, r6
 800614c:	d003      	beq.n	8006156 <_dtoa_r+0x91e>
 800614e:	4649      	mov	r1, r9
 8006150:	4620      	mov	r0, r4
 8006152:	f000 f97e 	bl	8006452 <_Bfree>
 8006156:	4631      	mov	r1, r6
 8006158:	4620      	mov	r0, r4
 800615a:	f000 f97a 	bl	8006452 <_Bfree>
 800615e:	e6a8      	b.n	8005eb2 <_dtoa_r+0x67a>
 8006160:	2700      	movs	r7, #0
 8006162:	463e      	mov	r6, r7
 8006164:	e7e1      	b.n	800612a <_dtoa_r+0x8f2>
 8006166:	f8dd a020 	ldr.w	sl, [sp, #32]
 800616a:	463e      	mov	r6, r7
 800616c:	e5a9      	b.n	8005cc2 <_dtoa_r+0x48a>
 800616e:	bf00      	nop
 8006170:	40240000 	.word	0x40240000
 8006174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006176:	f8cd 9008 	str.w	r9, [sp, #8]
 800617a:	2b00      	cmp	r3, #0
 800617c:	f000 80fa 	beq.w	8006374 <_dtoa_r+0xb3c>
 8006180:	2d00      	cmp	r5, #0
 8006182:	dd05      	ble.n	8006190 <_dtoa_r+0x958>
 8006184:	4631      	mov	r1, r6
 8006186:	462a      	mov	r2, r5
 8006188:	4620      	mov	r0, r4
 800618a:	f000 faef 	bl	800676c <__lshift>
 800618e:	4606      	mov	r6, r0
 8006190:	9b07      	ldr	r3, [sp, #28]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d04c      	beq.n	8006230 <_dtoa_r+0x9f8>
 8006196:	6871      	ldr	r1, [r6, #4]
 8006198:	4620      	mov	r0, r4
 800619a:	f000 f926 	bl	80063ea <_Balloc>
 800619e:	6932      	ldr	r2, [r6, #16]
 80061a0:	3202      	adds	r2, #2
 80061a2:	4605      	mov	r5, r0
 80061a4:	0092      	lsls	r2, r2, #2
 80061a6:	f106 010c 	add.w	r1, r6, #12
 80061aa:	300c      	adds	r0, #12
 80061ac:	f000 f912 	bl	80063d4 <memcpy>
 80061b0:	2201      	movs	r2, #1
 80061b2:	4629      	mov	r1, r5
 80061b4:	4620      	mov	r0, r4
 80061b6:	f000 fad9 	bl	800676c <__lshift>
 80061ba:	9b00      	ldr	r3, [sp, #0]
 80061bc:	f8cd b014 	str.w	fp, [sp, #20]
 80061c0:	f003 0301 	and.w	r3, r3, #1
 80061c4:	46b1      	mov	r9, r6
 80061c6:	9307      	str	r3, [sp, #28]
 80061c8:	4606      	mov	r6, r0
 80061ca:	4639      	mov	r1, r7
 80061cc:	9804      	ldr	r0, [sp, #16]
 80061ce:	f7ff faa6 	bl	800571e <quorem>
 80061d2:	4649      	mov	r1, r9
 80061d4:	4605      	mov	r5, r0
 80061d6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80061da:	9804      	ldr	r0, [sp, #16]
 80061dc:	f000 fb1a 	bl	8006814 <__mcmp>
 80061e0:	4632      	mov	r2, r6
 80061e2:	9000      	str	r0, [sp, #0]
 80061e4:	4639      	mov	r1, r7
 80061e6:	4620      	mov	r0, r4
 80061e8:	f000 fb2e 	bl	8006848 <__mdiff>
 80061ec:	68c3      	ldr	r3, [r0, #12]
 80061ee:	4602      	mov	r2, r0
 80061f0:	bb03      	cbnz	r3, 8006234 <_dtoa_r+0x9fc>
 80061f2:	4601      	mov	r1, r0
 80061f4:	9008      	str	r0, [sp, #32]
 80061f6:	9804      	ldr	r0, [sp, #16]
 80061f8:	f000 fb0c 	bl	8006814 <__mcmp>
 80061fc:	9a08      	ldr	r2, [sp, #32]
 80061fe:	4603      	mov	r3, r0
 8006200:	4611      	mov	r1, r2
 8006202:	4620      	mov	r0, r4
 8006204:	9308      	str	r3, [sp, #32]
 8006206:	f000 f924 	bl	8006452 <_Bfree>
 800620a:	9b08      	ldr	r3, [sp, #32]
 800620c:	b9a3      	cbnz	r3, 8006238 <_dtoa_r+0xa00>
 800620e:	9a06      	ldr	r2, [sp, #24]
 8006210:	b992      	cbnz	r2, 8006238 <_dtoa_r+0xa00>
 8006212:	9a07      	ldr	r2, [sp, #28]
 8006214:	b982      	cbnz	r2, 8006238 <_dtoa_r+0xa00>
 8006216:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800621a:	d029      	beq.n	8006270 <_dtoa_r+0xa38>
 800621c:	9b00      	ldr	r3, [sp, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	dd01      	ble.n	8006226 <_dtoa_r+0x9ee>
 8006222:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006226:	9b05      	ldr	r3, [sp, #20]
 8006228:	1c5d      	adds	r5, r3, #1
 800622a:	f883 8000 	strb.w	r8, [r3]
 800622e:	e782      	b.n	8006136 <_dtoa_r+0x8fe>
 8006230:	4630      	mov	r0, r6
 8006232:	e7c2      	b.n	80061ba <_dtoa_r+0x982>
 8006234:	2301      	movs	r3, #1
 8006236:	e7e3      	b.n	8006200 <_dtoa_r+0x9c8>
 8006238:	9a00      	ldr	r2, [sp, #0]
 800623a:	2a00      	cmp	r2, #0
 800623c:	db04      	blt.n	8006248 <_dtoa_r+0xa10>
 800623e:	d125      	bne.n	800628c <_dtoa_r+0xa54>
 8006240:	9a06      	ldr	r2, [sp, #24]
 8006242:	bb1a      	cbnz	r2, 800628c <_dtoa_r+0xa54>
 8006244:	9a07      	ldr	r2, [sp, #28]
 8006246:	bb0a      	cbnz	r2, 800628c <_dtoa_r+0xa54>
 8006248:	2b00      	cmp	r3, #0
 800624a:	ddec      	ble.n	8006226 <_dtoa_r+0x9ee>
 800624c:	2201      	movs	r2, #1
 800624e:	9904      	ldr	r1, [sp, #16]
 8006250:	4620      	mov	r0, r4
 8006252:	f000 fa8b 	bl	800676c <__lshift>
 8006256:	4639      	mov	r1, r7
 8006258:	9004      	str	r0, [sp, #16]
 800625a:	f000 fadb 	bl	8006814 <__mcmp>
 800625e:	2800      	cmp	r0, #0
 8006260:	dc03      	bgt.n	800626a <_dtoa_r+0xa32>
 8006262:	d1e0      	bne.n	8006226 <_dtoa_r+0x9ee>
 8006264:	f018 0f01 	tst.w	r8, #1
 8006268:	d0dd      	beq.n	8006226 <_dtoa_r+0x9ee>
 800626a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800626e:	d1d8      	bne.n	8006222 <_dtoa_r+0x9ea>
 8006270:	9b05      	ldr	r3, [sp, #20]
 8006272:	9a05      	ldr	r2, [sp, #20]
 8006274:	1c5d      	adds	r5, r3, #1
 8006276:	2339      	movs	r3, #57	; 0x39
 8006278:	7013      	strb	r3, [r2, #0]
 800627a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800627e:	2b39      	cmp	r3, #57	; 0x39
 8006280:	f105 32ff 	add.w	r2, r5, #4294967295
 8006284:	d04f      	beq.n	8006326 <_dtoa_r+0xaee>
 8006286:	3301      	adds	r3, #1
 8006288:	7013      	strb	r3, [r2, #0]
 800628a:	e754      	b.n	8006136 <_dtoa_r+0x8fe>
 800628c:	9a05      	ldr	r2, [sp, #20]
 800628e:	2b00      	cmp	r3, #0
 8006290:	f102 0501 	add.w	r5, r2, #1
 8006294:	dd06      	ble.n	80062a4 <_dtoa_r+0xa6c>
 8006296:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800629a:	d0e9      	beq.n	8006270 <_dtoa_r+0xa38>
 800629c:	f108 0801 	add.w	r8, r8, #1
 80062a0:	9b05      	ldr	r3, [sp, #20]
 80062a2:	e7c2      	b.n	800622a <_dtoa_r+0x9f2>
 80062a4:	9a02      	ldr	r2, [sp, #8]
 80062a6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80062aa:	eba5 030b 	sub.w	r3, r5, fp
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d021      	beq.n	80062f6 <_dtoa_r+0xabe>
 80062b2:	2300      	movs	r3, #0
 80062b4:	220a      	movs	r2, #10
 80062b6:	9904      	ldr	r1, [sp, #16]
 80062b8:	4620      	mov	r0, r4
 80062ba:	f000 f8e1 	bl	8006480 <__multadd>
 80062be:	45b1      	cmp	r9, r6
 80062c0:	9004      	str	r0, [sp, #16]
 80062c2:	f04f 0300 	mov.w	r3, #0
 80062c6:	f04f 020a 	mov.w	r2, #10
 80062ca:	4649      	mov	r1, r9
 80062cc:	4620      	mov	r0, r4
 80062ce:	d105      	bne.n	80062dc <_dtoa_r+0xaa4>
 80062d0:	f000 f8d6 	bl	8006480 <__multadd>
 80062d4:	4681      	mov	r9, r0
 80062d6:	4606      	mov	r6, r0
 80062d8:	9505      	str	r5, [sp, #20]
 80062da:	e776      	b.n	80061ca <_dtoa_r+0x992>
 80062dc:	f000 f8d0 	bl	8006480 <__multadd>
 80062e0:	4631      	mov	r1, r6
 80062e2:	4681      	mov	r9, r0
 80062e4:	2300      	movs	r3, #0
 80062e6:	220a      	movs	r2, #10
 80062e8:	4620      	mov	r0, r4
 80062ea:	f000 f8c9 	bl	8006480 <__multadd>
 80062ee:	4606      	mov	r6, r0
 80062f0:	e7f2      	b.n	80062d8 <_dtoa_r+0xaa0>
 80062f2:	f04f 0900 	mov.w	r9, #0
 80062f6:	2201      	movs	r2, #1
 80062f8:	9904      	ldr	r1, [sp, #16]
 80062fa:	4620      	mov	r0, r4
 80062fc:	f000 fa36 	bl	800676c <__lshift>
 8006300:	4639      	mov	r1, r7
 8006302:	9004      	str	r0, [sp, #16]
 8006304:	f000 fa86 	bl	8006814 <__mcmp>
 8006308:	2800      	cmp	r0, #0
 800630a:	dcb6      	bgt.n	800627a <_dtoa_r+0xa42>
 800630c:	d102      	bne.n	8006314 <_dtoa_r+0xadc>
 800630e:	f018 0f01 	tst.w	r8, #1
 8006312:	d1b2      	bne.n	800627a <_dtoa_r+0xa42>
 8006314:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006318:	2b30      	cmp	r3, #48	; 0x30
 800631a:	f105 32ff 	add.w	r2, r5, #4294967295
 800631e:	f47f af0a 	bne.w	8006136 <_dtoa_r+0x8fe>
 8006322:	4615      	mov	r5, r2
 8006324:	e7f6      	b.n	8006314 <_dtoa_r+0xadc>
 8006326:	4593      	cmp	fp, r2
 8006328:	d105      	bne.n	8006336 <_dtoa_r+0xafe>
 800632a:	2331      	movs	r3, #49	; 0x31
 800632c:	f10a 0a01 	add.w	sl, sl, #1
 8006330:	f88b 3000 	strb.w	r3, [fp]
 8006334:	e6ff      	b.n	8006136 <_dtoa_r+0x8fe>
 8006336:	4615      	mov	r5, r2
 8006338:	e79f      	b.n	800627a <_dtoa_r+0xa42>
 800633a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80063a0 <_dtoa_r+0xb68>
 800633e:	e007      	b.n	8006350 <_dtoa_r+0xb18>
 8006340:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006342:	f8df b060 	ldr.w	fp, [pc, #96]	; 80063a4 <_dtoa_r+0xb6c>
 8006346:	b11b      	cbz	r3, 8006350 <_dtoa_r+0xb18>
 8006348:	f10b 0308 	add.w	r3, fp, #8
 800634c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800634e:	6013      	str	r3, [r2, #0]
 8006350:	4658      	mov	r0, fp
 8006352:	b017      	add	sp, #92	; 0x5c
 8006354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006358:	9b06      	ldr	r3, [sp, #24]
 800635a:	2b01      	cmp	r3, #1
 800635c:	f77f ae35 	ble.w	8005fca <_dtoa_r+0x792>
 8006360:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006362:	9307      	str	r3, [sp, #28]
 8006364:	e649      	b.n	8005ffa <_dtoa_r+0x7c2>
 8006366:	9b02      	ldr	r3, [sp, #8]
 8006368:	2b00      	cmp	r3, #0
 800636a:	dc03      	bgt.n	8006374 <_dtoa_r+0xb3c>
 800636c:	9b06      	ldr	r3, [sp, #24]
 800636e:	2b02      	cmp	r3, #2
 8006370:	f73f aecc 	bgt.w	800610c <_dtoa_r+0x8d4>
 8006374:	465d      	mov	r5, fp
 8006376:	4639      	mov	r1, r7
 8006378:	9804      	ldr	r0, [sp, #16]
 800637a:	f7ff f9d0 	bl	800571e <quorem>
 800637e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006382:	f805 8b01 	strb.w	r8, [r5], #1
 8006386:	9a02      	ldr	r2, [sp, #8]
 8006388:	eba5 030b 	sub.w	r3, r5, fp
 800638c:	429a      	cmp	r2, r3
 800638e:	ddb0      	ble.n	80062f2 <_dtoa_r+0xaba>
 8006390:	2300      	movs	r3, #0
 8006392:	220a      	movs	r2, #10
 8006394:	9904      	ldr	r1, [sp, #16]
 8006396:	4620      	mov	r0, r4
 8006398:	f000 f872 	bl	8006480 <__multadd>
 800639c:	9004      	str	r0, [sp, #16]
 800639e:	e7ea      	b.n	8006376 <_dtoa_r+0xb3e>
 80063a0:	08015ea6 	.word	0x08015ea6
 80063a4:	08015fcb 	.word	0x08015fcb

080063a8 <_localeconv_r>:
 80063a8:	4b04      	ldr	r3, [pc, #16]	; (80063bc <_localeconv_r+0x14>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	6a18      	ldr	r0, [r3, #32]
 80063ae:	4b04      	ldr	r3, [pc, #16]	; (80063c0 <_localeconv_r+0x18>)
 80063b0:	2800      	cmp	r0, #0
 80063b2:	bf08      	it	eq
 80063b4:	4618      	moveq	r0, r3
 80063b6:	30f0      	adds	r0, #240	; 0xf0
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	20000008 	.word	0x20000008
 80063c0:	2000006c 	.word	0x2000006c

080063c4 <malloc>:
 80063c4:	4b02      	ldr	r3, [pc, #8]	; (80063d0 <malloc+0xc>)
 80063c6:	4601      	mov	r1, r0
 80063c8:	6818      	ldr	r0, [r3, #0]
 80063ca:	f000 bb45 	b.w	8006a58 <_malloc_r>
 80063ce:	bf00      	nop
 80063d0:	20000008 	.word	0x20000008

080063d4 <memcpy>:
 80063d4:	b510      	push	{r4, lr}
 80063d6:	1e43      	subs	r3, r0, #1
 80063d8:	440a      	add	r2, r1
 80063da:	4291      	cmp	r1, r2
 80063dc:	d100      	bne.n	80063e0 <memcpy+0xc>
 80063de:	bd10      	pop	{r4, pc}
 80063e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063e8:	e7f7      	b.n	80063da <memcpy+0x6>

080063ea <_Balloc>:
 80063ea:	b570      	push	{r4, r5, r6, lr}
 80063ec:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80063ee:	4604      	mov	r4, r0
 80063f0:	460e      	mov	r6, r1
 80063f2:	b93d      	cbnz	r5, 8006404 <_Balloc+0x1a>
 80063f4:	2010      	movs	r0, #16
 80063f6:	f7ff ffe5 	bl	80063c4 <malloc>
 80063fa:	6260      	str	r0, [r4, #36]	; 0x24
 80063fc:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006400:	6005      	str	r5, [r0, #0]
 8006402:	60c5      	str	r5, [r0, #12]
 8006404:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006406:	68eb      	ldr	r3, [r5, #12]
 8006408:	b183      	cbz	r3, 800642c <_Balloc+0x42>
 800640a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006412:	b9b8      	cbnz	r0, 8006444 <_Balloc+0x5a>
 8006414:	2101      	movs	r1, #1
 8006416:	fa01 f506 	lsl.w	r5, r1, r6
 800641a:	1d6a      	adds	r2, r5, #5
 800641c:	0092      	lsls	r2, r2, #2
 800641e:	4620      	mov	r0, r4
 8006420:	f000 fabe 	bl	80069a0 <_calloc_r>
 8006424:	b160      	cbz	r0, 8006440 <_Balloc+0x56>
 8006426:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800642a:	e00e      	b.n	800644a <_Balloc+0x60>
 800642c:	2221      	movs	r2, #33	; 0x21
 800642e:	2104      	movs	r1, #4
 8006430:	4620      	mov	r0, r4
 8006432:	f000 fab5 	bl	80069a0 <_calloc_r>
 8006436:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006438:	60e8      	str	r0, [r5, #12]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1e4      	bne.n	800640a <_Balloc+0x20>
 8006440:	2000      	movs	r0, #0
 8006442:	bd70      	pop	{r4, r5, r6, pc}
 8006444:	6802      	ldr	r2, [r0, #0]
 8006446:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800644a:	2300      	movs	r3, #0
 800644c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006450:	e7f7      	b.n	8006442 <_Balloc+0x58>

08006452 <_Bfree>:
 8006452:	b570      	push	{r4, r5, r6, lr}
 8006454:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006456:	4606      	mov	r6, r0
 8006458:	460d      	mov	r5, r1
 800645a:	b93c      	cbnz	r4, 800646c <_Bfree+0x1a>
 800645c:	2010      	movs	r0, #16
 800645e:	f7ff ffb1 	bl	80063c4 <malloc>
 8006462:	6270      	str	r0, [r6, #36]	; 0x24
 8006464:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006468:	6004      	str	r4, [r0, #0]
 800646a:	60c4      	str	r4, [r0, #12]
 800646c:	b13d      	cbz	r5, 800647e <_Bfree+0x2c>
 800646e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006470:	686a      	ldr	r2, [r5, #4]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006478:	6029      	str	r1, [r5, #0]
 800647a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800647e:	bd70      	pop	{r4, r5, r6, pc}

08006480 <__multadd>:
 8006480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006484:	690d      	ldr	r5, [r1, #16]
 8006486:	461f      	mov	r7, r3
 8006488:	4606      	mov	r6, r0
 800648a:	460c      	mov	r4, r1
 800648c:	f101 0c14 	add.w	ip, r1, #20
 8006490:	2300      	movs	r3, #0
 8006492:	f8dc 0000 	ldr.w	r0, [ip]
 8006496:	b281      	uxth	r1, r0
 8006498:	fb02 7101 	mla	r1, r2, r1, r7
 800649c:	0c0f      	lsrs	r7, r1, #16
 800649e:	0c00      	lsrs	r0, r0, #16
 80064a0:	fb02 7000 	mla	r0, r2, r0, r7
 80064a4:	b289      	uxth	r1, r1
 80064a6:	3301      	adds	r3, #1
 80064a8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80064ac:	429d      	cmp	r5, r3
 80064ae:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80064b2:	f84c 1b04 	str.w	r1, [ip], #4
 80064b6:	dcec      	bgt.n	8006492 <__multadd+0x12>
 80064b8:	b1d7      	cbz	r7, 80064f0 <__multadd+0x70>
 80064ba:	68a3      	ldr	r3, [r4, #8]
 80064bc:	42ab      	cmp	r3, r5
 80064be:	dc12      	bgt.n	80064e6 <__multadd+0x66>
 80064c0:	6861      	ldr	r1, [r4, #4]
 80064c2:	4630      	mov	r0, r6
 80064c4:	3101      	adds	r1, #1
 80064c6:	f7ff ff90 	bl	80063ea <_Balloc>
 80064ca:	6922      	ldr	r2, [r4, #16]
 80064cc:	3202      	adds	r2, #2
 80064ce:	f104 010c 	add.w	r1, r4, #12
 80064d2:	4680      	mov	r8, r0
 80064d4:	0092      	lsls	r2, r2, #2
 80064d6:	300c      	adds	r0, #12
 80064d8:	f7ff ff7c 	bl	80063d4 <memcpy>
 80064dc:	4621      	mov	r1, r4
 80064de:	4630      	mov	r0, r6
 80064e0:	f7ff ffb7 	bl	8006452 <_Bfree>
 80064e4:	4644      	mov	r4, r8
 80064e6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80064ea:	3501      	adds	r5, #1
 80064ec:	615f      	str	r7, [r3, #20]
 80064ee:	6125      	str	r5, [r4, #16]
 80064f0:	4620      	mov	r0, r4
 80064f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080064f6 <__hi0bits>:
 80064f6:	0c02      	lsrs	r2, r0, #16
 80064f8:	0412      	lsls	r2, r2, #16
 80064fa:	4603      	mov	r3, r0
 80064fc:	b9b2      	cbnz	r2, 800652c <__hi0bits+0x36>
 80064fe:	0403      	lsls	r3, r0, #16
 8006500:	2010      	movs	r0, #16
 8006502:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006506:	bf04      	itt	eq
 8006508:	021b      	lsleq	r3, r3, #8
 800650a:	3008      	addeq	r0, #8
 800650c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006510:	bf04      	itt	eq
 8006512:	011b      	lsleq	r3, r3, #4
 8006514:	3004      	addeq	r0, #4
 8006516:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800651a:	bf04      	itt	eq
 800651c:	009b      	lsleq	r3, r3, #2
 800651e:	3002      	addeq	r0, #2
 8006520:	2b00      	cmp	r3, #0
 8006522:	db06      	blt.n	8006532 <__hi0bits+0x3c>
 8006524:	005b      	lsls	r3, r3, #1
 8006526:	d503      	bpl.n	8006530 <__hi0bits+0x3a>
 8006528:	3001      	adds	r0, #1
 800652a:	4770      	bx	lr
 800652c:	2000      	movs	r0, #0
 800652e:	e7e8      	b.n	8006502 <__hi0bits+0xc>
 8006530:	2020      	movs	r0, #32
 8006532:	4770      	bx	lr

08006534 <__lo0bits>:
 8006534:	6803      	ldr	r3, [r0, #0]
 8006536:	f013 0207 	ands.w	r2, r3, #7
 800653a:	4601      	mov	r1, r0
 800653c:	d00b      	beq.n	8006556 <__lo0bits+0x22>
 800653e:	07da      	lsls	r2, r3, #31
 8006540:	d423      	bmi.n	800658a <__lo0bits+0x56>
 8006542:	0798      	lsls	r0, r3, #30
 8006544:	bf49      	itett	mi
 8006546:	085b      	lsrmi	r3, r3, #1
 8006548:	089b      	lsrpl	r3, r3, #2
 800654a:	2001      	movmi	r0, #1
 800654c:	600b      	strmi	r3, [r1, #0]
 800654e:	bf5c      	itt	pl
 8006550:	600b      	strpl	r3, [r1, #0]
 8006552:	2002      	movpl	r0, #2
 8006554:	4770      	bx	lr
 8006556:	b298      	uxth	r0, r3
 8006558:	b9a8      	cbnz	r0, 8006586 <__lo0bits+0x52>
 800655a:	0c1b      	lsrs	r3, r3, #16
 800655c:	2010      	movs	r0, #16
 800655e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006562:	bf04      	itt	eq
 8006564:	0a1b      	lsreq	r3, r3, #8
 8006566:	3008      	addeq	r0, #8
 8006568:	071a      	lsls	r2, r3, #28
 800656a:	bf04      	itt	eq
 800656c:	091b      	lsreq	r3, r3, #4
 800656e:	3004      	addeq	r0, #4
 8006570:	079a      	lsls	r2, r3, #30
 8006572:	bf04      	itt	eq
 8006574:	089b      	lsreq	r3, r3, #2
 8006576:	3002      	addeq	r0, #2
 8006578:	07da      	lsls	r2, r3, #31
 800657a:	d402      	bmi.n	8006582 <__lo0bits+0x4e>
 800657c:	085b      	lsrs	r3, r3, #1
 800657e:	d006      	beq.n	800658e <__lo0bits+0x5a>
 8006580:	3001      	adds	r0, #1
 8006582:	600b      	str	r3, [r1, #0]
 8006584:	4770      	bx	lr
 8006586:	4610      	mov	r0, r2
 8006588:	e7e9      	b.n	800655e <__lo0bits+0x2a>
 800658a:	2000      	movs	r0, #0
 800658c:	4770      	bx	lr
 800658e:	2020      	movs	r0, #32
 8006590:	4770      	bx	lr

08006592 <__i2b>:
 8006592:	b510      	push	{r4, lr}
 8006594:	460c      	mov	r4, r1
 8006596:	2101      	movs	r1, #1
 8006598:	f7ff ff27 	bl	80063ea <_Balloc>
 800659c:	2201      	movs	r2, #1
 800659e:	6144      	str	r4, [r0, #20]
 80065a0:	6102      	str	r2, [r0, #16]
 80065a2:	bd10      	pop	{r4, pc}

080065a4 <__multiply>:
 80065a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a8:	4614      	mov	r4, r2
 80065aa:	690a      	ldr	r2, [r1, #16]
 80065ac:	6923      	ldr	r3, [r4, #16]
 80065ae:	429a      	cmp	r2, r3
 80065b0:	bfb8      	it	lt
 80065b2:	460b      	movlt	r3, r1
 80065b4:	4688      	mov	r8, r1
 80065b6:	bfbc      	itt	lt
 80065b8:	46a0      	movlt	r8, r4
 80065ba:	461c      	movlt	r4, r3
 80065bc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80065c0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80065c4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80065c8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80065cc:	eb07 0609 	add.w	r6, r7, r9
 80065d0:	42b3      	cmp	r3, r6
 80065d2:	bfb8      	it	lt
 80065d4:	3101      	addlt	r1, #1
 80065d6:	f7ff ff08 	bl	80063ea <_Balloc>
 80065da:	f100 0514 	add.w	r5, r0, #20
 80065de:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80065e2:	462b      	mov	r3, r5
 80065e4:	2200      	movs	r2, #0
 80065e6:	4573      	cmp	r3, lr
 80065e8:	d316      	bcc.n	8006618 <__multiply+0x74>
 80065ea:	f104 0214 	add.w	r2, r4, #20
 80065ee:	f108 0114 	add.w	r1, r8, #20
 80065f2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80065f6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80065fa:	9300      	str	r3, [sp, #0]
 80065fc:	9b00      	ldr	r3, [sp, #0]
 80065fe:	9201      	str	r2, [sp, #4]
 8006600:	4293      	cmp	r3, r2
 8006602:	d80c      	bhi.n	800661e <__multiply+0x7a>
 8006604:	2e00      	cmp	r6, #0
 8006606:	dd03      	ble.n	8006610 <__multiply+0x6c>
 8006608:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800660c:	2b00      	cmp	r3, #0
 800660e:	d05d      	beq.n	80066cc <__multiply+0x128>
 8006610:	6106      	str	r6, [r0, #16]
 8006612:	b003      	add	sp, #12
 8006614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006618:	f843 2b04 	str.w	r2, [r3], #4
 800661c:	e7e3      	b.n	80065e6 <__multiply+0x42>
 800661e:	f8b2 b000 	ldrh.w	fp, [r2]
 8006622:	f1bb 0f00 	cmp.w	fp, #0
 8006626:	d023      	beq.n	8006670 <__multiply+0xcc>
 8006628:	4689      	mov	r9, r1
 800662a:	46ac      	mov	ip, r5
 800662c:	f04f 0800 	mov.w	r8, #0
 8006630:	f859 4b04 	ldr.w	r4, [r9], #4
 8006634:	f8dc a000 	ldr.w	sl, [ip]
 8006638:	b2a3      	uxth	r3, r4
 800663a:	fa1f fa8a 	uxth.w	sl, sl
 800663e:	fb0b a303 	mla	r3, fp, r3, sl
 8006642:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006646:	f8dc 4000 	ldr.w	r4, [ip]
 800664a:	4443      	add	r3, r8
 800664c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006650:	fb0b 840a 	mla	r4, fp, sl, r8
 8006654:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006658:	46e2      	mov	sl, ip
 800665a:	b29b      	uxth	r3, r3
 800665c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006660:	454f      	cmp	r7, r9
 8006662:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006666:	f84a 3b04 	str.w	r3, [sl], #4
 800666a:	d82b      	bhi.n	80066c4 <__multiply+0x120>
 800666c:	f8cc 8004 	str.w	r8, [ip, #4]
 8006670:	9b01      	ldr	r3, [sp, #4]
 8006672:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006676:	3204      	adds	r2, #4
 8006678:	f1ba 0f00 	cmp.w	sl, #0
 800667c:	d020      	beq.n	80066c0 <__multiply+0x11c>
 800667e:	682b      	ldr	r3, [r5, #0]
 8006680:	4689      	mov	r9, r1
 8006682:	46a8      	mov	r8, r5
 8006684:	f04f 0b00 	mov.w	fp, #0
 8006688:	f8b9 c000 	ldrh.w	ip, [r9]
 800668c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006690:	fb0a 440c 	mla	r4, sl, ip, r4
 8006694:	445c      	add	r4, fp
 8006696:	46c4      	mov	ip, r8
 8006698:	b29b      	uxth	r3, r3
 800669a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800669e:	f84c 3b04 	str.w	r3, [ip], #4
 80066a2:	f859 3b04 	ldr.w	r3, [r9], #4
 80066a6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80066aa:	0c1b      	lsrs	r3, r3, #16
 80066ac:	fb0a b303 	mla	r3, sl, r3, fp
 80066b0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80066b4:	454f      	cmp	r7, r9
 80066b6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80066ba:	d805      	bhi.n	80066c8 <__multiply+0x124>
 80066bc:	f8c8 3004 	str.w	r3, [r8, #4]
 80066c0:	3504      	adds	r5, #4
 80066c2:	e79b      	b.n	80065fc <__multiply+0x58>
 80066c4:	46d4      	mov	ip, sl
 80066c6:	e7b3      	b.n	8006630 <__multiply+0x8c>
 80066c8:	46e0      	mov	r8, ip
 80066ca:	e7dd      	b.n	8006688 <__multiply+0xe4>
 80066cc:	3e01      	subs	r6, #1
 80066ce:	e799      	b.n	8006604 <__multiply+0x60>

080066d0 <__pow5mult>:
 80066d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066d4:	4615      	mov	r5, r2
 80066d6:	f012 0203 	ands.w	r2, r2, #3
 80066da:	4606      	mov	r6, r0
 80066dc:	460f      	mov	r7, r1
 80066de:	d007      	beq.n	80066f0 <__pow5mult+0x20>
 80066e0:	3a01      	subs	r2, #1
 80066e2:	4c21      	ldr	r4, [pc, #132]	; (8006768 <__pow5mult+0x98>)
 80066e4:	2300      	movs	r3, #0
 80066e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80066ea:	f7ff fec9 	bl	8006480 <__multadd>
 80066ee:	4607      	mov	r7, r0
 80066f0:	10ad      	asrs	r5, r5, #2
 80066f2:	d035      	beq.n	8006760 <__pow5mult+0x90>
 80066f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80066f6:	b93c      	cbnz	r4, 8006708 <__pow5mult+0x38>
 80066f8:	2010      	movs	r0, #16
 80066fa:	f7ff fe63 	bl	80063c4 <malloc>
 80066fe:	6270      	str	r0, [r6, #36]	; 0x24
 8006700:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006704:	6004      	str	r4, [r0, #0]
 8006706:	60c4      	str	r4, [r0, #12]
 8006708:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800670c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006710:	b94c      	cbnz	r4, 8006726 <__pow5mult+0x56>
 8006712:	f240 2171 	movw	r1, #625	; 0x271
 8006716:	4630      	mov	r0, r6
 8006718:	f7ff ff3b 	bl	8006592 <__i2b>
 800671c:	2300      	movs	r3, #0
 800671e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006722:	4604      	mov	r4, r0
 8006724:	6003      	str	r3, [r0, #0]
 8006726:	f04f 0800 	mov.w	r8, #0
 800672a:	07eb      	lsls	r3, r5, #31
 800672c:	d50a      	bpl.n	8006744 <__pow5mult+0x74>
 800672e:	4639      	mov	r1, r7
 8006730:	4622      	mov	r2, r4
 8006732:	4630      	mov	r0, r6
 8006734:	f7ff ff36 	bl	80065a4 <__multiply>
 8006738:	4639      	mov	r1, r7
 800673a:	4681      	mov	r9, r0
 800673c:	4630      	mov	r0, r6
 800673e:	f7ff fe88 	bl	8006452 <_Bfree>
 8006742:	464f      	mov	r7, r9
 8006744:	106d      	asrs	r5, r5, #1
 8006746:	d00b      	beq.n	8006760 <__pow5mult+0x90>
 8006748:	6820      	ldr	r0, [r4, #0]
 800674a:	b938      	cbnz	r0, 800675c <__pow5mult+0x8c>
 800674c:	4622      	mov	r2, r4
 800674e:	4621      	mov	r1, r4
 8006750:	4630      	mov	r0, r6
 8006752:	f7ff ff27 	bl	80065a4 <__multiply>
 8006756:	6020      	str	r0, [r4, #0]
 8006758:	f8c0 8000 	str.w	r8, [r0]
 800675c:	4604      	mov	r4, r0
 800675e:	e7e4      	b.n	800672a <__pow5mult+0x5a>
 8006760:	4638      	mov	r0, r7
 8006762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006766:	bf00      	nop
 8006768:	080160c8 	.word	0x080160c8

0800676c <__lshift>:
 800676c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006770:	460c      	mov	r4, r1
 8006772:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006776:	6923      	ldr	r3, [r4, #16]
 8006778:	6849      	ldr	r1, [r1, #4]
 800677a:	eb0a 0903 	add.w	r9, sl, r3
 800677e:	68a3      	ldr	r3, [r4, #8]
 8006780:	4607      	mov	r7, r0
 8006782:	4616      	mov	r6, r2
 8006784:	f109 0501 	add.w	r5, r9, #1
 8006788:	42ab      	cmp	r3, r5
 800678a:	db32      	blt.n	80067f2 <__lshift+0x86>
 800678c:	4638      	mov	r0, r7
 800678e:	f7ff fe2c 	bl	80063ea <_Balloc>
 8006792:	2300      	movs	r3, #0
 8006794:	4680      	mov	r8, r0
 8006796:	f100 0114 	add.w	r1, r0, #20
 800679a:	461a      	mov	r2, r3
 800679c:	4553      	cmp	r3, sl
 800679e:	db2b      	blt.n	80067f8 <__lshift+0x8c>
 80067a0:	6920      	ldr	r0, [r4, #16]
 80067a2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80067a6:	f104 0314 	add.w	r3, r4, #20
 80067aa:	f016 021f 	ands.w	r2, r6, #31
 80067ae:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80067b2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80067b6:	d025      	beq.n	8006804 <__lshift+0x98>
 80067b8:	f1c2 0e20 	rsb	lr, r2, #32
 80067bc:	2000      	movs	r0, #0
 80067be:	681e      	ldr	r6, [r3, #0]
 80067c0:	468a      	mov	sl, r1
 80067c2:	4096      	lsls	r6, r2
 80067c4:	4330      	orrs	r0, r6
 80067c6:	f84a 0b04 	str.w	r0, [sl], #4
 80067ca:	f853 0b04 	ldr.w	r0, [r3], #4
 80067ce:	459c      	cmp	ip, r3
 80067d0:	fa20 f00e 	lsr.w	r0, r0, lr
 80067d4:	d814      	bhi.n	8006800 <__lshift+0x94>
 80067d6:	6048      	str	r0, [r1, #4]
 80067d8:	b108      	cbz	r0, 80067de <__lshift+0x72>
 80067da:	f109 0502 	add.w	r5, r9, #2
 80067de:	3d01      	subs	r5, #1
 80067e0:	4638      	mov	r0, r7
 80067e2:	f8c8 5010 	str.w	r5, [r8, #16]
 80067e6:	4621      	mov	r1, r4
 80067e8:	f7ff fe33 	bl	8006452 <_Bfree>
 80067ec:	4640      	mov	r0, r8
 80067ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067f2:	3101      	adds	r1, #1
 80067f4:	005b      	lsls	r3, r3, #1
 80067f6:	e7c7      	b.n	8006788 <__lshift+0x1c>
 80067f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80067fc:	3301      	adds	r3, #1
 80067fe:	e7cd      	b.n	800679c <__lshift+0x30>
 8006800:	4651      	mov	r1, sl
 8006802:	e7dc      	b.n	80067be <__lshift+0x52>
 8006804:	3904      	subs	r1, #4
 8006806:	f853 2b04 	ldr.w	r2, [r3], #4
 800680a:	f841 2f04 	str.w	r2, [r1, #4]!
 800680e:	459c      	cmp	ip, r3
 8006810:	d8f9      	bhi.n	8006806 <__lshift+0x9a>
 8006812:	e7e4      	b.n	80067de <__lshift+0x72>

08006814 <__mcmp>:
 8006814:	6903      	ldr	r3, [r0, #16]
 8006816:	690a      	ldr	r2, [r1, #16]
 8006818:	1a9b      	subs	r3, r3, r2
 800681a:	b530      	push	{r4, r5, lr}
 800681c:	d10c      	bne.n	8006838 <__mcmp+0x24>
 800681e:	0092      	lsls	r2, r2, #2
 8006820:	3014      	adds	r0, #20
 8006822:	3114      	adds	r1, #20
 8006824:	1884      	adds	r4, r0, r2
 8006826:	4411      	add	r1, r2
 8006828:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800682c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006830:	4295      	cmp	r5, r2
 8006832:	d003      	beq.n	800683c <__mcmp+0x28>
 8006834:	d305      	bcc.n	8006842 <__mcmp+0x2e>
 8006836:	2301      	movs	r3, #1
 8006838:	4618      	mov	r0, r3
 800683a:	bd30      	pop	{r4, r5, pc}
 800683c:	42a0      	cmp	r0, r4
 800683e:	d3f3      	bcc.n	8006828 <__mcmp+0x14>
 8006840:	e7fa      	b.n	8006838 <__mcmp+0x24>
 8006842:	f04f 33ff 	mov.w	r3, #4294967295
 8006846:	e7f7      	b.n	8006838 <__mcmp+0x24>

08006848 <__mdiff>:
 8006848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800684c:	460d      	mov	r5, r1
 800684e:	4607      	mov	r7, r0
 8006850:	4611      	mov	r1, r2
 8006852:	4628      	mov	r0, r5
 8006854:	4614      	mov	r4, r2
 8006856:	f7ff ffdd 	bl	8006814 <__mcmp>
 800685a:	1e06      	subs	r6, r0, #0
 800685c:	d108      	bne.n	8006870 <__mdiff+0x28>
 800685e:	4631      	mov	r1, r6
 8006860:	4638      	mov	r0, r7
 8006862:	f7ff fdc2 	bl	80063ea <_Balloc>
 8006866:	2301      	movs	r3, #1
 8006868:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800686c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006870:	bfa4      	itt	ge
 8006872:	4623      	movge	r3, r4
 8006874:	462c      	movge	r4, r5
 8006876:	4638      	mov	r0, r7
 8006878:	6861      	ldr	r1, [r4, #4]
 800687a:	bfa6      	itte	ge
 800687c:	461d      	movge	r5, r3
 800687e:	2600      	movge	r6, #0
 8006880:	2601      	movlt	r6, #1
 8006882:	f7ff fdb2 	bl	80063ea <_Balloc>
 8006886:	692b      	ldr	r3, [r5, #16]
 8006888:	60c6      	str	r6, [r0, #12]
 800688a:	6926      	ldr	r6, [r4, #16]
 800688c:	f105 0914 	add.w	r9, r5, #20
 8006890:	f104 0214 	add.w	r2, r4, #20
 8006894:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006898:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800689c:	f100 0514 	add.w	r5, r0, #20
 80068a0:	f04f 0e00 	mov.w	lr, #0
 80068a4:	f852 ab04 	ldr.w	sl, [r2], #4
 80068a8:	f859 4b04 	ldr.w	r4, [r9], #4
 80068ac:	fa1e f18a 	uxtah	r1, lr, sl
 80068b0:	b2a3      	uxth	r3, r4
 80068b2:	1ac9      	subs	r1, r1, r3
 80068b4:	0c23      	lsrs	r3, r4, #16
 80068b6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80068ba:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80068be:	b289      	uxth	r1, r1
 80068c0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80068c4:	45c8      	cmp	r8, r9
 80068c6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80068ca:	4694      	mov	ip, r2
 80068cc:	f845 3b04 	str.w	r3, [r5], #4
 80068d0:	d8e8      	bhi.n	80068a4 <__mdiff+0x5c>
 80068d2:	45bc      	cmp	ip, r7
 80068d4:	d304      	bcc.n	80068e0 <__mdiff+0x98>
 80068d6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80068da:	b183      	cbz	r3, 80068fe <__mdiff+0xb6>
 80068dc:	6106      	str	r6, [r0, #16]
 80068de:	e7c5      	b.n	800686c <__mdiff+0x24>
 80068e0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80068e4:	fa1e f381 	uxtah	r3, lr, r1
 80068e8:	141a      	asrs	r2, r3, #16
 80068ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068f4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80068f8:	f845 3b04 	str.w	r3, [r5], #4
 80068fc:	e7e9      	b.n	80068d2 <__mdiff+0x8a>
 80068fe:	3e01      	subs	r6, #1
 8006900:	e7e9      	b.n	80068d6 <__mdiff+0x8e>

08006902 <__d2b>:
 8006902:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006906:	460e      	mov	r6, r1
 8006908:	2101      	movs	r1, #1
 800690a:	ec59 8b10 	vmov	r8, r9, d0
 800690e:	4615      	mov	r5, r2
 8006910:	f7ff fd6b 	bl	80063ea <_Balloc>
 8006914:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006918:	4607      	mov	r7, r0
 800691a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800691e:	bb34      	cbnz	r4, 800696e <__d2b+0x6c>
 8006920:	9301      	str	r3, [sp, #4]
 8006922:	f1b8 0300 	subs.w	r3, r8, #0
 8006926:	d027      	beq.n	8006978 <__d2b+0x76>
 8006928:	a802      	add	r0, sp, #8
 800692a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800692e:	f7ff fe01 	bl	8006534 <__lo0bits>
 8006932:	9900      	ldr	r1, [sp, #0]
 8006934:	b1f0      	cbz	r0, 8006974 <__d2b+0x72>
 8006936:	9a01      	ldr	r2, [sp, #4]
 8006938:	f1c0 0320 	rsb	r3, r0, #32
 800693c:	fa02 f303 	lsl.w	r3, r2, r3
 8006940:	430b      	orrs	r3, r1
 8006942:	40c2      	lsrs	r2, r0
 8006944:	617b      	str	r3, [r7, #20]
 8006946:	9201      	str	r2, [sp, #4]
 8006948:	9b01      	ldr	r3, [sp, #4]
 800694a:	61bb      	str	r3, [r7, #24]
 800694c:	2b00      	cmp	r3, #0
 800694e:	bf14      	ite	ne
 8006950:	2102      	movne	r1, #2
 8006952:	2101      	moveq	r1, #1
 8006954:	6139      	str	r1, [r7, #16]
 8006956:	b1c4      	cbz	r4, 800698a <__d2b+0x88>
 8006958:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800695c:	4404      	add	r4, r0
 800695e:	6034      	str	r4, [r6, #0]
 8006960:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006964:	6028      	str	r0, [r5, #0]
 8006966:	4638      	mov	r0, r7
 8006968:	b003      	add	sp, #12
 800696a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800696e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006972:	e7d5      	b.n	8006920 <__d2b+0x1e>
 8006974:	6179      	str	r1, [r7, #20]
 8006976:	e7e7      	b.n	8006948 <__d2b+0x46>
 8006978:	a801      	add	r0, sp, #4
 800697a:	f7ff fddb 	bl	8006534 <__lo0bits>
 800697e:	9b01      	ldr	r3, [sp, #4]
 8006980:	617b      	str	r3, [r7, #20]
 8006982:	2101      	movs	r1, #1
 8006984:	6139      	str	r1, [r7, #16]
 8006986:	3020      	adds	r0, #32
 8006988:	e7e5      	b.n	8006956 <__d2b+0x54>
 800698a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800698e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006992:	6030      	str	r0, [r6, #0]
 8006994:	6918      	ldr	r0, [r3, #16]
 8006996:	f7ff fdae 	bl	80064f6 <__hi0bits>
 800699a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800699e:	e7e1      	b.n	8006964 <__d2b+0x62>

080069a0 <_calloc_r>:
 80069a0:	b538      	push	{r3, r4, r5, lr}
 80069a2:	fb02 f401 	mul.w	r4, r2, r1
 80069a6:	4621      	mov	r1, r4
 80069a8:	f000 f856 	bl	8006a58 <_malloc_r>
 80069ac:	4605      	mov	r5, r0
 80069ae:	b118      	cbz	r0, 80069b8 <_calloc_r+0x18>
 80069b0:	4622      	mov	r2, r4
 80069b2:	2100      	movs	r1, #0
 80069b4:	f7fe fa1a 	bl	8004dec <memset>
 80069b8:	4628      	mov	r0, r5
 80069ba:	bd38      	pop	{r3, r4, r5, pc}

080069bc <_free_r>:
 80069bc:	b538      	push	{r3, r4, r5, lr}
 80069be:	4605      	mov	r5, r0
 80069c0:	2900      	cmp	r1, #0
 80069c2:	d045      	beq.n	8006a50 <_free_r+0x94>
 80069c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069c8:	1f0c      	subs	r4, r1, #4
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	bfb8      	it	lt
 80069ce:	18e4      	addlt	r4, r4, r3
 80069d0:	f000 fa17 	bl	8006e02 <__malloc_lock>
 80069d4:	4a1f      	ldr	r2, [pc, #124]	; (8006a54 <_free_r+0x98>)
 80069d6:	6813      	ldr	r3, [r2, #0]
 80069d8:	4610      	mov	r0, r2
 80069da:	b933      	cbnz	r3, 80069ea <_free_r+0x2e>
 80069dc:	6063      	str	r3, [r4, #4]
 80069de:	6014      	str	r4, [r2, #0]
 80069e0:	4628      	mov	r0, r5
 80069e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069e6:	f000 ba0d 	b.w	8006e04 <__malloc_unlock>
 80069ea:	42a3      	cmp	r3, r4
 80069ec:	d90c      	bls.n	8006a08 <_free_r+0x4c>
 80069ee:	6821      	ldr	r1, [r4, #0]
 80069f0:	1862      	adds	r2, r4, r1
 80069f2:	4293      	cmp	r3, r2
 80069f4:	bf04      	itt	eq
 80069f6:	681a      	ldreq	r2, [r3, #0]
 80069f8:	685b      	ldreq	r3, [r3, #4]
 80069fa:	6063      	str	r3, [r4, #4]
 80069fc:	bf04      	itt	eq
 80069fe:	1852      	addeq	r2, r2, r1
 8006a00:	6022      	streq	r2, [r4, #0]
 8006a02:	6004      	str	r4, [r0, #0]
 8006a04:	e7ec      	b.n	80069e0 <_free_r+0x24>
 8006a06:	4613      	mov	r3, r2
 8006a08:	685a      	ldr	r2, [r3, #4]
 8006a0a:	b10a      	cbz	r2, 8006a10 <_free_r+0x54>
 8006a0c:	42a2      	cmp	r2, r4
 8006a0e:	d9fa      	bls.n	8006a06 <_free_r+0x4a>
 8006a10:	6819      	ldr	r1, [r3, #0]
 8006a12:	1858      	adds	r0, r3, r1
 8006a14:	42a0      	cmp	r0, r4
 8006a16:	d10b      	bne.n	8006a30 <_free_r+0x74>
 8006a18:	6820      	ldr	r0, [r4, #0]
 8006a1a:	4401      	add	r1, r0
 8006a1c:	1858      	adds	r0, r3, r1
 8006a1e:	4282      	cmp	r2, r0
 8006a20:	6019      	str	r1, [r3, #0]
 8006a22:	d1dd      	bne.n	80069e0 <_free_r+0x24>
 8006a24:	6810      	ldr	r0, [r2, #0]
 8006a26:	6852      	ldr	r2, [r2, #4]
 8006a28:	605a      	str	r2, [r3, #4]
 8006a2a:	4401      	add	r1, r0
 8006a2c:	6019      	str	r1, [r3, #0]
 8006a2e:	e7d7      	b.n	80069e0 <_free_r+0x24>
 8006a30:	d902      	bls.n	8006a38 <_free_r+0x7c>
 8006a32:	230c      	movs	r3, #12
 8006a34:	602b      	str	r3, [r5, #0]
 8006a36:	e7d3      	b.n	80069e0 <_free_r+0x24>
 8006a38:	6820      	ldr	r0, [r4, #0]
 8006a3a:	1821      	adds	r1, r4, r0
 8006a3c:	428a      	cmp	r2, r1
 8006a3e:	bf04      	itt	eq
 8006a40:	6811      	ldreq	r1, [r2, #0]
 8006a42:	6852      	ldreq	r2, [r2, #4]
 8006a44:	6062      	str	r2, [r4, #4]
 8006a46:	bf04      	itt	eq
 8006a48:	1809      	addeq	r1, r1, r0
 8006a4a:	6021      	streq	r1, [r4, #0]
 8006a4c:	605c      	str	r4, [r3, #4]
 8006a4e:	e7c7      	b.n	80069e0 <_free_r+0x24>
 8006a50:	bd38      	pop	{r3, r4, r5, pc}
 8006a52:	bf00      	nop
 8006a54:	20000420 	.word	0x20000420

08006a58 <_malloc_r>:
 8006a58:	b570      	push	{r4, r5, r6, lr}
 8006a5a:	1ccd      	adds	r5, r1, #3
 8006a5c:	f025 0503 	bic.w	r5, r5, #3
 8006a60:	3508      	adds	r5, #8
 8006a62:	2d0c      	cmp	r5, #12
 8006a64:	bf38      	it	cc
 8006a66:	250c      	movcc	r5, #12
 8006a68:	2d00      	cmp	r5, #0
 8006a6a:	4606      	mov	r6, r0
 8006a6c:	db01      	blt.n	8006a72 <_malloc_r+0x1a>
 8006a6e:	42a9      	cmp	r1, r5
 8006a70:	d903      	bls.n	8006a7a <_malloc_r+0x22>
 8006a72:	230c      	movs	r3, #12
 8006a74:	6033      	str	r3, [r6, #0]
 8006a76:	2000      	movs	r0, #0
 8006a78:	bd70      	pop	{r4, r5, r6, pc}
 8006a7a:	f000 f9c2 	bl	8006e02 <__malloc_lock>
 8006a7e:	4a21      	ldr	r2, [pc, #132]	; (8006b04 <_malloc_r+0xac>)
 8006a80:	6814      	ldr	r4, [r2, #0]
 8006a82:	4621      	mov	r1, r4
 8006a84:	b991      	cbnz	r1, 8006aac <_malloc_r+0x54>
 8006a86:	4c20      	ldr	r4, [pc, #128]	; (8006b08 <_malloc_r+0xb0>)
 8006a88:	6823      	ldr	r3, [r4, #0]
 8006a8a:	b91b      	cbnz	r3, 8006a94 <_malloc_r+0x3c>
 8006a8c:	4630      	mov	r0, r6
 8006a8e:	f000 f98f 	bl	8006db0 <_sbrk_r>
 8006a92:	6020      	str	r0, [r4, #0]
 8006a94:	4629      	mov	r1, r5
 8006a96:	4630      	mov	r0, r6
 8006a98:	f000 f98a 	bl	8006db0 <_sbrk_r>
 8006a9c:	1c43      	adds	r3, r0, #1
 8006a9e:	d124      	bne.n	8006aea <_malloc_r+0x92>
 8006aa0:	230c      	movs	r3, #12
 8006aa2:	6033      	str	r3, [r6, #0]
 8006aa4:	4630      	mov	r0, r6
 8006aa6:	f000 f9ad 	bl	8006e04 <__malloc_unlock>
 8006aaa:	e7e4      	b.n	8006a76 <_malloc_r+0x1e>
 8006aac:	680b      	ldr	r3, [r1, #0]
 8006aae:	1b5b      	subs	r3, r3, r5
 8006ab0:	d418      	bmi.n	8006ae4 <_malloc_r+0x8c>
 8006ab2:	2b0b      	cmp	r3, #11
 8006ab4:	d90f      	bls.n	8006ad6 <_malloc_r+0x7e>
 8006ab6:	600b      	str	r3, [r1, #0]
 8006ab8:	50cd      	str	r5, [r1, r3]
 8006aba:	18cc      	adds	r4, r1, r3
 8006abc:	4630      	mov	r0, r6
 8006abe:	f000 f9a1 	bl	8006e04 <__malloc_unlock>
 8006ac2:	f104 000b 	add.w	r0, r4, #11
 8006ac6:	1d23      	adds	r3, r4, #4
 8006ac8:	f020 0007 	bic.w	r0, r0, #7
 8006acc:	1ac3      	subs	r3, r0, r3
 8006ace:	d0d3      	beq.n	8006a78 <_malloc_r+0x20>
 8006ad0:	425a      	negs	r2, r3
 8006ad2:	50e2      	str	r2, [r4, r3]
 8006ad4:	e7d0      	b.n	8006a78 <_malloc_r+0x20>
 8006ad6:	428c      	cmp	r4, r1
 8006ad8:	684b      	ldr	r3, [r1, #4]
 8006ada:	bf16      	itet	ne
 8006adc:	6063      	strne	r3, [r4, #4]
 8006ade:	6013      	streq	r3, [r2, #0]
 8006ae0:	460c      	movne	r4, r1
 8006ae2:	e7eb      	b.n	8006abc <_malloc_r+0x64>
 8006ae4:	460c      	mov	r4, r1
 8006ae6:	6849      	ldr	r1, [r1, #4]
 8006ae8:	e7cc      	b.n	8006a84 <_malloc_r+0x2c>
 8006aea:	1cc4      	adds	r4, r0, #3
 8006aec:	f024 0403 	bic.w	r4, r4, #3
 8006af0:	42a0      	cmp	r0, r4
 8006af2:	d005      	beq.n	8006b00 <_malloc_r+0xa8>
 8006af4:	1a21      	subs	r1, r4, r0
 8006af6:	4630      	mov	r0, r6
 8006af8:	f000 f95a 	bl	8006db0 <_sbrk_r>
 8006afc:	3001      	adds	r0, #1
 8006afe:	d0cf      	beq.n	8006aa0 <_malloc_r+0x48>
 8006b00:	6025      	str	r5, [r4, #0]
 8006b02:	e7db      	b.n	8006abc <_malloc_r+0x64>
 8006b04:	20000420 	.word	0x20000420
 8006b08:	20000424 	.word	0x20000424

08006b0c <__ssputs_r>:
 8006b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b10:	688e      	ldr	r6, [r1, #8]
 8006b12:	429e      	cmp	r6, r3
 8006b14:	4682      	mov	sl, r0
 8006b16:	460c      	mov	r4, r1
 8006b18:	4690      	mov	r8, r2
 8006b1a:	4699      	mov	r9, r3
 8006b1c:	d837      	bhi.n	8006b8e <__ssputs_r+0x82>
 8006b1e:	898a      	ldrh	r2, [r1, #12]
 8006b20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b24:	d031      	beq.n	8006b8a <__ssputs_r+0x7e>
 8006b26:	6825      	ldr	r5, [r4, #0]
 8006b28:	6909      	ldr	r1, [r1, #16]
 8006b2a:	1a6f      	subs	r7, r5, r1
 8006b2c:	6965      	ldr	r5, [r4, #20]
 8006b2e:	2302      	movs	r3, #2
 8006b30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b34:	fb95 f5f3 	sdiv	r5, r5, r3
 8006b38:	f109 0301 	add.w	r3, r9, #1
 8006b3c:	443b      	add	r3, r7
 8006b3e:	429d      	cmp	r5, r3
 8006b40:	bf38      	it	cc
 8006b42:	461d      	movcc	r5, r3
 8006b44:	0553      	lsls	r3, r2, #21
 8006b46:	d530      	bpl.n	8006baa <__ssputs_r+0x9e>
 8006b48:	4629      	mov	r1, r5
 8006b4a:	f7ff ff85 	bl	8006a58 <_malloc_r>
 8006b4e:	4606      	mov	r6, r0
 8006b50:	b950      	cbnz	r0, 8006b68 <__ssputs_r+0x5c>
 8006b52:	230c      	movs	r3, #12
 8006b54:	f8ca 3000 	str.w	r3, [sl]
 8006b58:	89a3      	ldrh	r3, [r4, #12]
 8006b5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b5e:	81a3      	strh	r3, [r4, #12]
 8006b60:	f04f 30ff 	mov.w	r0, #4294967295
 8006b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b68:	463a      	mov	r2, r7
 8006b6a:	6921      	ldr	r1, [r4, #16]
 8006b6c:	f7ff fc32 	bl	80063d4 <memcpy>
 8006b70:	89a3      	ldrh	r3, [r4, #12]
 8006b72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b7a:	81a3      	strh	r3, [r4, #12]
 8006b7c:	6126      	str	r6, [r4, #16]
 8006b7e:	6165      	str	r5, [r4, #20]
 8006b80:	443e      	add	r6, r7
 8006b82:	1bed      	subs	r5, r5, r7
 8006b84:	6026      	str	r6, [r4, #0]
 8006b86:	60a5      	str	r5, [r4, #8]
 8006b88:	464e      	mov	r6, r9
 8006b8a:	454e      	cmp	r6, r9
 8006b8c:	d900      	bls.n	8006b90 <__ssputs_r+0x84>
 8006b8e:	464e      	mov	r6, r9
 8006b90:	4632      	mov	r2, r6
 8006b92:	4641      	mov	r1, r8
 8006b94:	6820      	ldr	r0, [r4, #0]
 8006b96:	f000 f91b 	bl	8006dd0 <memmove>
 8006b9a:	68a3      	ldr	r3, [r4, #8]
 8006b9c:	1b9b      	subs	r3, r3, r6
 8006b9e:	60a3      	str	r3, [r4, #8]
 8006ba0:	6823      	ldr	r3, [r4, #0]
 8006ba2:	441e      	add	r6, r3
 8006ba4:	6026      	str	r6, [r4, #0]
 8006ba6:	2000      	movs	r0, #0
 8006ba8:	e7dc      	b.n	8006b64 <__ssputs_r+0x58>
 8006baa:	462a      	mov	r2, r5
 8006bac:	f000 f92b 	bl	8006e06 <_realloc_r>
 8006bb0:	4606      	mov	r6, r0
 8006bb2:	2800      	cmp	r0, #0
 8006bb4:	d1e2      	bne.n	8006b7c <__ssputs_r+0x70>
 8006bb6:	6921      	ldr	r1, [r4, #16]
 8006bb8:	4650      	mov	r0, sl
 8006bba:	f7ff feff 	bl	80069bc <_free_r>
 8006bbe:	e7c8      	b.n	8006b52 <__ssputs_r+0x46>

08006bc0 <_svfiprintf_r>:
 8006bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bc4:	461d      	mov	r5, r3
 8006bc6:	898b      	ldrh	r3, [r1, #12]
 8006bc8:	061f      	lsls	r7, r3, #24
 8006bca:	b09d      	sub	sp, #116	; 0x74
 8006bcc:	4680      	mov	r8, r0
 8006bce:	460c      	mov	r4, r1
 8006bd0:	4616      	mov	r6, r2
 8006bd2:	d50f      	bpl.n	8006bf4 <_svfiprintf_r+0x34>
 8006bd4:	690b      	ldr	r3, [r1, #16]
 8006bd6:	b96b      	cbnz	r3, 8006bf4 <_svfiprintf_r+0x34>
 8006bd8:	2140      	movs	r1, #64	; 0x40
 8006bda:	f7ff ff3d 	bl	8006a58 <_malloc_r>
 8006bde:	6020      	str	r0, [r4, #0]
 8006be0:	6120      	str	r0, [r4, #16]
 8006be2:	b928      	cbnz	r0, 8006bf0 <_svfiprintf_r+0x30>
 8006be4:	230c      	movs	r3, #12
 8006be6:	f8c8 3000 	str.w	r3, [r8]
 8006bea:	f04f 30ff 	mov.w	r0, #4294967295
 8006bee:	e0c8      	b.n	8006d82 <_svfiprintf_r+0x1c2>
 8006bf0:	2340      	movs	r3, #64	; 0x40
 8006bf2:	6163      	str	r3, [r4, #20]
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	9309      	str	r3, [sp, #36]	; 0x24
 8006bf8:	2320      	movs	r3, #32
 8006bfa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006bfe:	2330      	movs	r3, #48	; 0x30
 8006c00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c04:	9503      	str	r5, [sp, #12]
 8006c06:	f04f 0b01 	mov.w	fp, #1
 8006c0a:	4637      	mov	r7, r6
 8006c0c:	463d      	mov	r5, r7
 8006c0e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006c12:	b10b      	cbz	r3, 8006c18 <_svfiprintf_r+0x58>
 8006c14:	2b25      	cmp	r3, #37	; 0x25
 8006c16:	d13e      	bne.n	8006c96 <_svfiprintf_r+0xd6>
 8006c18:	ebb7 0a06 	subs.w	sl, r7, r6
 8006c1c:	d00b      	beq.n	8006c36 <_svfiprintf_r+0x76>
 8006c1e:	4653      	mov	r3, sl
 8006c20:	4632      	mov	r2, r6
 8006c22:	4621      	mov	r1, r4
 8006c24:	4640      	mov	r0, r8
 8006c26:	f7ff ff71 	bl	8006b0c <__ssputs_r>
 8006c2a:	3001      	adds	r0, #1
 8006c2c:	f000 80a4 	beq.w	8006d78 <_svfiprintf_r+0x1b8>
 8006c30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c32:	4453      	add	r3, sl
 8006c34:	9309      	str	r3, [sp, #36]	; 0x24
 8006c36:	783b      	ldrb	r3, [r7, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	f000 809d 	beq.w	8006d78 <_svfiprintf_r+0x1b8>
 8006c3e:	2300      	movs	r3, #0
 8006c40:	f04f 32ff 	mov.w	r2, #4294967295
 8006c44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c48:	9304      	str	r3, [sp, #16]
 8006c4a:	9307      	str	r3, [sp, #28]
 8006c4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c50:	931a      	str	r3, [sp, #104]	; 0x68
 8006c52:	462f      	mov	r7, r5
 8006c54:	2205      	movs	r2, #5
 8006c56:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006c5a:	4850      	ldr	r0, [pc, #320]	; (8006d9c <_svfiprintf_r+0x1dc>)
 8006c5c:	f7f9 fad8 	bl	8000210 <memchr>
 8006c60:	9b04      	ldr	r3, [sp, #16]
 8006c62:	b9d0      	cbnz	r0, 8006c9a <_svfiprintf_r+0xda>
 8006c64:	06d9      	lsls	r1, r3, #27
 8006c66:	bf44      	itt	mi
 8006c68:	2220      	movmi	r2, #32
 8006c6a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006c6e:	071a      	lsls	r2, r3, #28
 8006c70:	bf44      	itt	mi
 8006c72:	222b      	movmi	r2, #43	; 0x2b
 8006c74:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006c78:	782a      	ldrb	r2, [r5, #0]
 8006c7a:	2a2a      	cmp	r2, #42	; 0x2a
 8006c7c:	d015      	beq.n	8006caa <_svfiprintf_r+0xea>
 8006c7e:	9a07      	ldr	r2, [sp, #28]
 8006c80:	462f      	mov	r7, r5
 8006c82:	2000      	movs	r0, #0
 8006c84:	250a      	movs	r5, #10
 8006c86:	4639      	mov	r1, r7
 8006c88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c8c:	3b30      	subs	r3, #48	; 0x30
 8006c8e:	2b09      	cmp	r3, #9
 8006c90:	d94d      	bls.n	8006d2e <_svfiprintf_r+0x16e>
 8006c92:	b1b8      	cbz	r0, 8006cc4 <_svfiprintf_r+0x104>
 8006c94:	e00f      	b.n	8006cb6 <_svfiprintf_r+0xf6>
 8006c96:	462f      	mov	r7, r5
 8006c98:	e7b8      	b.n	8006c0c <_svfiprintf_r+0x4c>
 8006c9a:	4a40      	ldr	r2, [pc, #256]	; (8006d9c <_svfiprintf_r+0x1dc>)
 8006c9c:	1a80      	subs	r0, r0, r2
 8006c9e:	fa0b f000 	lsl.w	r0, fp, r0
 8006ca2:	4318      	orrs	r0, r3
 8006ca4:	9004      	str	r0, [sp, #16]
 8006ca6:	463d      	mov	r5, r7
 8006ca8:	e7d3      	b.n	8006c52 <_svfiprintf_r+0x92>
 8006caa:	9a03      	ldr	r2, [sp, #12]
 8006cac:	1d11      	adds	r1, r2, #4
 8006cae:	6812      	ldr	r2, [r2, #0]
 8006cb0:	9103      	str	r1, [sp, #12]
 8006cb2:	2a00      	cmp	r2, #0
 8006cb4:	db01      	blt.n	8006cba <_svfiprintf_r+0xfa>
 8006cb6:	9207      	str	r2, [sp, #28]
 8006cb8:	e004      	b.n	8006cc4 <_svfiprintf_r+0x104>
 8006cba:	4252      	negs	r2, r2
 8006cbc:	f043 0302 	orr.w	r3, r3, #2
 8006cc0:	9207      	str	r2, [sp, #28]
 8006cc2:	9304      	str	r3, [sp, #16]
 8006cc4:	783b      	ldrb	r3, [r7, #0]
 8006cc6:	2b2e      	cmp	r3, #46	; 0x2e
 8006cc8:	d10c      	bne.n	8006ce4 <_svfiprintf_r+0x124>
 8006cca:	787b      	ldrb	r3, [r7, #1]
 8006ccc:	2b2a      	cmp	r3, #42	; 0x2a
 8006cce:	d133      	bne.n	8006d38 <_svfiprintf_r+0x178>
 8006cd0:	9b03      	ldr	r3, [sp, #12]
 8006cd2:	1d1a      	adds	r2, r3, #4
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	9203      	str	r2, [sp, #12]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	bfb8      	it	lt
 8006cdc:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ce0:	3702      	adds	r7, #2
 8006ce2:	9305      	str	r3, [sp, #20]
 8006ce4:	4d2e      	ldr	r5, [pc, #184]	; (8006da0 <_svfiprintf_r+0x1e0>)
 8006ce6:	7839      	ldrb	r1, [r7, #0]
 8006ce8:	2203      	movs	r2, #3
 8006cea:	4628      	mov	r0, r5
 8006cec:	f7f9 fa90 	bl	8000210 <memchr>
 8006cf0:	b138      	cbz	r0, 8006d02 <_svfiprintf_r+0x142>
 8006cf2:	2340      	movs	r3, #64	; 0x40
 8006cf4:	1b40      	subs	r0, r0, r5
 8006cf6:	fa03 f000 	lsl.w	r0, r3, r0
 8006cfa:	9b04      	ldr	r3, [sp, #16]
 8006cfc:	4303      	orrs	r3, r0
 8006cfe:	3701      	adds	r7, #1
 8006d00:	9304      	str	r3, [sp, #16]
 8006d02:	7839      	ldrb	r1, [r7, #0]
 8006d04:	4827      	ldr	r0, [pc, #156]	; (8006da4 <_svfiprintf_r+0x1e4>)
 8006d06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d0a:	2206      	movs	r2, #6
 8006d0c:	1c7e      	adds	r6, r7, #1
 8006d0e:	f7f9 fa7f 	bl	8000210 <memchr>
 8006d12:	2800      	cmp	r0, #0
 8006d14:	d038      	beq.n	8006d88 <_svfiprintf_r+0x1c8>
 8006d16:	4b24      	ldr	r3, [pc, #144]	; (8006da8 <_svfiprintf_r+0x1e8>)
 8006d18:	bb13      	cbnz	r3, 8006d60 <_svfiprintf_r+0x1a0>
 8006d1a:	9b03      	ldr	r3, [sp, #12]
 8006d1c:	3307      	adds	r3, #7
 8006d1e:	f023 0307 	bic.w	r3, r3, #7
 8006d22:	3308      	adds	r3, #8
 8006d24:	9303      	str	r3, [sp, #12]
 8006d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d28:	444b      	add	r3, r9
 8006d2a:	9309      	str	r3, [sp, #36]	; 0x24
 8006d2c:	e76d      	b.n	8006c0a <_svfiprintf_r+0x4a>
 8006d2e:	fb05 3202 	mla	r2, r5, r2, r3
 8006d32:	2001      	movs	r0, #1
 8006d34:	460f      	mov	r7, r1
 8006d36:	e7a6      	b.n	8006c86 <_svfiprintf_r+0xc6>
 8006d38:	2300      	movs	r3, #0
 8006d3a:	3701      	adds	r7, #1
 8006d3c:	9305      	str	r3, [sp, #20]
 8006d3e:	4619      	mov	r1, r3
 8006d40:	250a      	movs	r5, #10
 8006d42:	4638      	mov	r0, r7
 8006d44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d48:	3a30      	subs	r2, #48	; 0x30
 8006d4a:	2a09      	cmp	r2, #9
 8006d4c:	d903      	bls.n	8006d56 <_svfiprintf_r+0x196>
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d0c8      	beq.n	8006ce4 <_svfiprintf_r+0x124>
 8006d52:	9105      	str	r1, [sp, #20]
 8006d54:	e7c6      	b.n	8006ce4 <_svfiprintf_r+0x124>
 8006d56:	fb05 2101 	mla	r1, r5, r1, r2
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	4607      	mov	r7, r0
 8006d5e:	e7f0      	b.n	8006d42 <_svfiprintf_r+0x182>
 8006d60:	ab03      	add	r3, sp, #12
 8006d62:	9300      	str	r3, [sp, #0]
 8006d64:	4622      	mov	r2, r4
 8006d66:	4b11      	ldr	r3, [pc, #68]	; (8006dac <_svfiprintf_r+0x1ec>)
 8006d68:	a904      	add	r1, sp, #16
 8006d6a:	4640      	mov	r0, r8
 8006d6c:	f7fe f8da 	bl	8004f24 <_printf_float>
 8006d70:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006d74:	4681      	mov	r9, r0
 8006d76:	d1d6      	bne.n	8006d26 <_svfiprintf_r+0x166>
 8006d78:	89a3      	ldrh	r3, [r4, #12]
 8006d7a:	065b      	lsls	r3, r3, #25
 8006d7c:	f53f af35 	bmi.w	8006bea <_svfiprintf_r+0x2a>
 8006d80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d82:	b01d      	add	sp, #116	; 0x74
 8006d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d88:	ab03      	add	r3, sp, #12
 8006d8a:	9300      	str	r3, [sp, #0]
 8006d8c:	4622      	mov	r2, r4
 8006d8e:	4b07      	ldr	r3, [pc, #28]	; (8006dac <_svfiprintf_r+0x1ec>)
 8006d90:	a904      	add	r1, sp, #16
 8006d92:	4640      	mov	r0, r8
 8006d94:	f7fe fb7c 	bl	8005490 <_printf_i>
 8006d98:	e7ea      	b.n	8006d70 <_svfiprintf_r+0x1b0>
 8006d9a:	bf00      	nop
 8006d9c:	080160d4 	.word	0x080160d4
 8006da0:	080160da 	.word	0x080160da
 8006da4:	080160de 	.word	0x080160de
 8006da8:	08004f25 	.word	0x08004f25
 8006dac:	08006b0d 	.word	0x08006b0d

08006db0 <_sbrk_r>:
 8006db0:	b538      	push	{r3, r4, r5, lr}
 8006db2:	4c06      	ldr	r4, [pc, #24]	; (8006dcc <_sbrk_r+0x1c>)
 8006db4:	2300      	movs	r3, #0
 8006db6:	4605      	mov	r5, r0
 8006db8:	4608      	mov	r0, r1
 8006dba:	6023      	str	r3, [r4, #0]
 8006dbc:	f7f9 ff19 	bl	8000bf2 <_sbrk>
 8006dc0:	1c43      	adds	r3, r0, #1
 8006dc2:	d102      	bne.n	8006dca <_sbrk_r+0x1a>
 8006dc4:	6823      	ldr	r3, [r4, #0]
 8006dc6:	b103      	cbz	r3, 8006dca <_sbrk_r+0x1a>
 8006dc8:	602b      	str	r3, [r5, #0]
 8006dca:	bd38      	pop	{r3, r4, r5, pc}
 8006dcc:	20000740 	.word	0x20000740

08006dd0 <memmove>:
 8006dd0:	4288      	cmp	r0, r1
 8006dd2:	b510      	push	{r4, lr}
 8006dd4:	eb01 0302 	add.w	r3, r1, r2
 8006dd8:	d807      	bhi.n	8006dea <memmove+0x1a>
 8006dda:	1e42      	subs	r2, r0, #1
 8006ddc:	4299      	cmp	r1, r3
 8006dde:	d00a      	beq.n	8006df6 <memmove+0x26>
 8006de0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006de4:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006de8:	e7f8      	b.n	8006ddc <memmove+0xc>
 8006dea:	4283      	cmp	r3, r0
 8006dec:	d9f5      	bls.n	8006dda <memmove+0xa>
 8006dee:	1881      	adds	r1, r0, r2
 8006df0:	1ad2      	subs	r2, r2, r3
 8006df2:	42d3      	cmn	r3, r2
 8006df4:	d100      	bne.n	8006df8 <memmove+0x28>
 8006df6:	bd10      	pop	{r4, pc}
 8006df8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006dfc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006e00:	e7f7      	b.n	8006df2 <memmove+0x22>

08006e02 <__malloc_lock>:
 8006e02:	4770      	bx	lr

08006e04 <__malloc_unlock>:
 8006e04:	4770      	bx	lr

08006e06 <_realloc_r>:
 8006e06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e08:	4607      	mov	r7, r0
 8006e0a:	4614      	mov	r4, r2
 8006e0c:	460e      	mov	r6, r1
 8006e0e:	b921      	cbnz	r1, 8006e1a <_realloc_r+0x14>
 8006e10:	4611      	mov	r1, r2
 8006e12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006e16:	f7ff be1f 	b.w	8006a58 <_malloc_r>
 8006e1a:	b922      	cbnz	r2, 8006e26 <_realloc_r+0x20>
 8006e1c:	f7ff fdce 	bl	80069bc <_free_r>
 8006e20:	4625      	mov	r5, r4
 8006e22:	4628      	mov	r0, r5
 8006e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e26:	f000 f814 	bl	8006e52 <_malloc_usable_size_r>
 8006e2a:	42a0      	cmp	r0, r4
 8006e2c:	d20f      	bcs.n	8006e4e <_realloc_r+0x48>
 8006e2e:	4621      	mov	r1, r4
 8006e30:	4638      	mov	r0, r7
 8006e32:	f7ff fe11 	bl	8006a58 <_malloc_r>
 8006e36:	4605      	mov	r5, r0
 8006e38:	2800      	cmp	r0, #0
 8006e3a:	d0f2      	beq.n	8006e22 <_realloc_r+0x1c>
 8006e3c:	4631      	mov	r1, r6
 8006e3e:	4622      	mov	r2, r4
 8006e40:	f7ff fac8 	bl	80063d4 <memcpy>
 8006e44:	4631      	mov	r1, r6
 8006e46:	4638      	mov	r0, r7
 8006e48:	f7ff fdb8 	bl	80069bc <_free_r>
 8006e4c:	e7e9      	b.n	8006e22 <_realloc_r+0x1c>
 8006e4e:	4635      	mov	r5, r6
 8006e50:	e7e7      	b.n	8006e22 <_realloc_r+0x1c>

08006e52 <_malloc_usable_size_r>:
 8006e52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e56:	1f18      	subs	r0, r3, #4
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	bfbc      	itt	lt
 8006e5c:	580b      	ldrlt	r3, [r1, r0]
 8006e5e:	18c0      	addlt	r0, r0, r3
 8006e60:	4770      	bx	lr
	...

08006e64 <_init>:
 8006e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e66:	bf00      	nop
 8006e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e6a:	bc08      	pop	{r3}
 8006e6c:	469e      	mov	lr, r3
 8006e6e:	4770      	bx	lr

08006e70 <_fini>:
 8006e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e72:	bf00      	nop
 8006e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e76:	bc08      	pop	{r3}
 8006e78:	469e      	mov	lr, r3
 8006e7a:	4770      	bx	lr
